
IVS_PROJECT_WITH_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010dd8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  08010f68  08010f68  00011f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f5c  08011f5c  000132fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011f5c  08011f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f64  08011f64  000132fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f64  08011f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011f68  08011f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002fc  20000000  08011f6c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132fc  2**0
                  CONTENTS
 10 .bss          0000163c  200002fc  200002fc  000132fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001938  20001938  000132fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021c5d  00000000  00000000  0001332c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bee  00000000  00000000  00034f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac8  00000000  00000000  00039b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014cc  00000000  00000000  0003b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002826f  00000000  00000000  0003cb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025fb6  00000000  00000000  00064d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4112  00000000  00000000  0008ad31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016ee43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008378  00000000  00000000  0016ee88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00177200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002fc 	.word	0x200002fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010f50 	.word	0x08010f50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000300 	.word	0x20000300
 80001cc:	08010f50 	.word	0x08010f50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <BNO055_IT_Read>:
 *      WRAPPERS: Dùng IT mode thay cho blocking
 * ==================================================== */

// I2C Read (non-blocking với interrupt)
HAL_StatusTypeDef BNO055_IT_Read(uint8_t devAddr, uint8_t regAddr, uint8_t *pData, uint16_t len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	603a      	str	r2, [r7, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	71bb      	strb	r3, [r7, #6]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	80bb      	strh	r3, [r7, #4]
    BNO055_I2C_Done  = 0;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <BNO055_IT_Read+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
    BNO055_I2C_Error = 0;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <BNO055_IT_Read+0x94>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_IT(&bno_i2c,
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	4818      	ldr	r0, [pc, #96]	@ (8000f6c <BNO055_IT_Read+0x98>)
 8000f0a:	f007 f94b 	bl	80081a4 <HAL_I2C_Mem_Read_IT>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]
                                                   regAddr,
                                                   I2C_MEMADD_SIZE_8BIT,
                                                   pData,
                                                   len);

    if (status != HAL_OK) return status;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <BNO055_IT_Read+0x48>
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	e01e      	b.n	8000f5a <BNO055_IT_Read+0x86>

    // chờ callback báo hiệu (timeout 100ms)
    uint32_t tickstart = HAL_GetTick();
 8000f1c:	f004 fa18 	bl	8005350 <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
    while (!BNO055_I2C_Done && !BNO055_I2C_Error)
 8000f22:	e008      	b.n	8000f36 <BNO055_IT_Read+0x62>
    {
        if ((HAL_GetTick() - tickstart) > 100) {
 8000f24:	f004 fa14 	bl	8005350 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	@ 0x64
 8000f30:	d901      	bls.n	8000f36 <BNO055_IT_Read+0x62>
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e011      	b.n	8000f5a <BNO055_IT_Read+0x86>
    while (!BNO055_I2C_Done && !BNO055_I2C_Error)
 8000f36:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <BNO055_IT_Read+0x90>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d104      	bne.n	8000f4a <BNO055_IT_Read+0x76>
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <BNO055_IT_Read+0x94>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0ec      	beq.n	8000f24 <BNO055_IT_Read+0x50>
        }
    }

    return (BNO055_I2C_Error ? HAL_ERROR : HAL_OK);
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <BNO055_IT_Read+0x94>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bf14      	ite	ne
 8000f54:	2301      	movne	r3, #1
 8000f56:	2300      	moveq	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000318 	.word	0x20000318
 8000f68:	20000319 	.word	0x20000319
 8000f6c:	20000434 	.word	0x20000434

08000f70 <BNO055_IT_Write>:

// I2C Write (non-blocking với interrupt)
HAL_StatusTypeDef BNO055_IT_Write(uint8_t devAddr, uint8_t regAddr, uint8_t *pData, uint16_t len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	603a      	str	r2, [r7, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	71bb      	strb	r3, [r7, #6]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80bb      	strh	r3, [r7, #4]
    BNO055_I2C_Done  = 0;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <BNO055_IT_Write+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    BNO055_I2C_Error = 0;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <BNO055_IT_Write+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Write_IT(&bno_i2c,
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	b299      	uxth	r1, r3
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	88bb      	ldrh	r3, [r7, #4]
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4818      	ldr	r0, [pc, #96]	@ (8001008 <BNO055_IT_Write+0x98>)
 8000fa6:	f007 f84f 	bl	8008048 <HAL_I2C_Mem_Write_IT>
 8000faa:	4603      	mov	r3, r0
 8000fac:	73fb      	strb	r3, [r7, #15]
                                                    regAddr,
                                                    I2C_MEMADD_SIZE_8BIT,
                                                    pData,
                                                    len);

    if (status != HAL_OK) return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <BNO055_IT_Write+0x48>
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	e01e      	b.n	8000ff6 <BNO055_IT_Write+0x86>

    uint32_t tickstart = HAL_GetTick();
 8000fb8:	f004 f9ca 	bl	8005350 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
    while (!BNO055_I2C_Done && !BNO055_I2C_Error)
 8000fbe:	e008      	b.n	8000fd2 <BNO055_IT_Write+0x62>
    {
        if ((HAL_GetTick() - tickstart) > 100) {
 8000fc0:	f004 f9c6 	bl	8005350 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	@ 0x64
 8000fcc:	d901      	bls.n	8000fd2 <BNO055_IT_Write+0x62>
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e011      	b.n	8000ff6 <BNO055_IT_Write+0x86>
    while (!BNO055_I2C_Done && !BNO055_I2C_Error)
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <BNO055_IT_Write+0x90>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d104      	bne.n	8000fe6 <BNO055_IT_Write+0x76>
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <BNO055_IT_Write+0x94>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0ec      	beq.n	8000fc0 <BNO055_IT_Write+0x50>
        }
    }

    return (BNO055_I2C_Error ? HAL_ERROR : HAL_OK);
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <BNO055_IT_Write+0x94>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2301      	movne	r3, #1
 8000ff2:	2300      	moveq	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000318 	.word	0x20000318
 8001004:	20000319 	.word	0x20000319
 8001008:	20000434 	.word	0x20000434

0800100c <HAL_I2C_MemRxCpltCallback>:
 *      I2C CALLBACKS
 * ==================================================== */

// Callback khi đọc xong
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == bno_i2c.Instance) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_I2C_MemRxCpltCallback+0x28>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d102      	bne.n	8001026 <HAL_I2C_MemRxCpltCallback+0x1a>
        BNO055_I2C_Done = 1;
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
    }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000434 	.word	0x20000434
 8001038:	20000318 	.word	0x20000318

0800103c <HAL_I2C_MemTxCpltCallback>:

// Callback khi ghi xong
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == bno_i2c.Instance) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_I2C_MemTxCpltCallback+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d102      	bne.n	8001056 <HAL_I2C_MemTxCpltCallback+0x1a>
        BNO055_I2C_Done = 1;
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_I2C_MemTxCpltCallback+0x2c>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
    }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000434 	.word	0x20000434
 8001068:	20000318 	.word	0x20000318

0800106c <HAL_I2C_ErrorCallback>:
// Callback khi có lỗi I2C
// Thêm biến cờ toàn cục
volatile uint8_t bno055_need_reset = 0;

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == bno_i2c.Instance)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_I2C_ErrorCallback+0x2c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d105      	bne.n	800108c <HAL_I2C_ErrorCallback+0x20>
    {
        BNO055_I2C_Error = 1;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_I2C_ErrorCallback+0x30>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
        bno055_need_reset = 1;   // báo cho main loop biết
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_I2C_ErrorCallback+0x34>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
    }

}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20000434 	.word	0x20000434
 800109c:	20000319 	.word	0x20000319
 80010a0:	2000031a 	.word	0x2000031a

080010a4 <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){  //BNO055 có 2 page thanh ghi: PAGE 0 và PAGE 1 → Chuyển qua lại giữa chúng.
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]

	if(BNO055_IT_Write(P_BNO055, PAGE_ID_ADDR, &page, 1) != HAL_OK){
 80010ae:	1dfa      	adds	r2, r7, #7
 80010b0:	2301      	movs	r3, #1
 80010b2:	2107      	movs	r1, #7
 80010b4:	2050      	movs	r0, #80	@ 0x50
 80010b6:	f7ff ff5b 	bl	8000f70 <BNO055_IT_Write>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <SelectPage+0x22>
		printf("Register page replacement could not be set\n");
 80010c0:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <SelectPage+0x30>)
 80010c2:	f00d f9fb 	bl	800e4bc <puts>
	}
	HAL_Delay(50);
 80010c6:	2032      	movs	r0, #50	@ 0x32
 80010c8:	f004 f94e 	bl	8005368 <HAL_Delay>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	08010fc8 	.word	0x08010fc8

080010d8 <ReadData>:


extern volatile uint8_t bno055_need_reset;

void ReadData(BNO055_Sensors_t *sensorData, BNO055_Sensor_Type sensors)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[8];

    if (sensors & SENSOR_GRAVITY) {
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d042      	beq.n	8001174 <ReadData+0x9c>
        if (BNO055_IT_Read(P_BNO055, BNO_GRAVITY, buffer, 6) == HAL_OK) {
 80010ee:	f107 0208 	add.w	r2, r7, #8
 80010f2:	2306      	movs	r3, #6
 80010f4:	212e      	movs	r1, #46	@ 0x2e
 80010f6:	2050      	movs	r0, #80	@ 0x50
 80010f8:	f7ff feec 	bl	8000ed4 <BNO055_IT_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d138      	bne.n	8001174 <ReadData+0x9c>
            sensorData->Gravity.X = (int16_t)((buffer[1] << 8) | buffer[0]) / 100.0f;
 8001102:	7a7b      	ldrb	r3, [r7, #9]
 8001104:	b21b      	sxth	r3, r3
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	7a3b      	ldrb	r3, [r7, #8]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 80013f4 <ReadData+0x31c>
 800111e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            sensorData->Gravity.Y = (int16_t)((buffer[3] << 8) | buffer[2]) / 100.0f;
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	b21b      	sxth	r3, r3
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	7abb      	ldrb	r3, [r7, #10]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001140:	eddf 6aac 	vldr	s13, [pc, #688]	@ 80013f4 <ReadData+0x31c>
 8001144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
            sensorData->Gravity.Z = (int16_t)((buffer[5] << 8) | buffer[4]) / 100.0f;
 800114e:	7b7b      	ldrb	r3, [r7, #13]
 8001150:	b21b      	sxth	r3, r3
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	7b3b      	ldrb	r3, [r7, #12]
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21b      	sxth	r3, r3
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80013f4 <ReadData+0x31c>
 800116a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
        }
    }

    if (sensors & SENSOR_QUATERNION) {
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d061      	beq.n	8001242 <ReadData+0x16a>
        if (BNO055_IT_Read(P_BNO055, BNO_QUATERNION, buffer, 8) == HAL_OK) {
 800117e:	f107 0208 	add.w	r2, r7, #8
 8001182:	2308      	movs	r3, #8
 8001184:	2120      	movs	r1, #32
 8001186:	2050      	movs	r0, #80	@ 0x50
 8001188:	f7ff fea4 	bl	8000ed4 <BNO055_IT_Read>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d157      	bne.n	8001242 <ReadData+0x16a>
            sensorData->Quaternion.W = (int16_t)((buffer[1] << 8) | buffer[0]) / (1 << 14);
 8001192:	7a7b      	ldrb	r3, [r7, #9]
 8001194:	b21b      	sxth	r3, r3
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	7a3b      	ldrb	r3, [r7, #8]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da02      	bge.n	80011ac <ReadData+0xd4>
 80011a6:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80011aa:	333f      	adds	r3, #63	@ 0x3f
 80011ac:	139b      	asrs	r3, r3, #14
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
            sensorData->Quaternion.X = (int16_t)((buffer[3] << 8) | buffer[2]) / (1 << 14);
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7abb      	ldrb	r3, [r7, #10]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da02      	bge.n	80011d8 <ReadData+0x100>
 80011d2:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80011d6:	333f      	adds	r3, #63	@ 0x3f
 80011d8:	139b      	asrs	r3, r3, #14
 80011da:	b21b      	sxth	r3, r3
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
            sensorData->Quaternion.Y = (int16_t)((buffer[5] << 8) | buffer[4]) / (1 << 14);
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	da02      	bge.n	8001204 <ReadData+0x12c>
 80011fe:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001202:	333f      	adds	r3, #63	@ 0x3f
 8001204:	139b      	asrs	r3, r3, #14
 8001206:	b21b      	sxth	r3, r3
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
            sensorData->Quaternion.Z = (int16_t)((buffer[7] << 8) | buffer[6]) / (1 << 14);
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	b21b      	sxth	r3, r3
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21b      	sxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	da02      	bge.n	8001230 <ReadData+0x158>
 800122a:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800122e:	333f      	adds	r3, #63	@ 0x3f
 8001230:	139b      	asrs	r3, r3, #14
 8001232:	b21b      	sxth	r3, r3
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
        }
    }

    if (sensors & SENSOR_LINACC) {
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d042      	beq.n	80012d2 <ReadData+0x1fa>
        if (BNO055_IT_Read(P_BNO055, BNO_LINACC, buffer, 6) == HAL_OK) {
 800124c:	f107 0208 	add.w	r2, r7, #8
 8001250:	2306      	movs	r3, #6
 8001252:	2128      	movs	r1, #40	@ 0x28
 8001254:	2050      	movs	r0, #80	@ 0x50
 8001256:	f7ff fe3d 	bl	8000ed4 <BNO055_IT_Read>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d138      	bne.n	80012d2 <ReadData+0x1fa>
            sensorData->LineerAcc.X = (int16_t)((buffer[1] << 8) | buffer[0]) / 100.0f;
 8001260:	7a7b      	ldrb	r3, [r7, #9]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7a3b      	ldrb	r3, [r7, #8]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001278:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80013f4 <ReadData+0x31c>
 800127c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
            sensorData->LineerAcc.Y = (int16_t)((buffer[3] << 8) | buffer[2]) / 100.0f;
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	b21b      	sxth	r3, r3
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7abb      	ldrb	r3, [r7, #10]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129e:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80013f4 <ReadData+0x31c>
 80012a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
            sensorData->LineerAcc.Z = (int16_t)((buffer[5] << 8) | buffer[4]) / 100.0f;
 80012ac:	7b7b      	ldrb	r3, [r7, #13]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	7b3b      	ldrb	r3, [r7, #12]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80013f4 <ReadData+0x31c>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        }
    }

    if (sensors & SENSOR_GYRO) {
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d042      	beq.n	8001362 <ReadData+0x28a>
        if (BNO055_IT_Read(P_BNO055, BNO_GYRO, buffer, 6) == HAL_OK) {
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	2306      	movs	r3, #6
 80012e2:	2114      	movs	r1, #20
 80012e4:	2050      	movs	r0, #80	@ 0x50
 80012e6:	f7ff fdf5 	bl	8000ed4 <BNO055_IT_Read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d138      	bne.n	8001362 <ReadData+0x28a>
            sensorData->Gyro.X = (int16_t)((buffer[1] << 8) | buffer[0]) / 16.0f;
 80012f0:	7a7b      	ldrb	r3, [r7, #9]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7a3b      	ldrb	r3, [r7, #8]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001308:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edc3 7a03 	vstr	s15, [r3, #12]
            sensorData->Gyro.Y = (int16_t)((buffer[3] << 8) | buffer[2]) / 16.0f;
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	b21b      	sxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	7abb      	ldrb	r3, [r7, #10]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21b      	sxth	r3, r3
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edc3 7a04 	vstr	s15, [r3, #16]
            sensorData->Gyro.Z = (int16_t)((buffer[5] << 8) | buffer[4]) / 16.0f;
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	b21b      	sxth	r3, r3
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	7b3b      	ldrb	r3, [r7, #12]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21b      	sxth	r3, r3
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001354:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a05 	vstr	s15, [r3, #20]
        }
    }

    if (sensors & SENSOR_ACCEL) {
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	2b00      	cmp	r3, #0
 800136a:	d045      	beq.n	80013f8 <ReadData+0x320>
        if (BNO055_IT_Read(P_BNO055, BNO_ACCEL, buffer, 6) == HAL_OK) {
 800136c:	f107 0208 	add.w	r2, r7, #8
 8001370:	2306      	movs	r3, #6
 8001372:	2108      	movs	r1, #8
 8001374:	2050      	movs	r0, #80	@ 0x50
 8001376:	f7ff fdad 	bl	8000ed4 <BNO055_IT_Read>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d13b      	bne.n	80013f8 <ReadData+0x320>
            sensorData->Accel.X = (int16_t)((buffer[1] << 8) | buffer[0]) / 100.0f;
 8001380:	7a7b      	ldrb	r3, [r7, #9]
 8001382:	b21b      	sxth	r3, r3
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b21a      	sxth	r2, r3
 8001388:	7a3b      	ldrb	r3, [r7, #8]
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21b      	sxth	r3, r3
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001398:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80013f4 <ReadData+0x31c>
 800139c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	edc3 7a00 	vstr	s15, [r3]
            sensorData->Accel.Y = (int16_t)((buffer[3] << 8) | buffer[2]) / 100.0f;
 80013a6:	7afb      	ldrb	r3, [r7, #11]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7abb      	ldrb	r3, [r7, #10]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013be:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80013f4 <ReadData+0x31c>
 80013c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7a01 	vstr	s15, [r3, #4]
            sensorData->Accel.Z = (int16_t)((buffer[5] << 8) | buffer[4]) / 100.0f;
 80013cc:	7b7b      	ldrb	r3, [r7, #13]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	7b3b      	ldrb	r3, [r7, #12]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	eddf 6a03 	vldr	s13, [pc, #12]	@ 80013f4 <ReadData+0x31c>
 80013e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	edc3 7a02 	vstr	s15, [r3, #8]
 80013f2:	e001      	b.n	80013f8 <ReadData+0x320>
 80013f4:	42c80000 	.word	0x42c80000
        }
    }

    if (sensors & SENSOR_MAG) {
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d049      	beq.n	8001496 <ReadData+0x3be>
        if (BNO055_IT_Read(P_BNO055, BNO_MAG, buffer, 6) == HAL_OK) {
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	2306      	movs	r3, #6
 8001408:	210e      	movs	r1, #14
 800140a:	2050      	movs	r0, #80	@ 0x50
 800140c:	f7ff fd62 	bl	8000ed4 <BNO055_IT_Read>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d139      	bne.n	800148a <ReadData+0x3b2>
            sensorData->Magneto.X = (int16_t)((buffer[1] << 8) | buffer[0]) / 16.0f;
 8001416:	7a7b      	ldrb	r3, [r7, #9]
 8001418:	b21b      	sxth	r3, r3
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	7a3b      	ldrb	r3, [r7, #8]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21b      	sxth	r3, r3
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a06 	vstr	s15, [r3, #24]
            sensorData->Magneto.Y = (int16_t)((buffer[3] << 8) | buffer[2]) / 16.0f;
 800143c:	7afb      	ldrb	r3, [r7, #11]
 800143e:	b21b      	sxth	r3, r3
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21a      	sxth	r2, r3
 8001444:	7abb      	ldrb	r3, [r7, #10]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001454:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	edc3 7a07 	vstr	s15, [r3, #28]
            sensorData->Magneto.Z = (int16_t)((buffer[5] << 8) | buffer[4]) / 16.0f;
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	b21b      	sxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	7b3b      	ldrb	r3, [r7, #12]
 800146c:	b21b      	sxth	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b21b      	sxth	r3, r3
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800147e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edc3 7a08 	vstr	s15, [r3, #32]
 8001488:	e005      	b.n	8001496 <ReadData+0x3be>
        } else {
            printf("❌ Magneto read error\r\n");
 800148a:	4829      	ldr	r0, [pc, #164]	@ (8001530 <ReadData+0x458>)
 800148c:	f00d f816 	bl	800e4bc <puts>
            bno055_need_reset = 1;
 8001490:	4b28      	ldr	r3, [pc, #160]	@ (8001534 <ReadData+0x45c>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors & SENSOR_EULER) {
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d042      	beq.n	8001526 <ReadData+0x44e>
        if (BNO055_IT_Read(P_BNO055, BNO_EULER, buffer, 6) == HAL_OK) {
 80014a0:	f107 0208 	add.w	r2, r7, #8
 80014a4:	2306      	movs	r3, #6
 80014a6:	211a      	movs	r1, #26
 80014a8:	2050      	movs	r0, #80	@ 0x50
 80014aa:	f7ff fd13 	bl	8000ed4 <BNO055_IT_Read>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d138      	bne.n	8001526 <ReadData+0x44e>
            sensorData->Euler.X = (int16_t)((buffer[1] << 8) | buffer[0]) / 16.0f; // yaw
 80014b4:	7a7b      	ldrb	r3, [r7, #9]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	7a3b      	ldrb	r3, [r7, #8]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014cc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80014d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
            sensorData->Euler.Y = (int16_t)((buffer[3] << 8) | buffer[2]) / 16.0f; // pitch
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	7abb      	ldrb	r3, [r7, #10]
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80014f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
            sensorData->Euler.Z = (int16_t)((buffer[5] << 8) | buffer[4]) / 16.0f; // roll
 8001500:	7b7b      	ldrb	r3, [r7, #13]
 8001502:	b21b      	sxth	r3, r3
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7b3b      	ldrb	r3, [r7, #12]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21b      	sxth	r3, r3
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001518:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800151c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        }
    }
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	080110b8 	.word	0x080110b8
 8001534:	2000031a 	.word	0x2000031a

08001538 <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){ //Đặt chế độ hoạt động (e.g. NDOF, IMU, CONFIG_MODE...)
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fdae 	bl	80010a4 <SelectPage>
	if(BNO055_IT_Write(P_BNO055, OPR_MODE_ADDR, &Mode, 1) != HAL_OK){
 8001548:	1dfa      	adds	r2, r7, #7
 800154a:	2301      	movs	r3, #1
 800154c:	213d      	movs	r1, #61	@ 0x3d
 800154e:	2050      	movs	r0, #80	@ 0x50
 8001550:	f7ff fd0e 	bl	8000f70 <BNO055_IT_Write>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <Set_Operation_Mode+0x2a>
		printf("Operation mode could not be set!\n");
 800155a:	480a      	ldr	r0, [pc, #40]	@ (8001584 <Set_Operation_Mode+0x4c>)
 800155c:	f00c ffae 	bl	800e4bc <puts>
 8001560:	e002      	b.n	8001568 <Set_Operation_Mode+0x30>
	}
	else printf("Operation mode switching succeeded.\n");
 8001562:	4809      	ldr	r0, [pc, #36]	@ (8001588 <Set_Operation_Mode+0x50>)
 8001564:	f00c ffaa 	bl	800e4bc <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <Set_Operation_Mode+0x3e>
 800156e:	2013      	movs	r0, #19
 8001570:	f003 fefa 	bl	8005368 <HAL_Delay>
	else HAL_Delay(9);
}
 8001574:	e002      	b.n	800157c <Set_Operation_Mode+0x44>
	else HAL_Delay(9);
 8001576:	2009      	movs	r0, #9
 8001578:	f003 fef6 	bl	8005368 <HAL_Delay>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	080110d0 	.word	0x080110d0
 8001588:	080110f4 	.word	0x080110f4

0800158c <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){ //Cấu hình power mode: Normal, Low-power, Suspend.
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]

	if(BNO055_IT_Write(P_BNO055, PWR_MODE_ADDR, &BNO055_, 1) != HAL_OK)
 8001596:	1dfa      	adds	r2, r7, #7
 8001598:	2301      	movs	r3, #1
 800159a:	213e      	movs	r1, #62	@ 0x3e
 800159c:	2050      	movs	r0, #80	@ 0x50
 800159e:	f7ff fce7 	bl	8000f70 <BNO055_IT_Write>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <SetPowerMODE+0x24>
	{
		printf("Power mode could not be set!\n");
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <SetPowerMODE+0x38>)
 80015aa:	f00c ff87 	bl	800e4bc <puts>
 80015ae:	e002      	b.n	80015b6 <SetPowerMODE+0x2a>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <SetPowerMODE+0x3c>)
 80015b2:	f00c ff83 	bl	800e4bc <puts>
	}
	HAL_Delay(50);
 80015b6:	2032      	movs	r0, #50	@ 0x32
 80015b8:	f003 fed6 	bl	8005368 <HAL_Delay>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	08011118 	.word	0x08011118
 80015c8:	08011138 	.word	0x08011138

080015cc <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) { //Chọn xung clock nội/ngoại.
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]

	//7th bit: External Crystal=1; Internal Crystal=0
	BNO055_IT_Write(P_BNO055, SYS_TRIGGER_ADDR, &source, 1);
 80015d6:	1dfa      	adds	r2, r7, #7
 80015d8:	2301      	movs	r3, #1
 80015da:	213f      	movs	r1, #63	@ 0x3f
 80015dc:	2050      	movs	r0, #80	@ 0x50
 80015de:	f7ff fcc7 	bl	8000f70 <BNO055_IT_Write>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){ // Chuyển đổi trục (Axis remap)
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	460a      	mov	r2, r1
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	4613      	mov	r3, r2
 80015f8:	71bb      	strb	r3, [r7, #6]

	//Gán lại trục X–Y–Z hoặc đảo dấu (khi lắp cảm biến không đúng hướng).
	//Ví dụ : nếu gắn nghiêng 90°, có thể đổi trục để kết quả đúng.

	BNO055_IT_Write(P_BNO055, AXIS_MAP_CONFIG_ADDR, &remap, 1);
 80015fa:	1dfa      	adds	r2, r7, #7
 80015fc:	2301      	movs	r3, #1
 80015fe:	2141      	movs	r1, #65	@ 0x41
 8001600:	2050      	movs	r0, #80	@ 0x50
 8001602:	f7ff fcb5 	bl	8000f70 <BNO055_IT_Write>
	HAL_Delay(20);
 8001606:	2014      	movs	r0, #20
 8001608:	f003 feae 	bl	8005368 <HAL_Delay>
	BNO055_IT_Write(P_BNO055, AXIS_MAP_SIGN_ADDR, &sign, 1);
 800160c:	1dba      	adds	r2, r7, #6
 800160e:	2301      	movs	r3, #1
 8001610:	2142      	movs	r1, #66	@ 0x42
 8001612:	2050      	movs	r0, #80	@ 0x50
 8001614:	f7ff fcac 	bl	8000f70 <BNO055_IT_Write>
	HAL_Delay(100);
 8001618:	2064      	movs	r0, #100	@ 0x64
 800161a:	f003 fea5 	bl	8005368 <HAL_Delay>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]

	BNO055_IT_Write(P_BNO055, ACC_CONFIG_ADDR, &range, 1);
 8001630:	1dfa      	adds	r2, r7, #7
 8001632:	2301      	movs	r3, #1
 8001634:	2108      	movs	r1, #8
 8001636:	2050      	movs	r0, #80	@ 0x50
 8001638:	f7ff fc9a 	bl	8000f70 <BNO055_IT_Write>
	HAL_Delay(100);
 800163c:	2064      	movs	r0, #100	@ 0x64
 800163e:	f003 fe93 	bl	8005368 <HAL_Delay>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(void){  //Khởi tạo toàn bộ cảm biến
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
	//Đặt page = 0, chọn clock, map trục, chọn đơn vị(m / s² hay g…)
	//Đặt chế độ nguồn
	//Đặt chế độ hoạt động chính(ví dụ NDOF)
    BNO055_Init_t Init;

    Init.Unit_Sel     = UNIT_ORI_WINDOWS | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2;
 8001652:	2300      	movs	r3, #0
 8001654:	723b      	strb	r3, [r7, #8]
    Init.Axis         = DEFAULT_AXIS_REMAP;
 8001656:	2324      	movs	r3, #36	@ 0x24
 8001658:	727b      	strb	r3, [r7, #9]
    Init.Axis_sign    = DEFAULT_AXIS_SIGN;
 800165a:	2300      	movs	r3, #0
 800165c:	72bb      	strb	r3, [r7, #10]
    Init.Mode         = BNO055_NORMAL_MODE;
 800165e:	2300      	movs	r3, #0
 8001660:	72fb      	strb	r3, [r7, #11]
    Init.OP_Modes     = NDOF;
 8001662:	230c      	movs	r3, #12
 8001664:	733b      	strb	r3, [r7, #12]
    Init.Clock_Source = CLOCK_INTERNAL;
 8001666:	2300      	movs	r3, #0
 8001668:	737b      	strb	r3, [r7, #13]
    Init.ACC_Range    = Range_2G;
 800166a:	2300      	movs	r3, #0
 800166c:	73bb      	strb	r3, [r7, #14]

	//Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE); // cấu hình
 800166e:	2000      	movs	r0, #0
 8001670:	f7ff ff62 	bl	8001538 <Set_Operation_Mode>
	HAL_Delay(50);
 8001674:	2032      	movs	r0, #50	@ 0x32
 8001676:	f003 fe77 	bl	8005368 <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff fd12 	bl	80010a4 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ffcf 	bl	8001626 <SET_Accel_Range>
	HAL_Delay(50);
 8001688:	2032      	movs	r0, #50	@ 0x32
 800168a:	f003 fe6d 	bl	8005368 <HAL_Delay>

	//Set register page number to 0
	SelectPage(PAGE_0);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fd08 	bl	80010a4 <SelectPage>
	HAL_Delay(50);
 8001694:	2032      	movs	r0, #50	@ 0x32
 8001696:	f003 fe67 	bl	8005368 <HAL_Delay>

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	BNO055_IT_Read(P_BNO055, SYS_CLK_STATUS_ADDR, &status, 1);
 800169a:	1dfa      	adds	r2, r7, #7
 800169c:	2301      	movs	r3, #1
 800169e:	2138      	movs	r1, #56	@ 0x38
 80016a0:	2050      	movs	r0, #80	@ 0x50
 80016a2:	f7ff fc17 	bl	8000ed4 <BNO055_IT_Read>
	HAL_Delay(50);
 80016a6:	2032      	movs	r0, #50	@ 0x32
 80016a8:	f003 fe5e 	bl	8005368 <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <BNO055_Init+0x74>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff89 	bl	80015cc <Clock_Source>
		HAL_Delay(100);
 80016ba:	2064      	movs	r0, #100	@ 0x64
 80016bc:	f003 fe54 	bl	8005368 <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 80016c0:	7a7b      	ldrb	r3, [r7, #9]
 80016c2:	7aba      	ldrb	r2, [r7, #10]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff8f 	bl	80015ea <BNO055_Axis>
	HAL_Delay(100);
 80016cc:	2064      	movs	r0, #100	@ 0x64
 80016ce:	f003 fe4b 	bl	8005368 <HAL_Delay>

	//Configure data output format and the measurement unit
	BNO055_IT_Write(P_BNO055, UNIT_SEL_ADDR, &Init.Unit_Sel, 1);
 80016d2:	f107 0208 	add.w	r2, r7, #8
 80016d6:	2301      	movs	r3, #1
 80016d8:	213b      	movs	r1, #59	@ 0x3b
 80016da:	2050      	movs	r0, #80	@ 0x50
 80016dc:	f7ff fc48 	bl	8000f70 <BNO055_IT_Write>
	HAL_Delay(100);
 80016e0:	2064      	movs	r0, #100	@ 0x64
 80016e2:	f003 fe41 	bl	8005368 <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff4f 	bl	800158c <SetPowerMODE>
	HAL_Delay(100);
 80016ee:	2064      	movs	r0, #100	@ 0x64
 80016f0:	f003 fe3a 	bl	8005368 <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 80016f4:	7b3b      	ldrb	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff1e 	bl	8001538 <Set_Operation_Mode>
	HAL_Delay(100);
 80016fc:	2064      	movs	r0, #100	@ 0x64
 80016fe:	f003 fe33 	bl	8005368 <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 8001702:	4803      	ldr	r0, [pc, #12]	@ (8001710 <BNO055_Init+0xc4>)
 8001704:	f00c feda 	bl	800e4bc <puts>
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08011158 	.word	0x08011158

08001714 <BNO055_SendEulerCAN>:

    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void BNO055_SendEulerCAN(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09a      	sub	sp, #104	@ 0x68
 8001718:	af00      	add	r7, sp, #0
    BNO055_Sensors_t sensorData;
    ReadData(&sensorData, SENSOR_EULER);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	2140      	movs	r1, #64	@ 0x40
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fcd9 	bl	80010d8 <ReadData>

    // Giữ 2 chữ số thập phân
    int16_t roll  = (int16_t)(sensorData.Euler.Z * 100);
 8001726:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800172a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80017c8 <BNO055_SendEulerCAN+0xb4>
 800172e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001736:	ee17 3a90 	vmov	r3, s15
 800173a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    int16_t pitch = (int16_t)(sensorData.Euler.Y * 100);
 800173e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001742:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80017c8 <BNO055_SendEulerCAN+0xb4>
 8001746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174e:	ee17 3a90 	vmov	r3, s15
 8001752:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    int16_t yaw   = (int16_t)(sensorData.Euler.X * 100);
 8001756:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800175a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80017c8 <BNO055_SendEulerCAN+0xb4>
 800175e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001766:	ee17 3a90 	vmov	r3, s15
 800176a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

    // Frame 8 byte: [rollH,rollL, pitchH,pitchL, yawH,yawL, 0x00,0x00]
    uint8_t data[8] = {
        (uint8_t)((roll  >> 8) & 0xFF),  (uint8_t)(roll  & 0xFF),
 800176e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8001772:	121b      	asrs	r3, r3, #8
 8001774:	b21b      	sxth	r3, r3
 8001776:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 8001778:	703b      	strb	r3, [r7, #0]
        (uint8_t)((roll  >> 8) & 0xFF),  (uint8_t)(roll  & 0xFF),
 800177a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800177e:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 8001780:	707b      	strb	r3, [r7, #1]
        (uint8_t)((pitch >> 8) & 0xFF),  (uint8_t)(pitch & 0xFF),
 8001782:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001786:	121b      	asrs	r3, r3, #8
 8001788:	b21b      	sxth	r3, r3
 800178a:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 800178c:	70bb      	strb	r3, [r7, #2]
        (uint8_t)((pitch >> 8) & 0xFF),  (uint8_t)(pitch & 0xFF),
 800178e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001792:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 8001794:	70fb      	strb	r3, [r7, #3]
        (uint8_t)((yaw   >> 8) & 0xFF),  (uint8_t)(yaw   & 0xFF),
 8001796:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800179a:	121b      	asrs	r3, r3, #8
 800179c:	b21b      	sxth	r3, r3
 800179e:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 80017a0:	713b      	strb	r3, [r7, #4]
        (uint8_t)((yaw   >> 8) & 0xFF),  (uint8_t)(yaw   & 0xFF),
 80017a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80017a6:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 80017a8:	717b      	strb	r3, [r7, #5]
 80017aa:	2300      	movs	r3, #0
 80017ac:	71bb      	strb	r3, [r7, #6]
 80017ae:	2300      	movs	r3, #0
 80017b0:	71fb      	strb	r3, [r7, #7]
        0x00, 0x00
    };
    CAN_SendTopicData(TOPIC_ID_IMU_EULER, data, 8);
 80017b2:	463b      	mov	r3, r7
 80017b4:	2208      	movs	r2, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	2012      	movs	r0, #18
 80017ba:	f000 fce9 	bl	8002190 <CAN_SendTopicData>
}
 80017be:	bf00      	nop
 80017c0:	3768      	adds	r7, #104	@ 0x68
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	42c80000 	.word	0x42c80000

080017cc <BNO055_PrintEulerDebug>:
            sensorData.Gyro.X, sensorData.Gyro.Y, sensorData.Gyro.Z);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void BNO055_PrintEulerDebug(void)
{
 80017cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017d0:	b0be      	sub	sp, #248	@ 0xf8
 80017d2:	af04      	add	r7, sp, #16
    BNO055_Sensors_t sensorData;
    ReadData(&sensorData, SENSOR_EULER);
 80017d4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80017d8:	2140      	movs	r1, #64	@ 0x40
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fc7c 	bl	80010d8 <ReadData>

    float roll  = sensorData.Euler.Z;
 80017e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    float pitch = sensorData.Euler.Y;
 80017e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    float yaw   = sensorData.Euler.X;
 80017f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
//        yaw -= 360.0f;
//    else if (yaw < -180.0f)
//        yaw += 360.0f;

    char msg[128];
    sprintf(msg, "DEBUG: Roll=%.2f°, Pitch=%.2f°, Yaw=%.2f°\r\n", roll, pitch, yaw);
 80017f8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80017fc:	f7fe fea4 	bl	8000548 <__aeabi_f2d>
 8001800:	4680      	mov	r8, r0
 8001802:	4689      	mov	r9, r1
 8001804:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8001808:	f7fe fe9e 	bl	8000548 <__aeabi_f2d>
 800180c:	4604      	mov	r4, r0
 800180e:	460d      	mov	r5, r1
 8001810:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8001814:	f7fe fe98 	bl	8000548 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	1d38      	adds	r0, r7, #4
 800181e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001822:	e9cd 4500 	strd	r4, r5, [sp]
 8001826:	4642      	mov	r2, r8
 8001828:	464b      	mov	r3, r9
 800182a:	490a      	ldr	r1, [pc, #40]	@ (8001854 <BNO055_PrintEulerDebug+0x88>)
 800182c:	f00c fe84 	bl	800e538 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fd1c 	bl	8000270 <strlen>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	1d39      	adds	r1, r7, #4
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <BNO055_PrintEulerDebug+0x8c>)
 8001844:	f00b f904 	bl	800ca50 <HAL_UART_Transmit>
}
 8001848:	bf00      	nop
 800184a:	37e8      	adds	r7, #232	@ 0xe8
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001852:	bf00      	nop
 8001854:	080114e0 	.word	0x080114e0
 8001858:	200006d8 	.word	0x200006d8

0800185c <CAN_DebugStatus>:
#include "display.h"
#include "rfid.h"
extern UART_HandleTypeDef huart1;
extern CAN_HandleTypeDef hcan1;
void CAN_DebugStatus(void)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b0b2      	sub	sp, #200	@ 0xc8
 8001860:	af04      	add	r7, sp, #16
    char msg[128];
    uint32_t msr = hcan1.Instance->MSR;
 8001862:	4b49      	ldr	r3, [pc, #292]	@ (8001988 <CAN_DebugStatus+0x12c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint32_t esr = hcan1.Instance->ESR;
 800186c:	4b46      	ldr	r3, [pc, #280]	@ (8001988 <CAN_DebugStatus+0x12c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // In trạng thái FIFO
    uint32_t fifo0_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8001876:	2100      	movs	r1, #0
 8001878:	4843      	ldr	r0, [pc, #268]	@ (8001988 <CAN_DebugStatus+0x12c>)
 800187a:	f004 ff46 	bl	800670a <HAL_CAN_GetRxFifoFillLevel>
 800187e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t fifo1_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1);
 8001882:	2101      	movs	r1, #1
 8001884:	4840      	ldr	r0, [pc, #256]	@ (8001988 <CAN_DebugStatus+0x12c>)
 8001886:	f004 ff40 	bl	800670a <HAL_CAN_GetRxFifoFillLevel>
 800188a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    snprintf(msg, sizeof(msg),
 800188e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018a8:	4a38      	ldr	r2, [pc, #224]	@ (800198c <CAN_DebugStatus+0x130>)
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	f00c fe0e 	bl	800e4cc <sniprintf>
             "\r\n[CAN DEBUG]\r\nMSR=0x%08lX\r\nESR=0x%08lX\r\nFIFO0=%lu, FIFO1=%lu\r\n",
             msr, esr, fifo0_level, fifo1_level);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80018b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fcdb 	bl	8000270 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	4832      	ldr	r0, [pc, #200]	@ (8001990 <CAN_DebugStatus+0x134>)
 80018c8:	f00b f8c2 	bl	800ca50 <HAL_UART_Transmit>

    // Giải thích các trạng thái nếu cần
    if (esr & CAN_ESR_BOFF) {
 80018cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <CAN_DebugStatus+0x8a>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ CAN BUS-OFF\r\n", 17, HAL_MAX_DELAY);
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	2211      	movs	r2, #17
 80018de:	492d      	ldr	r1, [pc, #180]	@ (8001994 <CAN_DebugStatus+0x138>)
 80018e0:	482b      	ldr	r0, [pc, #172]	@ (8001990 <CAN_DebugStatus+0x134>)
 80018e2:	f00b f8b5 	bl	800ca50 <HAL_UART_Transmit>
    }
    if (esr & CAN_ESR_EPVF) {
 80018e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <CAN_DebugStatus+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ Error Passive\r\n", 19, HAL_MAX_DELAY);
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	2213      	movs	r2, #19
 80018f8:	4927      	ldr	r1, [pc, #156]	@ (8001998 <CAN_DebugStatus+0x13c>)
 80018fa:	4825      	ldr	r0, [pc, #148]	@ (8001990 <CAN_DebugStatus+0x134>)
 80018fc:	f00b f8a8 	bl	800ca50 <HAL_UART_Transmit>
    }
    if (esr & CAN_ESR_EWGF) {
 8001900:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <CAN_DebugStatus+0xbe>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ Error Warning\r\n", 19, HAL_MAX_DELAY);
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2213      	movs	r2, #19
 8001912:	4922      	ldr	r1, [pc, #136]	@ (800199c <CAN_DebugStatus+0x140>)
 8001914:	481e      	ldr	r0, [pc, #120]	@ (8001990 <CAN_DebugStatus+0x134>)
 8001916:	f00b f89b 	bl	800ca50 <HAL_UART_Transmit>
    }

    if ((esr & CAN_ESR_LEC_Msk) != 0) {
 800191a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800191e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001922:	2b00      	cmp	r3, #0
 8001924:	d02b      	beq.n	800197e <CAN_DebugStatus+0x122>
        const char* lec_msgs[] = {
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <CAN_DebugStatus+0x144>)
 8001928:	1d3c      	adds	r4, r7, #4
 800192a:	461d      	mov	r5, r3
 800192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001930:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            "No Error", "Stuff Error", "Form Error", "Ack Error",
            "Bit recessive Error", "Bit dominant Error", "CRC Error", "Unknown"
        };
        uint8_t lec = (esr & CAN_ESR_LEC_Msk) >> CAN_ESR_LEC_Pos;
 8001938:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        snprintf(msg, sizeof(msg), "❌ Last Error Code (LEC): %s\r\n", lec_msgs[lec]);
 8001948:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	33b8      	adds	r3, #184	@ 0xb8
 8001950:	443b      	add	r3, r7
 8001952:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001956:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800195a:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <CAN_DebugStatus+0x148>)
 800195c:	2180      	movs	r1, #128	@ 0x80
 800195e:	f00c fdb5 	bl	800e4cc <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fc82 	bl	8000270 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	4805      	ldr	r0, [pc, #20]	@ (8001990 <CAN_DebugStatus+0x134>)
 800197a:	f00b f869 	bl	800ca50 <HAL_UART_Transmit>
    }
}
 800197e:	bf00      	nop
 8001980:	37b8      	adds	r7, #184	@ 0xb8
 8001982:	46bd      	mov	sp, r7
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	bf00      	nop
 8001988:	200003dc 	.word	0x200003dc
 800198c:	08011510 	.word	0x08011510
 8001990:	200006d8 	.word	0x200006d8
 8001994:	08011550 	.word	0x08011550
 8001998:	08011568 	.word	0x08011568
 800199c:	08011580 	.word	0x08011580
 80019a0:	08011624 	.word	0x08011624
 80019a4:	08011598 	.word	0x08011598

080019a8 <MQ135_Config>:
// Biến bên ngoài dùng cho lấy mẫu ADC qua ngắt
extern uint32_t ADC_SAMPLES[1000];
extern uint32_t NUM_SAMPLES;
extern volatile uint8_t mq135_done;

void MQ135_Config(MQ135_HandleTypeDef *mq, ADC_HandleTypeDef *hadc) {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    mq->hadc = hadc;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	601a      	str	r2, [r3, #0]
    mq->rl_value = 10.0f;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a0c      	ldr	r2, [pc, #48]	@ (80019ec <MQ135_Config+0x44>)
 80019bc:	605a      	str	r2, [r3, #4]
    mq->ro_clean_air = 10.0f;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <MQ135_Config+0x44>)
 80019c2:	609a      	str	r2, [r3, #8]
    mq->a = 116.6020682f;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <MQ135_Config+0x48>)
 80019c8:	60da      	str	r2, [r3, #12]
    mq->b = -2.769034857f;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <MQ135_Config+0x4c>)
 80019ce:	611a      	str	r2, [r3, #16]
    mq->vref = 3.3f;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a09      	ldr	r2, [pc, #36]	@ (80019f8 <MQ135_Config+0x50>)
 80019d4:	615a      	str	r2, [r3, #20]
    mq->resolution = 4096.0f;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	41200000 	.word	0x41200000
 80019f0:	42e93442 	.word	0x42e93442
 80019f4:	c03137de 	.word	0xc03137de
 80019f8:	40533333 	.word	0x40533333

080019fc <MQ135_CorrectionFactor>:

float MQ135_CorrectionFactor(float temp, float hum) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a06:	edc7 0a00 	vstr	s1, [r7]
    return MQ135_CORA * temp * temp
 8001a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001a5c <MQ135_CorrectionFactor+0x60>
 8001a12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
         - MQ135_CORB * temp
 8001a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a22:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001a60 <MQ135_CorrectionFactor+0x64>
 8001a26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
         + MQ135_CORC
 8001a2e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001a64 <MQ135_CorrectionFactor+0x68>
 8001a32:	ee37 7a87 	vadd.f32	s14, s15, s14
         - (hum - 33.0f) * MQ135_CORD;
 8001a36:	edd7 7a00 	vldr	s15, [r7]
 8001a3a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001a68 <MQ135_CorrectionFactor+0x6c>
 8001a3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a42:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001a6c <MQ135_CorrectionFactor+0x70>
 8001a46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	39b78034 	.word	0x39b78034
 8001a60:	3cdea897 	.word	0x3cdea897
 8001a64:	3fb29bd0 	.word	0x3fb29bd0
 8001a68:	42040000 	.word	0x42040000
 8001a6c:	3aebedfa 	.word	0x3aebedfa

08001a70 <MQ135_ReadRs>:

float MQ135_ReadRs(MQ135_HandleTypeDef *mq) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    float rs = 0.0f;
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
    mq135_done = 0;
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <MQ135_ReadRs+0xbc>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
    NUM_SAMPLES = MQ135_READ_SAMPLES;
 8001a84:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <MQ135_ReadRs+0xc0>)
 8001a86:	2264      	movs	r2, #100	@ 0x64
 8001a88:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start_IT(mq->hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fcd2 	bl	8005438 <HAL_ADC_Start_IT>
    while (!mq135_done);  // đợi hoàn tất lấy mẫu
 8001a94:	bf00      	nop
 8001a96:	4b25      	ldr	r3, [pc, #148]	@ (8001b2c <MQ135_ReadRs+0xbc>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0fa      	beq.n	8001a96 <MQ135_ReadRs+0x26>

    for (uint32_t j = 0; j < NUM_SAMPLES; j++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e02c      	b.n	8001b00 <MQ135_ReadRs+0x90>
        float v = ADC_SAMPLES[j] * mq->vref / mq->resolution;
 8001aa6:	4a23      	ldr	r2, [pc, #140]	@ (8001b34 <MQ135_ReadRs+0xc4>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001abc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aca:	edc7 7a03 	vstr	s15, [r7, #12]
        rs += ((mq->vref - v) * mq->rl_value) / v;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ae2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ae6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aee:	ed97 7a05 	vldr	s14, [r7, #20]
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	edc7 7a05 	vstr	s15, [r7, #20]
    for (uint32_t j = 0; j < NUM_SAMPLES; j++) {
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	3301      	adds	r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <MQ135_ReadRs+0xc0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3cd      	bcc.n	8001aa6 <MQ135_ReadRs+0x36>
    }

    return rs / NUM_SAMPLES;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <MQ135_ReadRs+0xc0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	ee07 3a90 	vmov	s15, r3
 8001b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b16:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b1e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20001770 	.word	0x20001770
 8001b30:	2000176c 	.word	0x2000176c
 8001b34:	200007cc 	.word	0x200007cc

08001b38 <MQ135_ReadCorrectedPPM>:

float MQ135_ReadCorrectedPPM(MQ135_HandleTypeDef *mq, float temp, float hum) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	ed2d 8b02 	vpush	{d8}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b48:	edc7 0a01 	vstr	s1, [r7, #4]
    float rs = MQ135_ReadRs(mq);
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff ff8f 	bl	8001a70 <MQ135_ReadRs>
 8001b52:	ed87 0a07 	vstr	s0, [r7, #28]
    float corr = MQ135_CorrectionFactor(temp, hum);
 8001b56:	edd7 0a01 	vldr	s1, [r7, #4]
 8001b5a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001b5e:	f7ff ff4d 	bl	80019fc <MQ135_CorrectionFactor>
 8001b62:	ed87 0a06 	vstr	s0, [r7, #24]
    float rsc = rs / corr;
 8001b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b72:	edc7 7a05 	vstr	s15, [r7, #20]
    return mq->a * powf(rsc / mq->ro_clean_air, mq->b);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	ed93 8a03 	vldr	s16, [r3, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b82:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b90:	eef0 0a67 	vmov.f32	s1, s15
 8001b94:	eeb0 0a66 	vmov.f32	s0, s13
 8001b98:	f00e fe12 	bl	80107c0 <powf>
 8001b9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ba0:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	ecbd 8b02 	vpop	{d8}
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <MQ135_CalibrateRo>:

void MQ135_CalibrateRo(MQ135_HandleTypeDef *mq, float temp, float hum) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	ed2d 8b02 	vpush	{d8}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bc4:	edc7 0a01 	vstr	s1, [r7, #4]
    mq->ro_clean_air = MQ135_ReadRs(mq) *
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff ff51 	bl	8001a70 <MQ135_ReadRs>
 8001bce:	eeb0 8a40 	vmov.f32	s16, s0
        powf((MQ135_ATMOCO2 / mq->a), (1.0f / mq->b));
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bd8:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001c14 <MQ135_CalibrateRo+0x60>
 8001bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001be6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001bea:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001bee:	eef0 0a66 	vmov.f32	s1, s13
 8001bf2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf6:	f00e fde3 	bl	80107c0 <powf>
 8001bfa:	eef0 7a40 	vmov.f32	s15, s0
    mq->ro_clean_air = MQ135_ReadRs(mq) *
 8001bfe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	ecbd 8b02 	vpop	{d8}
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	43c80000 	.word	0x43c80000

08001c18 <MQ135_Send_CAN>:

void MQ135_Send_CAN(MQ135_HandleTypeDef *mq, float temp, float hum, UART_HandleTypeDef *huart, uint16_t topic) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09e      	sub	sp, #120	@ 0x78
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6178      	str	r0, [r7, #20]
 8001c20:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c24:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	80fb      	strh	r3, [r7, #6]
    float ppm = MQ135_ReadCorrectedPPM(mq, temp, hum);
 8001c2e:	edd7 0a03 	vldr	s1, [r7, #12]
 8001c32:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff7e 	bl	8001b38 <MQ135_ReadCorrectedPPM>
 8001c3c:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
    uint16_t v = (uint16_t)ppm;
 8001c40:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    char buf[80];
    sprintf(buf, "PPM: %.1f\r\n", ppm);
 8001c50:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001c52:	f7fe fc79 	bl	8000548 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	f107 0020 	add.w	r0, r7, #32
 8001c5e:	4913      	ldr	r1, [pc, #76]	@ (8001cac <MQ135_Send_CAN+0x94>)
 8001c60:	f00c fc6a 	bl	800e538 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fb01 	bl	8000270 <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	f107 0120 	add.w	r1, r7, #32
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	68b8      	ldr	r0, [r7, #8]
 8001c7c:	f00a fee8 	bl	800ca50 <HAL_UART_Transmit>

    uint8_t payload[2] = { (v >> 8) & 0xFF, v & 0xFF };
 8001c80:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	773b      	strb	r3, [r7, #28]
 8001c8c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	777b      	strb	r3, [r7, #29]
    CAN_SendTopicData(topic, payload, 2);
 8001c94:	f107 011c 	add.w	r1, r7, #28
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fa77 	bl	8002190 <CAN_SendTopicData>
}
 8001ca2:	bf00      	nop
 8001ca4:	3778      	adds	r7, #120	@ 0x78
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	08011644 	.word	0x08011644

08001cb0 <RC522_SPI_Transfer>:
 * Des		cription: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b096      	sub	sp, #88	@ 0x58
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001cba:	f107 024f 	add.w	r2, r7, #79	@ 0x4f
 8001cbe:	1df9      	adds	r1, r7, #7
 8001cc0:	2364      	movs	r3, #100	@ 0x64
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <RC522_SPI_Transfer+0x28>)
 8001cc8:	f008 ff7b 	bl	800abc2 <HAL_SPI_TransmitReceive>
	 char debug[64];

	return rx_data;
 8001ccc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3750      	adds	r7, #80	@ 0x50
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000488 	.word	0x20000488

08001cdc <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2180      	movs	r1, #128	@ 0x80
 8001cf0:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <Write_MFRC522+0x48>)
 8001cf2:	f005 ff09 	bl	8007b08 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ffd4 	bl	8001cb0 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ffd0 	bl	8001cb0 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <Write_MFRC522+0x48>)
 8001d16:	f005 fef7 	bl	8007b08 <HAL_GPIO_WritePin>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40020800 	.word	0x40020800

08001d28 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2180      	movs	r1, #128	@ 0x80
 8001d36:	4810      	ldr	r0, [pc, #64]	@ (8001d78 <Read_MFRC522+0x50>)
 8001d38:	f005 fee6 	bl	8007b08 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ffac 	bl	8001cb0 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff ffa9 	bl	8001cb0 <RC522_SPI_Transfer>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <Read_MFRC522+0x50>)
 8001d68:	f005 fece 	bl	8007b08 <HAL_GPIO_WritePin>
	
	return val;	
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020800 	.word	0x40020800

08001d7c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ffca 	bl	8001d28 <Read_MFRC522>
 8001d94:	4603      	mov	r3, r0
 8001d96:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff99 	bl	8001cdc <Write_MFRC522>
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	460a      	mov	r2, r1
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ffaf 	bl	8001d28 <Read_MFRC522>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001dce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	b25a      	sxtb	r2, r3
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff79 	bl	8001cdc <Write_MFRC522>
} 
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001df6:	2014      	movs	r0, #20
 8001df8:	f7ff ff96 	bl	8001d28 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001dfc:	2103      	movs	r1, #3
 8001dfe:	2014      	movs	r0, #20
 8001e00:	f7ff ffbc 	bl	8001d7c <SetBitMask>
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7ff ff64 	bl	8001cdc <Write_MFRC522>
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2180      	movs	r1, #128	@ 0x80
 8001e20:	4812      	ldr	r0, [pc, #72]	@ (8001e6c <MFRC522_Init+0x54>)
 8001e22:	f005 fe71 	bl	8007b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8001e26:	2201      	movs	r2, #1
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4811      	ldr	r0, [pc, #68]	@ (8001e70 <MFRC522_Init+0x58>)
 8001e2c:	f005 fe6c 	bl	8007b08 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001e30:	f7ff ffea 	bl	8001e08 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001e34:	218d      	movs	r1, #141	@ 0x8d
 8001e36:	202a      	movs	r0, #42	@ 0x2a
 8001e38:	f7ff ff50 	bl	8001cdc <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001e3c:	213e      	movs	r1, #62	@ 0x3e
 8001e3e:	202b      	movs	r0, #43	@ 0x2b
 8001e40:	f7ff ff4c 	bl	8001cdc <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8001e44:	211e      	movs	r1, #30
 8001e46:	202d      	movs	r0, #45	@ 0x2d
 8001e48:	f7ff ff48 	bl	8001cdc <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	202c      	movs	r0, #44	@ 0x2c
 8001e50:	f7ff ff44 	bl	8001cdc <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001e54:	2140      	movs	r1, #64	@ 0x40
 8001e56:	2015      	movs	r0, #21
 8001e58:	f7ff ff40 	bl	8001cdc <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001e5c:	213d      	movs	r1, #61	@ 0x3d
 8001e5e:	2011      	movs	r0, #17
 8001e60:	f7ff ff3c 	bl	8001cdc <Write_MFRC522>

	AntennaOn();
 8001e64:	f7ff ffc5 	bl	8001df2 <AntennaOn>
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020400 	.word	0x40020400

08001e74 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	4613      	mov	r3, r2
 8001e84:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001e86:	2302      	movs	r3, #2
 8001e88:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	d006      	beq.n	8001ea6 <MFRC522_ToCard+0x32>
 8001e98:	2b0e      	cmp	r3, #14
 8001e9a:	d109      	bne.n	8001eb0 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001e9c:	2312      	movs	r3, #18
 8001e9e:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	777b      	strb	r3, [r7, #29]
			break;
 8001ea4:	e005      	b.n	8001eb2 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001ea6:	2377      	movs	r3, #119	@ 0x77
 8001ea8:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001eaa:	2330      	movs	r3, #48	@ 0x30
 8001eac:	777b      	strb	r3, [r7, #29]
			break;
 8001eae:	e000      	b.n	8001eb2 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001eb0:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001eb2:	7fbb      	ldrb	r3, [r7, #30]
 8001eb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	4619      	mov	r1, r3
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f7ff ff0d 	bl	8001cdc <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001ec2:	2180      	movs	r1, #128	@ 0x80
 8001ec4:	2004      	movs	r0, #4
 8001ec6:	f7ff ff74 	bl	8001db2 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001eca:	2180      	movs	r1, #128	@ 0x80
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f7ff ff55 	bl	8001d7c <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7ff ff01 	bl	8001cdc <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	e00a      	b.n	8001ef6 <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	2009      	movs	r0, #9
 8001eec:	f7ff fef6 	bl	8001cdc <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	7bbb      	ldrb	r3, [r7, #14]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3f0      	bcc.n	8001ee0 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	4619      	mov	r1, r3
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff feea 	bl	8001cdc <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d103      	bne.n	8001f16 <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001f0e:	2180      	movs	r1, #128	@ 0x80
 8001f10:	200d      	movs	r0, #13
 8001f12:	f7ff ff33 	bl	8001d7c <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001f16:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f1a:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001f1c:	2004      	movs	r0, #4
 8001f1e:	f7ff ff03 	bl	8001d28 <Read_MFRC522>
 8001f22:	4603      	mov	r3, r0
 8001f24:	773b      	strb	r3, [r7, #28]
        i--;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <MFRC522_ToCard+0xd4>
 8001f32:	7f3b      	ldrb	r3, [r7, #28]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <MFRC522_ToCard+0xd4>
 8001f3c:	7f3a      	ldrb	r2, [r7, #28]
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	4013      	ands	r3, r2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0e9      	beq.n	8001f1c <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001f48:	2180      	movs	r1, #128	@ 0x80
 8001f4a:	200d      	movs	r0, #13
 8001f4c:	f7ff ff31 	bl	8001db2 <ClearBitMask>
	
    if (i != 0)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d052      	beq.n	8001ffc <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001f56:	2006      	movs	r0, #6
 8001f58:	f7ff fee6 	bl	8001d28 <Read_MFRC522>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f003 031b 	and.w	r3, r3, #27
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d148      	bne.n	8001ff8 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001f6a:	7f3a      	ldrb	r2, [r7, #28]
 8001f6c:	7fbb      	ldrb	r3, [r7, #30]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d13b      	bne.n	8001ffc <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001f84:	200a      	movs	r0, #10
 8001f86:	f7ff fecf 	bl	8001d28 <Read_MFRC522>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001f8e:	200c      	movs	r0, #12
 8001f90:	f7ff feca 	bl	8001d28 <Read_MFRC522>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8001fa2:	7f3b      	ldrb	r3, [r7, #28]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	00da      	lsls	r2, r3, #3
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	4413      	add	r3, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e004      	b.n	8001fbe <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8001fb4:	7f3b      	ldrb	r3, [r7, #28]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fbc:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001fbe:	7f3b      	ldrb	r3, [r7, #28]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001fc8:	7f3b      	ldrb	r3, [r7, #28]
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d901      	bls.n	8001fd2 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8001fce:	2310      	movs	r3, #16
 8001fd0:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	e00a      	b.n	8001fee <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	18d4      	adds	r4, r2, r3
 8001fde:	2009      	movs	r0, #9
 8001fe0:	f7ff fea2 	bl	8001d28 <Read_MFRC522>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	3301      	adds	r3, #1
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	7f3b      	ldrb	r3, [r7, #28]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3f0      	bcc.n	8001fd8 <MFRC522_ToCard+0x164>
 8001ff6:	e001      	b.n	8001ffc <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}

08002006 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af02      	add	r7, sp, #8
 800200c:	4603      	mov	r3, r0
 800200e:	6039      	str	r1, [r7, #0]
 8002010:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8002012:	2107      	movs	r1, #7
 8002014:	200d      	movs	r0, #13
 8002016:	f7ff fe61 	bl	8001cdc <Write_MFRC522>
	
	TagType[0] = reqMode;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002020:	f107 0308 	add.w	r3, r7, #8
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	200c      	movs	r0, #12
 800202e:	f7ff ff21 	bl	8001e74 <MFRC522_ToCard>
 8002032:	4603      	mov	r3, r0
 8002034:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <MFRC522_Request+0x3c>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d001      	beq.n	8002046 <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8002042:	2302      	movs	r3, #2
 8002044:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8002058:	2300      	movs	r3, #0
 800205a:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800205c:	2100      	movs	r1, #0
 800205e:	200d      	movs	r0, #13
 8002060:	f7ff fe3c 	bl	8001cdc <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2293      	movs	r2, #147	@ 0x93
 8002068:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3301      	adds	r3, #1
 800206e:	2220      	movs	r2, #32
 8002070:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	200c      	movs	r0, #12
 8002080:	f7ff fef8 	bl	8001e74 <MFRC522_ToCard>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d118      	bne.n	80020c0 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800208e:	2300      	movs	r3, #0
 8002090:	73bb      	strb	r3, [r7, #14]
 8002092:	e009      	b.n	80020a8 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	7b7b      	ldrb	r3, [r7, #13]
 800209e:	4053      	eors	r3, r2
 80020a0:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	3301      	adds	r3, #1
 80020a6:	73bb      	strb	r3, [r7, #14]
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d9f2      	bls.n	8002094 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80020ae:	7bbb      	ldrb	r3, [r7, #14]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	7b7a      	ldrb	r2, [r7, #13]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 80020bc:	2302      	movs	r3, #2
 80020be:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
} 
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_CAN_RxFifo0MsgPendingCallback>:
extern volatile uint8_t can_rx_flag;
extern volatile uint32_t can_rx_count ;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
//    HAL_UART_Transmit(&huart1, (uint8_t*)"INTERRUPT OK\r\n", 15, HAL_MAX_DELAY);
        HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rxData) ;
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80020d6:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80020d8:	2100      	movs	r1, #0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f004 f9f3 	bl	80064c6 <HAL_CAN_GetRxMessage>
                  can_rx_flag = 1;  // báo về main xử lý
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
                  can_rx_count++;  // tăng biến đếm khi nhận
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200007ac 	.word	0x200007ac
 80020fc:	20000790 	.word	0x20000790
 8002100:	200007b4 	.word	0x200007b4
 8002104:	200007c0 	.word	0x200007c0

08002108 <CAN_SendNonBlocking>:

HAL_StatusTypeDef CAN_SendNonBlocking(CAN_HandleTypeDef *hcan,
                                      CAN_TxHeaderTypeDef *header,
                                      uint8_t *data,
                                      uint32_t *mailbox)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
    // 1. Nếu còn slot trống → gửi luôn
    if (HAL_CAN_GetTxMailboxesFreeLevel(hcan) > 0) {
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f004 f9a0 	bl	800645c <HAL_CAN_GetTxMailboxesFreeLevel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <CAN_SendNonBlocking+0x2a>
        return HAL_CAN_AddTxMessage(hcan, header, data, mailbox);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f004 f882 	bl	8006232 <HAL_CAN_AddTxMessage>
 800212e:	4603      	mov	r3, r0
 8002130:	e018      	b.n	8002164 <CAN_SendNonBlocking+0x5c>
    }

    // 2. Nếu đầy → hủy hết pending để tránh nghẽn
    HAL_CAN_AbortTxRequest(hcan, 0x7);  // 0x7 = abort mailbox 0,1,2
 8002132:	2107      	movs	r1, #7
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f004 f94c 	bl	80063d2 <HAL_CAN_AbortTxRequest>

    // 3. Thử gửi lại frame mới (retry tối đa 3 lần)
    for (int retry = 0; retry < 3; retry++) {
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e00d      	b.n	800215c <CAN_SendNonBlocking+0x54>
        if (HAL_CAN_AddTxMessage(hcan, header, data, mailbox) == HAL_OK) {
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f004 f873 	bl	8006232 <HAL_CAN_AddTxMessage>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <CAN_SendNonBlocking+0x4e>
            return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e006      	b.n	8002164 <CAN_SendNonBlocking+0x5c>
    for (int retry = 0; retry < 3; retry++) {
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b02      	cmp	r3, #2
 8002160:	ddee      	ble.n	8002140 <CAN_SendNonBlocking+0x38>
        }
    }

    // Nếu sau retry vẫn lỗi thì trả về HAL_ERROR
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <BNO055_IsStable>:
}



bool BNO055_IsStable(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
    return (HAL_GetTick() - imu_reset_time > 600);  // chờ 1 giây
 8002170:	f003 f8ee 	bl	8005350 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	@ (800218c <BNO055_IsStable+0x20>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002180:	bf8c      	ite	hi
 8002182:	2301      	movhi	r3, #1
 8002184:	2300      	movls	r3, #0
 8002186:	b2db      	uxtb	r3, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	2000031c 	.word	0x2000031c

08002190 <CAN_SendTopicData>:
    }

    return status;
}
HAL_StatusTypeDef CAN_SendTopicData(uint16_t topic_id, uint8_t *data, uint8_t len)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	80fb      	strh	r3, [r7, #6]
 800219c:	4613      	mov	r3, r2
 800219e:	717b      	strb	r3, [r7, #5]
    uint32_t TxMailbox;
    HAL_StatusTypeDef status;
    uint32_t start = HAL_GetTick();
 80021a0:	f003 f8d6 	bl	8005350 <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]
    const uint32_t timeout_ms = 3;   // thời gian retry tối đa (5ms)
 80021a6:	2303      	movs	r3, #3
 80021a8:	613b      	str	r3, [r7, #16]

    if (len > 8) len = 8;
 80021aa:	797b      	ldrb	r3, [r7, #5]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d901      	bls.n	80021b4 <CAN_SendTopicData+0x24>
 80021b0:	2308      	movs	r3, #8
 80021b2:	717b      	strb	r3, [r7, #5]

    TxHeader.StdId = topic_id;
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002220 <CAN_SendTopicData+0x90>)
 80021b8:	6013      	str	r3, [r2, #0]
    TxHeader.IDE = CAN_ID_STD;
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <CAN_SendTopicData+0x90>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80021c0:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <CAN_SendTopicData+0x90>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = len;
 80021c6:	797b      	ldrb	r3, [r7, #5]
 80021c8:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <CAN_SendTopicData+0x90>)
 80021ca:	6113      	str	r3, [r2, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 80021cc:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <CAN_SendTopicData+0x90>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	751a      	strb	r2, [r3, #20]
    }
    snprintf(log + offset, sizeof(log) - offset, "\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t*)log, strlen(log), 1);
#endif

    can_tx_count++;
 80021d2:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <CAN_SendTopicData+0x94>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <CAN_SendTopicData+0x94>)
 80021da:	6013      	str	r3, [r2, #0]

    // --- Retry loop ---
    do {
        if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0) {
 80021dc:	4812      	ldr	r0, [pc, #72]	@ (8002228 <CAN_SendTopicData+0x98>)
 80021de:	f004 f93d 	bl	800645c <HAL_CAN_GetTxMailboxesFreeLevel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00d      	beq.n	8002204 <CAN_SendTopicData+0x74>
            status = CAN_SendNonBlocking(&hcan1, &TxHeader, data, &TxMailbox);
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	490c      	ldr	r1, [pc, #48]	@ (8002220 <CAN_SendTopicData+0x90>)
 80021f0:	480d      	ldr	r0, [pc, #52]	@ (8002228 <CAN_SendTopicData+0x98>)
 80021f2:	f7ff ff89 	bl	8002108 <CAN_SendNonBlocking>
 80021f6:	4603      	mov	r3, r0
 80021f8:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) {
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <CAN_SendTopicData+0x74>
                return HAL_OK;  // gửi thành công
 8002200:	2300      	movs	r3, #0
 8002202:	e008      	b.n	8002216 <CAN_SendTopicData+0x86>
            }
        }
        // Nếu mailbox vẫn bận, chờ 1 tick rồi thử lại
    } while ((HAL_GetTick() - start) < timeout_ms);
 8002204:	f003 f8a4 	bl	8005350 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d8e3      	bhi.n	80021dc <CAN_SendTopicData+0x4c>

    // Nếu hết thời gian vẫn không gửi được
    return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
//            CAN_IT_LAST_ERROR_CODE |
//            CAN_IT_ERROR);
        NVIC_SystemReset();

    }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000778 	.word	0x20000778
 8002224:	200007bc 	.word	0x200007bc
 8002228:	200003dc 	.word	0x200003dc

0800222c <Send_All_SensorData_CAN>:
extern uint32_t imu_timer;
extern volatile uint8_t timer10ms_flag ;


void Send_All_SensorData_CAN(void)
{
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b08c      	sub	sp, #48	@ 0x30
 8002230:	af00      	add	r7, sp, #0
	static uint32_t last_us_trigger_time ;

    if (timer10ms_flag) {
 8002232:	4b58      	ldr	r3, [pc, #352]	@ (8002394 <Send_All_SensorData_CAN+0x168>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <Send_All_SensorData_CAN+0x38>
        timer10ms_flag = 0;
 800223c:	4b55      	ldr	r3, [pc, #340]	@ (8002394 <Send_All_SensorData_CAN+0x168>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
//        BNO055_SendEulerCAN();
        if (BNO055_IsStable()) {
 8002242:	f7ff ff93 	bl	800216c <BNO055_IsStable>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <Send_All_SensorData_CAN+0x26>
              BNO055_SendEulerCAN();
 800224c:	f7ff fa62 	bl	8001714 <BNO055_SendEulerCAN>
 8002250:	e008      	b.n	8002264 <Send_All_SensorData_CAN+0x38>
          } else {
              // bỏ qua dữ liệu trong lúc IMU đang ổn định lại
              HAL_I2C_DeInit(&bno_i2c);
 8002252:	4851      	ldr	r0, [pc, #324]	@ (8002398 <Send_All_SensorData_CAN+0x16c>)
 8002254:	f005 fdb6 	bl	8007dc4 <HAL_I2C_DeInit>
              HAL_Delay(5);
 8002258:	2005      	movs	r0, #5
 800225a:	f003 f885 	bl	8005368 <HAL_Delay>
              HAL_I2C_Init(&bno_i2c);
 800225e:	484e      	ldr	r0, [pc, #312]	@ (8002398 <Send_All_SensorData_CAN+0x16c>)
 8002260:	f005 fc6c 	bl	8007b3c <HAL_I2C_Init>

          }
    }

    if (HAL_GetTick() - debug_timer >= 20) {
 8002264:	f003 f874 	bl	8005350 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	4b4c      	ldr	r3, [pc, #304]	@ (800239c <Send_All_SensorData_CAN+0x170>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b13      	cmp	r3, #19
 8002272:	d906      	bls.n	8002282 <Send_All_SensorData_CAN+0x56>
        BNO055_PrintEulerDebug();
 8002274:	f7ff faaa 	bl	80017cc <BNO055_PrintEulerDebug>
        debug_timer = HAL_GetTick();
 8002278:	f003 f86a 	bl	8005350 <HAL_GetTick>
 800227c:	4603      	mov	r3, r0
 800227e:	4a47      	ldr	r2, [pc, #284]	@ (800239c <Send_All_SensorData_CAN+0x170>)
 8002280:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - last_us_trigger_time >= 400) {
 8002282:	f003 f865 	bl	8005350 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	4b45      	ldr	r3, [pc, #276]	@ (80023a0 <Send_All_SensorData_CAN+0x174>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002292:	d30a      	bcc.n	80022aa <Send_All_SensorData_CAN+0x7e>
            US01_TriggerAll_Sequential();      // Blocking đo 4 cảm biến
 8002294:	f002 ff93 	bl	80051be <US01_TriggerAll_Sequential>
            PrintAllDistances();               // UART in khoảng cách
 8002298:	f002 ffaa 	bl	80051f0 <PrintAllDistances>
            US01_SendAllDistances_CAN();       // Gửi qua CAN
 800229c:	f002 ff56 	bl	800514c <US01_SendAllDistances_CAN>
            last_us_trigger_time = HAL_GetTick();
 80022a0:	f003 f856 	bl	8005350 <HAL_GetTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4a3e      	ldr	r2, [pc, #248]	@ (80023a0 <Send_All_SensorData_CAN+0x174>)
 80022a8:	6013      	str	r3, [r2, #0]
        }



    static uint32_t last_mq135_time = 0;
    if (HAL_GetTick() - last_mq135_time >= 1000) {
 80022aa:	f003 f851 	bl	8005350 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	4b3c      	ldr	r3, [pc, #240]	@ (80023a4 <Send_All_SensorData_CAN+0x178>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022ba:	d30d      	bcc.n	80022d8 <Send_All_SensorData_CAN+0xac>
        MQ135_Send_CAN(&mq135, 25.0f, 50.0f, &huart1, TOPIC_ID_MQ135);  // Dùng hàm DMA mới
 80022bc:	2211      	movs	r2, #17
 80022be:	493a      	ldr	r1, [pc, #232]	@ (80023a8 <Send_All_SensorData_CAN+0x17c>)
 80022c0:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 80023ac <Send_All_SensorData_CAN+0x180>
 80022c4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80022c8:	4839      	ldr	r0, [pc, #228]	@ (80023b0 <Send_All_SensorData_CAN+0x184>)
 80022ca:	f7ff fca5 	bl	8001c18 <MQ135_Send_CAN>
        last_mq135_time = HAL_GetTick();
 80022ce:	f003 f83f 	bl	8005350 <HAL_GetTick>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4a33      	ldr	r2, [pc, #204]	@ (80023a4 <Send_All_SensorData_CAN+0x178>)
 80022d6:	6013      	str	r3, [r2, #0]
    }
    checkRFIDAndControlRelay();
 80022d8:	f001 fc96 	bl	8003c08 <checkRFIDAndControlRelay>
    static uint32_t last_can_tx = 0;
    static uint8_t can_fail_count = 0;

    if (HAL_GetTick() - last_can_tx >= 300) { // kiểm tra mỗi giây
 80022dc:	f003 f838 	bl	8005350 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b34      	ldr	r3, [pc, #208]	@ (80023b4 <Send_All_SensorData_CAN+0x188>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80022ec:	d34e      	bcc.n	800238c <Send_All_SensorData_CAN+0x160>
        if (can_tx_count == 0 && can_rx_count == 0) {
 80022ee:	4b32      	ldr	r3, [pc, #200]	@ (80023b8 <Send_All_SensorData_CAN+0x18c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <Send_All_SensorData_CAN+0xe0>
 80022f6:	4b31      	ldr	r3, [pc, #196]	@ (80023bc <Send_All_SensorData_CAN+0x190>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <Send_All_SensorData_CAN+0xe0>
            can_fail_count++;
 80022fe:	4b30      	ldr	r3, [pc, #192]	@ (80023c0 <Send_All_SensorData_CAN+0x194>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b2e      	ldr	r3, [pc, #184]	@ (80023c0 <Send_All_SensorData_CAN+0x194>)
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e002      	b.n	8002312 <Send_All_SensorData_CAN+0xe6>
        } else {
            can_fail_count = 0;
 800230c:	4b2c      	ldr	r3, [pc, #176]	@ (80023c0 <Send_All_SensorData_CAN+0x194>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
        }

        if (can_fail_count >= 3) { // 3 giây không có hoạt động
 8002312:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <Send_All_SensorData_CAN+0x194>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d92d      	bls.n	8002376 <Send_All_SensorData_CAN+0x14a>
            char msg[] = "⚠️ CAN watchdog triggered, reinit...\r\n";
 800231a:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <Send_All_SensorData_CAN+0x198>)
 800231c:	1d3c      	adds	r4, r7, #4
 800231e:	461d      	mov	r5, r3
 8002320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800232c:	c403      	stmia	r4!, {r0, r1}
 800232e:	8022      	strh	r2, [r4, #0]
 8002330:	3402      	adds	r4, #2
 8002332:	0c13      	lsrs	r3, r2, #16
 8002334:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	4618      	mov	r0, r3
 800233a:	f7fd ff99 	bl	8000270 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	b29a      	uxth	r2, r3
 8002342:	1d39      	adds	r1, r7, #4
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	4817      	ldr	r0, [pc, #92]	@ (80023a8 <Send_All_SensorData_CAN+0x17c>)
 800234a:	f00a fb81 	bl	800ca50 <HAL_UART_Transmit>

            // Reset lại CAN1 hoàn chỉnh
            HAL_CAN_Stop(&hcan1);
 800234e:	481e      	ldr	r0, [pc, #120]	@ (80023c8 <Send_All_SensorData_CAN+0x19c>)
 8002350:	f003 ff26 	bl	80061a0 <HAL_CAN_Stop>
            HAL_CAN_DeInit(&hcan1);
 8002354:	481c      	ldr	r0, [pc, #112]	@ (80023c8 <Send_All_SensorData_CAN+0x19c>)
 8002356:	f003 fdde 	bl	8005f16 <HAL_CAN_DeInit>
            HAL_CAN_Init(&hcan1);
 800235a:	481b      	ldr	r0, [pc, #108]	@ (80023c8 <Send_All_SensorData_CAN+0x19c>)
 800235c:	f003 fce0 	bl	8005d20 <HAL_CAN_Init>
            HAL_CAN_Start(&hcan1);
 8002360:	4819      	ldr	r0, [pc, #100]	@ (80023c8 <Send_All_SensorData_CAN+0x19c>)
 8002362:	f003 fed9 	bl	8006118 <HAL_CAN_Start>


            // Bật lại interrupt
            HAL_CAN_ActivateNotification(&hcan1,
 8002366:	f44f 410f 	mov.w	r1, #36608	@ 0x8f00
 800236a:	4817      	ldr	r0, [pc, #92]	@ (80023c8 <Send_All_SensorData_CAN+0x19c>)
 800236c:	f004 f9f5 	bl	800675a <HAL_CAN_ActivateNotification>
                CAN_IT_BUSOFF |
                CAN_IT_LAST_ERROR_CODE |
                CAN_IT_ERROR);


            can_fail_count = 0;
 8002370:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <Send_All_SensorData_CAN+0x194>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
        }

        can_tx_count = 0;
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <Send_All_SensorData_CAN+0x18c>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
        can_rx_count = 0;
 800237c:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <Send_All_SensorData_CAN+0x190>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
        last_can_tx = HAL_GetTick();
 8002382:	f002 ffe5 	bl	8005350 <HAL_GetTick>
 8002386:	4603      	mov	r3, r0
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <Send_All_SensorData_CAN+0x188>)
 800238a:	6013      	str	r3, [r2, #0]
    }

}
 800238c:	bf00      	nop
 800238e:	3730      	adds	r7, #48	@ 0x30
 8002390:	46bd      	mov	sp, r7
 8002392:	bdb0      	pop	{r4, r5, r7, pc}
 8002394:	200007c8 	.word	0x200007c8
 8002398:	20000434 	.word	0x20000434
 800239c:	200007b8 	.word	0x200007b8
 80023a0:	20000320 	.word	0x20000320
 80023a4:	20000324 	.word	0x20000324
 80023a8:	200006d8 	.word	0x200006d8
 80023ac:	42480000 	.word	0x42480000
 80023b0:	2000075c 	.word	0x2000075c
 80023b4:	20000328 	.word	0x20000328
 80023b8:	200007bc 	.word	0x200007bc
 80023bc:	200007c0 	.word	0x200007c0
 80023c0:	2000032c 	.word	0x2000032c
 80023c4:	08011788 	.word	0x08011788
 80023c8:	200003dc 	.word	0x200003dc

080023cc <check_it>:
    char adc[32];
    sprintf(adc, "ADC VALUE: %d\r\n", adc_value);
    HAL_UART_Transmit(&huart1, (uint8_t*)adc, strlen(adc), HAL_MAX_DELAY);
}

void check_it(TIM_HandleTypeDef *htimx) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b094      	sub	sp, #80	@ 0x50
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    char *timer_name = "UNKNOWN";
 80023d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002448 <check_it+0x7c>)
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (htimx->Instance == TIM1) timer_name = "TIM1";
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1b      	ldr	r2, [pc, #108]	@ (800244c <check_it+0x80>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d102      	bne.n	80023e8 <check_it+0x1c>
 80023e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <check_it+0x84>)
 80023e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023e6:	e016      	b.n	8002416 <check_it+0x4a>
    else if (htimx->Instance == TIM2) timer_name = "TIM2";
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f0:	d102      	bne.n	80023f8 <check_it+0x2c>
 80023f2:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <check_it+0x88>)
 80023f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023f6:	e00e      	b.n	8002416 <check_it+0x4a>
    else if (htimx->Instance == TIM4) timer_name = "TIM4";
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a16      	ldr	r2, [pc, #88]	@ (8002458 <check_it+0x8c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d102      	bne.n	8002408 <check_it+0x3c>
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <check_it+0x90>)
 8002404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002406:	e006      	b.n	8002416 <check_it+0x4a>
    else if (htimx->Instance == TIM8) timer_name = "TIM8";
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <check_it+0x94>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <check_it+0x4a>
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <check_it+0x98>)
 8002414:	64fb      	str	r3, [r7, #76]	@ 0x4c

    char msg[64];
    snprintf(msg, sizeof(msg), ">> [INTERRUPT] Callback from %s\r\n", timer_name);
 8002416:	f107 000c 	add.w	r0, r7, #12
 800241a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800241c:	4a12      	ldr	r2, [pc, #72]	@ (8002468 <check_it+0x9c>)
 800241e:	2140      	movs	r1, #64	@ 0x40
 8002420:	f00c f854 	bl	800e4cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ff21 	bl	8000270 <strlen>
 800242e:	4603      	mov	r3, r0
 8002430:	b29a      	uxth	r2, r3
 8002432:	f107 010c 	add.w	r1, r7, #12
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
 800243a:	480c      	ldr	r0, [pc, #48]	@ (800246c <check_it+0xa0>)
 800243c:	f00a fb08 	bl	800ca50 <HAL_UART_Transmit>
}
 8002440:	bf00      	nop
 8002442:	3750      	adds	r7, #80	@ 0x50
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	08011810 	.word	0x08011810
 800244c:	40010000 	.word	0x40010000
 8002450:	08011818 	.word	0x08011818
 8002454:	08011820 	.word	0x08011820
 8002458:	40000800 	.word	0x40000800
 800245c:	08011828 	.word	0x08011828
 8002460:	40010400 	.word	0x40010400
 8002464:	08011830 	.word	0x08011830
 8002468:	08011838 	.word	0x08011838
 800246c:	200006d8 	.word	0x200006d8

08002470 <Process_Ultrasonic_And_Control_Relay>:
#include "led_control.h"

extern CAN_HandleTypeDef hcan1;

void Process_Ultrasonic_And_Control_Relay(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
    static uint8_t initialized = 0;

    uint32_t Truoc2 = US01_GetDistance(0);
 8002476:	2000      	movs	r0, #0
 8002478:	f002 fe3c 	bl	80050f4 <US01_GetDistance>
 800247c:	61b8      	str	r0, [r7, #24]
    uint32_t Truoc1 = US01_GetDistance(2);
 800247e:	2002      	movs	r0, #2
 8002480:	f002 fe38 	bl	80050f4 <US01_GetDistance>
 8002484:	6178      	str	r0, [r7, #20]
    uint32_t Trai   = US01_GetDistance(1);
 8002486:	2001      	movs	r0, #1
 8002488:	f002 fe34 	bl	80050f4 <US01_GetDistance>
 800248c:	6138      	str	r0, [r7, #16]
    uint32_t Phai   = US01_GetDistance(3);
 800248e:	2003      	movs	r0, #3
 8002490:	f002 fe30 	bl	80050f4 <US01_GetDistance>
 8002494:	60f8      	str	r0, [r7, #12]

    if (!initialized) {
 8002496:	4b5d      	ldr	r3, [pc, #372]	@ (800260c <Process_Ultrasonic_And_Control_Relay+0x19c>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <Process_Ultrasonic_And_Control_Relay+0x4a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // Đỏ OFF
 800249e:	2200      	movs	r2, #0
 80024a0:	2104      	movs	r1, #4
 80024a2:	485b      	ldr	r0, [pc, #364]	@ (8002610 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80024a4:	f005 fb30 	bl	8007b08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Xanh ON
 80024a8:	2201      	movs	r2, #1
 80024aa:	2108      	movs	r1, #8
 80024ac:	4858      	ldr	r0, [pc, #352]	@ (8002610 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80024ae:	f005 fb2b 	bl	8007b08 <HAL_GPIO_WritePin>
        initialized = 1;
 80024b2:	4b56      	ldr	r3, [pc, #344]	@ (800260c <Process_Ultrasonic_And_Control_Relay+0x19c>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e0a4      	b.n	8002604 <Process_Ultrasonic_And_Control_Relay+0x194>
        return;
    }

    // Kiểm tra các vùng
    bool Truoc_OK  = (Truoc1 < 30 && Truoc1 != 0) || (Truoc2 < 30 && Truoc2 != 0);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b1d      	cmp	r3, #29
 80024be:	d802      	bhi.n	80024c6 <Process_Ultrasonic_And_Control_Relay+0x56>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <Process_Ultrasonic_And_Control_Relay+0x62>
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b1d      	cmp	r3, #29
 80024ca:	d804      	bhi.n	80024d6 <Process_Ultrasonic_And_Control_Relay+0x66>
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <Process_Ultrasonic_And_Control_Relay+0x66>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <Process_Ultrasonic_And_Control_Relay+0x68>
 80024d6:	2300      	movs	r3, #0
 80024d8:	72fb      	strb	r3, [r7, #11]
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	72fb      	strb	r3, [r7, #11]
    bool HaiBen_OK = (Trai   < 25 && Trai   != 0) || (Phai   < 25 && Phai   != 0);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b18      	cmp	r3, #24
 80024e6:	d802      	bhi.n	80024ee <Process_Ultrasonic_And_Control_Relay+0x7e>
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <Process_Ultrasonic_And_Control_Relay+0x8a>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b18      	cmp	r3, #24
 80024f2:	d804      	bhi.n	80024fe <Process_Ultrasonic_And_Control_Relay+0x8e>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <Process_Ultrasonic_And_Control_Relay+0x8e>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <Process_Ultrasonic_And_Control_Relay+0x90>
 80024fe:	2300      	movs	r3, #0
 8002500:	72bb      	strb	r3, [r7, #10]
 8002502:	7abb      	ldrb	r3, [r7, #10]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	72bb      	strb	r3, [r7, #10]
    bool BaBen_OK  = Truoc_OK && HaiBen_OK;
 800250a:	7afb      	ldrb	r3, [r7, #11]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <Process_Ultrasonic_And_Control_Relay+0xaa>
 8002510:	7abb      	ldrb	r3, [r7, #10]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <Process_Ultrasonic_And_Control_Relay+0xaa>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <Process_Ultrasonic_And_Control_Relay+0xac>
 800251a:	2300      	movs	r3, #0
 800251c:	727b      	strb	r3, [r7, #9]
 800251e:	7a7b      	ldrb	r3, [r7, #9]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	727b      	strb	r3, [r7, #9]
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
                     (Truoc2 < 25 && Truoc2 != 0) &&
                     (Trai   < 20 && Trai   != 0) &&
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b18      	cmp	r3, #24
 800252a:	d816      	bhi.n	800255a <Process_Ultrasonic_And_Control_Relay+0xea>
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d013      	beq.n	800255a <Process_Ultrasonic_And_Control_Relay+0xea>
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b18      	cmp	r3, #24
 8002536:	d810      	bhi.n	800255a <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Truoc2 < 25 && Truoc2 != 0) &&
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <Process_Ultrasonic_And_Control_Relay+0xea>
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b13      	cmp	r3, #19
 8002542:	d80a      	bhi.n	800255a <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Trai   < 20 && Trai   != 0) &&
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <Process_Ultrasonic_And_Control_Relay+0xea>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b13      	cmp	r3, #19
 800254e:	d804      	bhi.n	800255a <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Phai   < 20 && Phai   != 0);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Trai   < 20 && Trai   != 0) &&
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <Process_Ultrasonic_And_Control_Relay+0xec>
 800255a:	2300      	movs	r3, #0
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
 800255c:	723b      	strb	r3, [r7, #8]
 800255e:	7a3b      	ldrb	r3, [r7, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	723b      	strb	r3, [r7, #8]

    uint8_t signal = 0x00;
 8002566:	2300      	movs	r3, #0
 8002568:	77fb      	strb	r3, [r7, #31]

    // Xác định giá trị gửi
    if (TatCa_OK) {
 800256a:	7a3b      	ldrb	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <Process_Ultrasonic_And_Control_Relay+0x106>
        signal = 0x03;
 8002570:	2303      	movs	r3, #3
 8002572:	77fb      	strb	r3, [r7, #31]
 8002574:	e00d      	b.n	8002592 <Process_Ultrasonic_And_Control_Relay+0x122>
    } else if (BaBen_OK) {
 8002576:	7a7b      	ldrb	r3, [r7, #9]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <Process_Ultrasonic_And_Control_Relay+0x112>
        signal = 0x02;
 800257c:	2302      	movs	r3, #2
 800257e:	77fb      	strb	r3, [r7, #31]
 8002580:	e007      	b.n	8002592 <Process_Ultrasonic_And_Control_Relay+0x122>
    } else if (Truoc_OK) {
 8002582:	7afb      	ldrb	r3, [r7, #11]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <Process_Ultrasonic_And_Control_Relay+0x11e>
        signal = 0x01;
 8002588:	2301      	movs	r3, #1
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	e001      	b.n	8002592 <Process_Ultrasonic_And_Control_Relay+0x122>
    } else {
        signal = 0x00; // Ra khỏi 3 trường hợp trên
 800258e:	2300      	movs	r3, #0
 8002590:	77fb      	strb	r3, [r7, #31]
    }

    // Điều khiển đèn
    if (TatCa_OK || BaBen_OK || Truoc_OK || HaiBen_OK) {
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d108      	bne.n	80025aa <Process_Ultrasonic_And_Control_Relay+0x13a>
 8002598:	7a7b      	ldrb	r3, [r7, #9]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <Process_Ultrasonic_And_Control_Relay+0x13a>
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d102      	bne.n	80025aa <Process_Ultrasonic_And_Control_Relay+0x13a>
 80025a4:	7abb      	ldrb	r3, [r7, #10]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <Process_Ultrasonic_And_Control_Relay+0x150>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Đỏ ON
 80025aa:	2201      	movs	r2, #1
 80025ac:	2104      	movs	r1, #4
 80025ae:	4818      	ldr	r0, [pc, #96]	@ (8002610 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80025b0:	f005 faaa 	bl	8007b08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // Xanh OFF
 80025b4:	2200      	movs	r2, #0
 80025b6:	2108      	movs	r1, #8
 80025b8:	4815      	ldr	r0, [pc, #84]	@ (8002610 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80025ba:	f005 faa5 	bl	8007b08 <HAL_GPIO_WritePin>
 80025be:	e009      	b.n	80025d4 <Process_Ultrasonic_And_Control_Relay+0x164>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // Đỏ OFF
 80025c0:	2200      	movs	r2, #0
 80025c2:	2104      	movs	r1, #4
 80025c4:	4812      	ldr	r0, [pc, #72]	@ (8002610 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80025c6:	f005 fa9f 	bl	8007b08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Xanh ON
 80025ca:	2201      	movs	r2, #1
 80025cc:	2108      	movs	r1, #8
 80025ce:	4810      	ldr	r0, [pc, #64]	@ (8002610 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80025d0:	f005 fa9a 	bl	8007b08 <HAL_GPIO_WritePin>
    }

    // Luôn gửi giá trị hiện tại nhưng không để LED bị treo nếu CAN lỗi
    uint8_t data[8] = {0};
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
    data[0] = signal;
 80025dc:	7ffb      	ldrb	r3, [r7, #31]
 80025de:	703b      	strb	r3, [r7, #0]
    if (HAL_CAN_GetState(&hcan1) == HAL_CAN_STATE_READY ||
 80025e0:	480c      	ldr	r0, [pc, #48]	@ (8002614 <Process_Ultrasonic_And_Control_Relay+0x1a4>)
 80025e2:	f004 fae7 	bl	8006bb4 <HAL_CAN_GetState>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d005      	beq.n	80025f8 <Process_Ultrasonic_And_Control_Relay+0x188>
        HAL_CAN_GetState(&hcan1) == HAL_CAN_STATE_LISTENING)
 80025ec:	4809      	ldr	r0, [pc, #36]	@ (8002614 <Process_Ultrasonic_And_Control_Relay+0x1a4>)
 80025ee:	f004 fae1 	bl	8006bb4 <HAL_CAN_GetState>
 80025f2:	4603      	mov	r3, r0
    if (HAL_CAN_GetState(&hcan1) == HAL_CAN_STATE_READY ||
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d105      	bne.n	8002604 <Process_Ultrasonic_And_Control_Relay+0x194>
    {
        if (CAN_SendTopicData(TOPIC_ID_SENSOR, data, 8) != HAL_OK) {
 80025f8:	463b      	mov	r3, r7
 80025fa:	2208      	movs	r2, #8
 80025fc:	4619      	mov	r1, r3
 80025fe:	2024      	movs	r0, #36	@ 0x24
 8002600:	f7ff fdc6 	bl	8002190 <CAN_SendTopicData>
            // Bỏ qua lỗi CAN, LED vẫn hoạt động
        }
    }

}
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000032d 	.word	0x2000032d
 8002610:	40020000 	.word	0x40020000
 8002614:	200003dc 	.word	0x200003dc

08002618 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8002622:	4a38      	ldr	r2, [pc, #224]	@ (8002704 <HD44780_Init+0xec>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002628:	4b37      	ldr	r3, [pc, #220]	@ (8002708 <HD44780_Init+0xf0>)
 800262a:	2208      	movs	r2, #8
 800262c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800262e:	4b37      	ldr	r3, [pc, #220]	@ (800270c <HD44780_Init+0xf4>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8002634:	4b33      	ldr	r3, [pc, #204]	@ (8002704 <HD44780_Init+0xec>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d907      	bls.n	800264c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800263c:	4b33      	ldr	r3, [pc, #204]	@ (800270c <HD44780_Init+0xf4>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b31      	ldr	r3, [pc, #196]	@ (800270c <HD44780_Init+0xf4>)
 8002648:	701a      	strb	r2, [r3, #0]
 800264a:	e006      	b.n	800265a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800264c:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <HD44780_Init+0xf4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HD44780_Init+0xf4>)
 8002658:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800265a:	f000 f94b 	bl	80028f4 <DelayInit>
  HAL_Delay(50);
 800265e:	2032      	movs	r0, #50	@ 0x32
 8002660:	f002 fe82 	bl	8005368 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8002664:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <HD44780_Init+0xf0>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f909 	bl	8002880 <ExpanderWrite>
  HAL_Delay(1000);
 800266e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002672:	f002 fe79 	bl	8005368 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8002676:	2030      	movs	r0, #48	@ 0x30
 8002678:	f000 f8f1 	bl	800285e <Write4Bits>
  DelayUS(4500);
 800267c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002680:	f000 f962 	bl	8002948 <DelayUS>

  Write4Bits(0x03 << 4);
 8002684:	2030      	movs	r0, #48	@ 0x30
 8002686:	f000 f8ea 	bl	800285e <Write4Bits>
  DelayUS(4500);
 800268a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800268e:	f000 f95b 	bl	8002948 <DelayUS>

  Write4Bits(0x03 << 4);
 8002692:	2030      	movs	r0, #48	@ 0x30
 8002694:	f000 f8e3 	bl	800285e <Write4Bits>
  DelayUS(4500);
 8002698:	f241 1094 	movw	r0, #4500	@ 0x1194
 800269c:	f000 f954 	bl	8002948 <DelayUS>

  Write4Bits(0x02 << 4);
 80026a0:	2020      	movs	r0, #32
 80026a2:	f000 f8dc 	bl	800285e <Write4Bits>
  DelayUS(100);
 80026a6:	2064      	movs	r0, #100	@ 0x64
 80026a8:	f000 f94e 	bl	8002948 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80026ac:	4b17      	ldr	r3, [pc, #92]	@ (800270c <HD44780_Init+0xf4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f043 0320 	orr.w	r3, r3, #32
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f894 	bl	80027e4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <HD44780_Init+0xf8>)
 80026be:	2204      	movs	r2, #4
 80026c0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80026c2:	f000 f843 	bl	800274c <HD44780_Display>
  HD44780_Clear();
 80026c6:	f000 f82b 	bl	8002720 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80026ca:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HD44780_Init+0xfc>)
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80026d0:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <HD44780_Init+0xfc>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f882 	bl	80027e4 <SendCommand>
  DelayUS(4500);
 80026e0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80026e4:	f000 f930 	bl	8002948 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80026e8:	490b      	ldr	r1, [pc, #44]	@ (8002718 <HD44780_Init+0x100>)
 80026ea:	2000      	movs	r0, #0
 80026ec:	f000 f844 	bl	8002778 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80026f0:	490a      	ldr	r1, [pc, #40]	@ (800271c <HD44780_Init+0x104>)
 80026f2:	2001      	movs	r0, #1
 80026f4:	f000 f840 	bl	8002778 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80026f8:	f000 f81d 	bl	8002736 <HD44780_Home>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000331 	.word	0x20000331
 8002708:	20000332 	.word	0x20000332
 800270c:	2000032e 	.word	0x2000032e
 8002710:	2000032f 	.word	0x2000032f
 8002714:	20000330 	.word	0x20000330
 8002718:	20000000 	.word	0x20000000
 800271c:	20000008 	.word	0x20000008

08002720 <HD44780_Clear>:

void HD44780_Clear()
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8002724:	2001      	movs	r0, #1
 8002726:	f000 f85d 	bl	80027e4 <SendCommand>
  DelayUS(2000);
 800272a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800272e:	f000 f90b 	bl	8002948 <DelayUS>
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}

08002736 <HD44780_Home>:

void HD44780_Home()
{
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800273a:	2002      	movs	r0, #2
 800273c:	f000 f852 	bl	80027e4 <SendCommand>
  DelayUS(2000);
 8002740:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002744:	f000 f900 	bl	8002948 <DelayUS>
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002750:	4b08      	ldr	r3, [pc, #32]	@ (8002774 <HD44780_Display+0x28>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HD44780_Display+0x28>)
 800275c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HD44780_Display+0x28>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f83b 	bl	80027e4 <SendCommand>
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000032f 	.word	0x2000032f

08002778 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	b25b      	sxtb	r3, r3
 8002794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002798:	b25b      	sxtb	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f821 	bl	80027e4 <SendCommand>
  for (int i=0; i<8; i++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	e009      	b.n	80027bc <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f825 	bl	8002800 <SendChar>
  for (int i=0; i<8; i++)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b07      	cmp	r3, #7
 80027c0:	ddf2      	ble.n	80027a8 <HD44780_CreateSpecialChar+0x30>
  }
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80027d0:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <HD44780_Backlight+0x14>)
 80027d2:	2208      	movs	r2, #8
 80027d4:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f000 f852 	bl	8002880 <ExpanderWrite>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000332 	.word	0x20000332

080027e4 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f812 	bl	800281c <Send>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SendChar>:

static void SendChar(uint8_t ch)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f804 	bl	800281c <Send>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	460a      	mov	r2, r1
 8002826:	71fb      	strb	r3, [r7, #7]
 8002828:	4613      	mov	r3, r2
 800282a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f023 030f 	bic.w	r3, r3, #15
 8002832:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	79bb      	ldrb	r3, [r7, #6]
 800283e:	4313      	orrs	r3, r2
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f80b 	bl	800285e <Write4Bits>
  Write4Bits((lownib)|mode);
 8002848:	7bba      	ldrb	r2, [r7, #14]
 800284a:	79bb      	ldrb	r3, [r7, #6]
 800284c:	4313      	orrs	r3, r2
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f804 	bl	800285e <Write4Bits>
}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f808 	bl	8002880 <ExpanderWrite>
  PulseEnable(value);
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f820 	bl	80028b8 <PulseEnable>
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800288a:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <ExpanderWrite+0x30>)
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4313      	orrs	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002896:	f107 020f 	add.w	r2, r7, #15
 800289a:	230a      	movs	r3, #10
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	214e      	movs	r1, #78	@ 0x4e
 80028a2:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <ExpanderWrite+0x34>)
 80028a4:	f005 fad2 	bl	8007e4c <HAL_I2C_Master_Transmit>
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000332 	.word	0x20000332
 80028b4:	20000434 	.word	0x20000434

080028b8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ffd8 	bl	8002880 <ExpanderWrite>
  DelayUS(20);
 80028d0:	2014      	movs	r0, #20
 80028d2:	f000 f839 	bl	8002948 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ffce 	bl	8002880 <ExpanderWrite>
  DelayUS(20);
 80028e4:	2014      	movs	r0, #20
 80028e6:	f000 f82f 	bl	8002948 <DelayUS>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <DelayInit>:

static void DelayInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <DelayInit+0x4c>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a10      	ldr	r2, [pc, #64]	@ (8002940 <DelayInit+0x4c>)
 80028fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002902:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002904:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <DelayInit+0x4c>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <DelayInit+0x4c>)
 800290a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800290e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <DelayInit+0x50>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0b      	ldr	r2, [pc, #44]	@ (8002944 <DelayInit+0x50>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <DelayInit+0x50>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a08      	ldr	r2, [pc, #32]	@ (8002944 <DelayInit+0x50>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <DelayInit+0x50>)
 800292a:	2200      	movs	r2, #0
 800292c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800292e:	bf00      	nop
  __ASM volatile ("NOP");
 8002930:	bf00      	nop
  __ASM volatile ("NOP");
 8002932:	bf00      	nop
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000edf0 	.word	0xe000edf0
 8002944:	e0001000 	.word	0xe0001000

08002948 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <DelayUS+0x44>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0e      	ldr	r2, [pc, #56]	@ (8002990 <DelayUS+0x48>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0c9a      	lsrs	r2, r3, #18
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <DelayUS+0x4c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <DelayUS+0x4c>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f6      	bhi.n	800296a <DelayUS+0x22>
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	200000f0 	.word	0x200000f0
 8002990:	431bde83 	.word	0x431bde83
 8002994:	e0001000 	.word	0xe0001000

08002998 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800299c:	f3bf 8f4f 	dsb	sy
}
 80029a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <__NVIC_SystemReset+0x24>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029aa:	4904      	ldr	r1, [pc, #16]	@ (80029bc <__NVIC_SystemReset+0x24>)
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <__NVIC_SystemReset+0x28>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80029b2:	f3bf 8f4f 	dsb	sy
}
 80029b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <__NVIC_SystemReset+0x20>
 80029bc:	e000ed00 	.word	0xe000ed00
 80029c0:	05fa0004 	.word	0x05fa0004

080029c4 <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t can1_rx_success = 0;   // số gói nhận thành công



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a05      	ldr	r2, [pc, #20]	@ (80029e8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d102      	bne.n	80029dc <HAL_TIM_PeriodElapsedCallback+0x18>
        timer10ms_flag = 1;
 80029d6:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
    }
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40001400 	.word	0x40001400
 80029ec:	200007c8 	.word	0x200007c8

080029f0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    static uint32_t idx = 0;
    ADC_SAMPLES[idx++] = HAL_ADC_GetValue(hadc);
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_ADC_ConvCpltCallback+0x50>)
 80029fa:	681c      	ldr	r4, [r3, #0]
 80029fc:	1c63      	adds	r3, r4, #1
 80029fe:	4a10      	ldr	r2, [pc, #64]	@ (8002a40 <HAL_ADC_ConvCpltCallback+0x50>)
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f002 ff43 	bl	800588e <HAL_ADC_GetValue>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a44 <HAL_ADC_ConvCpltCallback+0x54>)
 8002a0c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

    if (idx < NUM_SAMPLES) {
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_ADC_ConvCpltCallback+0x50>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <HAL_ADC_ConvCpltCallback+0x58>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d203      	bcs.n	8002a24 <HAL_ADC_ConvCpltCallback+0x34>
        HAL_ADC_Start_IT(hadc);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f002 fd0b 	bl	8005438 <HAL_ADC_Start_IT>
    } else {
        HAL_ADC_Stop_IT(hadc);
        mq135_done = 1;
        idx = 0;
    }
}
 8002a22:	e008      	b.n	8002a36 <HAL_ADC_ConvCpltCallback+0x46>
        HAL_ADC_Stop_IT(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f002 fde5 	bl	80055f4 <HAL_ADC_Stop_IT>
        mq135_done = 1;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <HAL_ADC_ConvCpltCallback+0x5c>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
        idx = 0;
 8002a30:	4b03      	ldr	r3, [pc, #12]	@ (8002a40 <HAL_ADC_ConvCpltCallback+0x50>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000177c 	.word	0x2000177c
 8002a44:	200007cc 	.word	0x200007cc
 8002a48:	2000176c 	.word	0x2000176c
 8002a4c:	20001770 	.word	0x20001770

08002a50 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a06      	ldr	r2, [pc, #24]	@ (8002a78 <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d104      	bne.n	8002a6c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>
        can1_tx_success++;
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	4a04      	ldr	r2, [pc, #16]	@ (8002a7c <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8002a6a:	6013      	str	r3, [r2, #0]
    }
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40006400 	.word	0x40006400
 8002a7c:	20001774 	.word	0x20001774

08002a80 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a06      	ldr	r2, [pc, #24]	@ (8002aa8 <HAL_CAN_TxMailbox1CompleteCallback+0x28>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d104      	bne.n	8002a9c <HAL_CAN_TxMailbox1CompleteCallback+0x1c>
        can1_tx_success++;
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3301      	adds	r3, #1
 8002a98:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 8002a9a:	6013      	str	r3, [r2, #0]
    }
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40006400 	.word	0x40006400
 8002aac:	20001774 	.word	0x20001774

08002ab0 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a06      	ldr	r2, [pc, #24]	@ (8002ad8 <HAL_CAN_TxMailbox2CompleteCallback+0x28>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d104      	bne.n	8002acc <HAL_CAN_TxMailbox2CompleteCallback+0x1c>
        can1_tx_success++;
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 8002aca:	6013      	str	r3, [r2, #0]
    }
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40006400 	.word	0x40006400
 8002adc:	20001774 	.word	0x20001774

08002ae0 <HAL_CAN_ErrorCallback>:

static uint8_t can_recover_attempts = 0;

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002ae0:	b5b0      	push	{r4, r5, r7, lr}
 8002ae2:	b0ac      	sub	sp, #176	@ 0xb0
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
    uint32_t err = hcan->ErrorCode;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    if (err == HAL_CAN_ERROR_NONE) return;
 8002af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80d9 	beq.w	8002cac <HAL_CAN_ErrorCallback+0x1cc>

    char msg[128];
    sprintf(msg, "⚠️ CAN Error: 0x%08lX\r\n", err);
 8002afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002afe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b02:	496c      	ldr	r1, [pc, #432]	@ (8002cb4 <HAL_CAN_ErrorCallback+0x1d4>)
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00b fd17 	bl	800e538 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fbae 	bl	8000270 <strlen>
 8002b14:	4603      	mov	r3, r0
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	4865      	ldr	r0, [pc, #404]	@ (8002cb8 <HAL_CAN_ErrorCallback+0x1d8>)
 8002b22:	f009 ff95 	bl	800ca50 <HAL_UART_Transmit>

    // --- Nhóm lỗi nghiêm trọng cần reset CAN ---
    if (err & (HAL_CAN_ERROR_BOF |
 8002b26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b2a:	4b64      	ldr	r3, [pc, #400]	@ (8002cbc <HAL_CAN_ErrorCallback+0x1dc>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04f      	beq.n	8002bd2 <HAL_CAN_ErrorCallback+0xf2>
               HAL_CAN_ERROR_ACK |
               HAL_CAN_ERROR_TX_TERR0 | HAL_CAN_ERROR_TX_TERR1 | HAL_CAN_ERROR_TX_TERR2 |
               HAL_CAN_ERROR_RX_FOV0 | HAL_CAN_ERROR_RX_FOV1))
    {
        can_recover_attempts++;
 8002b32:	4b63      	ldr	r3, [pc, #396]	@ (8002cc0 <HAL_CAN_ErrorCallback+0x1e0>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b61      	ldr	r3, [pc, #388]	@ (8002cc0 <HAL_CAN_ErrorCallback+0x1e0>)
 8002b3c:	701a      	strb	r2, [r3, #0]

        HAL_CAN_Stop(hcan);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f003 fb2e 	bl	80061a0 <HAL_CAN_Stop>
        HAL_CAN_DeInit(hcan);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f003 f9e6 	bl	8005f16 <HAL_CAN_DeInit>
        HAL_CAN_Init(hcan);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f003 f8e8 	bl	8005d20 <HAL_CAN_Init>
        HAL_CAN_Start(hcan);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f003 fae1 	bl	8006118 <HAL_CAN_Start>

        HAL_CAN_ConfigFilter(hcan, &canfilterconfig);
 8002b56:	495b      	ldr	r1, [pc, #364]	@ (8002cc4 <HAL_CAN_ErrorCallback+0x1e4>)
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f003 f9ff 	bl	8005f5c <HAL_CAN_ConfigFilter>
        HAL_CAN_ActivateNotification(hcan,
 8002b5e:	f44f 410f 	mov.w	r1, #36608	@ 0x8f00
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f003 fdf9 	bl	800675a <HAL_CAN_ActivateNotification>
            CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE |
            CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR);

        sprintf(msg, "🔄 CAN recovered, attempt %d\r\n", can_recover_attempts);
 8002b68:	4b55      	ldr	r3, [pc, #340]	@ (8002cc0 <HAL_CAN_ErrorCallback+0x1e0>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b72:	4955      	ldr	r1, [pc, #340]	@ (8002cc8 <HAL_CAN_ErrorCallback+0x1e8>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f00b fcdf 	bl	800e538 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002b7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fb76 	bl	8000270 <strlen>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b90:	4849      	ldr	r0, [pc, #292]	@ (8002cb8 <HAL_CAN_ErrorCallback+0x1d8>)
 8002b92:	f009 ff5d 	bl	800ca50 <HAL_UART_Transmit>

        if (can_recover_attempts >= 5) {
 8002b96:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <HAL_CAN_ErrorCallback+0x1e0>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d919      	bls.n	8002bd2 <HAL_CAN_ErrorCallback+0xf2>
            char resetmsg[] = "❌ CAN stuck, resetting MCU...\r\n";
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <HAL_CAN_ErrorCallback+0x1ec>)
 8002ba0:	f107 0408 	add.w	r4, r7, #8
 8002ba4:	461d      	mov	r5, r3
 8002ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bae:	682b      	ldr	r3, [r5, #0]
 8002bb0:	8023      	strh	r3, [r4, #0]
            HAL_UART_Transmit(&huart1, (uint8_t*)resetmsg, strlen(resetmsg), HAL_MAX_DELAY);
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fb5a 	bl	8000270 <strlen>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	f107 0108 	add.w	r1, r7, #8
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	483b      	ldr	r0, [pc, #236]	@ (8002cb8 <HAL_CAN_ErrorCallback+0x1d8>)
 8002bca:	f009 ff41 	bl	800ca50 <HAL_UART_Transmit>
            NVIC_SystemReset();
 8002bce:	f7ff fee3 	bl	8002998 <__NVIC_SystemReset>
        }
    }

    // --- Các lỗi nhẹ: chỉ log ---
    if (err & HAL_CAN_ERROR_EWG)  printf("CAN Warning Error\r\n");
 8002bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_CAN_ErrorCallback+0x104>
 8002bde:	483c      	ldr	r0, [pc, #240]	@ (8002cd0 <HAL_CAN_ErrorCallback+0x1f0>)
 8002be0:	f00b fc6c 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_EPV)  printf("CAN Passive Error\r\n");
 8002be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_CAN_ErrorCallback+0x116>
 8002bf0:	4838      	ldr	r0, [pc, #224]	@ (8002cd4 <HAL_CAN_ErrorCallback+0x1f4>)
 8002bf2:	f00b fc63 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_STF)  printf("CAN Stuff Error\r\n");
 8002bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_CAN_ErrorCallback+0x128>
 8002c02:	4835      	ldr	r0, [pc, #212]	@ (8002cd8 <HAL_CAN_ErrorCallback+0x1f8>)
 8002c04:	f00b fc5a 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_FOR)  printf("CAN Form Error\r\n");
 8002c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_CAN_ErrorCallback+0x13a>
 8002c14:	4831      	ldr	r0, [pc, #196]	@ (8002cdc <HAL_CAN_ErrorCallback+0x1fc>)
 8002c16:	f00b fc51 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_BR)   printf("CAN Bit Recessive Error\r\n");
 8002c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_CAN_ErrorCallback+0x14c>
 8002c26:	482e      	ldr	r0, [pc, #184]	@ (8002ce0 <HAL_CAN_ErrorCallback+0x200>)
 8002c28:	f00b fc48 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_BD)   printf("CAN Bit Dominant Error\r\n");
 8002c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_CAN_ErrorCallback+0x15e>
 8002c38:	482a      	ldr	r0, [pc, #168]	@ (8002ce4 <HAL_CAN_ErrorCallback+0x204>)
 8002c3a:	f00b fc3f 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_CRC)  printf("CAN CRC Error\r\n");
 8002c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_CAN_ErrorCallback+0x170>
 8002c4a:	4827      	ldr	r0, [pc, #156]	@ (8002ce8 <HAL_CAN_ErrorCallback+0x208>)
 8002c4c:	f00b fc36 	bl	800e4bc <puts>

    // --- Timeout & init errors ---
    if (err & HAL_CAN_ERROR_TIMEOUT)        printf("CAN Timeout Error\r\n");
 8002c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_CAN_ErrorCallback+0x182>
 8002c5c:	4823      	ldr	r0, [pc, #140]	@ (8002cec <HAL_CAN_ErrorCallback+0x20c>)
 8002c5e:	f00b fc2d 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_NOT_INITIALIZED)printf("CAN Not Init Error\r\n");
 8002c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_CAN_ErrorCallback+0x194>
 8002c6e:	4820      	ldr	r0, [pc, #128]	@ (8002cf0 <HAL_CAN_ErrorCallback+0x210>)
 8002c70:	f00b fc24 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_NOT_READY)      printf("CAN Not Ready Error\r\n");
 8002c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_CAN_ErrorCallback+0x1a6>
 8002c80:	481c      	ldr	r0, [pc, #112]	@ (8002cf4 <HAL_CAN_ErrorCallback+0x214>)
 8002c82:	f00b fc1b 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_NOT_STARTED)    printf("CAN Not Started Error\r\n");
 8002c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_CAN_ErrorCallback+0x1b8>
 8002c92:	4819      	ldr	r0, [pc, #100]	@ (8002cf8 <HAL_CAN_ErrorCallback+0x218>)
 8002c94:	f00b fc12 	bl	800e4bc <puts>
    if (err & HAL_CAN_ERROR_PARAM)          printf("CAN Parameter Error\r\n");
 8002c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <HAL_CAN_ErrorCallback+0x1ce>
 8002ca4:	4815      	ldr	r0, [pc, #84]	@ (8002cfc <HAL_CAN_ErrorCallback+0x21c>)
 8002ca6:	f00b fc09 	bl	800e4bc <puts>
 8002caa:	e000      	b.n	8002cae <HAL_CAN_ErrorCallback+0x1ce>
    if (err == HAL_CAN_ERROR_NONE) return;
 8002cac:	bf00      	nop
}
 8002cae:	37b0      	adds	r7, #176	@ 0xb0
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb4:	0801185c 	.word	0x0801185c
 8002cb8:	200006d8 	.word	0x200006d8
 8002cbc:	00015624 	.word	0x00015624
 8002cc0:	20001778 	.word	0x20001778
 8002cc4:	20000720 	.word	0x20000720
 8002cc8:	08011878 	.word	0x08011878
 8002ccc:	0801199c 	.word	0x0801199c
 8002cd0:	0801189c 	.word	0x0801189c
 8002cd4:	080118b0 	.word	0x080118b0
 8002cd8:	080118c4 	.word	0x080118c4
 8002cdc:	080118d8 	.word	0x080118d8
 8002ce0:	080118e8 	.word	0x080118e8
 8002ce4:	08011904 	.word	0x08011904
 8002ce8:	0801191c 	.word	0x0801191c
 8002cec:	0801192c 	.word	0x0801192c
 8002cf0:	08011940 	.word	0x08011940
 8002cf4:	08011954 	.word	0x08011954
 8002cf8:	0801196c 	.word	0x0801196c
 8002cfc:	08011984 	.word	0x08011984

08002d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b092      	sub	sp, #72	@ 0x48
 8002d04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d06:	f002 fabd 	bl	8005284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d0a:	f000 f89f 	bl	8002e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d0e:	f000 fd9b 	bl	8003848 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d12:	f000 fd79 	bl	8003808 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d16:	f000 fd4d 	bl	80037b4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002d1a:	f000 fa21 	bl	8003160 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002d1e:	f000 f8ff 	bl	8002f20 <MX_ADC1_Init>
  MX_CAN1_Init();
 8002d22:	f000 f94f 	bl	8002fc4 <MX_CAN1_Init>
  MX_CRC_Init();
 8002d26:	f000 f9d9 	bl	80030dc <MX_CRC_Init>
  MX_TIM8_Init();
 8002d2a:	f000 fccf 	bl	80036cc <MX_TIM8_Init>
  MX_CAN2_Init();
 8002d2e:	f000 f99f 	bl	8003070 <MX_CAN2_Init>
  MX_I2C3_Init();
 8002d32:	f000 f9e7 	bl	8003104 <MX_I2C3_Init>
  MX_TIM1_Init();
 8002d36:	f000 fa49 	bl	80031cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d3a:	f000 fb0b 	bl	8003354 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002d3e:	f000 fbe9 	bl	8003514 <MX_TIM4_Init>
  MX_TIM6_Init();
 8002d42:	f000 fc57 	bl	80035f4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8002d46:	f000 fb75 	bl	8003434 <MX_TIM3_Init>
  MX_TIM7_Init();
 8002d4a:	f000 fc89 	bl	8003660 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8002d4e:	f7ff f863 	bl	8001e18 <MFRC522_Init>
  BNO055_Init();
 8002d52:	f7fe fc7b 	bl	800164c <BNO055_Init>
  HD44780_Init(2);       // LCD 2 dòng
 8002d56:	2002      	movs	r0, #2
 8002d58:	f7ff fc5e 	bl	8002618 <HD44780_Init>
  HD44780_Backlight();   // Bật đèn nền
 8002d5c:	f7ff fd36 	bl	80027cc <HD44780_Backlight>
  MQ135_Config(&mq135, &hadc1);
 8002d60:	492e      	ldr	r1, [pc, #184]	@ (8002e1c <main+0x11c>)
 8002d62:	482f      	ldr	r0, [pc, #188]	@ (8002e20 <main+0x120>)
 8002d64:	f7fe fe20 	bl	80019a8 <MQ135_Config>
  HAL_CAN_Start(&hcan1);
 8002d68:	482e      	ldr	r0, [pc, #184]	@ (8002e24 <main+0x124>)
 8002d6a:	f003 f9d5 	bl	8006118 <HAL_CAN_Start>
//  HAL_CAN_Start(&hcan2);
  CAN_DebugStatus();
 8002d6e:	f7fe fd75 	bl	800185c <CAN_DebugStatus>
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002d72:	492d      	ldr	r1, [pc, #180]	@ (8002e28 <main+0x128>)
 8002d74:	482b      	ldr	r0, [pc, #172]	@ (8002e24 <main+0x124>)
 8002d76:	f003 f8f1 	bl	8005f5c <HAL_CAN_ConfigFilter>
//  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
	    // Cấu hình và hiệu chuẩn MQ135
	    MQ135_Config(&mq135, &hadc1);
 8002d7a:	4928      	ldr	r1, [pc, #160]	@ (8002e1c <main+0x11c>)
 8002d7c:	4828      	ldr	r0, [pc, #160]	@ (8002e20 <main+0x120>)
 8002d7e:	f7fe fe13 	bl	80019a8 <MQ135_Config>
	    MQ135_CalibrateRo(&mq135, 25.0f, 50.0f);  // không khí sạch giả lập
 8002d82:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8002e2c <main+0x12c>
 8002d86:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002d8a:	4825      	ldr	r0, [pc, #148]	@ (8002e20 <main+0x120>)
 8002d8c:	f7fe ff12 	bl	8001bb4 <MQ135_CalibrateRo>
// // Activate the notification
//  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
	    HAL_CAN_ActivateNotification(&hcan1,
 8002d90:	f44f 410f 	mov.w	r1, #36608	@ 0x8f00
 8002d94:	4823      	ldr	r0, [pc, #140]	@ (8002e24 <main+0x124>)
 8002d96:	f003 fce0 	bl	800675a <HAL_CAN_ActivateNotification>
	        CAN_IT_BUSOFF |
	        CAN_IT_LAST_ERROR_CODE |
	        CAN_IT_ERROR);
//  DisplayTopicMenuUART();
//  Send_All_SensorData_CAN();//  checkRFIDAndControlRelay();
	    HAL_TIM_Base_Start_IT(&htim7);
 8002d9a:	4825      	ldr	r0, [pc, #148]	@ (8002e30 <main+0x130>)
 8002d9c:	f008 fa76 	bl	800b28c <HAL_TIM_Base_Start_IT>
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // PA2 = 0 → Relay đỏ kích → NC ngắt → Đèn đỏ tắt
 8002da0:	2200      	movs	r2, #0
 8002da2:	2104      	movs	r1, #4
 8002da4:	4823      	ldr	r0, [pc, #140]	@ (8002e34 <main+0x134>)
 8002da6:	f004 feaf 	bl	8007b08 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // PA3 = 1 → Relay xanh không kích → Đèn xanh sáng
 8002daa:	2201      	movs	r2, #1
 8002dac:	2108      	movs	r1, #8
 8002dae:	4821      	ldr	r0, [pc, #132]	@ (8002e34 <main+0x134>)
 8002db0:	f004 feaa 	bl	8007b08 <HAL_GPIO_WritePin>
         Send_All_SensorData_CAN();
 8002db4:	f7ff fa3a 	bl	800222c <Send_All_SensorData_CAN>
         Process_Ultrasonic_And_Control_Relay();
 8002db8:	f7ff fb5a 	bl	8002470 <Process_Ultrasonic_And_Control_Relay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
//	  HandleUARTChoice();
	  	Send_All_SensorData_CAN();
 8002dbc:	f7ff fa36 	bl	800222c <Send_All_SensorData_CAN>
	    Process_Ultrasonic_And_Control_Relay();
 8002dc0:	f7ff fb56 	bl	8002470 <Process_Ultrasonic_And_Control_Relay>
//	  }

//	        BNO055_SendEulerCAN();


	    if (HAL_GetTick() - last_tick_can_stat >= 1000) {
 8002dc4:	f002 fac4 	bl	8005350 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <main+0x138>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dd4:	d3f2      	bcc.n	8002dbc <main+0xbc>
	           char msg[64];
	           snprintf(msg, sizeof(msg), "\r\nCAN TX/s: %lu | RX/s: %lu\r\n", can_tx_count, can_rx_count);
 8002dd6:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <main+0x13c>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <main+0x140>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4638      	mov	r0, r7
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	4a17      	ldr	r2, [pc, #92]	@ (8002e44 <main+0x144>)
 8002de6:	2140      	movs	r1, #64	@ 0x40
 8002de8:	f00b fb70 	bl	800e4cc <sniprintf>
	           HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002dec:	463b      	mov	r3, r7
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fa3e 	bl	8000270 <strlen>
 8002df4:	4603      	mov	r3, r0
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4639      	mov	r1, r7
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfe:	4812      	ldr	r0, [pc, #72]	@ (8002e48 <main+0x148>)
 8002e00:	f009 fe26 	bl	800ca50 <HAL_UART_Transmit>

	           can_tx_count = 0;
 8002e04:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <main+0x13c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
	           can_rx_count = 0;
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <main+0x140>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
	           last_tick_can_stat = HAL_GetTick();
 8002e10:	f002 fa9e 	bl	8005350 <HAL_GetTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a08      	ldr	r2, [pc, #32]	@ (8002e38 <main+0x138>)
 8002e18:	6013      	str	r3, [r2, #0]
	  	Send_All_SensorData_CAN();
 8002e1a:	e7cf      	b.n	8002dbc <main+0xbc>
 8002e1c:	20000334 	.word	0x20000334
 8002e20:	2000075c 	.word	0x2000075c
 8002e24:	200003dc 	.word	0x200003dc
 8002e28:	20000720 	.word	0x20000720
 8002e2c:	42480000 	.word	0x42480000
 8002e30:	20000648 	.word	0x20000648
 8002e34:	40020000 	.word	0x40020000
 8002e38:	200007c4 	.word	0x200007c4
 8002e3c:	200007bc 	.word	0x200007bc
 8002e40:	200007c0 	.word	0x200007c0
 8002e44:	080119c0 	.word	0x080119c0
 8002e48:	200006d8 	.word	0x200006d8

08002e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b094      	sub	sp, #80	@ 0x50
 8002e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e52:	f107 0320 	add.w	r3, r7, #32
 8002e56:	2230      	movs	r2, #48	@ 0x30
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f00b fc76 	bl	800e74c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <SystemClock_Config+0xcc>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	4a27      	ldr	r2, [pc, #156]	@ (8002f18 <SystemClock_Config+0xcc>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e80:	4b25      	ldr	r3, [pc, #148]	@ (8002f18 <SystemClock_Config+0xcc>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <SystemClock_Config+0xd0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a21      	ldr	r2, [pc, #132]	@ (8002f1c <SystemClock_Config+0xd0>)
 8002e96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <SystemClock_Config+0xd0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ec0:	23a8      	movs	r3, #168	@ 0xa8
 8002ec2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ec8:	2304      	movs	r3, #4
 8002eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ecc:	f107 0320 	add.w	r3, r7, #32
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f007 f955 	bl	800a180 <HAL_RCC_OscConfig>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002edc:	f000 fda4 	bl	8003a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002eec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002ef2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	2105      	movs	r1, #5
 8002efe:	4618      	mov	r0, r3
 8002f00:	f007 fbb6 	bl	800a670 <HAL_RCC_ClockConfig>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f0a:	f000 fd8d 	bl	8003a28 <Error_Handler>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3750      	adds	r7, #80	@ 0x50
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000

08002f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f26:	463b      	mov	r3, r7
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f32:	4b21      	ldr	r3, [pc, #132]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f34:	4a21      	ldr	r2, [pc, #132]	@ (8002fbc <MX_ADC1_Init+0x9c>)
 8002f36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f38:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f44:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f46:	2204      	movs	r2, #4
 8002f48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f58:	4b17      	ldr	r3, [pc, #92]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f5e:	4b16      	ldr	r3, [pc, #88]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f60:	4a17      	ldr	r2, [pc, #92]	@ (8002fc0 <MX_ADC1_Init+0xa0>)
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f64:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f78:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f7e:	480e      	ldr	r0, [pc, #56]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002f80:	f002 fa16 	bl	80053b0 <HAL_ADC_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002f8a:	f000 fd4d 	bl	8003a28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002f96:	2301      	movs	r3, #1
 8002f98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4806      	ldr	r0, [pc, #24]	@ (8002fb8 <MX_ADC1_Init+0x98>)
 8002fa0:	f002 fc96 	bl	80058d0 <HAL_ADC_ConfigChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002faa:	f000 fd3d 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000334 	.word	0x20000334
 8002fbc:	40012000 	.word	0x40012000
 8002fc0:	0f000001 	.word	0x0f000001

08002fc4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002fc8:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002fca:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <MX_CAN1_Init+0xa4>)
 8002fcc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002fce:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002fd4:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002fda:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002fe0:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002fe2:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8002fe6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003000:	4b18      	ldr	r3, [pc, #96]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8003002:	2204      	movs	r2, #4
 8003004:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003006:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800300c:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <MX_CAN1_Init+0xa0>)
 800300e:	2200      	movs	r2, #0
 8003010:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003012:	4814      	ldr	r0, [pc, #80]	@ (8003064 <MX_CAN1_Init+0xa0>)
 8003014:	f002 fe84 	bl	8005d20 <HAL_CAN_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800301e:	f000 fd03 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8003022:	4b12      	ldr	r3, [pc, #72]	@ (800306c <MX_CAN1_Init+0xa8>)
 8003024:	2201      	movs	r2, #1
 8003026:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 14;  // hoặc bank khác chưa dùng
 8003028:	4b10      	ldr	r3, [pc, #64]	@ (800306c <MX_CAN1_Init+0xa8>)
 800302a:	220e      	movs	r2, #14
 800302c:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800302e:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <MX_CAN1_Init+0xa8>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x0000;       // 0x100 << 5 = 0x0800
 8003034:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <MX_CAN1_Init+0xa8>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;            // Không cần dùng
 800303a:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <MX_CAN1_Init+0xa8>)
 800303c:	2200      	movs	r2, #0
 800303e:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;   // 0x7FF << 5 = 0xFFE0
 8003040:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <MX_CAN1_Init+0xa8>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <MX_CAN1_Init+0xa8>)
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800304c:	4b07      	ldr	r3, [pc, #28]	@ (800306c <MX_CAN1_Init+0xa8>)
 800304e:	2200      	movs	r2, #0
 8003050:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <MX_CAN1_Init+0xa8>)
 8003054:	2201      	movs	r2, #1
 8003056:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank =0;
 8003058:	4b04      	ldr	r3, [pc, #16]	@ (800306c <MX_CAN1_Init+0xa8>)
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END CAN1_Init 2 */

}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200003dc 	.word	0x200003dc
 8003068:	40006400 	.word	0x40006400
 800306c:	20000720 	.word	0x20000720

08003070 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003074:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <MX_CAN2_Init+0x64>)
 8003076:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <MX_CAN2_Init+0x68>)
 8003078:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <MX_CAN2_Init+0x64>)
 800307c:	2203      	movs	r2, #3
 800307e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003080:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <MX_CAN2_Init+0x64>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003086:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <MX_CAN2_Init+0x64>)
 8003088:	2200      	movs	r2, #0
 800308a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <MX_CAN2_Init+0x64>)
 800308e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8003092:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <MX_CAN2_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = ENABLE;
 800309a:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <MX_CAN2_Init+0x64>)
 800309c:	2204      	movs	r2, #4
 800309e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <MX_CAN2_Init+0x64>)
 80030a2:	2204      	movs	r2, #4
 80030a4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <MX_CAN2_Init+0x64>)
 80030a8:	2204      	movs	r2, #4
 80030aa:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <MX_CAN2_Init+0x64>)
 80030ae:	2204      	movs	r2, #4
 80030b0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80030b2:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <MX_CAN2_Init+0x64>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <MX_CAN2_Init+0x64>)
 80030ba:	2204      	movs	r2, #4
 80030bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80030be:	4805      	ldr	r0, [pc, #20]	@ (80030d4 <MX_CAN2_Init+0x64>)
 80030c0:	f002 fe2e 	bl	8005d20 <HAL_CAN_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80030ca:	f000 fcad 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000404 	.word	0x20000404
 80030d8:	40006800 	.word	0x40006800

080030dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <MX_CRC_Init+0x20>)
 80030e2:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <MX_CRC_Init+0x24>)
 80030e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80030e6:	4805      	ldr	r0, [pc, #20]	@ (80030fc <MX_CRC_Init+0x20>)
 80030e8:	f003 fecf 	bl	8006e8a <HAL_CRC_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80030f2:	f000 fc99 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000042c 	.word	0x2000042c
 8003100:	40023000 	.word	0x40023000

08003104 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <MX_I2C3_Init+0x50>)
 800310a:	4a13      	ldr	r2, [pc, #76]	@ (8003158 <MX_I2C3_Init+0x54>)
 800310c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800310e:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <MX_I2C3_Init+0x50>)
 8003110:	4a12      	ldr	r2, [pc, #72]	@ (800315c <MX_I2C3_Init+0x58>)
 8003112:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003114:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <MX_I2C3_Init+0x50>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800311a:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <MX_I2C3_Init+0x50>)
 800311c:	2200      	movs	r2, #0
 800311e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003120:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <MX_I2C3_Init+0x50>)
 8003122:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003126:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003128:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <MX_I2C3_Init+0x50>)
 800312a:	2200      	movs	r2, #0
 800312c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800312e:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <MX_I2C3_Init+0x50>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003134:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <MX_I2C3_Init+0x50>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <MX_I2C3_Init+0x50>)
 800313c:	2200      	movs	r2, #0
 800313e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003140:	4804      	ldr	r0, [pc, #16]	@ (8003154 <MX_I2C3_Init+0x50>)
 8003142:	f004 fcfb 	bl	8007b3c <HAL_I2C_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800314c:	f000 fc6c 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000434 	.word	0x20000434
 8003158:	40005c00 	.word	0x40005c00
 800315c:	000186a0 	.word	0x000186a0

08003160 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003164:	4b17      	ldr	r3, [pc, #92]	@ (80031c4 <MX_SPI2_Init+0x64>)
 8003166:	4a18      	ldr	r2, [pc, #96]	@ (80031c8 <MX_SPI2_Init+0x68>)
 8003168:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800316a:	4b16      	ldr	r3, [pc, #88]	@ (80031c4 <MX_SPI2_Init+0x64>)
 800316c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003170:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003172:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <MX_SPI2_Init+0x64>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003178:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <MX_SPI2_Init+0x64>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800317e:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <MX_SPI2_Init+0x64>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003184:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <MX_SPI2_Init+0x64>)
 8003186:	2200      	movs	r2, #0
 8003188:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800318a:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <MX_SPI2_Init+0x64>)
 800318c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003190:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003192:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <MX_SPI2_Init+0x64>)
 8003194:	2238      	movs	r2, #56	@ 0x38
 8003196:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <MX_SPI2_Init+0x64>)
 800319a:	2200      	movs	r2, #0
 800319c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <MX_SPI2_Init+0x64>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a4:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <MX_SPI2_Init+0x64>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <MX_SPI2_Init+0x64>)
 80031ac:	220a      	movs	r2, #10
 80031ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031b0:	4804      	ldr	r0, [pc, #16]	@ (80031c4 <MX_SPI2_Init+0x64>)
 80031b2:	f007 fc7d 	bl	800aab0 <HAL_SPI_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031bc:	f000 fc34 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000488 	.word	0x20000488
 80031c8:	40003800 	.word	0x40003800

080031cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b09a      	sub	sp, #104	@ 0x68
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	615a      	str	r2, [r3, #20]
 800320a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2220      	movs	r2, #32
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f00b fa9a 	bl	800e74c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003218:	4b4c      	ldr	r3, [pc, #304]	@ (800334c <MX_TIM1_Init+0x180>)
 800321a:	4a4d      	ldr	r2, [pc, #308]	@ (8003350 <MX_TIM1_Init+0x184>)
 800321c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800321e:	4b4b      	ldr	r3, [pc, #300]	@ (800334c <MX_TIM1_Init+0x180>)
 8003220:	2253      	movs	r2, #83	@ 0x53
 8003222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003224:	4b49      	ldr	r3, [pc, #292]	@ (800334c <MX_TIM1_Init+0x180>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 800322a:	4b48      	ldr	r3, [pc, #288]	@ (800334c <MX_TIM1_Init+0x180>)
 800322c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003232:	4b46      	ldr	r3, [pc, #280]	@ (800334c <MX_TIM1_Init+0x180>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003238:	4b44      	ldr	r3, [pc, #272]	@ (800334c <MX_TIM1_Init+0x180>)
 800323a:	2200      	movs	r2, #0
 800323c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800323e:	4b43      	ldr	r3, [pc, #268]	@ (800334c <MX_TIM1_Init+0x180>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003244:	4841      	ldr	r0, [pc, #260]	@ (800334c <MX_TIM1_Init+0x180>)
 8003246:	f007 ff41 	bl	800b0cc <HAL_TIM_Base_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003250:	f000 fbea 	bl	8003a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003258:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800325a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800325e:	4619      	mov	r1, r3
 8003260:	483a      	ldr	r0, [pc, #232]	@ (800334c <MX_TIM1_Init+0x180>)
 8003262:	f008 fd59 	bl	800bd18 <HAL_TIM_ConfigClockSource>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800326c:	f000 fbdc 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003270:	4836      	ldr	r0, [pc, #216]	@ (800334c <MX_TIM1_Init+0x180>)
 8003272:	f008 f8d4 	bl	800b41e <HAL_TIM_IC_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800327c:	f000 fbd4 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003280:	4832      	ldr	r0, [pc, #200]	@ (800334c <MX_TIM1_Init+0x180>)
 8003282:	f008 f873 	bl	800b36c <HAL_TIM_PWM_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800328c:	f000 fbcc 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003290:	2300      	movs	r3, #0
 8003292:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003298:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800329c:	4619      	mov	r1, r3
 800329e:	482b      	ldr	r0, [pc, #172]	@ (800334c <MX_TIM1_Init+0x180>)
 80032a0:	f009 faa4 	bl	800c7ec <HAL_TIMEx_MasterConfigSynchronization>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80032aa:	f000 fbbd 	bl	8003a28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032ae:	2300      	movs	r3, #0
 80032b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032b2:	2301      	movs	r3, #1
 80032b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032b6:	2300      	movs	r3, #0
 80032b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigIC.ICFilter = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80032be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032c2:	2200      	movs	r2, #0
 80032c4:	4619      	mov	r1, r3
 80032c6:	4821      	ldr	r0, [pc, #132]	@ (800334c <MX_TIM1_Init+0x180>)
 80032c8:	f008 fbc8 	bl	800ba5c <HAL_TIM_IC_ConfigChannel>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80032d2:	f000 fba9 	bl	8003a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032d6:	2360      	movs	r3, #96	@ 0x60
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032de:	2300      	movs	r3, #0
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032e2:	2300      	movs	r3, #0
 80032e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f6:	2204      	movs	r2, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4814      	ldr	r0, [pc, #80]	@ (800334c <MX_TIM1_Init+0x180>)
 80032fc:	f008 fc4a 	bl	800bb94 <HAL_TIM_PWM_ConfigChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8003306:	f000 fb8f 	bl	8003a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800331e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003322:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003324:	2300      	movs	r3, #0
 8003326:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	4619      	mov	r1, r3
 800332c:	4807      	ldr	r0, [pc, #28]	@ (800334c <MX_TIM1_Init+0x180>)
 800332e:	f009 fad9 	bl	800c8e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003338:	f000 fb76 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800333c:	4803      	ldr	r0, [pc, #12]	@ (800334c <MX_TIM1_Init+0x180>)
 800333e:	f001 fa07 	bl	8004750 <HAL_TIM_MspPostInit>

}
 8003342:	bf00      	nop
 8003344:	3768      	adds	r7, #104	@ 0x68
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200004e0 	.word	0x200004e0
 8003350:	40010000 	.word	0x40010000

08003354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	@ 0x28
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	f107 0318 	add.w	r3, r7, #24
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	f107 0310 	add.w	r3, r7, #16
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003372:	463b      	mov	r3, r7
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800337e:	4b2c      	ldr	r3, [pc, #176]	@ (8003430 <MX_TIM2_Init+0xdc>)
 8003380:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003384:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8003386:	4b2a      	ldr	r3, [pc, #168]	@ (8003430 <MX_TIM2_Init+0xdc>)
 8003388:	2253      	movs	r2, #83	@ 0x53
 800338a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800338c:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <MX_TIM2_Init+0xdc>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8003392:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <MX_TIM2_Init+0xdc>)
 8003394:	f06f 0201 	mvn.w	r2, #1
 8003398:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339a:	4b25      	ldr	r3, [pc, #148]	@ (8003430 <MX_TIM2_Init+0xdc>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a0:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <MX_TIM2_Init+0xdc>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033a6:	4822      	ldr	r0, [pc, #136]	@ (8003430 <MX_TIM2_Init+0xdc>)
 80033a8:	f007 fe90 	bl	800b0cc <HAL_TIM_Base_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80033b2:	f000 fb39 	bl	8003a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033ba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033bc:	f107 0318 	add.w	r3, r7, #24
 80033c0:	4619      	mov	r1, r3
 80033c2:	481b      	ldr	r0, [pc, #108]	@ (8003430 <MX_TIM2_Init+0xdc>)
 80033c4:	f008 fca8 	bl	800bd18 <HAL_TIM_ConfigClockSource>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80033ce:	f000 fb2b 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80033d2:	4817      	ldr	r0, [pc, #92]	@ (8003430 <MX_TIM2_Init+0xdc>)
 80033d4:	f008 f823 	bl	800b41e <HAL_TIM_IC_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80033de:	f000 fb23 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	4619      	mov	r1, r3
 80033f0:	480f      	ldr	r0, [pc, #60]	@ (8003430 <MX_TIM2_Init+0xdc>)
 80033f2:	f009 f9fb 	bl	800c7ec <HAL_TIMEx_MasterConfigSynchronization>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80033fc:	f000 fb14 	bl	8003a28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003400:	2302      	movs	r3, #2
 8003402:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003404:	2301      	movs	r3, #1
 8003406:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003410:	463b      	mov	r3, r7
 8003412:	2200      	movs	r2, #0
 8003414:	4619      	mov	r1, r3
 8003416:	4806      	ldr	r0, [pc, #24]	@ (8003430 <MX_TIM2_Init+0xdc>)
 8003418:	f008 fb20 	bl	800ba5c <HAL_TIM_IC_ConfigChannel>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8003422:	f000 fb01 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	@ 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000528 	.word	0x20000528

08003434 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800343a:	f107 0318 	add.w	r3, r7, #24
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003448:	f107 0310 	add.w	r3, r7, #16
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003452:	463b      	mov	r3, r7
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800345e:	4b2b      	ldr	r3, [pc, #172]	@ (800350c <MX_TIM3_Init+0xd8>)
 8003460:	4a2b      	ldr	r2, [pc, #172]	@ (8003510 <MX_TIM3_Init+0xdc>)
 8003462:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8003464:	4b29      	ldr	r3, [pc, #164]	@ (800350c <MX_TIM3_Init+0xd8>)
 8003466:	2253      	movs	r2, #83	@ 0x53
 8003468:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346a:	4b28      	ldr	r3, [pc, #160]	@ (800350c <MX_TIM3_Init+0xd8>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8003470:	4b26      	ldr	r3, [pc, #152]	@ (800350c <MX_TIM3_Init+0xd8>)
 8003472:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003478:	4b24      	ldr	r3, [pc, #144]	@ (800350c <MX_TIM3_Init+0xd8>)
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347e:	4b23      	ldr	r3, [pc, #140]	@ (800350c <MX_TIM3_Init+0xd8>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003484:	4821      	ldr	r0, [pc, #132]	@ (800350c <MX_TIM3_Init+0xd8>)
 8003486:	f007 fe21 	bl	800b0cc <HAL_TIM_Base_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003490:	f000 faca 	bl	8003a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003498:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800349a:	f107 0318 	add.w	r3, r7, #24
 800349e:	4619      	mov	r1, r3
 80034a0:	481a      	ldr	r0, [pc, #104]	@ (800350c <MX_TIM3_Init+0xd8>)
 80034a2:	f008 fc39 	bl	800bd18 <HAL_TIM_ConfigClockSource>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80034ac:	f000 fabc 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80034b0:	4816      	ldr	r0, [pc, #88]	@ (800350c <MX_TIM3_Init+0xd8>)
 80034b2:	f007 ffb4 	bl	800b41e <HAL_TIM_IC_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80034bc:	f000 fab4 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034c8:	f107 0310 	add.w	r3, r7, #16
 80034cc:	4619      	mov	r1, r3
 80034ce:	480f      	ldr	r0, [pc, #60]	@ (800350c <MX_TIM3_Init+0xd8>)
 80034d0:	f009 f98c 	bl	800c7ec <HAL_TIMEx_MasterConfigSynchronization>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80034da:	f000 faa5 	bl	8003a28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034de:	2300      	movs	r3, #0
 80034e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034e2:	2301      	movs	r3, #1
 80034e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80034ee:	463b      	mov	r3, r7
 80034f0:	2200      	movs	r2, #0
 80034f2:	4619      	mov	r1, r3
 80034f4:	4805      	ldr	r0, [pc, #20]	@ (800350c <MX_TIM3_Init+0xd8>)
 80034f6:	f008 fab1 	bl	800ba5c <HAL_TIM_IC_ConfigChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003500:	f000 fa92 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003504:	bf00      	nop
 8003506:	3728      	adds	r7, #40	@ 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000570 	.word	0x20000570
 8003510:	40000400 	.word	0x40000400

08003514 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800351a:	f107 0318 	add.w	r3, r7, #24
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003528:	f107 0310 	add.w	r3, r7, #16
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003532:	463b      	mov	r3, r7
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800353e:	4b2b      	ldr	r3, [pc, #172]	@ (80035ec <MX_TIM4_Init+0xd8>)
 8003540:	4a2b      	ldr	r2, [pc, #172]	@ (80035f0 <MX_TIM4_Init+0xdc>)
 8003542:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8003544:	4b29      	ldr	r3, [pc, #164]	@ (80035ec <MX_TIM4_Init+0xd8>)
 8003546:	2253      	movs	r2, #83	@ 0x53
 8003548:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800354a:	4b28      	ldr	r3, [pc, #160]	@ (80035ec <MX_TIM4_Init+0xd8>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8003550:	4b26      	ldr	r3, [pc, #152]	@ (80035ec <MX_TIM4_Init+0xd8>)
 8003552:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003556:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003558:	4b24      	ldr	r3, [pc, #144]	@ (80035ec <MX_TIM4_Init+0xd8>)
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800355e:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <MX_TIM4_Init+0xd8>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003564:	4821      	ldr	r0, [pc, #132]	@ (80035ec <MX_TIM4_Init+0xd8>)
 8003566:	f007 fdb1 	bl	800b0cc <HAL_TIM_Base_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8003570:	f000 fa5a 	bl	8003a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003578:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800357a:	f107 0318 	add.w	r3, r7, #24
 800357e:	4619      	mov	r1, r3
 8003580:	481a      	ldr	r0, [pc, #104]	@ (80035ec <MX_TIM4_Init+0xd8>)
 8003582:	f008 fbc9 	bl	800bd18 <HAL_TIM_ConfigClockSource>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800358c:	f000 fa4c 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003590:	4816      	ldr	r0, [pc, #88]	@ (80035ec <MX_TIM4_Init+0xd8>)
 8003592:	f007 ff44 	bl	800b41e <HAL_TIM_IC_Init>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800359c:	f000 fa44 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	4619      	mov	r1, r3
 80035ae:	480f      	ldr	r0, [pc, #60]	@ (80035ec <MX_TIM4_Init+0xd8>)
 80035b0:	f009 f91c 	bl	800c7ec <HAL_TIMEx_MasterConfigSynchronization>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80035ba:	f000 fa35 	bl	8003a28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80035c2:	2301      	movs	r3, #1
 80035c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80035ce:	463b      	mov	r3, r7
 80035d0:	2200      	movs	r2, #0
 80035d2:	4619      	mov	r1, r3
 80035d4:	4805      	ldr	r0, [pc, #20]	@ (80035ec <MX_TIM4_Init+0xd8>)
 80035d6:	f008 fa41 	bl	800ba5c <HAL_TIM_IC_ConfigChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80035e0:	f000 fa22 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80035e4:	bf00      	nop
 80035e6:	3728      	adds	r7, #40	@ 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200005b8 	.word	0x200005b8
 80035f0:	40000800 	.word	0x40000800

080035f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035fa:	463b      	mov	r3, r7
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003602:	4b15      	ldr	r3, [pc, #84]	@ (8003658 <MX_TIM6_Init+0x64>)
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <MX_TIM6_Init+0x68>)
 8003606:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8003608:	4b13      	ldr	r3, [pc, #76]	@ (8003658 <MX_TIM6_Init+0x64>)
 800360a:	2253      	movs	r2, #83	@ 0x53
 800360c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360e:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <MX_TIM6_Init+0x64>)
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 8003614:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <MX_TIM6_Init+0x64>)
 8003616:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800361a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800361c:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <MX_TIM6_Init+0x64>)
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003622:	480d      	ldr	r0, [pc, #52]	@ (8003658 <MX_TIM6_Init+0x64>)
 8003624:	f007 fd52 	bl	800b0cc <HAL_TIM_Base_Init>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800362e:	f000 f9fb 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800363a:	463b      	mov	r3, r7
 800363c:	4619      	mov	r1, r3
 800363e:	4806      	ldr	r0, [pc, #24]	@ (8003658 <MX_TIM6_Init+0x64>)
 8003640:	f009 f8d4 	bl	800c7ec <HAL_TIMEx_MasterConfigSynchronization>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800364a:	f000 f9ed 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000600 	.word	0x20000600
 800365c:	40001000 	.word	0x40001000

08003660 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003666:	463b      	mov	r3, r7
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800366e:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <MX_TIM7_Init+0x64>)
 8003670:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <MX_TIM7_Init+0x68>)
 8003672:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8003674:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <MX_TIM7_Init+0x64>)
 8003676:	2253      	movs	r2, #83	@ 0x53
 8003678:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800367a:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <MX_TIM7_Init+0x64>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8003680:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <MX_TIM7_Init+0x64>)
 8003682:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003686:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003688:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <MX_TIM7_Init+0x64>)
 800368a:	2280      	movs	r2, #128	@ 0x80
 800368c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800368e:	480d      	ldr	r0, [pc, #52]	@ (80036c4 <MX_TIM7_Init+0x64>)
 8003690:	f007 fd1c 	bl	800b0cc <HAL_TIM_Base_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800369a:	f000 f9c5 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80036a6:	463b      	mov	r3, r7
 80036a8:	4619      	mov	r1, r3
 80036aa:	4806      	ldr	r0, [pc, #24]	@ (80036c4 <MX_TIM7_Init+0x64>)
 80036ac:	f009 f89e 	bl	800c7ec <HAL_TIMEx_MasterConfigSynchronization>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80036b6:	f000 f9b7 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000648 	.word	0x20000648
 80036c8:	40001400 	.word	0x40001400

080036cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036d2:	f107 0318 	add.w	r3, r7, #24
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80036ea:	463b      	mov	r3, r7
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80036f6:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <MX_TIM8_Init+0xe0>)
 80036f8:	4a2d      	ldr	r2, [pc, #180]	@ (80037b0 <MX_TIM8_Init+0xe4>)
 80036fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84-1;
 80036fc:	4b2b      	ldr	r3, [pc, #172]	@ (80037ac <MX_TIM8_Init+0xe0>)
 80036fe:	2253      	movs	r2, #83	@ 0x53
 8003700:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003702:	4b2a      	ldr	r3, [pc, #168]	@ (80037ac <MX_TIM8_Init+0xe0>)
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 8003708:	4b28      	ldr	r3, [pc, #160]	@ (80037ac <MX_TIM8_Init+0xe0>)
 800370a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800370e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003710:	4b26      	ldr	r3, [pc, #152]	@ (80037ac <MX_TIM8_Init+0xe0>)
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003716:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <MX_TIM8_Init+0xe0>)
 8003718:	2200      	movs	r2, #0
 800371a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800371c:	4b23      	ldr	r3, [pc, #140]	@ (80037ac <MX_TIM8_Init+0xe0>)
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003722:	4822      	ldr	r0, [pc, #136]	@ (80037ac <MX_TIM8_Init+0xe0>)
 8003724:	f007 fcd2 	bl	800b0cc <HAL_TIM_Base_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800372e:	f000 f97b 	bl	8003a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003736:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003738:	f107 0318 	add.w	r3, r7, #24
 800373c:	4619      	mov	r1, r3
 800373e:	481b      	ldr	r0, [pc, #108]	@ (80037ac <MX_TIM8_Init+0xe0>)
 8003740:	f008 faea 	bl	800bd18 <HAL_TIM_ConfigClockSource>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800374a:	f000 f96d 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800374e:	4817      	ldr	r0, [pc, #92]	@ (80037ac <MX_TIM8_Init+0xe0>)
 8003750:	f007 fe65 	bl	800b41e <HAL_TIM_IC_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800375a:	f000 f965 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003766:	f107 0310 	add.w	r3, r7, #16
 800376a:	4619      	mov	r1, r3
 800376c:	480f      	ldr	r0, [pc, #60]	@ (80037ac <MX_TIM8_Init+0xe0>)
 800376e:	f009 f83d 	bl	800c7ec <HAL_TIMEx_MasterConfigSynchronization>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8003778:	f000 f956 	bl	8003a28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800377c:	2300      	movs	r3, #0
 800377e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003780:	2301      	movs	r3, #1
 8003782:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800378c:	463b      	mov	r3, r7
 800378e:	2200      	movs	r2, #0
 8003790:	4619      	mov	r1, r3
 8003792:	4806      	ldr	r0, [pc, #24]	@ (80037ac <MX_TIM8_Init+0xe0>)
 8003794:	f008 f962 	bl	800ba5c <HAL_TIM_IC_ConfigChannel>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800379e:	f000 f943 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80037a2:	bf00      	nop
 80037a4:	3728      	adds	r7, #40	@ 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000690 	.word	0x20000690
 80037b0:	40010400 	.word	0x40010400

080037b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ba:	4a12      	ldr	r2, [pc, #72]	@ (8003804 <MX_USART1_UART_Init+0x50>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ea:	4805      	ldr	r0, [pc, #20]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ec:	f009 f8e0 	bl	800c9b0 <HAL_UART_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037f6:	f000 f917 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200006d8 	.word	0x200006d8
 8003804:	40011000 	.word	0x40011000

08003808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <MX_DMA_Init+0x3c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	4a0b      	ldr	r2, [pc, #44]	@ (8003844 <MX_DMA_Init+0x3c>)
 8003818:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800381c:	6313      	str	r3, [r2, #48]	@ 0x30
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <MX_DMA_Init+0x3c>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	2038      	movs	r0, #56	@ 0x38
 8003830:	f003 fae7 	bl	8006e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003834:	2038      	movs	r0, #56	@ 0x38
 8003836:	f003 fb00 	bl	8006e3a <HAL_NVIC_EnableIRQ>

}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800

08003848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	@ 0x30
 800384c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384e:	f107 031c 	add.w	r3, r7, #28
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	4b6b      	ldr	r3, [pc, #428]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	4a6a      	ldr	r2, [pc, #424]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 8003868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800386c:	6313      	str	r3, [r2, #48]	@ 0x30
 800386e:	4b68      	ldr	r3, [pc, #416]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	4b64      	ldr	r3, [pc, #400]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	4a63      	ldr	r2, [pc, #396]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6313      	str	r3, [r2, #48]	@ 0x30
 800388a:	4b61      	ldr	r3, [pc, #388]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	4a5c      	ldr	r2, [pc, #368]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b56      	ldr	r3, [pc, #344]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	4a55      	ldr	r2, [pc, #340]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c2:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038d8:	f043 0310 	orr.w	r3, r3, #16
 80038dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038de:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	4b48      	ldr	r3, [pc, #288]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	4a47      	ldr	r2, [pc, #284]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038f4:	f043 0308 	orr.w	r3, r3, #8
 80038f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038fa:	4b45      	ldr	r3, [pc, #276]	@ (8003a10 <MX_GPIO_Init+0x1c8>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8003906:	2200      	movs	r2, #0
 8003908:	215c      	movs	r1, #92	@ 0x5c
 800390a:	4842      	ldr	r0, [pc, #264]	@ (8003a14 <MX_GPIO_Init+0x1cc>)
 800390c:	f004 f8fc 	bl	8007b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003910:	2200      	movs	r2, #0
 8003912:	2101      	movs	r1, #1
 8003914:	4840      	ldr	r0, [pc, #256]	@ (8003a18 <MX_GPIO_Init+0x1d0>)
 8003916:	f004 f8f7 	bl	8007b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800391a:	2200      	movs	r2, #0
 800391c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003920:	483e      	ldr	r0, [pc, #248]	@ (8003a1c <MX_GPIO_Init+0x1d4>)
 8003922:	f004 f8f1 	bl	8007b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8003926:	2200      	movs	r2, #0
 8003928:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 800392c:	483c      	ldr	r0, [pc, #240]	@ (8003a20 <MX_GPIO_Init+0x1d8>)
 800392e:	f004 f8eb 	bl	8007b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8003932:	2200      	movs	r2, #0
 8003934:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8003938:	483a      	ldr	r0, [pc, #232]	@ (8003a24 <MX_GPIO_Init+0x1dc>)
 800393a:	f004 f8e5 	bl	8007b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800393e:	2302      	movs	r3, #2
 8003940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003942:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394c:	f107 031c 	add.w	r3, r7, #28
 8003950:	4619      	mov	r1, r3
 8003952:	4830      	ldr	r0, [pc, #192]	@ (8003a14 <MX_GPIO_Init+0x1cc>)
 8003954:	f003 fe40 	bl	80075d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8003958:	2354      	movs	r3, #84	@ 0x54
 800395a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395c:	2301      	movs	r3, #1
 800395e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003960:	2302      	movs	r3, #2
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	2300      	movs	r3, #0
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	4829      	ldr	r0, [pc, #164]	@ (8003a14 <MX_GPIO_Init+0x1cc>)
 8003970:	f003 fe32 	bl	80075d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003974:	2308      	movs	r3, #8
 8003976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003978:	2301      	movs	r3, #1
 800397a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003980:	2300      	movs	r3, #0
 8003982:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	4619      	mov	r1, r3
 800398a:	4822      	ldr	r0, [pc, #136]	@ (8003a14 <MX_GPIO_Init+0x1cc>)
 800398c:	f003 fe24 	bl	80075d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003990:	2301      	movs	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003994:	2301      	movs	r3, #1
 8003996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	2300      	movs	r3, #0
 800399e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a0:	f107 031c 	add.w	r3, r7, #28
 80039a4:	4619      	mov	r1, r3
 80039a6:	481c      	ldr	r0, [pc, #112]	@ (8003a18 <MX_GPIO_Init+0x1d0>)
 80039a8:	f003 fe16 	bl	80075d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b2:	2301      	movs	r3, #1
 80039b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039b6:	2302      	movs	r3, #2
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039be:	f107 031c 	add.w	r3, r7, #28
 80039c2:	4619      	mov	r1, r3
 80039c4:	4815      	ldr	r0, [pc, #84]	@ (8003a1c <MX_GPIO_Init+0x1d4>)
 80039c6:	f003 fe07 	bl	80075d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 80039ca:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80039ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d0:	2301      	movs	r3, #1
 80039d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039d4:	2302      	movs	r3, #2
 80039d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d8:	2300      	movs	r3, #0
 80039da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	4619      	mov	r1, r3
 80039e2:	480f      	ldr	r0, [pc, #60]	@ (8003a20 <MX_GPIO_Init+0x1d8>)
 80039e4:	f003 fdf8 	bl	80075d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11;
 80039e8:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 80039ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ee:	2301      	movs	r3, #1
 80039f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039fa:	f107 031c 	add.w	r3, r7, #28
 80039fe:	4619      	mov	r1, r3
 8003a00:	4808      	ldr	r0, [pc, #32]	@ (8003a24 <MX_GPIO_Init+0x1dc>)
 8003a02:	f003 fde9 	bl	80075d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003a06:	bf00      	nop
 8003a08:	3730      	adds	r7, #48	@ 0x30
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40020000 	.word	0x40020000
 8003a18:	40020400 	.word	0x40020400
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40020c00 	.word	0x40020c00
 8003a24:	40020800 	.word	0x40020800

08003a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a2c:	b672      	cpsid	i
}
 8003a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <Error_Handler+0x8>

08003a34 <printUserName>:
	    }
}


void printUserName(uint8_t *uid)
{
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a36:	b099      	sub	sp, #100	@ 0x64
 8003a38:	af04      	add	r7, sp, #16
 8003a3a:	6078      	str	r0, [r7, #4]
	   // Không có thẻ
	    if (uid == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d111      	bne.n	8003a66 <printUserName+0x32>
	    {
	        if (uidcheck)
 8003a42:	4b56      	ldr	r3, [pc, #344]	@ (8003b9c <printUserName+0x168>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80a2 	beq.w	8003b90 <printUserName+0x15c>
	        {
	            HAL_UART_Transmit(&huart1, (uint8_t*)"Please charge your ID CARD \r\n", 31, HAL_MAX_DELAY);
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	221f      	movs	r2, #31
 8003a52:	4953      	ldr	r1, [pc, #332]	@ (8003ba0 <printUserName+0x16c>)
 8003a54:	4853      	ldr	r0, [pc, #332]	@ (8003ba4 <printUserName+0x170>)
 8003a56:	f008 fffb 	bl	800ca50 <HAL_UART_Transmit>
	            memset(lastUID, 0, UID_LEN); //Gán toàn bộ giá trị trong mảng lastUID về 0 (zero)
 8003a5a:	2205      	movs	r2, #5
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4852      	ldr	r0, [pc, #328]	@ (8003ba8 <printUserName+0x174>)
 8003a60:	f00a fe74 	bl	800e74c <memset>
	        }
	        return;
 8003a64:	e094      	b.n	8003b90 <printUserName+0x15c>
	    }

	    //  Nếu là UID giống lần trước thì không in lại
	    if (uidcheck && memcmp(uid, lastUID, UID_LEN) == 0)
 8003a66:	4b4d      	ldr	r3, [pc, #308]	@ (8003b9c <printUserName+0x168>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <printUserName+0x4c>
 8003a6e:	2205      	movs	r2, #5
 8003a70:	494d      	ldr	r1, [pc, #308]	@ (8003ba8 <printUserName+0x174>)
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f00a fe5a 	bl	800e72c <memcmp>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 808a 	beq.w	8003b94 <printUserName+0x160>
	        return;
	    if (uid!=NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8087 	beq.w	8003b96 <printUserName+0x162>
	    {
	    //  UID mới thì cập nhật và xử lý
	    memcpy(lastUID, uid, UID_LEN);
 8003a88:	4b47      	ldr	r3, [pc, #284]	@ (8003ba8 <printUserName+0x174>)
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6810      	ldr	r0, [r2, #0]
 8003a8e:	6018      	str	r0, [r3, #0]
 8003a90:	7912      	ldrb	r2, [r2, #4]
 8003a92:	711a      	strb	r2, [r3, #4]
	    uidcheck = 1;
 8003a94:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <printUserName+0x168>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < userCount; i++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a9e:	e048      	b.n	8003b32 <printUserName+0xfe>
    {
        if (memcmp(uid, userList[i].uid, UID_LEN) == 0)
 8003aa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a3f      	ldr	r2, [pc, #252]	@ (8003bac <printUserName+0x178>)
 8003aae:	4413      	add	r3, r2
 8003ab0:	2205      	movs	r2, #5
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f00a fe39 	bl	800e72c <memcmp>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d135      	bne.n	8003b2c <printUserName+0xf8>
        {
            char msg[64];
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003ac4:	461e      	mov	r6, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003acc:	469c      	mov	ip, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003ad4:	4619      	mov	r1, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3303      	adds	r3, #3
 8003ada:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003adc:	461c      	mov	r4, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003ae4:	461d      	mov	r5, r3
                    userList[i].name);
 8003ae6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	4a2e      	ldr	r2, [pc, #184]	@ (8003bac <printUserName+0x178>)
 8003af4:	4413      	add	r3, r2
 8003af6:	3305      	adds	r3, #5
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003af8:	f107 000c 	add.w	r0, r7, #12
 8003afc:	9303      	str	r3, [sp, #12]
 8003afe:	9502      	str	r5, [sp, #8]
 8003b00:	9401      	str	r4, [sp, #4]
 8003b02:	9100      	str	r1, [sp, #0]
 8003b04:	4663      	mov	r3, ip
 8003b06:	4632      	mov	r2, r6
 8003b08:	4929      	ldr	r1, [pc, #164]	@ (8003bb0 <printUserName+0x17c>)
 8003b0a:	f00a fd15 	bl	800e538 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003b0e:	f107 030c 	add.w	r3, r7, #12
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fbac 	bl	8000270 <strlen>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	f107 010c 	add.w	r1, r7, #12
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	481f      	ldr	r0, [pc, #124]	@ (8003ba4 <printUserName+0x170>)
 8003b26:	f008 ff93 	bl	800ca50 <HAL_UART_Transmit>
 8003b2a:	e034      	b.n	8003b96 <printUserName+0x162>
    for (int i = 0; i < userCount; i++)
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b2e:	3301      	adds	r3, #1
 8003b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b32:	2206      	movs	r2, #6
 8003b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b36:	4293      	cmp	r3, r2
 8003b38:	dbb2      	blt.n	8003aa0 <printUserName+0x6c>
        }
    }
    // Không tìm thấy trong danh sách
    char unknown[64];
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003b3e:	461c      	mov	r4, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3301      	adds	r3, #1
 8003b44:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003b46:	461d      	mov	r5, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003b4e:	461a      	mov	r2, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3303      	adds	r3, #3
 8003b54:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003b56:	4619      	mov	r1, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003b5e:	f107 000c 	add.w	r0, r7, #12
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	9101      	str	r1, [sp, #4]
 8003b66:	9200      	str	r2, [sp, #0]
 8003b68:	462b      	mov	r3, r5
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4911      	ldr	r1, [pc, #68]	@ (8003bb4 <printUserName+0x180>)
 8003b6e:	f00a fce3 	bl	800e538 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)unknown, strlen(unknown), HAL_MAX_DELAY);
 8003b72:	f107 030c 	add.w	r3, r7, #12
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc fb7a 	bl	8000270 <strlen>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	f107 010c 	add.w	r1, r7, #12
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	4806      	ldr	r0, [pc, #24]	@ (8003ba4 <printUserName+0x170>)
 8003b8a:	f008 ff61 	bl	800ca50 <HAL_UART_Transmit>
 8003b8e:	e002      	b.n	8003b96 <printUserName+0x162>
	        return;
 8003b90:	bf00      	nop
 8003b92:	e000      	b.n	8003b96 <printUserName+0x162>
	        return;
 8003b94:	bf00      	nop
}
}
 8003b96:	3754      	adds	r7, #84	@ 0x54
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b9c:	20001798 	.word	0x20001798
 8003ba0:	08011a70 	.word	0x08011a70
 8003ba4:	200006d8 	.word	0x200006d8
 8003ba8:	20001788 	.word	0x20001788
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	08011a90 	.word	0x08011a90
 8003bb4:	08011abc 	.word	0x08011abc

08003bb8 <isAuthorizedUID>:


bool isAuthorizedUID(uint8_t *uid)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < userCount; i++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e014      	b.n	8003bf0 <isAuthorizedUID+0x38>
    {
        if (memcmp(uid, userList[i].uid, 5) == 0)
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003c04 <isAuthorizedUID+0x4c>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	4619      	mov	r1, r3
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f00a fda6 	bl	800e72c <memcmp>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <isAuthorizedUID+0x32>
            return true;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e007      	b.n	8003bfa <isAuthorizedUID+0x42>
    for (int i = 0; i < userCount; i++)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3301      	adds	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	2206      	movs	r2, #6
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	dbe6      	blt.n	8003bc6 <isAuthorizedUID+0xe>
    }
    return false;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000010 	.word	0x20000010

08003c08 <checkRFIDAndControlRelay>:


void checkRFIDAndControlRelay(void)
{
 8003c08:	b5b0      	push	{r4, r5, r7, lr}
 8003c0a:	b094      	sub	sp, #80	@ 0x50
 8003c0c:	af04      	add	r7, sp, #16
    status = MFRC522_Request(PICC_REQIDL, str);
 8003c0e:	4959      	ldr	r1, [pc, #356]	@ (8003d74 <checkRFIDAndControlRelay+0x16c>)
 8003c10:	2026      	movs	r0, #38	@ 0x26
 8003c12:	f7fe f9f8 	bl	8002006 <MFRC522_Request>
 8003c16:	4603      	mov	r3, r0
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b57      	ldr	r3, [pc, #348]	@ (8003d78 <checkRFIDAndControlRelay+0x170>)
 8003c1c:	701a      	strb	r2, [r3, #0]

    if (status == MI_OK && MFRC522_Anticoll(str) == MI_OK)
 8003c1e:	4b56      	ldr	r3, [pc, #344]	@ (8003d78 <checkRFIDAndControlRelay+0x170>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d175      	bne.n	8003d12 <checkRFIDAndControlRelay+0x10a>
 8003c26:	4853      	ldr	r0, [pc, #332]	@ (8003d74 <checkRFIDAndControlRelay+0x16c>)
 8003c28:	f7fe fa12 	bl	8002050 <MFRC522_Anticoll>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d16f      	bne.n	8003d12 <checkRFIDAndControlRelay+0x10a>
    {
        memcpy(currentUID, str, UID_LEN);
 8003c32:	4b52      	ldr	r3, [pc, #328]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003c34:	4a4f      	ldr	r2, [pc, #316]	@ (8003d74 <checkRFIDAndControlRelay+0x16c>)
 8003c36:	6810      	ldr	r0, [r2, #0]
 8003c38:	6018      	str	r0, [r3, #0]
 8003c3a:	7912      	ldrb	r2, [r2, #4]
 8003c3c:	711a      	strb	r2, [r3, #4]
        rfidDetected = 1;
 8003c3e:	4b50      	ldr	r3, [pc, #320]	@ (8003d80 <checkRFIDAndControlRelay+0x178>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
        rfidLostCounter = 0;
 8003c44:	4b4f      	ldr	r3, [pc, #316]	@ (8003d84 <checkRFIDAndControlRelay+0x17c>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]

        // UART Debug
        char dbg[64];
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
                currentUID[0], currentUID[1], currentUID[2],
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003c4e:	461c      	mov	r4, r3
                currentUID[0], currentUID[1], currentUID[2],
 8003c50:	4b4a      	ldr	r3, [pc, #296]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003c52:	785b      	ldrb	r3, [r3, #1]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003c54:	461d      	mov	r5, r3
                currentUID[0], currentUID[1], currentUID[2],
 8003c56:	4b49      	ldr	r3, [pc, #292]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003c58:	789b      	ldrb	r3, [r3, #2]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003c5a:	461a      	mov	r2, r3
                currentUID[3], currentUID[4]);
 8003c5c:	4b47      	ldr	r3, [pc, #284]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003c5e:	78db      	ldrb	r3, [r3, #3]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003c60:	4619      	mov	r1, r3
                currentUID[3], currentUID[4]);
 8003c62:	4b46      	ldr	r3, [pc, #280]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003c64:	791b      	ldrb	r3, [r3, #4]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003c66:	4638      	mov	r0, r7
 8003c68:	9302      	str	r3, [sp, #8]
 8003c6a:	9101      	str	r1, [sp, #4]
 8003c6c:	9200      	str	r2, [sp, #0]
 8003c6e:	462b      	mov	r3, r5
 8003c70:	4622      	mov	r2, r4
 8003c72:	4945      	ldr	r1, [pc, #276]	@ (8003d88 <checkRFIDAndControlRelay+0x180>)
 8003c74:	f00a fc60 	bl	800e538 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8003c78:	463b      	mov	r3, r7
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc faf8 	bl	8000270 <strlen>
 8003c80:	4603      	mov	r3, r0
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4639      	mov	r1, r7
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	4840      	ldr	r0, [pc, #256]	@ (8003d8c <checkRFIDAndControlRelay+0x184>)
 8003c8c:	f008 fee0 	bl	800ca50 <HAL_UART_Transmit>

//        // ✅ Chỉ gửi CAN nếu là UID mới
        if (!uidcheck || memcmp(currentUID, lastUID, UID_LEN) != 0)
 8003c90:	4b3f      	ldr	r3, [pc, #252]	@ (8003d90 <checkRFIDAndControlRelay+0x188>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <checkRFIDAndControlRelay+0xa0>
 8003c98:	2205      	movs	r2, #5
 8003c9a:	493e      	ldr	r1, [pc, #248]	@ (8003d94 <checkRFIDAndControlRelay+0x18c>)
 8003c9c:	4837      	ldr	r0, [pc, #220]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003c9e:	f00a fd45 	bl	800e72c <memcmp>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d011      	beq.n	8003ccc <checkRFIDAndControlRelay+0xc4>
        {
            printUserName(currentUID);
 8003ca8:	4834      	ldr	r0, [pc, #208]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003caa:	f7ff fec3 	bl	8003a34 <printUserName>
            memcpy(lastUID, currentUID, UID_LEN);
 8003cae:	4b39      	ldr	r3, [pc, #228]	@ (8003d94 <checkRFIDAndControlRelay+0x18c>)
 8003cb0:	4a32      	ldr	r2, [pc, #200]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003cb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cb6:	6018      	str	r0, [r3, #0]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	7019      	strb	r1, [r3, #0]
            uidcheck = 1;
 8003cbc:	4b34      	ldr	r3, [pc, #208]	@ (8003d90 <checkRFIDAndControlRelay+0x188>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

            // Gửi CAN
            CAN_SendTopicData(TOPIC_ID_RFID, currentUID, UID_LEN);
 8003cc2:	2205      	movs	r2, #5
 8003cc4:	492d      	ldr	r1, [pc, #180]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003cc6:	2010      	movs	r0, #16
 8003cc8:	f7fe fa62 	bl	8002190 <CAN_SendTopicData>
        }

        // ✅ Điều khiển Relay
        if (isAuthorizedUID(currentUID))
 8003ccc:	482b      	ldr	r0, [pc, #172]	@ (8003d7c <checkRFIDAndControlRelay+0x174>)
 8003cce:	f7ff ff73 	bl	8003bb8 <isAuthorizedUID>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00f      	beq.n	8003cf8 <checkRFIDAndControlRelay+0xf0>
        {
            if (!relayOn)
 8003cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8003d98 <checkRFIDAndControlRelay+0x190>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	f083 0301 	eor.w	r3, r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d042      	beq.n	8003d6c <checkRFIDAndControlRelay+0x164>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	2110      	movs	r1, #16
 8003cea:	482c      	ldr	r0, [pc, #176]	@ (8003d9c <checkRFIDAndControlRelay+0x194>)
 8003cec:	f003 ff0c 	bl	8007b08 <HAL_GPIO_WritePin>
                relayOn = true;
 8003cf0:	4b29      	ldr	r3, [pc, #164]	@ (8003d98 <checkRFIDAndControlRelay+0x190>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e039      	b.n	8003d6c <checkRFIDAndControlRelay+0x164>
            }
        }
        else
        {
            if (relayOn)
 8003cf8:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <checkRFIDAndControlRelay+0x190>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d035      	beq.n	8003d6c <checkRFIDAndControlRelay+0x164>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003d00:	2200      	movs	r2, #0
 8003d02:	2110      	movs	r1, #16
 8003d04:	4825      	ldr	r0, [pc, #148]	@ (8003d9c <checkRFIDAndControlRelay+0x194>)
 8003d06:	f003 feff 	bl	8007b08 <HAL_GPIO_WritePin>
                relayOn = false;
 8003d0a:	4b23      	ldr	r3, [pc, #140]	@ (8003d98 <checkRFIDAndControlRelay+0x190>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e02c      	b.n	8003d6c <checkRFIDAndControlRelay+0x164>

        return;
    }

    //  Không đọc được thẻ
    rfidLostCounter++;
 8003d12:	4b1c      	ldr	r3, [pc, #112]	@ (8003d84 <checkRFIDAndControlRelay+0x17c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	4a1a      	ldr	r2, [pc, #104]	@ (8003d84 <checkRFIDAndControlRelay+0x17c>)
 8003d1a:	6013      	str	r3, [r2, #0]
//    if (rfidLostCounter >= RFID_LOST_THRESHOLD)
//    {
        // Chỉ thực hiện reset khi thực sự không còn thẻ
        if (uidcheck)
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d90 <checkRFIDAndControlRelay+0x188>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <checkRFIDAndControlRelay+0x15e>
        {
            printUserName(NULL);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7ff fe85 	bl	8003a34 <printUserName>
            uidcheck = 0;
 8003d2a:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <checkRFIDAndControlRelay+0x188>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
            memset(lastUID, 0, UID_LEN);
 8003d30:	2205      	movs	r2, #5
 8003d32:	2100      	movs	r1, #0
 8003d34:	4817      	ldr	r0, [pc, #92]	@ (8003d94 <checkRFIDAndControlRelay+0x18c>)
 8003d36:	f00a fd09 	bl	800e74c <memset>
            rfidDetected = 0;
 8003d3a:	4b11      	ldr	r3, [pc, #68]	@ (8003d80 <checkRFIDAndControlRelay+0x178>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

            HAL_UART_Transmit(&huart1,
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	2222      	movs	r2, #34	@ 0x22
 8003d46:	4916      	ldr	r1, [pc, #88]	@ (8003da0 <checkRFIDAndControlRelay+0x198>)
 8003d48:	4810      	ldr	r0, [pc, #64]	@ (8003d8c <checkRFIDAndControlRelay+0x184>)
 8003d4a:	f008 fe81 	bl	800ca50 <HAL_UART_Transmit>
                              (uint8_t*)"[RFID] Không phát hiện thẻ\r\n",
                              strlen("[RFID] Không phát hiện thẻ\r\n"),
                              HAL_MAX_DELAY);

            if (relayOn)
 8003d4e:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <checkRFIDAndControlRelay+0x190>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <checkRFIDAndControlRelay+0x15e>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2110      	movs	r1, #16
 8003d5a:	4810      	ldr	r0, [pc, #64]	@ (8003d9c <checkRFIDAndControlRelay+0x194>)
 8003d5c:	f003 fed4 	bl	8007b08 <HAL_GPIO_WritePin>
                relayOn = false;
 8003d60:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <checkRFIDAndControlRelay+0x190>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]
            }
        }

        rfidLostCounter = 0;
 8003d66:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <checkRFIDAndControlRelay+0x17c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
    }
 8003d6c:	3740      	adds	r7, #64	@ 0x40
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bdb0      	pop	{r4, r5, r7, pc}
 8003d72:	bf00      	nop
 8003d74:	2000074c 	.word	0x2000074c
 8003d78:	20000748 	.word	0x20000748
 8003d7c:	20001780 	.word	0x20001780
 8003d80:	20001794 	.word	0x20001794
 8003d84:	20001790 	.word	0x20001790
 8003d88:	08011af0 	.word	0x08011af0
 8003d8c:	200006d8 	.word	0x200006d8
 8003d90:	20001798 	.word	0x20001798
 8003d94:	20001788 	.word	0x20001788
 8003d98:	2000178d 	.word	0x2000178d
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	08011b18 	.word	0x08011b18

08003da4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <HAL_MspInit+0x5c>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	4a13      	ldr	r2, [pc, #76]	@ (8003e00 <HAL_MspInit+0x5c>)
 8003db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <HAL_MspInit+0x5c>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <HAL_MspInit+0x5c>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	4a0c      	ldr	r2, [pc, #48]	@ (8003e00 <HAL_MspInit+0x5c>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_MspInit+0x5c>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003de2:	2005      	movs	r0, #5
 8003de4:	f003 f802 	bl	8006dec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003de8:	2200      	movs	r2, #0
 8003dea:	2100      	movs	r1, #0
 8003dec:	2005      	movs	r0, #5
 8003dee:	f003 f808 	bl	8006e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003df2:	2005      	movs	r0, #5
 8003df4:	f003 f821 	bl	8006e3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800

08003e04 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a32      	ldr	r2, [pc, #200]	@ (8003eec <HAL_ADC_MspInit+0xe8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d15e      	bne.n	8003ee4 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	4b31      	ldr	r3, [pc, #196]	@ (8003ef0 <HAL_ADC_MspInit+0xec>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	4a30      	ldr	r2, [pc, #192]	@ (8003ef0 <HAL_ADC_MspInit+0xec>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e36:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef0 <HAL_ADC_MspInit+0xec>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef0 <HAL_ADC_MspInit+0xec>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	4a29      	ldr	r2, [pc, #164]	@ (8003ef0 <HAL_ADC_MspInit+0xec>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e52:	4b27      	ldr	r3, [pc, #156]	@ (8003ef0 <HAL_ADC_MspInit+0xec>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e62:	2303      	movs	r3, #3
 8003e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4820      	ldr	r0, [pc, #128]	@ (8003ef4 <HAL_ADC_MspInit+0xf0>)
 8003e72:	f003 fbb1 	bl	80075d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003e76:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003e78:	4a20      	ldr	r2, [pc, #128]	@ (8003efc <HAL_ADC_MspInit+0xf8>)
 8003e7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e88:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003e90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003e98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ea4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003eac:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eb2:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003eb8:	480f      	ldr	r0, [pc, #60]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003eba:	f003 f803 	bl	8006ec4 <HAL_DMA_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003ec4:	f7ff fdb0 	bl	8003a28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003ecc:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <HAL_ADC_MspInit+0xf4>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2012      	movs	r0, #18
 8003eda:	f002 ff92 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003ede:	2012      	movs	r0, #18
 8003ee0:	f002 ffab 	bl	8006e3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003ee4:	bf00      	nop
 8003ee6:	3728      	adds	r7, #40	@ 0x28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40012000 	.word	0x40012000
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40020000 	.word	0x40020000
 8003ef8:	2000037c 	.word	0x2000037c
 8003efc:	40026410 	.word	0x40026410

08003f00 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	@ 0x30
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 031c 	add.w	r3, r7, #28
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a66      	ldr	r2, [pc, #408]	@ (80040b8 <HAL_CAN_MspInit+0x1b8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d165      	bne.n	8003fee <HAL_CAN_MspInit+0xee>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003f22:	4b66      	ldr	r3, [pc, #408]	@ (80040bc <HAL_CAN_MspInit+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3301      	adds	r3, #1
 8003f28:	4a64      	ldr	r2, [pc, #400]	@ (80040bc <HAL_CAN_MspInit+0x1bc>)
 8003f2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003f2c:	4b63      	ldr	r3, [pc, #396]	@ (80040bc <HAL_CAN_MspInit+0x1bc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10d      	bne.n	8003f50 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003f34:	2300      	movs	r3, #0
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	4b61      	ldr	r3, [pc, #388]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	4a60      	ldr	r2, [pc, #384]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8003f3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f44:	4b5e      	ldr	r3, [pc, #376]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	4b5a      	ldr	r3, [pc, #360]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	4a59      	ldr	r2, [pc, #356]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
 8003f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f60:	4b57      	ldr	r3, [pc, #348]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f74:	2301      	movs	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f7c:	2309      	movs	r3, #9
 8003f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	4619      	mov	r1, r3
 8003f86:	484f      	ldr	r0, [pc, #316]	@ (80040c4 <HAL_CAN_MspInit+0x1c4>)
 8003f88:	f003 fb26 	bl	80075d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f9c:	2309      	movs	r3, #9
 8003f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa0:	f107 031c 	add.w	r3, r7, #28
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4847      	ldr	r0, [pc, #284]	@ (80040c4 <HAL_CAN_MspInit+0x1c4>)
 8003fa8:	f003 fb16 	bl	80075d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003fac:	2200      	movs	r2, #0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	2013      	movs	r0, #19
 8003fb2:	f002 ff26 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003fb6:	2013      	movs	r0, #19
 8003fb8:	f002 ff3f 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	2014      	movs	r0, #20
 8003fc2:	f002 ff1e 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003fc6:	2014      	movs	r0, #20
 8003fc8:	f002 ff37 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2100      	movs	r1, #0
 8003fd0:	2015      	movs	r0, #21
 8003fd2:	f002 ff16 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003fd6:	2015      	movs	r0, #21
 8003fd8:	f002 ff2f 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	2016      	movs	r0, #22
 8003fe2:	f002 ff0e 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003fe6:	2016      	movs	r0, #22
 8003fe8:	f002 ff27 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003fec:	e060      	b.n	80040b0 <HAL_CAN_MspInit+0x1b0>
  else if(hcan->Instance==CAN2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <HAL_CAN_MspInit+0x1c8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d15b      	bne.n	80040b0 <HAL_CAN_MspInit+0x1b0>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	4b30      	ldr	r3, [pc, #192]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	4a2f      	ldr	r2, [pc, #188]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8004002:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004006:	6413      	str	r3, [r2, #64]	@ 0x40
 8004008:	4b2d      	ldr	r3, [pc, #180]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004014:	4b29      	ldr	r3, [pc, #164]	@ (80040bc <HAL_CAN_MspInit+0x1bc>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	4a28      	ldr	r2, [pc, #160]	@ (80040bc <HAL_CAN_MspInit+0x1bc>)
 800401c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800401e:	4b27      	ldr	r3, [pc, #156]	@ (80040bc <HAL_CAN_MspInit+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10d      	bne.n	8004042 <HAL_CAN_MspInit+0x142>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b25      	ldr	r3, [pc, #148]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	4a24      	ldr	r2, [pc, #144]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8004030:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004034:	6413      	str	r3, [r2, #64]	@ 0x40
 8004036:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	4b1e      	ldr	r3, [pc, #120]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	4a1d      	ldr	r2, [pc, #116]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	6313      	str	r3, [r2, #48]	@ 0x30
 8004052:	4b1b      	ldr	r3, [pc, #108]	@ (80040c0 <HAL_CAN_MspInit+0x1c0>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800405e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004064:	2302      	movs	r3, #2
 8004066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406c:	2303      	movs	r3, #3
 800406e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004070:	2309      	movs	r3, #9
 8004072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004074:	f107 031c 	add.w	r3, r7, #28
 8004078:	4619      	mov	r1, r3
 800407a:	4814      	ldr	r0, [pc, #80]	@ (80040cc <HAL_CAN_MspInit+0x1cc>)
 800407c:	f003 faac 	bl	80075d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8004080:	2200      	movs	r2, #0
 8004082:	2100      	movs	r1, #0
 8004084:	203f      	movs	r0, #63	@ 0x3f
 8004086:	f002 febc 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800408a:	203f      	movs	r0, #63	@ 0x3f
 800408c:	f002 fed5 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004090:	2200      	movs	r2, #0
 8004092:	2100      	movs	r1, #0
 8004094:	2040      	movs	r0, #64	@ 0x40
 8004096:	f002 feb4 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800409a:	2040      	movs	r0, #64	@ 0x40
 800409c:	f002 fecd 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80040a0:	2200      	movs	r2, #0
 80040a2:	2100      	movs	r1, #0
 80040a4:	2041      	movs	r0, #65	@ 0x41
 80040a6:	f002 feac 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80040aa:	2041      	movs	r0, #65	@ 0x41
 80040ac:	f002 fec5 	bl	8006e3a <HAL_NVIC_EnableIRQ>
}
 80040b0:	bf00      	nop
 80040b2:	3730      	adds	r7, #48	@ 0x30
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40006400 	.word	0x40006400
 80040bc:	2000179c 	.word	0x2000179c
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40020c00 	.word	0x40020c00
 80040c8:	40006800 	.word	0x40006800
 80040cc:	40020400 	.word	0x40020400

080040d0 <HAL_CAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a27      	ldr	r2, [pc, #156]	@ (800417c <HAL_CAN_MspDeInit+0xac>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d11f      	bne.n	8004122 <HAL_CAN_MspDeInit+0x52>
  {
    /* USER CODE BEGIN CAN1_MspDeInit 0 */

    /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_CAN1_CLK_ENABLED--;
 80040e2:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <HAL_CAN_MspDeInit+0xb0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	4a25      	ldr	r2, [pc, #148]	@ (8004180 <HAL_CAN_MspDeInit+0xb0>)
 80040ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 80040ec:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <HAL_CAN_MspDeInit+0xb0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <HAL_CAN_MspDeInit+0x30>
      __HAL_RCC_CAN1_CLK_DISABLE();
 80040f4:	4b23      	ldr	r3, [pc, #140]	@ (8004184 <HAL_CAN_MspDeInit+0xb4>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	4a22      	ldr	r2, [pc, #136]	@ (8004184 <HAL_CAN_MspDeInit+0xb4>)
 80040fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80040fe:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 8004100:	2103      	movs	r1, #3
 8004102:	4821      	ldr	r0, [pc, #132]	@ (8004188 <HAL_CAN_MspDeInit+0xb8>)
 8004104:	f003 fc04 	bl	8007910 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8004108:	2013      	movs	r0, #19
 800410a:	f002 fea4 	bl	8006e56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 800410e:	2014      	movs	r0, #20
 8004110:	f002 fea1 	bl	8006e56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8004114:	2015      	movs	r0, #21
 8004116:	f002 fe9e 	bl	8006e56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 800411a:	2016      	movs	r0, #22
 800411c:	f002 fe9b 	bl	8006e56 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN CAN2_MspDeInit 1 */

    /* USER CODE END CAN2_MspDeInit 1 */
  }

}
 8004120:	e027      	b.n	8004172 <HAL_CAN_MspDeInit+0xa2>
  else if(hcan->Instance==CAN2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a19      	ldr	r2, [pc, #100]	@ (800418c <HAL_CAN_MspDeInit+0xbc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d122      	bne.n	8004172 <HAL_CAN_MspDeInit+0xa2>
    __HAL_RCC_CAN2_CLK_DISABLE();
 800412c:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <HAL_CAN_MspDeInit+0xb4>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	4a14      	ldr	r2, [pc, #80]	@ (8004184 <HAL_CAN_MspDeInit+0xb4>)
 8004132:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004136:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_RCC_CAN1_CLK_ENABLED--;
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <HAL_CAN_MspDeInit+0xb0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	4a10      	ldr	r2, [pc, #64]	@ (8004180 <HAL_CAN_MspDeInit+0xb0>)
 8004140:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 8004142:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <HAL_CAN_MspDeInit+0xb0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <HAL_CAN_MspDeInit+0x86>
      __HAL_RCC_CAN1_CLK_DISABLE();
 800414a:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <HAL_CAN_MspDeInit+0xb4>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	4a0d      	ldr	r2, [pc, #52]	@ (8004184 <HAL_CAN_MspDeInit+0xb4>)
 8004150:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004154:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 8004156:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800415a:	480d      	ldr	r0, [pc, #52]	@ (8004190 <HAL_CAN_MspDeInit+0xc0>)
 800415c:	f003 fbd8 	bl	8007910 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(CAN2_TX_IRQn);
 8004160:	203f      	movs	r0, #63	@ 0x3f
 8004162:	f002 fe78 	bl	8006e56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX0_IRQn);
 8004166:	2040      	movs	r0, #64	@ 0x40
 8004168:	f002 fe75 	bl	8006e56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX1_IRQn);
 800416c:	2041      	movs	r0, #65	@ 0x41
 800416e:	f002 fe72 	bl	8006e56 <HAL_NVIC_DisableIRQ>
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40006400 	.word	0x40006400
 8004180:	2000179c 	.word	0x2000179c
 8004184:	40023800 	.word	0x40023800
 8004188:	40020c00 	.word	0x40020c00
 800418c:	40006800 	.word	0x40006800
 8004190:	40020400 	.word	0x40020400

08004194 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0b      	ldr	r2, [pc, #44]	@ (80041d0 <HAL_CRC_MspInit+0x3c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10d      	bne.n	80041c2 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <HAL_CRC_MspInit+0x40>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <HAL_CRC_MspInit+0x40>)
 80041b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b6:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <HAL_CRC_MspInit+0x40>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40023000 	.word	0x40023000
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a31      	ldr	r2, [pc, #196]	@ (80042bc <HAL_I2C_MspInit+0xe4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d15b      	bne.n	80042b2 <HAL_I2C_MspInit+0xda>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	4b30      	ldr	r3, [pc, #192]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	4a2f      	ldr	r2, [pc, #188]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6313      	str	r3, [r2, #48]	@ 0x30
 800420a:	4b2d      	ldr	r3, [pc, #180]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6313      	str	r3, [r2, #48]	@ 0x30
 8004226:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004238:	2312      	movs	r3, #18
 800423a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800423c:	2301      	movs	r3, #1
 800423e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004240:	2303      	movs	r3, #3
 8004242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004244:	2304      	movs	r3, #4
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	4619      	mov	r1, r3
 800424e:	481d      	ldr	r0, [pc, #116]	@ (80042c4 <HAL_I2C_MspInit+0xec>)
 8004250:	f003 f9c2 	bl	80075d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800425a:	2312      	movs	r3, #18
 800425c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004262:	2303      	movs	r3, #3
 8004264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004266:	2304      	movs	r3, #4
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4619      	mov	r1, r3
 8004270:	4815      	ldr	r0, [pc, #84]	@ (80042c8 <HAL_I2C_MspInit+0xf0>)
 8004272:	f003 f9b1 	bl	80075d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4a10      	ldr	r2, [pc, #64]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 8004280:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004284:	6413      	str	r3, [r2, #64]	@ 0x40
 8004286:	4b0e      	ldr	r3, [pc, #56]	@ (80042c0 <HAL_I2C_MspInit+0xe8>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 8004292:	2200      	movs	r2, #0
 8004294:	2102      	movs	r1, #2
 8004296:	2048      	movs	r0, #72	@ 0x48
 8004298:	f002 fdb3 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800429c:	2048      	movs	r0, #72	@ 0x48
 800429e:	f002 fdcc 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 2, 1);
 80042a2:	2201      	movs	r2, #1
 80042a4:	2102      	movs	r1, #2
 80042a6:	2049      	movs	r0, #73	@ 0x49
 80042a8:	f002 fdab 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80042ac:	2049      	movs	r0, #73	@ 0x49
 80042ae:	f002 fdc4 	bl	8006e3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80042b2:	bf00      	nop
 80042b4:	3728      	adds	r7, #40	@ 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40005c00 	.word	0x40005c00
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40020800 	.word	0x40020800
 80042c8:	40020000 	.word	0x40020000

080042cc <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004314 <HAL_I2C_MspDeInit+0x48>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d115      	bne.n	800430a <HAL_I2C_MspDeInit+0x3e>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80042de:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <HAL_I2C_MspDeInit+0x4c>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004318 <HAL_I2C_MspDeInit+0x4c>)
 80042e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80042e8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80042ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042ee:	480b      	ldr	r0, [pc, #44]	@ (800431c <HAL_I2C_MspDeInit+0x50>)
 80042f0:	f003 fb0e 	bl	8007910 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80042f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042f8:	4809      	ldr	r0, [pc, #36]	@ (8004320 <HAL_I2C_MspDeInit+0x54>)
 80042fa:	f003 fb09 	bl	8007910 <HAL_GPIO_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80042fe:	2048      	movs	r0, #72	@ 0x48
 8004300:	f002 fda9 	bl	8006e56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8004304:	2049      	movs	r0, #73	@ 0x49
 8004306:	f002 fda6 	bl	8006e56 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40005c00 	.word	0x40005c00
 8004318:	40023800 	.word	0x40023800
 800431c:	40020800 	.word	0x40020800
 8004320:	40020000 	.word	0x40020000

08004324 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	@ 0x28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432c:	f107 0314 	add.w	r3, r7, #20
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a28      	ldr	r2, [pc, #160]	@ (80043e4 <HAL_SPI_MspInit+0xc0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d14a      	bne.n	80043dc <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	4b27      	ldr	r3, [pc, #156]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	4a26      	ldr	r2, [pc, #152]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 8004350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004354:	6413      	str	r3, [r2, #64]	@ 0x40
 8004356:	4b24      	ldr	r3, [pc, #144]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	4b20      	ldr	r3, [pc, #128]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	4a1f      	ldr	r2, [pc, #124]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	6313      	str	r3, [r2, #48]	@ 0x30
 8004372:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 8004388:	f043 0302 	orr.w	r3, r3, #2
 800438c:	6313      	str	r3, [r2, #48]	@ 0x30
 800438e:	4b16      	ldr	r3, [pc, #88]	@ (80043e8 <HAL_SPI_MspInit+0xc4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800439a:	230c      	movs	r3, #12
 800439c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439e:	2302      	movs	r3, #2
 80043a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a6:	2303      	movs	r3, #3
 80043a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043aa:	2305      	movs	r3, #5
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	4619      	mov	r1, r3
 80043b4:	480d      	ldr	r0, [pc, #52]	@ (80043ec <HAL_SPI_MspInit+0xc8>)
 80043b6:	f003 f90f 	bl	80075d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c0:	2302      	movs	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c8:	2303      	movs	r3, #3
 80043ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043cc:	2305      	movs	r3, #5
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d0:	f107 0314 	add.w	r3, r7, #20
 80043d4:	4619      	mov	r1, r3
 80043d6:	4806      	ldr	r0, [pc, #24]	@ (80043f0 <HAL_SPI_MspInit+0xcc>)
 80043d8:	f003 f8fe 	bl	80075d8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80043dc:	bf00      	nop
 80043de:	3728      	adds	r7, #40	@ 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40003800 	.word	0x40003800
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40020800 	.word	0x40020800
 80043f0:	40020400 	.word	0x40020400

080043f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b094      	sub	sp, #80	@ 0x50
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a97      	ldr	r2, [pc, #604]	@ (8004670 <HAL_TIM_Base_MspInit+0x27c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d14d      	bne.n	80044b2 <HAL_TIM_Base_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	63bb      	str	r3, [r7, #56]	@ 0x38
 800441a:	4b96      	ldr	r3, [pc, #600]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	4a95      	ldr	r2, [pc, #596]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6453      	str	r3, [r2, #68]	@ 0x44
 8004426:	4b93      	ldr	r3, [pc, #588]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	637b      	str	r3, [r7, #52]	@ 0x34
 8004436:	4b8f      	ldr	r3, [pc, #572]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4a8e      	ldr	r2, [pc, #568]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 800443c:	f043 0310 	orr.w	r3, r3, #16
 8004440:	6313      	str	r3, [r2, #48]	@ 0x30
 8004442:	4b8c      	ldr	r3, [pc, #560]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
 800444c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800444e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445c:	2300      	movs	r3, #0
 800445e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004460:	2301      	movs	r3, #1
 8004462:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004464:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004468:	4619      	mov	r1, r3
 800446a:	4883      	ldr	r0, [pc, #524]	@ (8004678 <HAL_TIM_Base_MspInit+0x284>)
 800446c:	f003 f8b4 	bl	80075d8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004470:	2200      	movs	r2, #0
 8004472:	2100      	movs	r1, #0
 8004474:	2018      	movs	r0, #24
 8004476:	f002 fcc4 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800447a:	2018      	movs	r0, #24
 800447c:	f002 fcdd 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	2019      	movs	r0, #25
 8004486:	f002 fcbc 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800448a:	2019      	movs	r0, #25
 800448c:	f002 fcd5 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004490:	2200      	movs	r2, #0
 8004492:	2100      	movs	r1, #0
 8004494:	201a      	movs	r0, #26
 8004496:	f002 fcb4 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800449a:	201a      	movs	r0, #26
 800449c:	f002 fccd 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80044a0:	2200      	movs	r2, #0
 80044a2:	2101      	movs	r1, #1
 80044a4:	201b      	movs	r0, #27
 80044a6:	f002 fcac 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80044aa:	201b      	movs	r0, #27
 80044ac:	f002 fcc5 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80044b0:	e143      	b.n	800473a <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM2)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ba:	d134      	bne.n	8004526 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044bc:	2300      	movs	r3, #0
 80044be:	633b      	str	r3, [r7, #48]	@ 0x30
 80044c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	4a6b      	ldr	r2, [pc, #428]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80044cc:	4b69      	ldr	r3, [pc, #420]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d8:	2300      	movs	r3, #0
 80044da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044dc:	4b65      	ldr	r3, [pc, #404]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e0:	4a64      	ldr	r2, [pc, #400]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80044e8:	4b62      	ldr	r3, [pc, #392]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044f4:	2320      	movs	r3, #32
 80044f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f8:	2302      	movs	r3, #2
 80044fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004500:	2300      	movs	r3, #0
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004504:	2301      	movs	r3, #1
 8004506:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004508:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800450c:	4619      	mov	r1, r3
 800450e:	485b      	ldr	r0, [pc, #364]	@ (800467c <HAL_TIM_Base_MspInit+0x288>)
 8004510:	f003 f862 	bl	80075d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004514:	2200      	movs	r2, #0
 8004516:	2101      	movs	r1, #1
 8004518:	201c      	movs	r0, #28
 800451a:	f002 fc72 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800451e:	201c      	movs	r0, #28
 8004520:	f002 fc8b 	bl	8006e3a <HAL_NVIC_EnableIRQ>
}
 8004524:	e109      	b.n	800473a <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM3)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a55      	ldr	r2, [pc, #340]	@ (8004680 <HAL_TIM_Base_MspInit+0x28c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d134      	bne.n	800459a <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004534:	4b4f      	ldr	r3, [pc, #316]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	4a4e      	ldr	r2, [pc, #312]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004540:	4b4c      	ldr	r3, [pc, #304]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800454c:	2300      	movs	r3, #0
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004550:	4b48      	ldr	r3, [pc, #288]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	4a47      	ldr	r2, [pc, #284]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004556:	f043 0302 	orr.w	r3, r3, #2
 800455a:	6313      	str	r3, [r2, #48]	@ 0x30
 800455c:	4b45      	ldr	r3, [pc, #276]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004568:	2310      	movs	r3, #16
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	2302      	movs	r3, #2
 800456e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004574:	2300      	movs	r3, #0
 8004576:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004578:	2302      	movs	r3, #2
 800457a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004580:	4619      	mov	r1, r3
 8004582:	4840      	ldr	r0, [pc, #256]	@ (8004684 <HAL_TIM_Base_MspInit+0x290>)
 8004584:	f003 f828 	bl	80075d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	201d      	movs	r0, #29
 800458e:	f002 fc38 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004592:	201d      	movs	r0, #29
 8004594:	f002 fc51 	bl	8006e3a <HAL_NVIC_EnableIRQ>
}
 8004598:	e0cf      	b.n	800473a <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM4)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3a      	ldr	r2, [pc, #232]	@ (8004688 <HAL_TIM_Base_MspInit+0x294>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d135      	bne.n	8004610 <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	4b32      	ldr	r3, [pc, #200]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	4a31      	ldr	r2, [pc, #196]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80045ae:	f043 0304 	orr.w	r3, r3, #4
 80045b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80045b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80045ca:	f043 0308 	orr.w	r3, r3, #8
 80045ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d0:	4b28      	ldr	r3, [pc, #160]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80045dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	2302      	movs	r3, #2
 80045e4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ea:	2300      	movs	r3, #0
 80045ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045ee:	2302      	movs	r3, #2
 80045f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80045f6:	4619      	mov	r1, r3
 80045f8:	4824      	ldr	r0, [pc, #144]	@ (800468c <HAL_TIM_Base_MspInit+0x298>)
 80045fa:	f002 ffed 	bl	80075d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2101      	movs	r1, #1
 8004602:	201e      	movs	r0, #30
 8004604:	f002 fbfd 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004608:	201e      	movs	r0, #30
 800460a:	f002 fc16 	bl	8006e3a <HAL_NVIC_EnableIRQ>
}
 800460e:	e094      	b.n	800473a <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM6)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1e      	ldr	r2, [pc, #120]	@ (8004690 <HAL_TIM_Base_MspInit+0x29c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10e      	bne.n	8004638 <HAL_TIM_Base_MspInit+0x244>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	4a14      	ldr	r2, [pc, #80]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004624:	f043 0310 	orr.w	r3, r3, #16
 8004628:	6413      	str	r3, [r2, #64]	@ 0x40
 800462a:	4b12      	ldr	r3, [pc, #72]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	69bb      	ldr	r3, [r7, #24]
}
 8004636:	e080      	b.n	800473a <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM7)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a15      	ldr	r2, [pc, #84]	@ (8004694 <HAL_TIM_Base_MspInit+0x2a0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d12a      	bne.n	8004698 <HAL_TIM_Base_MspInit+0x2a4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	4a0a      	ldr	r2, [pc, #40]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 800464c:	f043 0320 	orr.w	r3, r3, #32
 8004650:	6413      	str	r3, [r2, #64]	@ 0x40
 8004652:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <HAL_TIM_Base_MspInit+0x280>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800465e:	2200      	movs	r2, #0
 8004660:	2100      	movs	r1, #0
 8004662:	2037      	movs	r0, #55	@ 0x37
 8004664:	f002 fbcd 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004668:	2037      	movs	r0, #55	@ 0x37
 800466a:	f002 fbe6 	bl	8006e3a <HAL_NVIC_EnableIRQ>
}
 800466e:	e064      	b.n	800473a <HAL_TIM_Base_MspInit+0x346>
 8004670:	40010000 	.word	0x40010000
 8004674:	40023800 	.word	0x40023800
 8004678:	40021000 	.word	0x40021000
 800467c:	40020000 	.word	0x40020000
 8004680:	40000400 	.word	0x40000400
 8004684:	40020400 	.word	0x40020400
 8004688:	40000800 	.word	0x40000800
 800468c:	40020c00 	.word	0x40020c00
 8004690:	40001000 	.word	0x40001000
 8004694:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a29      	ldr	r2, [pc, #164]	@ (8004744 <HAL_TIM_Base_MspInit+0x350>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d14b      	bne.n	800473a <HAL_TIM_Base_MspInit+0x346>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	4b28      	ldr	r3, [pc, #160]	@ (8004748 <HAL_TIM_Base_MspInit+0x354>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	4a27      	ldr	r2, [pc, #156]	@ (8004748 <HAL_TIM_Base_MspInit+0x354>)
 80046ac:	f043 0302 	orr.w	r3, r3, #2
 80046b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80046b2:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <HAL_TIM_Base_MspInit+0x354>)
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b21      	ldr	r3, [pc, #132]	@ (8004748 <HAL_TIM_Base_MspInit+0x354>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	4a20      	ldr	r2, [pc, #128]	@ (8004748 <HAL_TIM_Base_MspInit+0x354>)
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004748 <HAL_TIM_Base_MspInit+0x354>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80046da:	2340      	movs	r3, #64	@ 0x40
 80046dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	2302      	movs	r3, #2
 80046e0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e6:	2300      	movs	r3, #0
 80046e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80046ea:	2303      	movs	r3, #3
 80046ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80046f2:	4619      	mov	r1, r3
 80046f4:	4815      	ldr	r0, [pc, #84]	@ (800474c <HAL_TIM_Base_MspInit+0x358>)
 80046f6:	f002 ff6f 	bl	80075d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80046fa:	2200      	movs	r2, #0
 80046fc:	2100      	movs	r1, #0
 80046fe:	202b      	movs	r0, #43	@ 0x2b
 8004700:	f002 fb7f 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004704:	202b      	movs	r0, #43	@ 0x2b
 8004706:	f002 fb98 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	2100      	movs	r1, #0
 800470e:	202c      	movs	r0, #44	@ 0x2c
 8004710:	f002 fb77 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004714:	202c      	movs	r0, #44	@ 0x2c
 8004716:	f002 fb90 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	2100      	movs	r1, #0
 800471e:	202d      	movs	r0, #45	@ 0x2d
 8004720:	f002 fb6f 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004724:	202d      	movs	r0, #45	@ 0x2d
 8004726:	f002 fb88 	bl	8006e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2101      	movs	r1, #1
 800472e:	202e      	movs	r0, #46	@ 0x2e
 8004730:	f002 fb67 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004734:	202e      	movs	r0, #46	@ 0x2e
 8004736:	f002 fb80 	bl	8006e3a <HAL_NVIC_EnableIRQ>
}
 800473a:	bf00      	nop
 800473c:	3750      	adds	r7, #80	@ 0x50
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40010400 	.word	0x40010400
 8004748:	40023800 	.word	0x40023800
 800474c:	40020800 	.word	0x40020800

08004750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004758:	f107 030c 	add.w	r3, r7, #12
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a12      	ldr	r2, [pc, #72]	@ (80047b8 <HAL_TIM_MspPostInit+0x68>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d11e      	bne.n	80047b0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <HAL_TIM_MspPostInit+0x6c>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	4a10      	ldr	r2, [pc, #64]	@ (80047bc <HAL_TIM_MspPostInit+0x6c>)
 800477c:	f043 0310 	orr.w	r3, r3, #16
 8004780:	6313      	str	r3, [r2, #48]	@ 0x30
 8004782:	4b0e      	ldr	r3, [pc, #56]	@ (80047bc <HAL_TIM_MspPostInit+0x6c>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800478e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004792:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2302      	movs	r3, #2
 8004796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047a0:	2301      	movs	r3, #1
 80047a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	4619      	mov	r1, r3
 80047aa:	4805      	ldr	r0, [pc, #20]	@ (80047c0 <HAL_TIM_MspPostInit+0x70>)
 80047ac:	f002 ff14 	bl	80075d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80047b0:	bf00      	nop
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40021000 	.word	0x40021000

080047c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	@ 0x28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004858 <HAL_UART_MspInit+0x94>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d134      	bne.n	8004850 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	4b1c      	ldr	r3, [pc, #112]	@ (800485c <HAL_UART_MspInit+0x98>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	4a1b      	ldr	r2, [pc, #108]	@ (800485c <HAL_UART_MspInit+0x98>)
 80047f0:	f043 0310 	orr.w	r3, r3, #16
 80047f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80047f6:	4b19      	ldr	r3, [pc, #100]	@ (800485c <HAL_UART_MspInit+0x98>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	4b15      	ldr	r3, [pc, #84]	@ (800485c <HAL_UART_MspInit+0x98>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	4a14      	ldr	r2, [pc, #80]	@ (800485c <HAL_UART_MspInit+0x98>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	6313      	str	r3, [r2, #48]	@ 0x30
 8004812:	4b12      	ldr	r3, [pc, #72]	@ (800485c <HAL_UART_MspInit+0x98>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800481e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004824:	2302      	movs	r3, #2
 8004826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800482c:	2303      	movs	r3, #3
 800482e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004830:	2307      	movs	r3, #7
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004834:	f107 0314 	add.w	r3, r7, #20
 8004838:	4619      	mov	r1, r3
 800483a:	4809      	ldr	r0, [pc, #36]	@ (8004860 <HAL_UART_MspInit+0x9c>)
 800483c:	f002 fecc 	bl	80075d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004840:	2200      	movs	r2, #0
 8004842:	2100      	movs	r1, #0
 8004844:	2025      	movs	r0, #37	@ 0x25
 8004846:	f002 fadc 	bl	8006e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800484a:	2025      	movs	r0, #37	@ 0x25
 800484c:	f002 faf5 	bl	8006e3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004850:	bf00      	nop
 8004852:	3728      	adds	r7, #40	@ 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40011000 	.word	0x40011000
 800485c:	40023800 	.word	0x40023800
 8004860:	40020000 	.word	0x40020000

08004864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004868:	bf00      	nop
 800486a:	e7fd      	b.n	8004868 <NMI_Handler+0x4>

0800486c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <HardFault_Handler+0x4>

08004874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004878:	bf00      	nop
 800487a:	e7fd      	b.n	8004878 <MemManage_Handler+0x4>

0800487c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <BusFault_Handler+0x4>

08004884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <UsageFault_Handler+0x4>

0800488c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800489e:	bf00      	nop
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048ba:	f000 fd35 	bl	8005328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80048c2:	b480      	push	{r7}
 80048c4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80048d4:	4802      	ldr	r0, [pc, #8]	@ (80048e0 <ADC_IRQHandler+0x10>)
 80048d6:	f000 feca 	bl	800566e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000334 	.word	0x20000334

080048e4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80048e8:	4802      	ldr	r0, [pc, #8]	@ (80048f4 <CAN1_TX_IRQHandler+0x10>)
 80048ea:	f001 ff5c 	bl	80067a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200003dc 	.word	0x200003dc

080048f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80048fc:	4802      	ldr	r0, [pc, #8]	@ (8004908 <CAN1_RX0_IRQHandler+0x10>)
 80048fe:	f001 ff52 	bl	80067a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200003dc 	.word	0x200003dc

0800490c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004910:	4802      	ldr	r0, [pc, #8]	@ (800491c <CAN1_RX1_IRQHandler+0x10>)
 8004912:	f001 ff48 	bl	80067a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200003dc 	.word	0x200003dc

08004920 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004924:	4802      	ldr	r0, [pc, #8]	@ (8004930 <CAN1_SCE_IRQHandler+0x10>)
 8004926:	f001 ff3e 	bl	80067a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200003dc 	.word	0x200003dc

08004934 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004938:	4802      	ldr	r0, [pc, #8]	@ (8004944 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800493a:	f006 ff9f 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200004e0 	.word	0x200004e0

08004948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800494c:	4802      	ldr	r0, [pc, #8]	@ (8004958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800494e:	f006 ff95 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200004e0 	.word	0x200004e0

0800495c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004960:	4802      	ldr	r0, [pc, #8]	@ (800496c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004962:	f006 ff8b 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200004e0 	.word	0x200004e0

08004970 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004974:	4802      	ldr	r0, [pc, #8]	@ (8004980 <TIM1_CC_IRQHandler+0x10>)
 8004976:	f006 ff81 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	200004e0 	.word	0x200004e0

08004984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004988:	4802      	ldr	r0, [pc, #8]	@ (8004994 <TIM2_IRQHandler+0x10>)
 800498a:	f006 ff77 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000528 	.word	0x20000528

08004998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800499c:	4802      	ldr	r0, [pc, #8]	@ (80049a8 <TIM3_IRQHandler+0x10>)
 800499e:	f006 ff6d 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000570 	.word	0x20000570

080049ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80049b0:	4802      	ldr	r0, [pc, #8]	@ (80049bc <TIM4_IRQHandler+0x10>)
 80049b2:	f006 ff63 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200005b8 	.word	0x200005b8

080049c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049c4:	4802      	ldr	r0, [pc, #8]	@ (80049d0 <USART1_IRQHandler+0x10>)
 80049c6:	f008 f8cf 	bl	800cb68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	200006d8 	.word	0x200006d8

080049d4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80049d8:	4802      	ldr	r0, [pc, #8]	@ (80049e4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80049da:	f006 ff4f 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000690 	.word	0x20000690

080049e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80049ec:	4802      	ldr	r0, [pc, #8]	@ (80049f8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80049ee:	f006 ff45 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000690 	.word	0x20000690

080049fc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004a00:	4802      	ldr	r0, [pc, #8]	@ (8004a0c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004a02:	f006 ff3b 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000690 	.word	0x20000690

08004a10 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004a14:	4802      	ldr	r0, [pc, #8]	@ (8004a20 <TIM8_CC_IRQHandler+0x10>)
 8004a16:	f006 ff31 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000690 	.word	0x20000690

08004a24 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004a28:	4802      	ldr	r0, [pc, #8]	@ (8004a34 <TIM7_IRQHandler+0x10>)
 8004a2a:	f006 ff27 	bl	800b87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000648 	.word	0x20000648

08004a38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004a3c:	4802      	ldr	r0, [pc, #8]	@ (8004a48 <DMA2_Stream0_IRQHandler+0x10>)
 8004a3e:	f002 fb81 	bl	8007144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	2000037c 	.word	0x2000037c

08004a4c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004a50:	4802      	ldr	r0, [pc, #8]	@ (8004a5c <CAN2_TX_IRQHandler+0x10>)
 8004a52:	f001 fea8 	bl	80067a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000404 	.word	0x20000404

08004a60 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004a64:	4802      	ldr	r0, [pc, #8]	@ (8004a70 <CAN2_RX0_IRQHandler+0x10>)
 8004a66:	f001 fe9e 	bl	80067a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000404 	.word	0x20000404

08004a74 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004a78:	4802      	ldr	r0, [pc, #8]	@ (8004a84 <CAN2_RX1_IRQHandler+0x10>)
 8004a7a:	f001 fe94 	bl	80067a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000404 	.word	0x20000404

08004a88 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004a8c:	4802      	ldr	r0, [pc, #8]	@ (8004a98 <I2C3_EV_IRQHandler+0x10>)
 8004a8e:	f003 fc43 	bl	8008318 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000434 	.word	0x20000434

08004a9c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004aa0:	4802      	ldr	r0, [pc, #8]	@ (8004aac <I2C3_ER_IRQHandler+0x10>)
 8004aa2:	f003 fdaa 	bl	80085fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000434 	.word	0x20000434

08004ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return 1;
 8004ab4:	2301      	movs	r3, #1
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <_kill>:

int _kill(int pid, int sig)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004aca:	f009 fe91 	bl	800e7f0 <__errno>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2216      	movs	r2, #22
 8004ad2:	601a      	str	r2, [r3, #0]
  return -1;
 8004ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_exit>:

void _exit (int status)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff ffe7 	bl	8004ac0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004af2:	bf00      	nop
 8004af4:	e7fd      	b.n	8004af2 <_exit+0x12>

08004af6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e00a      	b.n	8004b1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b08:	f3af 8000 	nop.w
 8004b0c:	4601      	mov	r1, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	60ba      	str	r2, [r7, #8]
 8004b14:	b2ca      	uxtb	r2, r1
 8004b16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	dbf0      	blt.n	8004b08 <_read+0x12>
  }

  return len;
 8004b26:	687b      	ldr	r3, [r7, #4]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	e009      	b.n	8004b56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	60ba      	str	r2, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3301      	adds	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	dbf1      	blt.n	8004b42 <_write+0x12>
  }
  return len;
 8004b5e:	687b      	ldr	r3, [r7, #4]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_close>:

int _close(int file)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b90:	605a      	str	r2, [r3, #4]
  return 0;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <_isatty>:

int _isatty(int file)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ba8:	2301      	movs	r3, #1
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bd8:	4a14      	ldr	r2, [pc, #80]	@ (8004c2c <_sbrk+0x5c>)
 8004bda:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <_sbrk+0x60>)
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004be4:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <_sbrk+0x64>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bec:	4b11      	ldr	r3, [pc, #68]	@ (8004c34 <_sbrk+0x64>)
 8004bee:	4a12      	ldr	r2, [pc, #72]	@ (8004c38 <_sbrk+0x68>)
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bf2:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <_sbrk+0x64>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d207      	bcs.n	8004c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c00:	f009 fdf6 	bl	800e7f0 <__errno>
 8004c04:	4603      	mov	r3, r0
 8004c06:	220c      	movs	r2, #12
 8004c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0e:	e009      	b.n	8004c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c10:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <_sbrk+0x64>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c16:	4b07      	ldr	r3, [pc, #28]	@ (8004c34 <_sbrk+0x64>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4a05      	ldr	r2, [pc, #20]	@ (8004c34 <_sbrk+0x64>)
 8004c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20020000 	.word	0x20020000
 8004c30:	00000400 	.word	0x00000400
 8004c34:	200017a0 	.word	0x200017a0
 8004c38:	20001938 	.word	0x20001938

08004c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c40:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <SystemInit+0x20>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	4a05      	ldr	r2, [pc, #20]	@ (8004c5c <SystemInit+0x20>)
 8004c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <delay_us>:

    return temp[FILTER_WINDOW_SIZE / 2];
}

// ==== DELAY MICRO GIÂY ====
void delay_us(uint16_t us) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6, 0);
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <delay_us+0x34>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim6);
 8004c72:	4808      	ldr	r0, [pc, #32]	@ (8004c94 <delay_us+0x34>)
 8004c74:	f006 fa7a 	bl	800b16c <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 8004c78:	bf00      	nop
 8004c7a:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <delay_us+0x34>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d3f9      	bcc.n	8004c7a <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim6);
 8004c86:	4803      	ldr	r0, [pc, #12]	@ (8004c94 <delay_us+0x34>)
 8004c88:	f006 fad8 	bl	800b23c <HAL_TIM_Base_Stop>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000600 	.word	0x20000600

08004c98 <US01_TriggerOne>:

// ==== TRIGGER MỘT CẢM BIẾN ====
void US01_TriggerOne(uint8_t id) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b092      	sub	sp, #72	@ 0x48
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TRIG_PORT[id], TRIG_PIN[id], GPIO_PIN_SET);
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	4a29      	ldr	r2, [pc, #164]	@ (8004d4c <US01_TriggerOne+0xb4>)
 8004ca6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	4a28      	ldr	r2, [pc, #160]	@ (8004d50 <US01_TriggerOne+0xb8>)
 8004cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f002 ff27 	bl	8007b08 <HAL_GPIO_WritePin>
    delay_us(10);
 8004cba:	200a      	movs	r0, #10
 8004cbc:	f7ff ffd0 	bl	8004c60 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT[id], TRIG_PIN[id], GPIO_PIN_RESET);
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <US01_TriggerOne+0xb4>)
 8004cc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	4a21      	ldr	r2, [pc, #132]	@ (8004d50 <US01_TriggerOne+0xb8>)
 8004ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f002 ff18 	bl	8007b08 <HAL_GPIO_WritePin>

    Is_First_Captured[id] = 0;
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	4a1e      	ldr	r2, [pc, #120]	@ (8004d54 <US01_TriggerOne+0xbc>)
 8004cdc:	2100      	movs	r1, #0
 8004cde:	54d1      	strb	r1, [r2, r3]
    HAL_TIM_IC_Start_IT(htim[id], TIM_CHANNEL[id]);
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <US01_TriggerOne+0xc0>)
 8004ce4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	491c      	ldr	r1, [pc, #112]	@ (8004d5c <US01_TriggerOne+0xc4>)
 8004cec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f006 fbec 	bl	800b4d0 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_ENABLE_IT(htim[id], TIM_IT_CC[id]);
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	@ (8004d58 <US01_TriggerOne+0xc0>)
 8004cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68d9      	ldr	r1, [r3, #12]
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	4a16      	ldr	r2, [pc, #88]	@ (8004d60 <US01_TriggerOne+0xc8>)
 8004d08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	4812      	ldr	r0, [pc, #72]	@ (8004d58 <US01_TriggerOne+0xc0>)
 8004d10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	60da      	str	r2, [r3, #12]

    char msg[64];
    snprintf(msg, sizeof(msg), "TRIG sensor %d\r\n", id);
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	f107 0008 	add.w	r0, r7, #8
 8004d20:	4a10      	ldr	r2, [pc, #64]	@ (8004d64 <US01_TriggerOne+0xcc>)
 8004d22:	2140      	movs	r1, #64	@ 0x40
 8004d24:	f009 fbd2 	bl	800e4cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004d28:	f107 0308 	add.w	r3, r7, #8
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb fa9f 	bl	8000270 <strlen>
 8004d32:	4603      	mov	r3, r0
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	f107 0108 	add.w	r1, r7, #8
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	480a      	ldr	r0, [pc, #40]	@ (8004d68 <US01_TriggerOne+0xd0>)
 8004d40:	f007 fe86 	bl	800ca50 <HAL_UART_Transmit>
}
 8004d44:	bf00      	nop
 8004d46:	3748      	adds	r7, #72	@ 0x48
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	200000f4 	.word	0x200000f4
 8004d50:	20000104 	.word	0x20000104
 8004d54:	200017d4 	.word	0x200017d4
 8004d58:	2000010c 	.word	0x2000010c
 8004d5c:	200017a4 	.word	0x200017a4
 8004d60:	2000011c 	.word	0x2000011c
 8004d64:	08011b3c 	.word	0x08011b3c
 8004d68:	200006d8 	.word	0x200006d8

08004d6c <HAL_TIM_IC_CaptureCallback>:

// ==== NGẮT INPUT CAPTURE ====
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htimx) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b0a8      	sub	sp, #160	@ 0xa0
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	6078      	str	r0, [r7, #4]
    check_it(htimx);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fd fb29 	bl	80023cc <check_it>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d80:	e1a9      	b.n	80050d6 <HAL_TIM_IC_CaptureCallback+0x36a>
        if (htimx->Instance == htim[i]->Instance) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	49ac      	ldr	r1, [pc, #688]	@ (8005038 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8004d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	f040 819a 	bne.w	80050cc <HAL_TIM_IC_CaptureCallback+0x360>
            if (Is_First_Captured[i] == 0) {
 8004d98:	4aa8      	ldr	r2, [pc, #672]	@ (800503c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d9e:	4413      	add	r3, r2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f040 8086 	bne.w	8004eb6 <HAL_TIM_IC_CaptureCallback+0x14a>
                IC_Val1[i] = HAL_TIM_ReadCapturedValue(htimx, TIM_CHANNEL[i]);
 8004daa:	4aa5      	ldr	r2, [pc, #660]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004dac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f007 f876 	bl	800bea8 <HAL_TIM_ReadCapturedValue>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	49a1      	ldr	r1, [pc, #644]	@ (8005044 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004dc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                Is_First_Captured[i] = 1;
 8004dc8:	4a9c      	ldr	r2, [pc, #624]	@ (800503c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dce:	4413      	add	r3, r2
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_FALLING);
 8004dd4:	4a9a      	ldr	r2, [pc, #616]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d108      	bne.n	8004df4 <HAL_TIM_IC_CaptureCallback+0x88>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 020a 	bic.w	r2, r2, #10
 8004df0:	621a      	str	r2, [r3, #32]
 8004df2:	e027      	b.n	8004e44 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004df4:	4a92      	ldr	r2, [pc, #584]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d108      	bne.n	8004e14 <HAL_TIM_IC_CaptureCallback+0xa8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e10:	6213      	str	r3, [r2, #32]
 8004e12:	e017      	b.n	8004e44 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004e14:	4a8a      	ldr	r2, [pc, #552]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004e16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d108      	bne.n	8004e34 <HAL_TIM_IC_CaptureCallback+0xc8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004e30:	6213      	str	r3, [r2, #32]
 8004e32:	e007      	b.n	8004e44 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004e42:	6213      	str	r3, [r2, #32]
 8004e44:	4a7e      	ldr	r2, [pc, #504]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004e46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d108      	bne.n	8004e64 <HAL_TIM_IC_CaptureCallback+0xf8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a1a      	ldr	r2, [r3, #32]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0202 	orr.w	r2, r2, #2
 8004e60:	621a      	str	r2, [r3, #32]

                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_RISING);
                __HAL_TIM_DISABLE_IT(htimx, TIM_IT_CC[i]);
                HAL_TIM_IC_Stop_IT(htimx, TIM_CHANNEL[i]);
            }
            break;
 8004e62:	e13e      	b.n	80050e2 <HAL_TIM_IC_CaptureCallback+0x376>
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_FALLING);
 8004e64:	4a76      	ldr	r2, [pc, #472]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d108      	bne.n	8004e84 <HAL_TIM_IC_CaptureCallback+0x118>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	f043 0320 	orr.w	r3, r3, #32
 8004e80:	6213      	str	r3, [r2, #32]
 8004e82:	e122      	b.n	80050ca <HAL_TIM_IC_CaptureCallback+0x35e>
 8004e84:	4a6e      	ldr	r2, [pc, #440]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d108      	bne.n	8004ea4 <HAL_TIM_IC_CaptureCallback+0x138>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ea0:	6213      	str	r3, [r2, #32]
 8004ea2:	e112      	b.n	80050ca <HAL_TIM_IC_CaptureCallback+0x35e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004eb2:	6213      	str	r3, [r2, #32]
            break;
 8004eb4:	e115      	b.n	80050e2 <HAL_TIM_IC_CaptureCallback+0x376>
                IC_Val2[i] = HAL_TIM_ReadCapturedValue(htimx, TIM_CHANNEL[i]);
 8004eb6:	4a62      	ldr	r2, [pc, #392]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f006 fff0 	bl	800bea8 <HAL_TIM_ReadCapturedValue>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	495f      	ldr	r1, [pc, #380]	@ (8005048 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                __HAL_TIM_SET_COUNTER(htimx, 0);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24
                uint32_t max_timer = __HAL_TIM_GET_AUTORELOAD(htim[i]);
 8004edc:	4a56      	ldr	r2, [pc, #344]	@ (8005038 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8004ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                uint32_t diff = (IC_Val2[i] > IC_Val1[i]) ?
 8004eee:	4a56      	ldr	r2, [pc, #344]	@ (8005048 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ef4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ef8:	4952      	ldr	r1, [pc, #328]	@ (8005044 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004efe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (IC_Val2[i] - IC_Val1[i]) :
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d90b      	bls.n	8004f1e <HAL_TIM_IC_CaptureCallback+0x1b2>
 8004f06:	4a50      	ldr	r2, [pc, #320]	@ (8005048 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004f08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f10:	494c      	ldr	r1, [pc, #304]	@ (8005044 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	e00d      	b.n	8004f3a <HAL_TIM_IC_CaptureCallback+0x1ce>
                                ((max_timer - IC_Val1[i]) + IC_Val2[i]);
 8004f1e:	4a49      	ldr	r2, [pc, #292]	@ (8005044 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004f20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004f2c:	1ad2      	subs	r2, r2, r3
 8004f2e:	4946      	ldr	r1, [pc, #280]	@ (8005048 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004f30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (IC_Val2[i] - IC_Val1[i]) :
 8004f38:	4413      	add	r3, r2
                uint32_t diff = (IC_Val2[i] > IC_Val1[i]) ?
 8004f3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                uint32_t raw = (diff * 0.034f) / 2.0f;
 8004f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800504c <HAL_TIM_IC_CaptureCallback+0x2e0>
 8004f4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f52:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5e:	ee17 3a90 	vmov	r3, s15
 8004f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                Distances[i]=raw;
 8004f66:	493a      	ldr	r1, [pc, #232]	@ (8005050 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                Is_First_Captured[i] = 0;
 8004f74:	4a31      	ldr	r2, [pc, #196]	@ (800503c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f7a:	4413      	add	r3, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
                         i, raw, Distances[i]);
 8004f80:	4a33      	ldr	r2, [pc, #204]	@ (8005050 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                snprintf(msg, sizeof(msg),
 8004f8a:	f107 0008 	add.w	r0, r7, #8
 8004f8e:	9301      	str	r3, [sp, #4]
 8004f90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8005054 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8004f9c:	2180      	movs	r1, #128	@ 0x80
 8004f9e:	f009 fa95 	bl	800e4cc <sniprintf>
                UART_SendString(msg);
 8004fa2:	f107 0308 	add.w	r3, r7, #8
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f8ba 	bl	8005120 <UART_SendString>
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_RISING);
 8004fac:	4a24      	ldr	r2, [pc, #144]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <HAL_TIM_IC_CaptureCallback+0x260>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 020a 	bic.w	r2, r2, #10
 8004fc8:	621a      	str	r2, [r3, #32]
 8004fca:	e027      	b.n	800501c <HAL_TIM_IC_CaptureCallback+0x2b0>
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004fce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d108      	bne.n	8004fec <HAL_TIM_IC_CaptureCallback+0x280>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fe8:	6213      	str	r3, [r2, #32]
 8004fea:	e017      	b.n	800501c <HAL_TIM_IC_CaptureCallback+0x2b0>
 8004fec:	4a14      	ldr	r2, [pc, #80]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d108      	bne.n	800500c <HAL_TIM_IC_CaptureCallback+0x2a0>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005008:	6213      	str	r3, [r2, #32]
 800500a:	e007      	b.n	800501c <HAL_TIM_IC_CaptureCallback+0x2b0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800501a:	6213      	str	r3, [r2, #32]
 800501c:	4a08      	ldr	r2, [pc, #32]	@ (8005040 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 800501e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d116      	bne.n	8005058 <HAL_TIM_IC_CaptureCallback+0x2ec>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6a12      	ldr	r2, [r2, #32]
 8005034:	621a      	str	r2, [r3, #32]
 8005036:	e031      	b.n	800509c <HAL_TIM_IC_CaptureCallback+0x330>
 8005038:	2000010c 	.word	0x2000010c
 800503c:	200017d4 	.word	0x200017d4
 8005040:	200017a4 	.word	0x200017a4
 8005044:	200017b4 	.word	0x200017b4
 8005048:	200017c4 	.word	0x200017c4
 800504c:	3d0b4396 	.word	0x3d0b4396
 8005050:	200017d8 	.word	0x200017d8
 8005054:	08011b50 	.word	0x08011b50
 8005058:	4a24      	ldr	r2, [pc, #144]	@ (80050ec <HAL_TIM_IC_CaptureCallback+0x380>)
 800505a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800505e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005062:	2b04      	cmp	r3, #4
 8005064:	d106      	bne.n	8005074 <HAL_TIM_IC_CaptureCallback+0x308>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	6213      	str	r3, [r2, #32]
 8005072:	e013      	b.n	800509c <HAL_TIM_IC_CaptureCallback+0x330>
 8005074:	4a1d      	ldr	r2, [pc, #116]	@ (80050ec <HAL_TIM_IC_CaptureCallback+0x380>)
 8005076:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800507a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507e:	2b08      	cmp	r3, #8
 8005080:	d106      	bne.n	8005090 <HAL_TIM_IC_CaptureCallback+0x324>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	6213      	str	r3, [r2, #32]
 800508e:	e005      	b.n	800509c <HAL_TIM_IC_CaptureCallback+0x330>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	6213      	str	r3, [r2, #32]
                __HAL_TIM_DISABLE_IT(htimx, TIM_IT_CC[i]);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68d9      	ldr	r1, [r3, #12]
 80050a2:	4a13      	ldr	r2, [pc, #76]	@ (80050f0 <HAL_TIM_IC_CaptureCallback+0x384>)
 80050a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ac:	43da      	mvns	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	400a      	ands	r2, r1
 80050b4:	60da      	str	r2, [r3, #12]
                HAL_TIM_IC_Stop_IT(htimx, TIM_CHANNEL[i]);
 80050b6:	4a0d      	ldr	r2, [pc, #52]	@ (80050ec <HAL_TIM_IC_CaptureCallback+0x380>)
 80050b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f006 fb2c 	bl	800b720 <HAL_TIM_IC_Stop_IT>
            break;
 80050c8:	e00b      	b.n	80050e2 <HAL_TIM_IC_CaptureCallback+0x376>
 80050ca:	e00a      	b.n	80050e2 <HAL_TIM_IC_CaptureCallback+0x376>
    for (int i = 0; i < NUM_SENSORS; i++) {
 80050cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050d0:	3301      	adds	r3, #1
 80050d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050da:	2b03      	cmp	r3, #3
 80050dc:	f77f ae51 	ble.w	8004d82 <HAL_TIM_IC_CaptureCallback+0x16>
        }
    }
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3798      	adds	r7, #152	@ 0x98
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200017a4 	.word	0x200017a4
 80050f0:	2000011c 	.word	0x2000011c

080050f4 <US01_GetDistance>:

// ==== TRUY XUẤT GIÁ TRỊ ====
uint32_t US01_GetDistance(uint8_t id) {
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
    return (id < NUM_SENSORS) ? Distances[id] : 0;
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	2b03      	cmp	r3, #3
 8005102:	d804      	bhi.n	800510e <US01_GetDistance+0x1a>
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	4a05      	ldr	r2, [pc, #20]	@ (800511c <US01_GetDistance+0x28>)
 8005108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510c:	e000      	b.n	8005110 <US01_GetDistance+0x1c>
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	200017d8 	.word	0x200017d8

08005120 <UART_SendString>:

void UART_SendString(char *str) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fb f8a1 	bl	8000270 <strlen>
 800512e:	4603      	mov	r3, r0
 8005130:	b29a      	uxth	r2, r3
 8005132:	f04f 33ff 	mov.w	r3, #4294967295
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4803      	ldr	r0, [pc, #12]	@ (8005148 <UART_SendString+0x28>)
 800513a:	f007 fc89 	bl	800ca50 <HAL_UART_Transmit>
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200006d8 	.word	0x200006d8

0800514c <US01_SendAllDistances_CAN>:

// ==== GỬI DỮ LIỆU CAN ====
void US01_SendAllDistances_CAN(void) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
    uint8_t data[8];

    for (int i = 0; i < NUM_SENSORS; i++) {
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	e025      	b.n	80051a4 <US01_SendAllDistances_CAN+0x58>
        uint16_t dist = (uint16_t)US01_GetDistance(i);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff ffc9 	bl	80050f4 <US01_GetDistance>
 8005162:	4603      	mov	r3, r0
 8005164:	817b      	strh	r3, [r7, #10]

        if (dist > 500 || dist <= 1) {
 8005166:	897b      	ldrh	r3, [r7, #10]
 8005168:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800516c:	d802      	bhi.n	8005174 <US01_SendAllDistances_CAN+0x28>
 800516e:	897b      	ldrh	r3, [r7, #10]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d801      	bhi.n	8005178 <US01_SendAllDistances_CAN+0x2c>
            dist = 0x0033;
 8005174:	2333      	movs	r3, #51	@ 0x33
 8005176:	817b      	strh	r3, [r7, #10]
        }

        data[2 * i]     = (dist >> 8) & 0xFF;
 8005178:	897b      	ldrh	r3, [r7, #10]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	3310      	adds	r3, #16
 8005186:	443b      	add	r3, r7
 8005188:	f803 2c10 	strb.w	r2, [r3, #-16]
        data[2 * i + 1] = dist & 0xFF;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	3301      	adds	r3, #1
 8005192:	897a      	ldrh	r2, [r7, #10]
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	3310      	adds	r3, #16
 8005198:	443b      	add	r3, r7
 800519a:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < NUM_SENSORS; i++) {
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	ddd6      	ble.n	8005158 <US01_SendAllDistances_CAN+0xc>
    }

    CAN_SendTopicData(TOPIC_ID_US01, data, 8);
 80051aa:	463b      	mov	r3, r7
 80051ac:	2208      	movs	r2, #8
 80051ae:	4619      	mov	r1, r3
 80051b0:	2016      	movs	r0, #22
 80051b2:	f7fc ffed 	bl	8002190 <CAN_SendTopicData>
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <US01_TriggerAll_Sequential>:

void US01_TriggerAll_Sequential(void) {
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
    // KHÔNG DÙNG nếu bạn đã dùng trigger từng sensor trong vòng lặp
    for (int i = 0; i < NUM_SENSORS; i++) {
 80051c4:	2300      	movs	r3, #0
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	e00a      	b.n	80051e0 <US01_TriggerAll_Sequential+0x22>
        US01_TriggerOne(i);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fd62 	bl	8004c98 <US01_TriggerOne>
        delay_us(10);
 80051d4:	200a      	movs	r0, #10
 80051d6:	f7ff fd43 	bl	8004c60 <delay_us>
    for (int i = 0; i < NUM_SENSORS; i++) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3301      	adds	r3, #1
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	ddf1      	ble.n	80051ca <US01_TriggerAll_Sequential+0xc>
    }
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <PrintAllDistances>:

// ==== IN KẾT QUẢ ====
void PrintAllDistances(void) {
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b0a5      	sub	sp, #148	@ 0x94
 80051f4:	af04      	add	r7, sp, #16
    char buf[128];
    snprintf(buf, sizeof(buf),
             "Truoc2: %lucm | Trai: %lucm | Truoc1: %lucm | Phai: %lucm\r\n",
             Distances[0], Distances[1], Distances[2], Distances[3]);
 80051f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <PrintAllDistances+0x38>)
 80051f8:	681c      	ldr	r4, [r3, #0]
 80051fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <PrintAllDistances+0x38>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005228 <PrintAllDistances+0x38>)
 8005200:	6892      	ldr	r2, [r2, #8]
 8005202:	4909      	ldr	r1, [pc, #36]	@ (8005228 <PrintAllDistances+0x38>)
 8005204:	68c9      	ldr	r1, [r1, #12]
    snprintf(buf, sizeof(buf),
 8005206:	4638      	mov	r0, r7
 8005208:	9102      	str	r1, [sp, #8]
 800520a:	9201      	str	r2, [sp, #4]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	4623      	mov	r3, r4
 8005210:	4a06      	ldr	r2, [pc, #24]	@ (800522c <PrintAllDistances+0x3c>)
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	f009 f95a 	bl	800e4cc <sniprintf>
    UART_SendString(buf);
 8005218:	463b      	mov	r3, r7
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff80 	bl	8005120 <UART_SendString>
	}
 8005220:	bf00      	nop
 8005222:	3784      	adds	r7, #132	@ 0x84
 8005224:	46bd      	mov	sp, r7
 8005226:	bd90      	pop	{r4, r7, pc}
 8005228:	200017d8 	.word	0x200017d8
 800522c:	08011b74 	.word	0x08011b74

08005230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005268 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005234:	f7ff fd02 	bl	8004c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005238:	480c      	ldr	r0, [pc, #48]	@ (800526c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800523a:	490d      	ldr	r1, [pc, #52]	@ (8005270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800523c:	4a0d      	ldr	r2, [pc, #52]	@ (8005274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800523e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005240:	e002      	b.n	8005248 <LoopCopyDataInit>

08005242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005246:	3304      	adds	r3, #4

08005248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800524a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800524c:	d3f9      	bcc.n	8005242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800524e:	4a0a      	ldr	r2, [pc, #40]	@ (8005278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005250:	4c0a      	ldr	r4, [pc, #40]	@ (800527c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005254:	e001      	b.n	800525a <LoopFillZerobss>

08005256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005258:	3204      	adds	r2, #4

0800525a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800525a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800525c:	d3fb      	bcc.n	8005256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800525e:	f009 facd 	bl	800e7fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005262:	f7fd fd4d 	bl	8002d00 <main>
  bx  lr    
 8005266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800526c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005270:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8005274:	08011f6c 	.word	0x08011f6c
  ldr r2, =_sbss
 8005278:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 800527c:	20001938 	.word	0x20001938

08005280 <CAN2_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005280:	e7fe      	b.n	8005280 <CAN2_SCE_IRQHandler>
	...

08005284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005288:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <HAL_Init+0x40>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0d      	ldr	r2, [pc, #52]	@ (80052c4 <HAL_Init+0x40>)
 800528e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005294:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <HAL_Init+0x40>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0a      	ldr	r2, [pc, #40]	@ (80052c4 <HAL_Init+0x40>)
 800529a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800529e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052a0:	4b08      	ldr	r3, [pc, #32]	@ (80052c4 <HAL_Init+0x40>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a07      	ldr	r2, [pc, #28]	@ (80052c4 <HAL_Init+0x40>)
 80052a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052ac:	2003      	movs	r0, #3
 80052ae:	f001 fd9d 	bl	8006dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052b2:	2003      	movs	r0, #3
 80052b4:	f000 f808 	bl	80052c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052b8:	f7fe fd74 	bl	8003da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023c00 	.word	0x40023c00

080052c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052d0:	4b12      	ldr	r3, [pc, #72]	@ (800531c <HAL_InitTick+0x54>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b12      	ldr	r3, [pc, #72]	@ (8005320 <HAL_InitTick+0x58>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	4619      	mov	r1, r3
 80052da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052de:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fdc3 	bl	8006e72 <HAL_SYSTICK_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e00e      	b.n	8005314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d80a      	bhi.n	8005312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052fc:	2200      	movs	r2, #0
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	f001 fd7d 	bl	8006e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005308:	4a06      	ldr	r2, [pc, #24]	@ (8005324 <HAL_InitTick+0x5c>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200000f0 	.word	0x200000f0
 8005320:	20000130 	.word	0x20000130
 8005324:	2000012c 	.word	0x2000012c

08005328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800532c:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <HAL_IncTick+0x20>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	4b06      	ldr	r3, [pc, #24]	@ (800534c <HAL_IncTick+0x24>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4413      	add	r3, r2
 8005338:	4a04      	ldr	r2, [pc, #16]	@ (800534c <HAL_IncTick+0x24>)
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000130 	.word	0x20000130
 800534c:	200017e8 	.word	0x200017e8

08005350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return uwTick;
 8005354:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <HAL_GetTick+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	200017e8 	.word	0x200017e8

08005368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7ff ffee 	bl	8005350 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d005      	beq.n	800538e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005382:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <HAL_Delay+0x44>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800538e:	bf00      	nop
 8005390:	f7ff ffde 	bl	8005350 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d8f7      	bhi.n	8005390 <HAL_Delay+0x28>
  {
  }
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000130 	.word	0x20000130

080053b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e033      	b.n	800542e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fe fd18 	bl	8003e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d118      	bne.n	8005420 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80053f6:	f023 0302 	bic.w	r3, r3, #2
 80053fa:	f043 0202 	orr.w	r2, r3, #2
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fb86 	bl	8005b14 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	f043 0201 	orr.w	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	641a      	str	r2, [r3, #64]	@ 0x40
 800541e:	e001      	b.n	8005424 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_ADC_Start_IT+0x1a>
 800544e:	2302      	movs	r3, #2
 8005450:	e0bd      	b.n	80055ce <HAL_ADC_Start_IT+0x196>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d018      	beq.n	800549a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005478:	4b58      	ldr	r3, [pc, #352]	@ (80055dc <HAL_ADC_Start_IT+0x1a4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a58      	ldr	r2, [pc, #352]	@ (80055e0 <HAL_ADC_Start_IT+0x1a8>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	0c9a      	lsrs	r2, r3, #18
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800548c:	e002      	b.n	8005494 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	3b01      	subs	r3, #1
 8005492:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f9      	bne.n	800548e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	f040 8085 	bne.w	80055b4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80054d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e8:	d106      	bne.n	80054f8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ee:	f023 0206 	bic.w	r2, r3, #6
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80054f6:	e002      	b.n	80054fe <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005506:	4b37      	ldr	r3, [pc, #220]	@ (80055e4 <HAL_ADC_Start_IT+0x1ac>)
 8005508:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005512:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005522:	f043 0320 	orr.w	r3, r3, #32
 8005526:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2b00      	cmp	r3, #0
 8005532:	d12a      	bne.n	800558a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2b      	ldr	r2, [pc, #172]	@ (80055e8 <HAL_ADC_Start_IT+0x1b0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d015      	beq.n	800556a <HAL_ADC_Start_IT+0x132>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2a      	ldr	r2, [pc, #168]	@ (80055ec <HAL_ADC_Start_IT+0x1b4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d105      	bne.n	8005554 <HAL_ADC_Start_IT+0x11c>
 8005548:	4b26      	ldr	r3, [pc, #152]	@ (80055e4 <HAL_ADC_Start_IT+0x1ac>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a25      	ldr	r2, [pc, #148]	@ (80055f0 <HAL_ADC_Start_IT+0x1b8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d136      	bne.n	80055cc <HAL_ADC_Start_IT+0x194>
 800555e:	4b21      	ldr	r3, [pc, #132]	@ (80055e4 <HAL_ADC_Start_IT+0x1ac>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	d130      	bne.n	80055cc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d129      	bne.n	80055cc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	e020      	b.n	80055cc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a16      	ldr	r2, [pc, #88]	@ (80055e8 <HAL_ADC_Start_IT+0x1b0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d11b      	bne.n	80055cc <HAL_ADC_Start_IT+0x194>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d114      	bne.n	80055cc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80055b0:	609a      	str	r2, [r3, #8]
 80055b2:	e00b      	b.n	80055cc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	f043 0210 	orr.w	r2, r3, #16
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c4:	f043 0201 	orr.w	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	200000f0 	.word	0x200000f0
 80055e0:	431bde83 	.word	0x431bde83
 80055e4:	40012300 	.word	0x40012300
 80055e8:	40012000 	.word	0x40012000
 80055ec:	40012100 	.word	0x40012100
 80055f0:	40012200 	.word	0x40012200

080055f4 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_ADC_Stop_IT+0x16>
 8005606:	2302      	movs	r3, #2
 8005608:	e02b      	b.n	8005662 <HAL_ADC_Stop_IT+0x6e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d113      	bne.n	8005658 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800563e:	f023 0320 	bic.w	r3, r3, #32
 8005642:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	f043 0201 	orr.w	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d049      	beq.n	8005738 <HAL_ADC_IRQHandler+0xca>
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d046      	beq.n	8005738 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d105      	bne.n	80056c2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d12b      	bne.n	8005728 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d127      	bne.n	8005728 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d006      	beq.n	80056f4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d119      	bne.n	8005728 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0220 	bic.w	r2, r2, #32
 8005702:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	f043 0201 	orr.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fd f961 	bl	80029f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f06f 0212 	mvn.w	r2, #18
 8005736:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d057      	beq.n	80057fe <HAL_ADC_IRQHandler+0x190>
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d054      	beq.n	80057fe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d139      	bne.n	80057ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005780:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005792:	2b00      	cmp	r3, #0
 8005794:	d12b      	bne.n	80057ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d124      	bne.n	80057ee <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11d      	bne.n	80057ee <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d119      	bne.n	80057ee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	f043 0201 	orr.w	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa8c 	bl	8005d0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 020c 	mvn.w	r2, #12
 80057fc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <HAL_ADC_IRQHandler+0x1d6>
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10d      	bne.n	8005844 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f837 	bl	80058a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0201 	mvn.w	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005852:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d015      	beq.n	8005886 <HAL_ADC_IRQHandler+0x218>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005864:	f043 0202 	orr.w	r2, r3, #2
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0220 	mvn.w	r2, #32
 8005874:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f820 	bl	80058bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0220 	mvn.w	r2, #32
 8005884:	601a      	str	r2, [r3, #0]
  }
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_ADC_ConfigChannel+0x1c>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e105      	b.n	8005af8 <HAL_ADC_ConfigChannel+0x228>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b09      	cmp	r3, #9
 80058fa:	d925      	bls.n	8005948 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68d9      	ldr	r1, [r3, #12]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	4613      	mov	r3, r2
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	3b1e      	subs	r3, #30
 8005912:	2207      	movs	r2, #7
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43da      	mvns	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	400a      	ands	r2, r1
 8005920:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68d9      	ldr	r1, [r3, #12]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	4618      	mov	r0, r3
 8005934:	4603      	mov	r3, r0
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	4403      	add	r3, r0
 800593a:	3b1e      	subs	r3, #30
 800593c:	409a      	lsls	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	e022      	b.n	800598e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6919      	ldr	r1, [r3, #16]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	2207      	movs	r2, #7
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43da      	mvns	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	400a      	ands	r2, r1
 800596a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6919      	ldr	r1, [r3, #16]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	4618      	mov	r0, r3
 800597e:	4603      	mov	r3, r0
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4403      	add	r3, r0
 8005984:	409a      	lsls	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b06      	cmp	r3, #6
 8005994:	d824      	bhi.n	80059e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	3b05      	subs	r3, #5
 80059a8:	221f      	movs	r2, #31
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43da      	mvns	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	400a      	ands	r2, r1
 80059b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	4618      	mov	r0, r3
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	3b05      	subs	r3, #5
 80059d2:	fa00 f203 	lsl.w	r2, r0, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80059de:	e04c      	b.n	8005a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b0c      	cmp	r3, #12
 80059e6:	d824      	bhi.n	8005a32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	3b23      	subs	r3, #35	@ 0x23
 80059fa:	221f      	movs	r2, #31
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43da      	mvns	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	400a      	ands	r2, r1
 8005a08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4618      	mov	r0, r3
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	3b23      	subs	r3, #35	@ 0x23
 8005a24:	fa00 f203 	lsl.w	r2, r0, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a30:	e023      	b.n	8005a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	3b41      	subs	r3, #65	@ 0x41
 8005a44:	221f      	movs	r2, #31
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43da      	mvns	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	400a      	ands	r2, r1
 8005a52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	4618      	mov	r0, r3
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3b41      	subs	r3, #65	@ 0x41
 8005a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a7a:	4b22      	ldr	r3, [pc, #136]	@ (8005b04 <HAL_ADC_ConfigChannel+0x234>)
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a21      	ldr	r2, [pc, #132]	@ (8005b08 <HAL_ADC_ConfigChannel+0x238>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d109      	bne.n	8005a9c <HAL_ADC_ConfigChannel+0x1cc>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b12      	cmp	r3, #18
 8005a8e:	d105      	bne.n	8005a9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a19      	ldr	r2, [pc, #100]	@ (8005b08 <HAL_ADC_ConfigChannel+0x238>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d123      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x21e>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b10      	cmp	r3, #16
 8005aac:	d003      	beq.n	8005ab6 <HAL_ADC_ConfigChannel+0x1e6>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b11      	cmp	r3, #17
 8005ab4:	d11b      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d111      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005aca:	4b10      	ldr	r3, [pc, #64]	@ (8005b0c <HAL_ADC_ConfigChannel+0x23c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a10      	ldr	r2, [pc, #64]	@ (8005b10 <HAL_ADC_ConfigChannel+0x240>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	0c9a      	lsrs	r2, r3, #18
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005ae0:	e002      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f9      	bne.n	8005ae2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40012300 	.word	0x40012300
 8005b08:	40012000 	.word	0x40012000
 8005b0c:	200000f0 	.word	0x200000f0
 8005b10:	431bde83 	.word	0x431bde83

08005b14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b1c:	4b79      	ldr	r3, [pc, #484]	@ (8005d04 <ADC_Init+0x1f0>)
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6859      	ldr	r1, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	021a      	lsls	r2, r3, #8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6859      	ldr	r1, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	4a58      	ldr	r2, [pc, #352]	@ (8005d08 <ADC_Init+0x1f4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d022      	beq.n	8005bf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005bba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6899      	ldr	r1, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6899      	ldr	r1, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	e00f      	b.n	8005c12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c10:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0202 	bic.w	r2, r2, #2
 8005c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6899      	ldr	r1, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7e1b      	ldrb	r3, [r3, #24]
 8005c2c:	005a      	lsls	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c4e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005c5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6859      	ldr	r1, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	035a      	lsls	r2, r3, #13
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	e007      	b.n	8005c88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c86:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	051a      	lsls	r2, r3, #20
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6899      	ldr	r1, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cca:	025a      	lsls	r2, r3, #9
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6899      	ldr	r1, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	029a      	lsls	r2, r3, #10
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	609a      	str	r2, [r3, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	40012300 	.word	0x40012300
 8005d08:	0f000001 	.word	0x0f000001

08005d0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e0ed      	b.n	8005f0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d102      	bne.n	8005d44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fe f8de 	bl	8003f00 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d54:	f7ff fafc 	bl	8005350 <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005d5a:	e012      	b.n	8005d82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d5c:	f7ff faf8 	bl	8005350 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b0a      	cmp	r3, #10
 8005d68:	d90b      	bls.n	8005d82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2205      	movs	r2, #5
 8005d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e0c5      	b.n	8005f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0e5      	beq.n	8005d5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0202 	bic.w	r2, r2, #2
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005da0:	f7ff fad6 	bl	8005350 <HAL_GetTick>
 8005da4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005da6:	e012      	b.n	8005dce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005da8:	f7ff fad2 	bl	8005350 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b0a      	cmp	r3, #10
 8005db4:	d90b      	bls.n	8005dce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2205      	movs	r2, #5
 8005dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e09f      	b.n	8005f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7e1b      	ldrb	r3, [r3, #24]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d108      	bne.n	8005df6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e007      	b.n	8005e06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	7e5b      	ldrb	r3, [r3, #25]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d108      	bne.n	8005e20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e007      	b.n	8005e30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	7e9b      	ldrb	r3, [r3, #26]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d108      	bne.n	8005e4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0220 	orr.w	r2, r2, #32
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e007      	b.n	8005e5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0220 	bic.w	r2, r2, #32
 8005e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	7edb      	ldrb	r3, [r3, #27]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d108      	bne.n	8005e74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0210 	bic.w	r2, r2, #16
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e007      	b.n	8005e84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0210 	orr.w	r2, r2, #16
 8005e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	7f1b      	ldrb	r3, [r3, #28]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d108      	bne.n	8005e9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0208 	orr.w	r2, r2, #8
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e007      	b.n	8005eae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0208 	bic.w	r2, r2, #8
 8005eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	7f5b      	ldrb	r3, [r3, #29]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d108      	bne.n	8005ec8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0204 	orr.w	r2, r2, #4
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	e007      	b.n	8005ed8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0204 	bic.w	r2, r2, #4
 8005ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	ea42 0103 	orr.w	r1, r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e015      	b.n	8005f54 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f939 	bl	80061a0 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fe f8ce 	bl	80040d0 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f42:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f6c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8005f6e:	7dfb      	ldrb	r3, [r7, #23]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d003      	beq.n	8005f7c <HAL_CAN_ConfigFilter+0x20>
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	f040 80be 	bne.w	80060f8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005f7c:	4b65      	ldr	r3, [pc, #404]	@ (8006114 <HAL_CAN_ConfigFilter+0x1b8>)
 8005f7e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005f96:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	431a      	orrs	r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	401a      	ands	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d123      	bne.n	8006026 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	401a      	ands	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006000:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	3248      	adds	r2, #72	@ 0x48
 8006006:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800601a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800601c:	6939      	ldr	r1, [r7, #16]
 800601e:	3348      	adds	r3, #72	@ 0x48
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	440b      	add	r3, r1
 8006024:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d122      	bne.n	8006074 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	431a      	orrs	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800604e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	3248      	adds	r2, #72	@ 0x48
 8006054:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006068:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800606a:	6939      	ldr	r1, [r7, #16]
 800606c:	3348      	adds	r3, #72	@ 0x48
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	440b      	add	r3, r1
 8006072:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	43db      	mvns	r3, r3
 8006086:	401a      	ands	r2, r3
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800608e:	e007      	b.n	80060a0 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	431a      	orrs	r2, r3
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d109      	bne.n	80060bc <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80060ba:	e007      	b.n	80060cc <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d107      	bne.n	80060e4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	431a      	orrs	r2, r3
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80060ea:	f023 0201 	bic.w	r2, r3, #1
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e006      	b.n	8006106 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
  }
}
 8006106:	4618      	mov	r0, r3
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40006400 	.word	0x40006400

08006118 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d12e      	bne.n	800618a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006144:	f7ff f904 	bl	8005350 <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800614a:	e012      	b.n	8006172 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800614c:	f7ff f900 	bl	8005350 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b0a      	cmp	r3, #10
 8006158:	d90b      	bls.n	8006172 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2205      	movs	r2, #5
 800616a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e012      	b.n	8006198 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e5      	bne.n	800614c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e006      	b.n	8006198 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d133      	bne.n	800621c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061c4:	f7ff f8c4 	bl	8005350 <HAL_GetTick>
 80061c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80061ca:	e012      	b.n	80061f2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80061cc:	f7ff f8c0 	bl	8005350 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b0a      	cmp	r3, #10
 80061d8:	d90b      	bls.n	80061f2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2205      	movs	r2, #5
 80061ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e01b      	b.n	800622a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0e5      	beq.n	80061cc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0202 	bic.w	r2, r2, #2
 800620e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e006      	b.n	800622a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006232:	b480      	push	{r7}
 8006234:	b089      	sub	sp, #36	@ 0x24
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006246:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006250:	7ffb      	ldrb	r3, [r7, #31]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d003      	beq.n	800625e <HAL_CAN_AddTxMessage+0x2c>
 8006256:	7ffb      	ldrb	r3, [r7, #31]
 8006258:	2b02      	cmp	r3, #2
 800625a:	f040 80ad 	bne.w	80063b8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800626e:	2b00      	cmp	r3, #0
 8006270:	d105      	bne.n	800627e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 8095 	beq.w	80063a8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	0e1b      	lsrs	r3, r3, #24
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006288:	2201      	movs	r2, #1
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	409a      	lsls	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10d      	bne.n	80062b6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	6809      	ldr	r1, [r1, #0]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	3318      	adds	r3, #24
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	440b      	add	r3, r1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	e00f      	b.n	80062d6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80062c0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80062c6:	68f9      	ldr	r1, [r7, #12]
 80062c8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80062ca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3318      	adds	r3, #24
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	440b      	add	r3, r1
 80062d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6819      	ldr	r1, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	3318      	adds	r3, #24
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	440b      	add	r3, r1
 80062e6:	3304      	adds	r3, #4
 80062e8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	7d1b      	ldrb	r3, [r3, #20]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d111      	bne.n	8006316 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	3318      	adds	r3, #24
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	4413      	add	r3, r2
 80062fe:	3304      	adds	r3, #4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6811      	ldr	r1, [r2, #0]
 8006306:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	3318      	adds	r3, #24
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	440b      	add	r3, r1
 8006312:	3304      	adds	r3, #4
 8006314:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3307      	adds	r3, #7
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	061a      	lsls	r2, r3, #24
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3306      	adds	r3, #6
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	041b      	lsls	r3, r3, #16
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3305      	adds	r3, #5
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	4313      	orrs	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	3204      	adds	r2, #4
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	4610      	mov	r0, r2
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	6811      	ldr	r1, [r2, #0]
 800633e:	ea43 0200 	orr.w	r2, r3, r0
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	440b      	add	r3, r1
 8006348:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800634c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3303      	adds	r3, #3
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	061a      	lsls	r2, r3, #24
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3302      	adds	r3, #2
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	041b      	lsls	r3, r3, #16
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3301      	adds	r3, #1
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	4313      	orrs	r3, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	7812      	ldrb	r2, [r2, #0]
 800636e:	4610      	mov	r0, r2
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	6811      	ldr	r1, [r2, #0]
 8006374:	ea43 0200 	orr.w	r2, r3, r0
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	440b      	add	r3, r1
 800637e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006382:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3318      	adds	r3, #24
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	4413      	add	r3, r2
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	6811      	ldr	r1, [r2, #0]
 8006396:	f043 0201 	orr.w	r2, r3, #1
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	3318      	adds	r3, #24
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	440b      	add	r3, r1
 80063a2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e00e      	b.n	80063c6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e006      	b.n	80063c6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3724      	adds	r7, #36	@ 0x24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d002      	beq.n	80063f0 <HAL_CAN_AbortTxRequest+0x1e>
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d128      	bne.n	8006442 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006408:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006422:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800643c:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e006      	b.n	8006450 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006446:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
  }
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800646e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006470:	7afb      	ldrb	r3, [r7, #11]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d002      	beq.n	800647c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006476:	7afb      	ldrb	r3, [r7, #11]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d11d      	bne.n	80064b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80064b8:	68fb      	ldr	r3, [r7, #12]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d003      	beq.n	80064ea <HAL_CAN_GetRxMessage+0x24>
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	f040 8103 	bne.w	80066f0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10e      	bne.n	800650e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d116      	bne.n	800652c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006502:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e0f7      	b.n	80066fe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d107      	bne.n	800652c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0e8      	b.n	80066fe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	331b      	adds	r3, #27
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	4413      	add	r3, r2
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0204 	and.w	r2, r3, #4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10c      	bne.n	8006564 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	331b      	adds	r3, #27
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	4413      	add	r3, r2
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	0d5b      	lsrs	r3, r3, #21
 800655a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e00b      	b.n	800657c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	331b      	adds	r3, #27
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	4413      	add	r3, r2
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	08db      	lsrs	r3, r3, #3
 8006574:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	331b      	adds	r3, #27
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	4413      	add	r3, r2
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0202 	and.w	r2, r3, #2
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	331b      	adds	r3, #27
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	4413      	add	r3, r2
 800659e:	3304      	adds	r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2208      	movs	r2, #8
 80065ae:	611a      	str	r2, [r3, #16]
 80065b0:	e00b      	b.n	80065ca <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	331b      	adds	r3, #27
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	4413      	add	r3, r2
 80065be:	3304      	adds	r3, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 020f 	and.w	r2, r3, #15
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	331b      	adds	r3, #27
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	4413      	add	r3, r2
 80065d6:	3304      	adds	r3, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	0a1b      	lsrs	r3, r3, #8
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	331b      	adds	r3, #27
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	4413      	add	r3, r2
 80065ee:	3304      	adds	r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	0c1b      	lsrs	r3, r3, #16
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	4413      	add	r3, r2
 8006604:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	4413      	add	r3, r2
 800661a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	0a1a      	lsrs	r2, r3, #8
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	4413      	add	r3, r2
 8006634:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	0c1a      	lsrs	r2, r3, #16
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	3302      	adds	r3, #2
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	4413      	add	r3, r2
 800664e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	0e1a      	lsrs	r2, r3, #24
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	3303      	adds	r3, #3
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	4413      	add	r3, r2
 8006668:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	3304      	adds	r3, #4
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	4413      	add	r3, r2
 8006680:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	0a1a      	lsrs	r2, r3, #8
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	3305      	adds	r3, #5
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	4413      	add	r3, r2
 800669a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	0c1a      	lsrs	r2, r3, #16
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	3306      	adds	r3, #6
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	0e1a      	lsrs	r2, r3, #24
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	3307      	adds	r3, #7
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d108      	bne.n	80066dc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0220 	orr.w	r2, r2, #32
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	e007      	b.n	80066ec <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691a      	ldr	r2, [r3, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0220 	orr.w	r2, r2, #32
 80066ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e006      	b.n	80066fe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
  }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800671e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d002      	beq.n	800672c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d10f      	bne.n	800674c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e005      	b.n	800674c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800674c:	68fb      	ldr	r3, [r7, #12]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800676a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d002      	beq.n	8006778 <HAL_CAN_ActivateNotification+0x1e>
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d109      	bne.n	800678c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6959      	ldr	r1, [r3, #20]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e006      	b.n	800679a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
  }
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b08a      	sub	sp, #40	@ 0x28
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d07c      	beq.n	80068e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d023      	beq.n	800683e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2201      	movs	r2, #1
 80067fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fc f921 	bl	8002a50 <HAL_CAN_TxMailbox0CompleteCallback>
 800680e:	e016      	b.n	800683e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006820:	627b      	str	r3, [r7, #36]	@ 0x24
 8006822:	e00c      	b.n	800683e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
 8006836:	e002      	b.n	800683e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f96b 	bl	8006b14 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006844:	2b00      	cmp	r3, #0
 8006846:	d024      	beq.n	8006892 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006850:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fc f90f 	bl	8002a80 <HAL_CAN_TxMailbox1CompleteCallback>
 8006862:	e016      	b.n	8006892 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686a:	2b00      	cmp	r3, #0
 800686c:	d004      	beq.n	8006878 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
 8006876:	e00c      	b.n	8006892 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800687e:	2b00      	cmp	r3, #0
 8006880:	d004      	beq.n	800688c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006888:	627b      	str	r3, [r7, #36]	@ 0x24
 800688a:	e002      	b.n	8006892 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f94b 	bl	8006b28 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d024      	beq.n	80068e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80068a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fc f8fd 	bl	8002ab0 <HAL_CAN_TxMailbox2CompleteCallback>
 80068b6:	e016      	b.n	80068e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ca:	e00c      	b.n	80068e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068de:	e002      	b.n	80068e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f92b 	bl	8006b3c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00c      	beq.n	800690a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2210      	movs	r2, #16
 8006908:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2208      	movs	r2, #8
 8006924:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f912 	bl	8006b50 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7fb fbc1 	bl	80020cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00c      	beq.n	800696e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006964:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2210      	movs	r2, #16
 800696c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2208      	movs	r2, #8
 8006988:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f8f4 	bl	8006b78 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8db 	bl	8006b64 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2210      	movs	r2, #16
 80069c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8de 	bl	8006b8c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d006      	beq.n	80069f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2208      	movs	r2, #8
 80069ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8d7 	bl	8006ba0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d07b      	beq.n	8006af4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d072      	beq.n	8006aec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	f043 0301 	orr.w	r3, r3, #1
 8006a20:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	f043 0302 	orr.w	r3, r3, #2
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	f043 0304 	orr.w	r3, r3, #4
 8006a58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d043      	beq.n	8006aec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d03e      	beq.n	8006aec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a74:	2b60      	cmp	r3, #96	@ 0x60
 8006a76:	d02b      	beq.n	8006ad0 <HAL_CAN_IRQHandler+0x32a>
 8006a78:	2b60      	cmp	r3, #96	@ 0x60
 8006a7a:	d82e      	bhi.n	8006ada <HAL_CAN_IRQHandler+0x334>
 8006a7c:	2b50      	cmp	r3, #80	@ 0x50
 8006a7e:	d022      	beq.n	8006ac6 <HAL_CAN_IRQHandler+0x320>
 8006a80:	2b50      	cmp	r3, #80	@ 0x50
 8006a82:	d82a      	bhi.n	8006ada <HAL_CAN_IRQHandler+0x334>
 8006a84:	2b40      	cmp	r3, #64	@ 0x40
 8006a86:	d019      	beq.n	8006abc <HAL_CAN_IRQHandler+0x316>
 8006a88:	2b40      	cmp	r3, #64	@ 0x40
 8006a8a:	d826      	bhi.n	8006ada <HAL_CAN_IRQHandler+0x334>
 8006a8c:	2b30      	cmp	r3, #48	@ 0x30
 8006a8e:	d010      	beq.n	8006ab2 <HAL_CAN_IRQHandler+0x30c>
 8006a90:	2b30      	cmp	r3, #48	@ 0x30
 8006a92:	d822      	bhi.n	8006ada <HAL_CAN_IRQHandler+0x334>
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d002      	beq.n	8006a9e <HAL_CAN_IRQHandler+0x2f8>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d005      	beq.n	8006aa8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006a9c:	e01d      	b.n	8006ada <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	f043 0308 	orr.w	r3, r3, #8
 8006aa4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006aa6:	e019      	b.n	8006adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	f043 0310 	orr.w	r3, r3, #16
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006ab0:	e014      	b.n	8006adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	f043 0320 	orr.w	r3, r3, #32
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006aba:	e00f      	b.n	8006adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ac2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006ac4:	e00a      	b.n	8006adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006ace:	e005      	b.n	8006adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006ad8:	e000      	b.n	8006adc <HAL_CAN_IRQHandler+0x336>
            break;
 8006ada:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006aea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2204      	movs	r2, #4
 8006af2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fb ffea 	bl	8002ae0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3728      	adds	r7, #40	@ 0x28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bc2:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d002      	beq.n	8006bd0 <HAL_CAN_GetState+0x1c>
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d112      	bne.n	8006bf6 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8006bde:	2304      	movs	r3, #4
 8006be0:	73fb      	strb	r3, [r7, #15]
 8006be2:	e008      	b.n	8006bf6 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <__NVIC_SetPriorityGrouping>:
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c14:	4b0c      	ldr	r3, [pc, #48]	@ (8006c48 <__NVIC_SetPriorityGrouping+0x44>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c20:	4013      	ands	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c36:	4a04      	ldr	r2, [pc, #16]	@ (8006c48 <__NVIC_SetPriorityGrouping+0x44>)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	60d3      	str	r3, [r2, #12]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	e000ed00 	.word	0xe000ed00

08006c4c <__NVIC_GetPriorityGrouping>:
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c50:	4b04      	ldr	r3, [pc, #16]	@ (8006c64 <__NVIC_GetPriorityGrouping+0x18>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	f003 0307 	and.w	r3, r3, #7
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	e000ed00 	.word	0xe000ed00

08006c68 <__NVIC_EnableIRQ>:
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	db0b      	blt.n	8006c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	f003 021f 	and.w	r2, r3, #31
 8006c80:	4907      	ldr	r1, [pc, #28]	@ (8006ca0 <__NVIC_EnableIRQ+0x38>)
 8006c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	2001      	movs	r0, #1
 8006c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	e000e100 	.word	0xe000e100

08006ca4 <__NVIC_DisableIRQ>:
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	db12      	blt.n	8006cdc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	f003 021f 	and.w	r2, r3, #31
 8006cbc:	490a      	ldr	r1, [pc, #40]	@ (8006ce8 <__NVIC_DisableIRQ+0x44>)
 8006cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8006cca:	3320      	adds	r3, #32
 8006ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006cd0:	f3bf 8f4f 	dsb	sy
}
 8006cd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006cd6:	f3bf 8f6f 	isb	sy
}
 8006cda:	bf00      	nop
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	e000e100 	.word	0xe000e100

08006cec <__NVIC_SetPriority>:
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	6039      	str	r1, [r7, #0]
 8006cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	db0a      	blt.n	8006d16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	490c      	ldr	r1, [pc, #48]	@ (8006d38 <__NVIC_SetPriority+0x4c>)
 8006d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d0a:	0112      	lsls	r2, r2, #4
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	440b      	add	r3, r1
 8006d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d14:	e00a      	b.n	8006d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	4908      	ldr	r1, [pc, #32]	@ (8006d3c <__NVIC_SetPriority+0x50>)
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	3b04      	subs	r3, #4
 8006d24:	0112      	lsls	r2, r2, #4
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	440b      	add	r3, r1
 8006d2a:	761a      	strb	r2, [r3, #24]
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	e000e100 	.word	0xe000e100
 8006d3c:	e000ed00 	.word	0xe000ed00

08006d40 <NVIC_EncodePriority>:
{
 8006d40:	b480      	push	{r7}
 8006d42:	b089      	sub	sp, #36	@ 0x24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f1c3 0307 	rsb	r3, r3, #7
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	bf28      	it	cs
 8006d5e:	2304      	movcs	r3, #4
 8006d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	3304      	adds	r3, #4
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d902      	bls.n	8006d70 <NVIC_EncodePriority+0x30>
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	3b03      	subs	r3, #3
 8006d6e:	e000      	b.n	8006d72 <NVIC_EncodePriority+0x32>
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d74:	f04f 32ff 	mov.w	r2, #4294967295
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7e:	43da      	mvns	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	401a      	ands	r2, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d88:	f04f 31ff 	mov.w	r1, #4294967295
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d92:	43d9      	mvns	r1, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d98:	4313      	orrs	r3, r2
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3724      	adds	r7, #36	@ 0x24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006db8:	d301      	bcc.n	8006dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e00f      	b.n	8006dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8006de8 <SysTick_Config+0x40>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dc6:	210f      	movs	r1, #15
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	f7ff ff8e 	bl	8006cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006dd0:	4b05      	ldr	r3, [pc, #20]	@ (8006de8 <SysTick_Config+0x40>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dd6:	4b04      	ldr	r3, [pc, #16]	@ (8006de8 <SysTick_Config+0x40>)
 8006dd8:	2207      	movs	r2, #7
 8006dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	e000e010 	.word	0xe000e010

08006dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff ff05 	bl	8006c04 <__NVIC_SetPriorityGrouping>
}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b086      	sub	sp, #24
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	4603      	mov	r3, r0
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
 8006e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e14:	f7ff ff1a 	bl	8006c4c <__NVIC_GetPriorityGrouping>
 8006e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	6978      	ldr	r0, [r7, #20]
 8006e20:	f7ff ff8e 	bl	8006d40 <NVIC_EncodePriority>
 8006e24:	4602      	mov	r2, r0
 8006e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff ff5d 	bl	8006cec <__NVIC_SetPriority>
}
 8006e32:	bf00      	nop
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	4603      	mov	r3, r0
 8006e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff ff0d 	bl	8006c68 <__NVIC_EnableIRQ>
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff ff1d 	bl	8006ca4 <__NVIC_DisableIRQ>
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff ff94 	bl	8006da8 <SysTick_Config>
 8006e80:	4603      	mov	r3, r0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e00e      	b.n	8006eba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	795b      	ldrb	r3, [r3, #5]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d105      	bne.n	8006eb2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fd f971 	bl	8004194 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ed0:	f7fe fa3e 	bl	8005350 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e099      	b.n	8007014 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f00:	e00f      	b.n	8006f22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f02:	f7fe fa25 	bl	8005350 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b05      	cmp	r3, #5
 8006f0e:	d908      	bls.n	8006f22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2203      	movs	r2, #3
 8006f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e078      	b.n	8007014 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e8      	bne.n	8006f02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4b38      	ldr	r3, [pc, #224]	@ (800701c <HAL_DMA_Init+0x158>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d107      	bne.n	8006f8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f84:	4313      	orrs	r3, r2
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0307 	bic.w	r3, r3, #7
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d117      	bne.n	8006fe6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00e      	beq.n	8006fe6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa89 	bl	80074e0 <DMA_CheckFifoParam>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d008      	beq.n	8006fe6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2240      	movs	r2, #64	@ 0x40
 8006fd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e016      	b.n	8007014 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa40 	bl	8007474 <DMA_CalcBaseAndBitshift>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffc:	223f      	movs	r2, #63	@ 0x3f
 8006ffe:	409a      	lsls	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	f010803f 	.word	0xf010803f

08007020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800702c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800702e:	f7fe f98f 	bl	8005350 <HAL_GetTick>
 8007032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d008      	beq.n	8007052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2280      	movs	r2, #128	@ 0x80
 8007044:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e052      	b.n	80070f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0216 	bic.w	r2, r2, #22
 8007060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695a      	ldr	r2, [r3, #20]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d103      	bne.n	8007082 <HAL_DMA_Abort+0x62>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0208 	bic.w	r2, r2, #8
 8007090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0201 	bic.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070a2:	e013      	b.n	80070cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070a4:	f7fe f954 	bl	8005350 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d90c      	bls.n	80070cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2203      	movs	r2, #3
 80070bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e015      	b.n	80070f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e4      	bne.n	80070a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070de:	223f      	movs	r2, #63	@ 0x3f
 80070e0:	409a      	lsls	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d004      	beq.n	800711e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2280      	movs	r2, #128	@ 0x80
 8007118:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e00c      	b.n	8007138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2205      	movs	r2, #5
 8007122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 0201 	bic.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007150:	4b8e      	ldr	r3, [pc, #568]	@ (800738c <HAL_DMA_IRQHandler+0x248>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a8e      	ldr	r2, [pc, #568]	@ (8007390 <HAL_DMA_IRQHandler+0x24c>)
 8007156:	fba2 2303 	umull	r2, r3, r2, r3
 800715a:	0a9b      	lsrs	r3, r3, #10
 800715c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800716e:	2208      	movs	r2, #8
 8007170:	409a      	lsls	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4013      	ands	r3, r2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01a      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0204 	bic.w	r2, r2, #4
 8007196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800719c:	2208      	movs	r2, #8
 800719e:	409a      	lsls	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a8:	f043 0201 	orr.w	r2, r3, #1
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b4:	2201      	movs	r2, #1
 80071b6:	409a      	lsls	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d012      	beq.n	80071e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d2:	2201      	movs	r2, #1
 80071d4:	409a      	lsls	r2, r3
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071de:	f043 0202 	orr.w	r2, r3, #2
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ea:	2204      	movs	r2, #4
 80071ec:	409a      	lsls	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4013      	ands	r3, r2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d012      	beq.n	800721c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007208:	2204      	movs	r2, #4
 800720a:	409a      	lsls	r2, r3
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007214:	f043 0204 	orr.w	r2, r3, #4
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007220:	2210      	movs	r2, #16
 8007222:	409a      	lsls	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4013      	ands	r3, r2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d043      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d03c      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723e:	2210      	movs	r2, #16
 8007240:	409a      	lsls	r2, r3
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d018      	beq.n	8007286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d108      	bne.n	8007274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d024      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	4798      	blx	r3
 8007272:	e01f      	b.n	80072b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01b      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
 8007284:	e016      	b.n	80072b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0208 	bic.w	r2, r2, #8
 80072a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b8:	2220      	movs	r2, #32
 80072ba:	409a      	lsls	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 808f 	beq.w	80073e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8087 	beq.w	80073e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072da:	2220      	movs	r2, #32
 80072dc:	409a      	lsls	r2, r3
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b05      	cmp	r3, #5
 80072ec:	d136      	bne.n	800735c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0216 	bic.w	r2, r2, #22
 80072fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695a      	ldr	r2, [r3, #20]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800730c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <HAL_DMA_IRQHandler+0x1da>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0208 	bic.w	r2, r2, #8
 800732c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007332:	223f      	movs	r2, #63	@ 0x3f
 8007334:	409a      	lsls	r2, r3
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800734e:	2b00      	cmp	r3, #0
 8007350:	d07e      	beq.n	8007450 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
        }
        return;
 800735a:	e079      	b.n	8007450 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01d      	beq.n	80073a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10d      	bne.n	8007394 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737c:	2b00      	cmp	r3, #0
 800737e:	d031      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	e02c      	b.n	80073e4 <HAL_DMA_IRQHandler+0x2a0>
 800738a:	bf00      	nop
 800738c:	200000f0 	.word	0x200000f0
 8007390:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d023      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
 80073a4:	e01e      	b.n	80073e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10f      	bne.n	80073d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0210 	bic.w	r2, r2, #16
 80073c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d032      	beq.n	8007452 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d022      	beq.n	800743e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2205      	movs	r2, #5
 80073fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	3301      	adds	r3, #1
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	429a      	cmp	r2, r3
 800741a:	d307      	bcc.n	800742c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1f2      	bne.n	8007410 <HAL_DMA_IRQHandler+0x2cc>
 800742a:	e000      	b.n	800742e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800742c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
 800744e:	e000      	b.n	8007452 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007450:	bf00      	nop
    }
  }
}
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007466:	b2db      	uxtb	r3, r3
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	3b10      	subs	r3, #16
 8007484:	4a14      	ldr	r2, [pc, #80]	@ (80074d8 <DMA_CalcBaseAndBitshift+0x64>)
 8007486:	fba2 2303 	umull	r2, r3, r2, r3
 800748a:	091b      	lsrs	r3, r3, #4
 800748c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800748e:	4a13      	ldr	r2, [pc, #76]	@ (80074dc <DMA_CalcBaseAndBitshift+0x68>)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d909      	bls.n	80074b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80074aa:	f023 0303 	bic.w	r3, r3, #3
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80074b4:	e007      	b.n	80074c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	aaaaaaab 	.word	0xaaaaaaab
 80074dc:	08011bc8 	.word	0x08011bc8

080074e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d11f      	bne.n	800753a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d856      	bhi.n	80075ae <DMA_CheckFifoParam+0xce>
 8007500:	a201      	add	r2, pc, #4	@ (adr r2, 8007508 <DMA_CheckFifoParam+0x28>)
 8007502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007506:	bf00      	nop
 8007508:	08007519 	.word	0x08007519
 800750c:	0800752b 	.word	0x0800752b
 8007510:	08007519 	.word	0x08007519
 8007514:	080075af 	.word	0x080075af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d046      	beq.n	80075b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007528:	e043      	b.n	80075b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007532:	d140      	bne.n	80075b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007538:	e03d      	b.n	80075b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007542:	d121      	bne.n	8007588 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b03      	cmp	r3, #3
 8007548:	d837      	bhi.n	80075ba <DMA_CheckFifoParam+0xda>
 800754a:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <DMA_CheckFifoParam+0x70>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007561 	.word	0x08007561
 8007554:	08007567 	.word	0x08007567
 8007558:	08007561 	.word	0x08007561
 800755c:	08007579 	.word	0x08007579
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
      break;
 8007564:	e030      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d025      	beq.n	80075be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007576:	e022      	b.n	80075be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007580:	d11f      	bne.n	80075c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007586:	e01c      	b.n	80075c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d903      	bls.n	8007596 <DMA_CheckFifoParam+0xb6>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b03      	cmp	r3, #3
 8007592:	d003      	beq.n	800759c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007594:	e018      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
      break;
 800759a:	e015      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00e      	beq.n	80075c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
      break;
 80075ac:	e00b      	b.n	80075c6 <DMA_CheckFifoParam+0xe6>
      break;
 80075ae:	bf00      	nop
 80075b0:	e00a      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
      break;
 80075b2:	bf00      	nop
 80075b4:	e008      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
      break;
 80075b6:	bf00      	nop
 80075b8:	e006      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
      break;
 80075ba:	bf00      	nop
 80075bc:	e004      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
      break;
 80075be:	bf00      	nop
 80075c0:	e002      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80075c2:	bf00      	nop
 80075c4:	e000      	b.n	80075c8 <DMA_CheckFifoParam+0xe8>
      break;
 80075c6:	bf00      	nop
    }
  } 
  
  return status; 
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop

080075d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075d8:	b480      	push	{r7}
 80075da:	b089      	sub	sp, #36	@ 0x24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	e16b      	b.n	80078cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80075f4:	2201      	movs	r2, #1
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4013      	ands	r3, r2
 8007606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	f040 815a 	bne.w	80078c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	2b01      	cmp	r3, #1
 800761c:	d005      	beq.n	800762a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007626:	2b02      	cmp	r3, #2
 8007628:	d130      	bne.n	800768c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	2203      	movs	r2, #3
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4013      	ands	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	fa02 f303 	lsl.w	r3, r2, r3
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	4313      	orrs	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007660:	2201      	movs	r2, #1
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	43db      	mvns	r3, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	4013      	ands	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	091b      	lsrs	r3, r3, #4
 8007676:	f003 0201 	and.w	r2, r3, #1
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	4313      	orrs	r3, r2
 8007684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f003 0303 	and.w	r3, r3, #3
 8007694:	2b03      	cmp	r3, #3
 8007696:	d017      	beq.n	80076c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	2203      	movs	r2, #3
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	43db      	mvns	r3, r3
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	4013      	ands	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4313      	orrs	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d123      	bne.n	800771c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	08da      	lsrs	r2, r3, #3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3208      	adds	r2, #8
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	220f      	movs	r2, #15
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	43db      	mvns	r3, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	4313      	orrs	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	08da      	lsrs	r2, r3, #3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3208      	adds	r2, #8
 8007716:	69b9      	ldr	r1, [r7, #24]
 8007718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	2203      	movs	r2, #3
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	43db      	mvns	r3, r3
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4013      	ands	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 0203 	and.w	r2, r3, #3
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4313      	orrs	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80b4 	beq.w	80078c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	4b60      	ldr	r3, [pc, #384]	@ (80078e4 <HAL_GPIO_Init+0x30c>)
 8007764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007766:	4a5f      	ldr	r2, [pc, #380]	@ (80078e4 <HAL_GPIO_Init+0x30c>)
 8007768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800776c:	6453      	str	r3, [r2, #68]	@ 0x44
 800776e:	4b5d      	ldr	r3, [pc, #372]	@ (80078e4 <HAL_GPIO_Init+0x30c>)
 8007770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800777a:	4a5b      	ldr	r2, [pc, #364]	@ (80078e8 <HAL_GPIO_Init+0x310>)
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	089b      	lsrs	r3, r3, #2
 8007780:	3302      	adds	r3, #2
 8007782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f003 0303 	and.w	r3, r3, #3
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	220f      	movs	r2, #15
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	43db      	mvns	r3, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	4013      	ands	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a52      	ldr	r2, [pc, #328]	@ (80078ec <HAL_GPIO_Init+0x314>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d02b      	beq.n	80077fe <HAL_GPIO_Init+0x226>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a51      	ldr	r2, [pc, #324]	@ (80078f0 <HAL_GPIO_Init+0x318>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d025      	beq.n	80077fa <HAL_GPIO_Init+0x222>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a50      	ldr	r2, [pc, #320]	@ (80078f4 <HAL_GPIO_Init+0x31c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d01f      	beq.n	80077f6 <HAL_GPIO_Init+0x21e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a4f      	ldr	r2, [pc, #316]	@ (80078f8 <HAL_GPIO_Init+0x320>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d019      	beq.n	80077f2 <HAL_GPIO_Init+0x21a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a4e      	ldr	r2, [pc, #312]	@ (80078fc <HAL_GPIO_Init+0x324>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_GPIO_Init+0x216>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a4d      	ldr	r2, [pc, #308]	@ (8007900 <HAL_GPIO_Init+0x328>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00d      	beq.n	80077ea <HAL_GPIO_Init+0x212>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a4c      	ldr	r2, [pc, #304]	@ (8007904 <HAL_GPIO_Init+0x32c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d007      	beq.n	80077e6 <HAL_GPIO_Init+0x20e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a4b      	ldr	r2, [pc, #300]	@ (8007908 <HAL_GPIO_Init+0x330>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d101      	bne.n	80077e2 <HAL_GPIO_Init+0x20a>
 80077de:	2307      	movs	r3, #7
 80077e0:	e00e      	b.n	8007800 <HAL_GPIO_Init+0x228>
 80077e2:	2308      	movs	r3, #8
 80077e4:	e00c      	b.n	8007800 <HAL_GPIO_Init+0x228>
 80077e6:	2306      	movs	r3, #6
 80077e8:	e00a      	b.n	8007800 <HAL_GPIO_Init+0x228>
 80077ea:	2305      	movs	r3, #5
 80077ec:	e008      	b.n	8007800 <HAL_GPIO_Init+0x228>
 80077ee:	2304      	movs	r3, #4
 80077f0:	e006      	b.n	8007800 <HAL_GPIO_Init+0x228>
 80077f2:	2303      	movs	r3, #3
 80077f4:	e004      	b.n	8007800 <HAL_GPIO_Init+0x228>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e002      	b.n	8007800 <HAL_GPIO_Init+0x228>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <HAL_GPIO_Init+0x228>
 80077fe:	2300      	movs	r3, #0
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	f002 0203 	and.w	r2, r2, #3
 8007806:	0092      	lsls	r2, r2, #2
 8007808:	4093      	lsls	r3, r2
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	4313      	orrs	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007810:	4935      	ldr	r1, [pc, #212]	@ (80078e8 <HAL_GPIO_Init+0x310>)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	089b      	lsrs	r3, r3, #2
 8007816:	3302      	adds	r3, #2
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800781e:	4b3b      	ldr	r3, [pc, #236]	@ (800790c <HAL_GPIO_Init+0x334>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	43db      	mvns	r3, r3
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	4013      	ands	r3, r2
 800782c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007842:	4a32      	ldr	r2, [pc, #200]	@ (800790c <HAL_GPIO_Init+0x334>)
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007848:	4b30      	ldr	r3, [pc, #192]	@ (800790c <HAL_GPIO_Init+0x334>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	43db      	mvns	r3, r3
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	4013      	ands	r3, r2
 8007856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800786c:	4a27      	ldr	r2, [pc, #156]	@ (800790c <HAL_GPIO_Init+0x334>)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007872:	4b26      	ldr	r3, [pc, #152]	@ (800790c <HAL_GPIO_Init+0x334>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	43db      	mvns	r3, r3
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	4013      	ands	r3, r2
 8007880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007896:	4a1d      	ldr	r2, [pc, #116]	@ (800790c <HAL_GPIO_Init+0x334>)
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800789c:	4b1b      	ldr	r3, [pc, #108]	@ (800790c <HAL_GPIO_Init+0x334>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	43db      	mvns	r3, r3
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	4013      	ands	r3, r2
 80078aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80078c0:	4a12      	ldr	r2, [pc, #72]	@ (800790c <HAL_GPIO_Init+0x334>)
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	3301      	adds	r3, #1
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2b0f      	cmp	r3, #15
 80078d0:	f67f ae90 	bls.w	80075f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	3724      	adds	r7, #36	@ 0x24
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40023800 	.word	0x40023800
 80078e8:	40013800 	.word	0x40013800
 80078ec:	40020000 	.word	0x40020000
 80078f0:	40020400 	.word	0x40020400
 80078f4:	40020800 	.word	0x40020800
 80078f8:	40020c00 	.word	0x40020c00
 80078fc:	40021000 	.word	0x40021000
 8007900:	40021400 	.word	0x40021400
 8007904:	40021800 	.word	0x40021800
 8007908:	40021c00 	.word	0x40021c00
 800790c:	40013c00 	.word	0x40013c00

08007910 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800791a:	2300      	movs	r3, #0
 800791c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007922:	2300      	movs	r3, #0
 8007924:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	e0cd      	b.n	8007ac8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800792c:	2201      	movs	r2, #1
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	4013      	ands	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	429a      	cmp	r2, r3
 8007944:	f040 80bd 	bne.w	8007ac2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007948:	4a65      	ldr	r2, [pc, #404]	@ (8007ae0 <HAL_GPIO_DeInit+0x1d0>)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	089b      	lsrs	r3, r3, #2
 800794e:	3302      	adds	r3, #2
 8007950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007954:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	220f      	movs	r2, #15
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ae4 <HAL_GPIO_DeInit+0x1d4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d02b      	beq.n	80079ca <HAL_GPIO_DeInit+0xba>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a5c      	ldr	r2, [pc, #368]	@ (8007ae8 <HAL_GPIO_DeInit+0x1d8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d025      	beq.n	80079c6 <HAL_GPIO_DeInit+0xb6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a5b      	ldr	r2, [pc, #364]	@ (8007aec <HAL_GPIO_DeInit+0x1dc>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01f      	beq.n	80079c2 <HAL_GPIO_DeInit+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a5a      	ldr	r2, [pc, #360]	@ (8007af0 <HAL_GPIO_DeInit+0x1e0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d019      	beq.n	80079be <HAL_GPIO_DeInit+0xae>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a59      	ldr	r2, [pc, #356]	@ (8007af4 <HAL_GPIO_DeInit+0x1e4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d013      	beq.n	80079ba <HAL_GPIO_DeInit+0xaa>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a58      	ldr	r2, [pc, #352]	@ (8007af8 <HAL_GPIO_DeInit+0x1e8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00d      	beq.n	80079b6 <HAL_GPIO_DeInit+0xa6>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a57      	ldr	r2, [pc, #348]	@ (8007afc <HAL_GPIO_DeInit+0x1ec>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <HAL_GPIO_DeInit+0xa2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a56      	ldr	r2, [pc, #344]	@ (8007b00 <HAL_GPIO_DeInit+0x1f0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d101      	bne.n	80079ae <HAL_GPIO_DeInit+0x9e>
 80079aa:	2307      	movs	r3, #7
 80079ac:	e00e      	b.n	80079cc <HAL_GPIO_DeInit+0xbc>
 80079ae:	2308      	movs	r3, #8
 80079b0:	e00c      	b.n	80079cc <HAL_GPIO_DeInit+0xbc>
 80079b2:	2306      	movs	r3, #6
 80079b4:	e00a      	b.n	80079cc <HAL_GPIO_DeInit+0xbc>
 80079b6:	2305      	movs	r3, #5
 80079b8:	e008      	b.n	80079cc <HAL_GPIO_DeInit+0xbc>
 80079ba:	2304      	movs	r3, #4
 80079bc:	e006      	b.n	80079cc <HAL_GPIO_DeInit+0xbc>
 80079be:	2303      	movs	r3, #3
 80079c0:	e004      	b.n	80079cc <HAL_GPIO_DeInit+0xbc>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e002      	b.n	80079cc <HAL_GPIO_DeInit+0xbc>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <HAL_GPIO_DeInit+0xbc>
 80079ca:	2300      	movs	r3, #0
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	f002 0203 	and.w	r2, r2, #3
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	4093      	lsls	r3, r2
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d132      	bne.n	8007a42 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80079dc:	4b49      	ldr	r3, [pc, #292]	@ (8007b04 <HAL_GPIO_DeInit+0x1f4>)
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	43db      	mvns	r3, r3
 80079e4:	4947      	ldr	r1, [pc, #284]	@ (8007b04 <HAL_GPIO_DeInit+0x1f4>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80079ea:	4b46      	ldr	r3, [pc, #280]	@ (8007b04 <HAL_GPIO_DeInit+0x1f4>)
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	43db      	mvns	r3, r3
 80079f2:	4944      	ldr	r1, [pc, #272]	@ (8007b04 <HAL_GPIO_DeInit+0x1f4>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80079f8:	4b42      	ldr	r3, [pc, #264]	@ (8007b04 <HAL_GPIO_DeInit+0x1f4>)
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	43db      	mvns	r3, r3
 8007a00:	4940      	ldr	r1, [pc, #256]	@ (8007b04 <HAL_GPIO_DeInit+0x1f4>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007a06:	4b3f      	ldr	r3, [pc, #252]	@ (8007b04 <HAL_GPIO_DeInit+0x1f4>)
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	493d      	ldr	r1, [pc, #244]	@ (8007b04 <HAL_GPIO_DeInit+0x1f4>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	220f      	movs	r2, #15
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007a24:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae0 <HAL_GPIO_DeInit+0x1d0>)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	089b      	lsrs	r3, r3, #2
 8007a2a:	3302      	adds	r3, #2
 8007a2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	43da      	mvns	r2, r3
 8007a34:	482a      	ldr	r0, [pc, #168]	@ (8007ae0 <HAL_GPIO_DeInit+0x1d0>)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	089b      	lsrs	r3, r3, #2
 8007a3a:	400a      	ands	r2, r1
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	2103      	movs	r1, #3
 8007a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a50:	43db      	mvns	r3, r3
 8007a52:	401a      	ands	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	08da      	lsrs	r2, r3, #3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3208      	adds	r2, #8
 8007a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	220f      	movs	r2, #15
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43db      	mvns	r3, r3
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	08d2      	lsrs	r2, r2, #3
 8007a78:	4019      	ands	r1, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3208      	adds	r2, #8
 8007a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	2103      	movs	r1, #3
 8007a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	401a      	ands	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	2103      	movs	r1, #3
 8007ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aba:	43db      	mvns	r3, r3
 8007abc:	401a      	ands	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2b0f      	cmp	r3, #15
 8007acc:	f67f af2e 	bls.w	800792c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40013800 	.word	0x40013800
 8007ae4:	40020000 	.word	0x40020000
 8007ae8:	40020400 	.word	0x40020400
 8007aec:	40020800 	.word	0x40020800
 8007af0:	40020c00 	.word	0x40020c00
 8007af4:	40021000 	.word	0x40021000
 8007af8:	40021400 	.word	0x40021400
 8007afc:	40021800 	.word	0x40021800
 8007b00:	40021c00 	.word	0x40021c00
 8007b04:	40013c00 	.word	0x40013c00

08007b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
 8007b14:	4613      	mov	r3, r2
 8007b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b18:	787b      	ldrb	r3, [r7, #1]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b1e:	887a      	ldrh	r2, [r7, #2]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b24:	e003      	b.n	8007b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b26:	887b      	ldrh	r3, [r7, #2]
 8007b28:	041a      	lsls	r2, r3, #16
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	619a      	str	r2, [r3, #24]
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e12b      	b.n	8007da6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fc fb38 	bl	80041d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2224      	movs	r2, #36	@ 0x24
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ba0:	f002 ff5e 	bl	800aa60 <HAL_RCC_GetPCLK1Freq>
 8007ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	4a81      	ldr	r2, [pc, #516]	@ (8007db0 <HAL_I2C_Init+0x274>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d807      	bhi.n	8007bc0 <HAL_I2C_Init+0x84>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a80      	ldr	r2, [pc, #512]	@ (8007db4 <HAL_I2C_Init+0x278>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	bf94      	ite	ls
 8007bb8:	2301      	movls	r3, #1
 8007bba:	2300      	movhi	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	e006      	b.n	8007bce <HAL_I2C_Init+0x92>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a7d      	ldr	r2, [pc, #500]	@ (8007db8 <HAL_I2C_Init+0x27c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	bf94      	ite	ls
 8007bc8:	2301      	movls	r3, #1
 8007bca:	2300      	movhi	r3, #0
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e0e7      	b.n	8007da6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a78      	ldr	r2, [pc, #480]	@ (8007dbc <HAL_I2C_Init+0x280>)
 8007bda:	fba2 2303 	umull	r2, r3, r2, r3
 8007bde:	0c9b      	lsrs	r3, r3, #18
 8007be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	4a6a      	ldr	r2, [pc, #424]	@ (8007db0 <HAL_I2C_Init+0x274>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d802      	bhi.n	8007c10 <HAL_I2C_Init+0xd4>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	e009      	b.n	8007c24 <HAL_I2C_Init+0xe8>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	4a69      	ldr	r2, [pc, #420]	@ (8007dc0 <HAL_I2C_Init+0x284>)
 8007c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c20:	099b      	lsrs	r3, r3, #6
 8007c22:	3301      	adds	r3, #1
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007c36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	495c      	ldr	r1, [pc, #368]	@ (8007db0 <HAL_I2C_Init+0x274>)
 8007c40:	428b      	cmp	r3, r1
 8007c42:	d819      	bhi.n	8007c78 <HAL_I2C_Init+0x13c>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	1e59      	subs	r1, r3, #1
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c52:	1c59      	adds	r1, r3, #1
 8007c54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007c58:	400b      	ands	r3, r1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <HAL_I2C_Init+0x138>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1e59      	subs	r1, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c72:	e051      	b.n	8007d18 <HAL_I2C_Init+0x1dc>
 8007c74:	2304      	movs	r3, #4
 8007c76:	e04f      	b.n	8007d18 <HAL_I2C_Init+0x1dc>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d111      	bne.n	8007ca4 <HAL_I2C_Init+0x168>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	1e58      	subs	r0, r3, #1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6859      	ldr	r1, [r3, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	440b      	add	r3, r1
 8007c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c92:	3301      	adds	r3, #1
 8007c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	bf0c      	ite	eq
 8007c9c:	2301      	moveq	r3, #1
 8007c9e:	2300      	movne	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e012      	b.n	8007cca <HAL_I2C_Init+0x18e>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	1e58      	subs	r0, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	0099      	lsls	r1, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_I2C_Init+0x196>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e022      	b.n	8007d18 <HAL_I2C_Init+0x1dc>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_I2C_Init+0x1bc>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	1e58      	subs	r0, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6859      	ldr	r1, [r3, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	440b      	add	r3, r1
 8007ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cec:	3301      	adds	r3, #1
 8007cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cf6:	e00f      	b.n	8007d18 <HAL_I2C_Init+0x1dc>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	1e58      	subs	r0, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6859      	ldr	r1, [r3, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	0099      	lsls	r1, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d0e:	3301      	adds	r3, #1
 8007d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	6809      	ldr	r1, [r1, #0]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007d46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6911      	ldr	r1, [r2, #16]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68d2      	ldr	r2, [r2, #12]
 8007d52:	4311      	orrs	r1, r2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695a      	ldr	r2, [r3, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	000186a0 	.word	0x000186a0
 8007db4:	001e847f 	.word	0x001e847f
 8007db8:	003d08ff 	.word	0x003d08ff
 8007dbc:	431bde83 	.word	0x431bde83
 8007dc0:	10624dd3 	.word	0x10624dd3

08007dc4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e021      	b.n	8007e1a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2224      	movs	r2, #36	@ 0x24
 8007dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0201 	bic.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fc fa6c 	bl	80042cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e34:	2b80      	cmp	r3, #128	@ 0x80
 8007e36:	d103      	bne.n	8007e40 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	611a      	str	r2, [r3, #16]
  }
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	461a      	mov	r2, r3
 8007e58:	460b      	mov	r3, r1
 8007e5a:	817b      	strh	r3, [r7, #10]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e60:	f7fd fa76 	bl	8005350 <HAL_GetTick>
 8007e64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	f040 80e0 	bne.w	8008034 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	2319      	movs	r3, #25
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	4970      	ldr	r1, [pc, #448]	@ (8008040 <HAL_I2C_Master_Transmit+0x1f4>)
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f001 ff58 	bl	8009d34 <I2C_WaitOnFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e0d3      	b.n	8008036 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_I2C_Master_Transmit+0x50>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e0cc      	b.n	8008036 <HAL_I2C_Master_Transmit+0x1ea>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d007      	beq.n	8007ec2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0201 	orr.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ed0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2221      	movs	r2, #33	@ 0x21
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2210      	movs	r2, #16
 8007ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	893a      	ldrh	r2, [r7, #8]
 8007ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a50      	ldr	r2, [pc, #320]	@ (8008044 <HAL_I2C_Master_Transmit+0x1f8>)
 8007f02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f04:	8979      	ldrh	r1, [r7, #10]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	6a3a      	ldr	r2, [r7, #32]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 fde8 	bl	8009ae0 <I2C_MasterRequestWrite>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e08d      	b.n	8008036 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	613b      	str	r3, [r7, #16]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	613b      	str	r3, [r7, #16]
 8007f2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007f30:	e066      	b.n	8008000 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	6a39      	ldr	r1, [r7, #32]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f002 f816 	bl	8009f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d107      	bne.n	8007f5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e06b      	b.n	8008036 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f62:	781a      	ldrb	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f86:	3b01      	subs	r3, #1
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d11b      	bne.n	8007fd4 <HAL_I2C_Master_Transmit+0x188>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d017      	beq.n	8007fd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa8:	781a      	ldrb	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	6a39      	ldr	r1, [r7, #32]
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f002 f80d 	bl	8009ff8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00d      	beq.n	8008000 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d107      	bne.n	8007ffc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ffa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e01a      	b.n	8008036 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d194      	bne.n	8007f32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	e000      	b.n	8008036 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008034:	2302      	movs	r3, #2
  }
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	00100002 	.word	0x00100002
 8008044:	ffff0000 	.word	0xffff0000

08008048 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	4608      	mov	r0, r1
 8008052:	4611      	mov	r1, r2
 8008054:	461a      	mov	r2, r3
 8008056:	4603      	mov	r3, r0
 8008058:	817b      	strh	r3, [r7, #10]
 800805a:	460b      	mov	r3, r1
 800805c:	813b      	strh	r3, [r7, #8]
 800805e:	4613      	mov	r3, r2
 8008060:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b20      	cmp	r3, #32
 8008070:	f040 808a 	bne.w	8008188 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008074:	4b48      	ldr	r3, [pc, #288]	@ (8008198 <HAL_I2C_Mem_Write_IT+0x150>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	08db      	lsrs	r3, r3, #3
 800807a:	4a48      	ldr	r2, [pc, #288]	@ (800819c <HAL_I2C_Mem_Write_IT+0x154>)
 800807c:	fba2 2303 	umull	r2, r3, r2, r3
 8008080:	0a1a      	lsrs	r2, r3, #8
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009a      	lsls	r2, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	3b01      	subs	r3, #1
 8008092:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d112      	bne.n	80080c0 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b4:	f043 0220 	orr.w	r2, r3, #32
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80080bc:	2302      	movs	r3, #2
 80080be:	e064      	b.n	800818a <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d0df      	beq.n	800808e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_I2C_Mem_Write_IT+0x94>
 80080d8:	2302      	movs	r3, #2
 80080da:	e056      	b.n	800818a <HAL_I2C_Mem_Write_IT+0x142>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d007      	beq.n	8008102 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 0201 	orr.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008110:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2221      	movs	r2, #33	@ 0x21
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2240      	movs	r2, #64	@ 0x40
 800811e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a3a      	ldr	r2, [r7, #32]
 800812c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a17      	ldr	r2, [pc, #92]	@ (80081a0 <HAL_I2C_Mem_Write_IT+0x158>)
 8008142:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008144:	897a      	ldrh	r2, [r7, #10]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800814a:	893a      	ldrh	r2, [r7, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800816a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8008182:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	e000      	b.n	800818a <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8008188:	2302      	movs	r3, #2
  }
}
 800818a:	4618      	mov	r0, r3
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	200000f0 	.word	0x200000f0
 800819c:	14f8b589 	.word	0x14f8b589
 80081a0:	ffff0000 	.word	0xffff0000

080081a4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	4608      	mov	r0, r1
 80081ae:	4611      	mov	r1, r2
 80081b0:	461a      	mov	r2, r3
 80081b2:	4603      	mov	r3, r0
 80081b4:	817b      	strh	r3, [r7, #10]
 80081b6:	460b      	mov	r3, r1
 80081b8:	813b      	strh	r3, [r7, #8]
 80081ba:	4613      	mov	r3, r2
 80081bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b20      	cmp	r3, #32
 80081cc:	f040 8096 	bne.w	80082fc <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80081d0:	4b4e      	ldr	r3, [pc, #312]	@ (800830c <HAL_I2C_Mem_Read_IT+0x168>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	08db      	lsrs	r3, r3, #3
 80081d6:	4a4e      	ldr	r2, [pc, #312]	@ (8008310 <HAL_I2C_Mem_Read_IT+0x16c>)
 80081d8:	fba2 2303 	umull	r2, r3, r2, r3
 80081dc:	0a1a      	lsrs	r2, r3, #8
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009a      	lsls	r2, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d112      	bne.n	800821c <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8008218:	2302      	movs	r3, #2
 800821a:	e070      	b.n	80082fe <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b02      	cmp	r3, #2
 8008228:	d0df      	beq.n	80081ea <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_I2C_Mem_Read_IT+0x94>
 8008234:	2302      	movs	r3, #2
 8008236:	e062      	b.n	80082fe <HAL_I2C_Mem_Read_IT+0x15a>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b01      	cmp	r3, #1
 800824c:	d007      	beq.n	800825e <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0201 	orr.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800826c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2222      	movs	r2, #34	@ 0x22
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2240      	movs	r2, #64	@ 0x40
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a3a      	ldr	r2, [r7, #32]
 8008288:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800828e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008294:	b29a      	uxth	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4a1d      	ldr	r2, [pc, #116]	@ (8008314 <HAL_I2C_Mem_Read_IT+0x170>)
 800829e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80082a0:	897a      	ldrh	r2, [r7, #10]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80082a6:	893a      	ldrh	r2, [r7, #8]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082c6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082d6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d007      	beq.n	80082f8 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80082f6:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	e000      	b.n	80082fe <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 80082fc:	2302      	movs	r3, #2
  }
}
 80082fe:	4618      	mov	r0, r3
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	200000f0 	.word	0x200000f0
 8008310:	14f8b589 	.word	0x14f8b589
 8008314:	ffff0000 	.word	0xffff0000

08008318 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008330:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008338:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008340:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b10      	cmp	r3, #16
 8008346:	d003      	beq.n	8008350 <HAL_I2C_EV_IRQHandler+0x38>
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	2b40      	cmp	r3, #64	@ 0x40
 800834c:	f040 80c1 	bne.w	80084d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10d      	bne.n	8008386 <HAL_I2C_EV_IRQHandler+0x6e>
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008370:	d003      	beq.n	800837a <HAL_I2C_EV_IRQHandler+0x62>
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008378:	d101      	bne.n	800837e <HAL_I2C_EV_IRQHandler+0x66>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <HAL_I2C_EV_IRQHandler+0x68>
 800837e:	2300      	movs	r3, #0
 8008380:	2b01      	cmp	r3, #1
 8008382:	f000 8132 	beq.w	80085ea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00c      	beq.n	80083aa <HAL_I2C_EV_IRQHandler+0x92>
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	0a5b      	lsrs	r3, r3, #9
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d006      	beq.n	80083aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 fed4 	bl	800a14a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fd7d 	bl	8008ea2 <I2C_Master_SB>
 80083a8:	e092      	b.n	80084d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	08db      	lsrs	r3, r3, #3
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <HAL_I2C_EV_IRQHandler+0xb2>
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	0a5b      	lsrs	r3, r3, #9
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fdf3 	bl	8008fae <I2C_Master_ADD10>
 80083c8:	e082      	b.n	80084d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	085b      	lsrs	r3, r3, #1
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <HAL_I2C_EV_IRQHandler+0xd2>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	0a5b      	lsrs	r3, r3, #9
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fe0d 	bl	8009002 <I2C_Master_ADDR>
 80083e8:	e072      	b.n	80084d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	089b      	lsrs	r3, r3, #2
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d03b      	beq.n	800846e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008404:	f000 80f3 	beq.w	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	09db      	lsrs	r3, r3, #7
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00f      	beq.n	8008434 <HAL_I2C_EV_IRQHandler+0x11c>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	0a9b      	lsrs	r3, r3, #10
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d009      	beq.n	8008434 <HAL_I2C_EV_IRQHandler+0x11c>
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	089b      	lsrs	r3, r3, #2
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d103      	bne.n	8008434 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f9d5 	bl	80087dc <I2C_MasterTransmit_TXE>
 8008432:	e04d      	b.n	80084d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	089b      	lsrs	r3, r3, #2
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 80d6 	beq.w	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	0a5b      	lsrs	r3, r3, #9
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 80cf 	beq.w	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b21      	cmp	r3, #33	@ 0x21
 8008454:	d103      	bne.n	800845e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fa5c 	bl	8008914 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800845c:	e0c7      	b.n	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b40      	cmp	r3, #64	@ 0x40
 8008462:	f040 80c4 	bne.w	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 faca 	bl	8008a00 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800846c:	e0bf      	b.n	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800847c:	f000 80b7 	beq.w	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	099b      	lsrs	r3, r3, #6
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00f      	beq.n	80084ac <HAL_I2C_EV_IRQHandler+0x194>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	0a9b      	lsrs	r3, r3, #10
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d009      	beq.n	80084ac <HAL_I2C_EV_IRQHandler+0x194>
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	089b      	lsrs	r3, r3, #2
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d103      	bne.n	80084ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fb43 	bl	8008b30 <I2C_MasterReceive_RXNE>
 80084aa:	e011      	b.n	80084d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	089b      	lsrs	r3, r3, #2
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 809a 	beq.w	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	0a5b      	lsrs	r3, r3, #9
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8093 	beq.w	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fbf9 	bl	8008cc0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084ce:	e08e      	b.n	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80084d0:	e08d      	b.n	80085ee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	e007      	b.n	80084f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	085b      	lsrs	r3, r3, #1
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d012      	beq.n	8008526 <HAL_I2C_EV_IRQHandler+0x20e>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	0a5b      	lsrs	r3, r3, #9
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00c      	beq.n	8008526 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800851c:	69b9      	ldr	r1, [r7, #24]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 ffbe 	bl	80094a0 <I2C_Slave_ADDR>
 8008524:	e066      	b.n	80085f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	091b      	lsrs	r3, r3, #4
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d009      	beq.n	8008546 <HAL_I2C_EV_IRQHandler+0x22e>
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	0a5b      	lsrs	r3, r3, #9
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fff8 	bl	8009534 <I2C_Slave_STOPF>
 8008544:	e056      	b.n	80085f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b21      	cmp	r3, #33	@ 0x21
 800854a:	d002      	beq.n	8008552 <HAL_I2C_EV_IRQHandler+0x23a>
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	2b29      	cmp	r3, #41	@ 0x29
 8008550:	d125      	bne.n	800859e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	09db      	lsrs	r3, r3, #7
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00f      	beq.n	800857e <HAL_I2C_EV_IRQHandler+0x266>
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	0a9b      	lsrs	r3, r3, #10
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <HAL_I2C_EV_IRQHandler+0x266>
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	089b      	lsrs	r3, r3, #2
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d103      	bne.n	800857e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fed4 	bl	8009324 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800857c:	e039      	b.n	80085f2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	089b      	lsrs	r3, r3, #2
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d033      	beq.n	80085f2 <HAL_I2C_EV_IRQHandler+0x2da>
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	0a5b      	lsrs	r3, r3, #9
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d02d      	beq.n	80085f2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 ff01 	bl	800939e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800859c:	e029      	b.n	80085f2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	099b      	lsrs	r3, r3, #6
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00f      	beq.n	80085ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	0a9b      	lsrs	r3, r3, #10
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	089b      	lsrs	r3, r3, #2
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 ff0c 	bl	80093e0 <I2C_SlaveReceive_RXNE>
 80085c8:	e014      	b.n	80085f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	089b      	lsrs	r3, r3, #2
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00e      	beq.n	80085f4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	0a5b      	lsrs	r3, r3, #9
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d008      	beq.n	80085f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 ff3a 	bl	800945c <I2C_SlaveReceive_BTF>
 80085e8:	e004      	b.n	80085f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80085ea:	bf00      	nop
 80085ec:	e002      	b.n	80085f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085ee:	bf00      	nop
 80085f0:	e000      	b.n	80085f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80085f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b08a      	sub	sp, #40	@ 0x28
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008612:	2300      	movs	r3, #0
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800861c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	0a1b      	lsrs	r3, r3, #8
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00e      	beq.n	8008648 <HAL_I2C_ER_IRQHandler+0x4e>
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	0a1b      	lsrs	r3, r3, #8
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d008      	beq.n	8008648 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008646:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	0a5b      	lsrs	r3, r3, #9
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00e      	beq.n	8008672 <HAL_I2C_ER_IRQHandler+0x78>
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008662:	f043 0302 	orr.w	r3, r3, #2
 8008666:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8008670:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	0a9b      	lsrs	r3, r3, #10
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d03f      	beq.n	80086fe <HAL_I2C_ER_IRQHandler+0x104>
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	0a1b      	lsrs	r3, r3, #8
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d039      	beq.n	80086fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800868a:	7efb      	ldrb	r3, [r7, #27]
 800868c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008692:	b29b      	uxth	r3, r3
 8008694:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800869c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80086a4:	7ebb      	ldrb	r3, [r7, #26]
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	d112      	bne.n	80086d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10f      	bne.n	80086d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80086b0:	7cfb      	ldrb	r3, [r7, #19]
 80086b2:	2b21      	cmp	r3, #33	@ 0x21
 80086b4:	d008      	beq.n	80086c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80086b6:	7cfb      	ldrb	r3, [r7, #19]
 80086b8:	2b29      	cmp	r3, #41	@ 0x29
 80086ba:	d005      	beq.n	80086c8 <HAL_I2C_ER_IRQHandler+0xce>
 80086bc:	7cfb      	ldrb	r3, [r7, #19]
 80086be:	2b28      	cmp	r3, #40	@ 0x28
 80086c0:	d106      	bne.n	80086d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b21      	cmp	r3, #33	@ 0x21
 80086c6:	d103      	bne.n	80086d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 f863 	bl	8009794 <I2C_Slave_AF>
 80086ce:	e016      	b.n	80086fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80086d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	f043 0304 	orr.w	r3, r3, #4
 80086e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80086e2:	7efb      	ldrb	r3, [r7, #27]
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	d002      	beq.n	80086ee <HAL_I2C_ER_IRQHandler+0xf4>
 80086e8:	7efb      	ldrb	r3, [r7, #27]
 80086ea:	2b40      	cmp	r3, #64	@ 0x40
 80086ec:	d107      	bne.n	80086fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	0adb      	lsrs	r3, r3, #11
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00e      	beq.n	8008728 <HAL_I2C_ER_IRQHandler+0x12e>
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	f043 0308 	orr.w	r3, r3, #8
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8008726:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	2b00      	cmp	r3, #0
 800872c:	d008      	beq.n	8008740 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 f89e 	bl	800987c <I2C_ITError>
  }
}
 8008740:	bf00      	nop
 8008742:	3728      	adds	r7, #40	@ 0x28
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
 80087a4:	4613      	mov	r3, r2
 80087a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d150      	bne.n	80088a4 <I2C_MasterTransmit_TXE+0xc8>
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b21      	cmp	r3, #33	@ 0x21
 8008806:	d14d      	bne.n	80088a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b08      	cmp	r3, #8
 800880c:	d01d      	beq.n	800884a <I2C_MasterTransmit_TXE+0x6e>
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2b20      	cmp	r3, #32
 8008812:	d01a      	beq.n	800884a <I2C_MasterTransmit_TXE+0x6e>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800881a:	d016      	beq.n	800884a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800882a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2211      	movs	r2, #17
 8008830:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff ff80 	bl	8008748 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008848:	e060      	b.n	800890c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008858:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008868:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b40      	cmp	r3, #64	@ 0x40
 8008882:	d107      	bne.n	8008894 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f8 fbd5 	bl	800103c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008892:	e03b      	b.n	800890c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff ff53 	bl	8008748 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80088a2:	e033      	b.n	800890c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b21      	cmp	r3, #33	@ 0x21
 80088a8:	d005      	beq.n	80088b6 <I2C_MasterTransmit_TXE+0xda>
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b40      	cmp	r3, #64	@ 0x40
 80088ae:	d12d      	bne.n	800890c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	2b22      	cmp	r3, #34	@ 0x22
 80088b4:	d12a      	bne.n	800890c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d108      	bne.n	80088d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80088d0:	e01c      	b.n	800890c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b40      	cmp	r3, #64	@ 0x40
 80088dc:	d103      	bne.n	80088e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f88e 	bl	8008a00 <I2C_MemoryTransmit_TXE_BTF>
}
 80088e4:	e012      	b.n	800890c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008900:	b29b      	uxth	r3, r3
 8008902:	3b01      	subs	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800890a:	e7ff      	b.n	800890c <I2C_MasterTransmit_TXE+0x130>
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008920:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b21      	cmp	r3, #33	@ 0x21
 800892c:	d164      	bne.n	80089f8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008932:	b29b      	uxth	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	d012      	beq.n	800895e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893c:	781a      	ldrb	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008952:	b29b      	uxth	r3, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800895c:	e04c      	b.n	80089f8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2b08      	cmp	r3, #8
 8008962:	d01d      	beq.n	80089a0 <I2C_MasterTransmit_BTF+0x8c>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b20      	cmp	r3, #32
 8008968:	d01a      	beq.n	80089a0 <I2C_MasterTransmit_BTF+0x8c>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008970:	d016      	beq.n	80089a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008980:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2211      	movs	r2, #17
 8008986:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff fed5 	bl	8008748 <HAL_I2C_MasterTxCpltCallback>
}
 800899e:	e02b      	b.n	80089f8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80089ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b40      	cmp	r3, #64	@ 0x40
 80089d8:	d107      	bne.n	80089ea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7f8 fb2a 	bl	800103c <HAL_I2C_MemTxCpltCallback>
}
 80089e8:	e006      	b.n	80089f8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fea8 	bl	8008748 <HAL_I2C_MasterTxCpltCallback>
}
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d11d      	bne.n	8008a54 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d10b      	bne.n	8008a38 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a30:	1c9a      	adds	r2, r3, #2
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8008a36:	e077      	b.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	121b      	asrs	r3, r3, #8
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008a52:	e069      	b.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d10b      	bne.n	8008a74 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008a72:	e059      	b.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d152      	bne.n	8008b22 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b22      	cmp	r3, #34	@ 0x22
 8008a80:	d10d      	bne.n	8008a9e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a90:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008a9c:	e044      	b.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d015      	beq.n	8008ad4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	2b21      	cmp	r3, #33	@ 0x21
 8008aac:	d112      	bne.n	8008ad4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008ad2:	e029      	b.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d124      	bne.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b21      	cmp	r3, #33	@ 0x21
 8008ae2:	d121      	bne.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008af2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2220      	movs	r2, #32
 8008b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7f8 fa8e 	bl	800103c <HAL_I2C_MemTxCpltCallback>
}
 8008b20:	e002      	b.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff f97d 	bl	8007e22 <I2C_Flush_DR>
}
 8008b28:	bf00      	nop
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b22      	cmp	r3, #34	@ 0x22
 8008b42:	f040 80b9 	bne.w	8008cb8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d921      	bls.n	8008b9e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	f040 8096 	bne.w	8008cb8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b9a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008b9c:	e08c      	b.n	8008cb8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d07f      	beq.n	8008ca6 <I2C_MasterReceive_RXNE+0x176>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d002      	beq.n	8008bb2 <I2C_MasterReceive_RXNE+0x82>
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d179      	bne.n	8008ca6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 fa68 	bl	800a088 <I2C_WaitOnSTOPRequestThroughIT>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d14c      	bne.n	8008c58 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bcc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008bdc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691a      	ldr	r2, [r3, #16]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be8:	b2d2      	uxtb	r2, r2
 8008bea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b40      	cmp	r3, #64	@ 0x40
 8008c16:	d10a      	bne.n	8008c2e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7f8 f9f0 	bl	800100c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008c2c:	e044      	b.n	8008cb8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d002      	beq.n	8008c42 <I2C_MasterReceive_RXNE+0x112>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d103      	bne.n	8008c4a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c48:	e002      	b.n	8008c50 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2212      	movs	r2, #18
 8008c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff fd83 	bl	800875c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008c56:	e02f      	b.n	8008cb8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008c66:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691a      	ldr	r2, [r3, #16]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7f8 f9e4 	bl	800106c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008ca4:	e008      	b.n	8008cb8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cb4:	605a      	str	r2, [r3, #4]
}
 8008cb6:	e7ff      	b.n	8008cb8 <I2C_MasterReceive_RXNE+0x188>
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d11b      	bne.n	8008d10 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ce6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691a      	ldr	r2, [r3, #16]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008d0e:	e0c4      	b.n	8008e9a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d129      	bne.n	8008d6e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d28:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d00a      	beq.n	8008d46 <I2C_MasterReceive_BTF+0x86>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d007      	beq.n	8008d46 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d44:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008d6c:	e095      	b.n	8008e9a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d17d      	bne.n	8008e74 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d002      	beq.n	8008d84 <I2C_MasterReceive_BTF+0xc4>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d108      	bne.n	8008d96 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e016      	b.n	8008dc4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d002      	beq.n	8008da2 <I2C_MasterReceive_BTF+0xe2>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d108      	bne.n	8008db4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	e007      	b.n	8008dc4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dc2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	691a      	ldr	r2, [r3, #16]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008e1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b40      	cmp	r3, #64	@ 0x40
 8008e32:	d10a      	bne.n	8008e4a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7f8 f8e2 	bl	800100c <HAL_I2C_MemRxCpltCallback>
}
 8008e48:	e027      	b.n	8008e9a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d002      	beq.n	8008e5e <I2C_MasterReceive_BTF+0x19e>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d103      	bne.n	8008e66 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e64:	e002      	b.n	8008e6c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2212      	movs	r2, #18
 8008e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff fc75 	bl	800875c <HAL_I2C_MasterRxCpltCallback>
}
 8008e72:	e012      	b.n	8008e9a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691a      	ldr	r2, [r3, #16]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b40      	cmp	r3, #64	@ 0x40
 8008eb4:	d117      	bne.n	8008ee6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008ece:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008ed0:	e067      	b.n	8008fa2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	611a      	str	r2, [r3, #16]
}
 8008ee4:	e05d      	b.n	8008fa2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eee:	d133      	bne.n	8008f58 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b21      	cmp	r3, #33	@ 0x21
 8008efa:	d109      	bne.n	8008f10 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	461a      	mov	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008f0c:	611a      	str	r2, [r3, #16]
 8008f0e:	e008      	b.n	8008f22 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d004      	beq.n	8008f34 <I2C_Master_SB+0x92>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d108      	bne.n	8008f46 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d032      	beq.n	8008fa2 <I2C_Master_SB+0x100>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d02d      	beq.n	8008fa2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f54:	605a      	str	r2, [r3, #4]
}
 8008f56:	e024      	b.n	8008fa2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10e      	bne.n	8008f7e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	11db      	asrs	r3, r3, #7
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	f003 0306 	and.w	r3, r3, #6
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	f063 030f 	orn	r3, r3, #15
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	611a      	str	r2, [r3, #16]
}
 8008f7c:	e011      	b.n	8008fa2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d10d      	bne.n	8008fa2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	11db      	asrs	r3, r3, #7
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	f003 0306 	and.w	r3, r3, #6
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	f063 030e 	orn	r3, r3, #14
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	611a      	str	r2, [r3, #16]
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d004      	beq.n	8008fd4 <I2C_Master_ADD10+0x26>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d108      	bne.n	8008fe6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00c      	beq.n	8008ff6 <I2C_Master_ADD10+0x48>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d007      	beq.n	8008ff6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ff4:	605a      	str	r2, [r3, #4]
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009002:	b480      	push	{r7}
 8009004:	b091      	sub	sp, #68	@ 0x44
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009010:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b22      	cmp	r3, #34	@ 0x22
 800902a:	f040 8169 	bne.w	8009300 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10f      	bne.n	8009056 <I2C_Master_ADDR+0x54>
 8009036:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800903a:	2b40      	cmp	r3, #64	@ 0x40
 800903c:	d10b      	bne.n	8009056 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800903e:	2300      	movs	r3, #0
 8009040:	633b      	str	r3, [r7, #48]	@ 0x30
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	633b      	str	r3, [r7, #48]	@ 0x30
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	633b      	str	r3, [r7, #48]	@ 0x30
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	e160      	b.n	8009318 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800905a:	2b00      	cmp	r3, #0
 800905c:	d11d      	bne.n	800909a <I2C_Master_ADDR+0x98>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009066:	d118      	bne.n	800909a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009068:	2300      	movs	r3, #0
 800906a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800907c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800908c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	651a      	str	r2, [r3, #80]	@ 0x50
 8009098:	e13e      	b.n	8009318 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800909e:	b29b      	uxth	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d113      	bne.n	80090cc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090a4:	2300      	movs	r3, #0
 80090a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	e115      	b.n	80092f8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	f040 808a 	bne.w	80091ec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80090de:	d137      	bne.n	8009150 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090fe:	d113      	bne.n	8009128 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800910e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009110:	2300      	movs	r3, #0
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	627b      	str	r3, [r7, #36]	@ 0x24
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	e0e7      	b.n	80092f8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009128:	2300      	movs	r3, #0
 800912a:	623b      	str	r3, [r7, #32]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	623b      	str	r3, [r7, #32]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	623b      	str	r3, [r7, #32]
 800913c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e0d3      	b.n	80092f8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009152:	2b08      	cmp	r3, #8
 8009154:	d02e      	beq.n	80091b4 <I2C_Master_ADDR+0x1b2>
 8009156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009158:	2b20      	cmp	r3, #32
 800915a:	d02b      	beq.n	80091b4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800915c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915e:	2b12      	cmp	r3, #18
 8009160:	d102      	bne.n	8009168 <I2C_Master_ADDR+0x166>
 8009162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009164:	2b01      	cmp	r3, #1
 8009166:	d125      	bne.n	80091b4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916a:	2b04      	cmp	r3, #4
 800916c:	d00e      	beq.n	800918c <I2C_Master_ADDR+0x18a>
 800916e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009170:	2b02      	cmp	r3, #2
 8009172:	d00b      	beq.n	800918c <I2C_Master_ADDR+0x18a>
 8009174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009176:	2b10      	cmp	r3, #16
 8009178:	d008      	beq.n	800918c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	e007      	b.n	800919c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800919a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800919c:	2300      	movs	r3, #0
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	e0a1      	b.n	80092f8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091c4:	2300      	movs	r3, #0
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	61bb      	str	r3, [r7, #24]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	e085      	b.n	80092f8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d14d      	bne.n	8009292 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d016      	beq.n	800922a <I2C_Master_ADDR+0x228>
 80091fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d013      	beq.n	800922a <I2C_Master_ADDR+0x228>
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	2b10      	cmp	r3, #16
 8009206:	d010      	beq.n	800922a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009216:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	e007      	b.n	800923a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009238:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009248:	d117      	bne.n	800927a <I2C_Master_ADDR+0x278>
 800924a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009250:	d00b      	beq.n	800926a <I2C_Master_ADDR+0x268>
 8009252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009254:	2b01      	cmp	r3, #1
 8009256:	d008      	beq.n	800926a <I2C_Master_ADDR+0x268>
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	2b08      	cmp	r3, #8
 800925c:	d005      	beq.n	800926a <I2C_Master_ADDR+0x268>
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	2b10      	cmp	r3, #16
 8009262:	d002      	beq.n	800926a <I2C_Master_ADDR+0x268>
 8009264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009266:	2b20      	cmp	r3, #32
 8009268:	d107      	bne.n	800927a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009278:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	617b      	str	r3, [r7, #20]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	e032      	b.n	80092f8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80092a0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092b0:	d117      	bne.n	80092e2 <I2C_Master_ADDR+0x2e0>
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80092b8:	d00b      	beq.n	80092d2 <I2C_Master_ADDR+0x2d0>
 80092ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d008      	beq.n	80092d2 <I2C_Master_ADDR+0x2d0>
 80092c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c2:	2b08      	cmp	r3, #8
 80092c4:	d005      	beq.n	80092d2 <I2C_Master_ADDR+0x2d0>
 80092c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c8:	2b10      	cmp	r3, #16
 80092ca:	d002      	beq.n	80092d2 <I2C_Master_ADDR+0x2d0>
 80092cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ce:	2b20      	cmp	r3, #32
 80092d0:	d107      	bne.n	80092e2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	613b      	str	r3, [r7, #16]
 80092f6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80092fe:	e00b      	b.n	8009318 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	68fb      	ldr	r3, [r7, #12]
}
 8009316:	e7ff      	b.n	8009318 <I2C_Master_ADDR+0x316>
 8009318:	bf00      	nop
 800931a:	3744      	adds	r7, #68	@ 0x44
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009332:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009338:	b29b      	uxth	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d02b      	beq.n	8009396 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009358:	b29b      	uxth	r3, r3
 800935a:	3b01      	subs	r3, #1
 800935c:	b29a      	uxth	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009366:	b29b      	uxth	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d114      	bne.n	8009396 <I2C_SlaveTransmit_TXE+0x72>
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b29      	cmp	r3, #41	@ 0x29
 8009370:	d111      	bne.n	8009396 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009380:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2221      	movs	r2, #33	@ 0x21
 8009386:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2228      	movs	r2, #40	@ 0x28
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff f9ed 	bl	8008770 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d011      	beq.n	80093d4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	3b01      	subs	r3, #1
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d02c      	beq.n	8009454 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009404:	b2d2      	uxtb	r2, r2
 8009406:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009416:	b29b      	uxth	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009424:	b29b      	uxth	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d114      	bne.n	8009454 <I2C_SlaveReceive_RXNE+0x74>
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	2b2a      	cmp	r3, #42	@ 0x2a
 800942e:	d111      	bne.n	8009454 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800943e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2222      	movs	r2, #34	@ 0x22
 8009444:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2228      	movs	r2, #40	@ 0x28
 800944a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff f998 	bl	8008784 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009454:	bf00      	nop
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d012      	beq.n	8009494 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	691a      	ldr	r2, [r3, #16]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80094ba:	2b28      	cmp	r3, #40	@ 0x28
 80094bc:	d127      	bne.n	800950e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094cc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	089b      	lsrs	r3, r3, #2
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80094da:	2301      	movs	r3, #1
 80094dc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	09db      	lsrs	r3, r3, #7
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d103      	bne.n	80094f2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	81bb      	strh	r3, [r7, #12]
 80094f0:	e002      	b.n	80094f8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009500:	89ba      	ldrh	r2, [r7, #12]
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff f946 	bl	8008798 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800950c:	e00e      	b.n	800952c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800950e:	2300      	movs	r3, #0
 8009510:	60bb      	str	r3, [r7, #8]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	60bb      	str	r3, [r7, #8]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	60bb      	str	r3, [r7, #8]
 8009522:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009542:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009552:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009554:	2300      	movs	r3, #0
 8009556:	60bb      	str	r3, [r7, #8]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	60bb      	str	r3, [r7, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f042 0201 	orr.w	r2, r2, #1
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009580:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800958c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009590:	d172      	bne.n	8009678 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b22      	cmp	r3, #34	@ 0x22
 8009596:	d002      	beq.n	800959e <I2C_Slave_STOPF+0x6a>
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	2b2a      	cmp	r3, #42	@ 0x2a
 800959c:	d135      	bne.n	800960a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d005      	beq.n	80095c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ba:	f043 0204 	orr.w	r2, r3, #4
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fd ff3e 	bl	8007458 <HAL_DMA_GetState>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d049      	beq.n	8009676 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e6:	4a69      	ldr	r2, [pc, #420]	@ (800978c <I2C_Slave_STOPF+0x258>)
 80095e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fd fd86 	bl	8007100 <HAL_DMA_Abort_IT>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d03d      	beq.n	8009676 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009608:	e035      	b.n	8009676 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	b29a      	uxth	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009626:	f043 0204 	orr.w	r2, r3, #4
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800963c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009642:	4618      	mov	r0, r3
 8009644:	f7fd ff08 	bl	8007458 <HAL_DMA_GetState>
 8009648:	4603      	mov	r3, r0
 800964a:	2b01      	cmp	r3, #1
 800964c:	d014      	beq.n	8009678 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009652:	4a4e      	ldr	r2, [pc, #312]	@ (800978c <I2C_Slave_STOPF+0x258>)
 8009654:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800965a:	4618      	mov	r0, r3
 800965c:	f7fd fd50 	bl	8007100 <HAL_DMA_Abort_IT>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d008      	beq.n	8009678 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800966a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	e000      	b.n	8009678 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009676:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800967c:	b29b      	uxth	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	d03e      	beq.n	8009700 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b04      	cmp	r3, #4
 800968e:	d112      	bne.n	80096b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a2:	1c5a      	adds	r2, r3, #1
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c0:	2b40      	cmp	r3, #64	@ 0x40
 80096c2:	d112      	bne.n	80096ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	691a      	ldr	r2, [r3, #16]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f8:	f043 0204 	orr.w	r2, r3, #4
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f8b7 	bl	800987c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800970e:	e039      	b.n	8009784 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	2b2a      	cmp	r3, #42	@ 0x2a
 8009714:	d109      	bne.n	800972a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2228      	movs	r2, #40	@ 0x28
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff f82d 	bl	8008784 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b28      	cmp	r3, #40	@ 0x28
 8009734:	d111      	bne.n	800975a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a15      	ldr	r2, [pc, #84]	@ (8009790 <I2C_Slave_STOPF+0x25c>)
 800973a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff f82e 	bl	80087b4 <HAL_I2C_ListenCpltCallback>
}
 8009758:	e014      	b.n	8009784 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800975e:	2b22      	cmp	r3, #34	@ 0x22
 8009760:	d002      	beq.n	8009768 <I2C_Slave_STOPF+0x234>
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	2b22      	cmp	r3, #34	@ 0x22
 8009766:	d10d      	bne.n	8009784 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff f800 	bl	8008784 <HAL_I2C_SlaveRxCpltCallback>
}
 8009784:	bf00      	nop
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	08009be5 	.word	0x08009be5
 8009790:	ffff0000 	.word	0xffff0000

08009794 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d002      	beq.n	80097b6 <I2C_Slave_AF+0x22>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b20      	cmp	r3, #32
 80097b4:	d129      	bne.n	800980a <I2C_Slave_AF+0x76>
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b28      	cmp	r3, #40	@ 0x28
 80097ba:	d126      	bne.n	800980a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a2e      	ldr	r2, [pc, #184]	@ (8009878 <I2C_Slave_AF+0xe4>)
 80097c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80097d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fe ffd6 	bl	80087b4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009808:	e031      	b.n	800986e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	2b21      	cmp	r3, #33	@ 0x21
 800980e:	d129      	bne.n	8009864 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a19      	ldr	r2, [pc, #100]	@ (8009878 <I2C_Slave_AF+0xe4>)
 8009814:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2221      	movs	r2, #33	@ 0x21
 800981a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2220      	movs	r2, #32
 8009820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800983a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009844:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009854:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7fe fae3 	bl	8007e22 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7fe ff87 	bl	8008770 <HAL_I2C_SlaveTxCpltCallback>
}
 8009862:	e004      	b.n	800986e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800986c:	615a      	str	r2, [r3, #20]
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	ffff0000 	.word	0xffff0000

0800987c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800988a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009892:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	2b10      	cmp	r3, #16
 8009898:	d002      	beq.n	80098a0 <I2C_ITError+0x24>
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	2b40      	cmp	r3, #64	@ 0x40
 800989e:	d10a      	bne.n	80098b6 <I2C_ITError+0x3a>
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	2b22      	cmp	r3, #34	@ 0x22
 80098a4:	d107      	bne.n	80098b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80098bc:	2b28      	cmp	r3, #40	@ 0x28
 80098be:	d107      	bne.n	80098d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2228      	movs	r2, #40	@ 0x28
 80098ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80098ce:	e015      	b.n	80098fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098de:	d00a      	beq.n	80098f6 <I2C_ITError+0x7a>
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	2b60      	cmp	r3, #96	@ 0x60
 80098e4:	d007      	beq.n	80098f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800990a:	d162      	bne.n	80099d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800991a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009920:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b01      	cmp	r3, #1
 8009928:	d020      	beq.n	800996c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800992e:	4a6a      	ldr	r2, [pc, #424]	@ (8009ad8 <I2C_ITError+0x25c>)
 8009930:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009936:	4618      	mov	r0, r3
 8009938:	f7fd fbe2 	bl	8007100 <HAL_DMA_Abort_IT>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	f000 8089 	beq.w	8009a56 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f022 0201 	bic.w	r2, r2, #1
 8009952:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009966:	4610      	mov	r0, r2
 8009968:	4798      	blx	r3
 800996a:	e074      	b.n	8009a56 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009970:	4a59      	ldr	r2, [pc, #356]	@ (8009ad8 <I2C_ITError+0x25c>)
 8009972:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009978:	4618      	mov	r0, r3
 800997a:	f7fd fbc1 	bl	8007100 <HAL_DMA_Abort_IT>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d068      	beq.n	8009a56 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800998e:	2b40      	cmp	r3, #64	@ 0x40
 8009990:	d10b      	bne.n	80099aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	691a      	ldr	r2, [r3, #16]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999c:	b2d2      	uxtb	r2, r2
 800999e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0201 	bic.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2220      	movs	r2, #32
 80099be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80099cc:	4610      	mov	r0, r2
 80099ce:	4798      	blx	r3
 80099d0:	e041      	b.n	8009a56 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b60      	cmp	r3, #96	@ 0x60
 80099dc:	d125      	bne.n	8009a2a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f6:	2b40      	cmp	r3, #64	@ 0x40
 80099f8:	d10b      	bne.n	8009a12 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a04:	b2d2      	uxtb	r2, r2
 8009a06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 0201 	bic.w	r2, r2, #1
 8009a20:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7fe fed0 	bl	80087c8 <HAL_I2C_AbortCpltCallback>
 8009a28:	e015      	b.n	8009a56 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a34:	2b40      	cmp	r3, #64	@ 0x40
 8009a36:	d10b      	bne.n	8009a50 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691a      	ldr	r2, [r3, #16]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a42:	b2d2      	uxtb	r2, r2
 8009a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7f7 fb0b 	bl	800106c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a5a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10e      	bne.n	8009a84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d109      	bne.n	8009a84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d104      	bne.n	8009a84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d007      	beq.n	8009a94 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009a92:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a9a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d113      	bne.n	8009ad0 <I2C_ITError+0x254>
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	2b28      	cmp	r3, #40	@ 0x28
 8009aac:	d110      	bne.n	8009ad0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8009adc <I2C_ITError+0x260>)
 8009ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7fe fe72 	bl	80087b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ad0:	bf00      	nop
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	08009be5 	.word	0x08009be5
 8009adc:	ffff0000 	.word	0xffff0000

08009ae0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	607a      	str	r2, [r7, #4]
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	460b      	mov	r3, r1
 8009aee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d006      	beq.n	8009b0a <I2C_MasterRequestWrite+0x2a>
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d003      	beq.n	8009b0a <I2C_MasterRequestWrite+0x2a>
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009b08:	d108      	bne.n	8009b1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	e00b      	b.n	8009b34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b20:	2b12      	cmp	r3, #18
 8009b22:	d107      	bne.n	8009b34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 f8f7 	bl	8009d34 <I2C_WaitOnFlagUntilTimeout>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00d      	beq.n	8009b68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b5a:	d103      	bne.n	8009b64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e035      	b.n	8009bd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b70:	d108      	bne.n	8009b84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b72:	897b      	ldrh	r3, [r7, #10]
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	461a      	mov	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009b80:	611a      	str	r2, [r3, #16]
 8009b82:	e01b      	b.n	8009bbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009b84:	897b      	ldrh	r3, [r7, #10]
 8009b86:	11db      	asrs	r3, r3, #7
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	f003 0306 	and.w	r3, r3, #6
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	f063 030f 	orn	r3, r3, #15
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	490e      	ldr	r1, [pc, #56]	@ (8009bdc <I2C_MasterRequestWrite+0xfc>)
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f940 	bl	8009e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e010      	b.n	8009bd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009bb2:	897b      	ldrh	r3, [r7, #10]
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4907      	ldr	r1, [pc, #28]	@ (8009be0 <I2C_MasterRequestWrite+0x100>)
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 f930 	bl	8009e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e000      	b.n	8009bd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	00010008 	.word	0x00010008
 8009be0:	00010002 	.word	0x00010002

08009be4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bfc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8009d2c <I2C_DMAAbort+0x148>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	08db      	lsrs	r3, r3, #3
 8009c04:	4a4a      	ldr	r2, [pc, #296]	@ (8009d30 <I2C_DMAAbort+0x14c>)
 8009c06:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0a:	0a1a      	lsrs	r2, r3, #8
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	00da      	lsls	r2, r3, #3
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c22:	f043 0220 	orr.w	r2, r3, #32
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8009c2a:	e00a      	b.n	8009c42 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c40:	d0ea      	beq.n	8009c18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4e:	2200      	movs	r2, #0
 8009c50:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5e:	2200      	movs	r2, #0
 8009c60:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2200      	movs	r2, #0
 8009c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c84:	2200      	movs	r2, #0
 8009c86:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d003      	beq.n	8009c98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c94:	2200      	movs	r2, #0
 8009c96:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f022 0201 	bic.w	r2, r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b60      	cmp	r3, #96	@ 0x60
 8009cb2:	d10e      	bne.n	8009cd2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009cca:	6978      	ldr	r0, [r7, #20]
 8009ccc:	f7fe fd7c 	bl	80087c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009cd0:	e027      	b.n	8009d22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009cd2:	7cfb      	ldrb	r3, [r7, #19]
 8009cd4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009cd8:	2b28      	cmp	r3, #40	@ 0x28
 8009cda:	d117      	bne.n	8009d0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f042 0201 	orr.w	r2, r2, #1
 8009cea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009cfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2228      	movs	r2, #40	@ 0x28
 8009d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009d0a:	e007      	b.n	8009d1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009d1c:	6978      	ldr	r0, [r7, #20]
 8009d1e:	f7f7 f9a5 	bl	800106c <HAL_I2C_ErrorCallback>
}
 8009d22:	bf00      	nop
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200000f0 	.word	0x200000f0
 8009d30:	14f8b589 	.word	0x14f8b589

08009d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	603b      	str	r3, [r7, #0]
 8009d40:	4613      	mov	r3, r2
 8009d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d44:	e048      	b.n	8009dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d044      	beq.n	8009dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4e:	f7fb faff 	bl	8005350 <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d302      	bcc.n	8009d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d139      	bne.n	8009dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	0c1b      	lsrs	r3, r3, #16
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d10d      	bne.n	8009d8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	43da      	mvns	r2, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	4013      	ands	r3, r2
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bf0c      	ite	eq
 8009d80:	2301      	moveq	r3, #1
 8009d82:	2300      	movne	r3, #0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	461a      	mov	r2, r3
 8009d88:	e00c      	b.n	8009da4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	43da      	mvns	r2, r3
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	4013      	ands	r3, r2
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bf0c      	ite	eq
 8009d9c:	2301      	moveq	r3, #1
 8009d9e:	2300      	movne	r3, #0
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	461a      	mov	r2, r3
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d116      	bne.n	8009dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc4:	f043 0220 	orr.w	r2, r3, #32
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e023      	b.n	8009e20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	0c1b      	lsrs	r3, r3, #16
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d10d      	bne.n	8009dfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	43da      	mvns	r2, r3
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	4013      	ands	r3, r2
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	bf0c      	ite	eq
 8009df4:	2301      	moveq	r3, #1
 8009df6:	2300      	movne	r3, #0
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	e00c      	b.n	8009e18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	43da      	mvns	r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bf0c      	ite	eq
 8009e10:	2301      	moveq	r3, #1
 8009e12:	2300      	movne	r3, #0
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d093      	beq.n	8009d46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e36:	e071      	b.n	8009f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e46:	d123      	bne.n	8009e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7c:	f043 0204 	orr.w	r2, r3, #4
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e067      	b.n	8009f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e96:	d041      	beq.n	8009f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e98:	f7fb fa5a 	bl	8005350 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d302      	bcc.n	8009eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d136      	bne.n	8009f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	0c1b      	lsrs	r3, r3, #16
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d10c      	bne.n	8009ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	43da      	mvns	r2, r3
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bf14      	ite	ne
 8009eca:	2301      	movne	r3, #1
 8009ecc:	2300      	moveq	r3, #0
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	e00b      	b.n	8009eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	43da      	mvns	r2, r3
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	4013      	ands	r3, r2
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	bf14      	ite	ne
 8009ee4:	2301      	movne	r3, #1
 8009ee6:	2300      	moveq	r3, #0
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d016      	beq.n	8009f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f08:	f043 0220 	orr.w	r2, r3, #32
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e021      	b.n	8009f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	0c1b      	lsrs	r3, r3, #16
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d10c      	bne.n	8009f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	43da      	mvns	r2, r3
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	4013      	ands	r3, r2
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bf14      	ite	ne
 8009f38:	2301      	movne	r3, #1
 8009f3a:	2300      	moveq	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	e00b      	b.n	8009f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	43da      	mvns	r2, r3
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bf14      	ite	ne
 8009f52:	2301      	movne	r3, #1
 8009f54:	2300      	moveq	r3, #0
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f47f af6d 	bne.w	8009e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f74:	e034      	b.n	8009fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 f8b8 	bl	800a0ec <I2C_IsAcknowledgeFailed>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e034      	b.n	8009ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8c:	d028      	beq.n	8009fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f8e:	f7fb f9df 	bl	8005350 <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d302      	bcc.n	8009fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d11d      	bne.n	8009fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fae:	2b80      	cmp	r3, #128	@ 0x80
 8009fb0:	d016      	beq.n	8009fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fcc:	f043 0220 	orr.w	r2, r3, #32
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e007      	b.n	8009ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fea:	2b80      	cmp	r3, #128	@ 0x80
 8009fec:	d1c3      	bne.n	8009f76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a004:	e034      	b.n	800a070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 f870 	bl	800a0ec <I2C_IsAcknowledgeFailed>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e034      	b.n	800a080 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01c:	d028      	beq.n	800a070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a01e:	f7fb f997 	bl	8005350 <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d302      	bcc.n	800a034 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d11d      	bne.n	800a070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	f003 0304 	and.w	r3, r3, #4
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d016      	beq.n	800a070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a05c:	f043 0220 	orr.w	r2, r3, #32
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e007      	b.n	800a080 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d1c3      	bne.n	800a006 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a090:	2300      	movs	r3, #0
 800a092:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a094:	4b13      	ldr	r3, [pc, #76]	@ (800a0e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	08db      	lsrs	r3, r3, #3
 800a09a:	4a13      	ldr	r2, [pc, #76]	@ (800a0e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a09c:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a0:	0a1a      	lsrs	r2, r3, #8
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d107      	bne.n	800a0c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ba:	f043 0220 	orr.w	r2, r3, #32
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e008      	b.n	800a0d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d4:	d0e9      	beq.n	800a0aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	200000f0 	.word	0x200000f0
 800a0e8:	14f8b589 	.word	0x14f8b589

0800a0ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a102:	d11b      	bne.n	800a13c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a10c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a128:	f043 0204 	orr.w	r2, r3, #4
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e000      	b.n	800a13e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a156:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a15a:	d103      	bne.n	800a164 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a162:	e007      	b.n	800a174 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a168:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a16c:	d102      	bne.n	800a174 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2208      	movs	r2, #8
 800a172:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e267      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d075      	beq.n	800a28a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a19e:	4b88      	ldr	r3, [pc, #544]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f003 030c 	and.w	r3, r3, #12
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d00c      	beq.n	800a1c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1aa:	4b85      	ldr	r3, [pc, #532]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a1b2:	2b08      	cmp	r3, #8
 800a1b4:	d112      	bne.n	800a1dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1b6:	4b82      	ldr	r3, [pc, #520]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1c2:	d10b      	bne.n	800a1dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1c4:	4b7e      	ldr	r3, [pc, #504]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d05b      	beq.n	800a288 <HAL_RCC_OscConfig+0x108>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d157      	bne.n	800a288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e242      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1e4:	d106      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x74>
 800a1e6:	4b76      	ldr	r3, [pc, #472]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a75      	ldr	r2, [pc, #468]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a1ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	e01d      	b.n	800a230 <HAL_RCC_OscConfig+0xb0>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1fc:	d10c      	bne.n	800a218 <HAL_RCC_OscConfig+0x98>
 800a1fe:	4b70      	ldr	r3, [pc, #448]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a6f      	ldr	r2, [pc, #444]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	4b6d      	ldr	r3, [pc, #436]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a6c      	ldr	r2, [pc, #432]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	e00b      	b.n	800a230 <HAL_RCC_OscConfig+0xb0>
 800a218:	4b69      	ldr	r3, [pc, #420]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a68      	ldr	r2, [pc, #416]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a21e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	4b66      	ldr	r3, [pc, #408]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a65      	ldr	r2, [pc, #404]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a22a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a22e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d013      	beq.n	800a260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a238:	f7fb f88a 	bl	8005350 <HAL_GetTick>
 800a23c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a23e:	e008      	b.n	800a252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a240:	f7fb f886 	bl	8005350 <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	2b64      	cmp	r3, #100	@ 0x64
 800a24c:	d901      	bls.n	800a252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e207      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a252:	4b5b      	ldr	r3, [pc, #364]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0f0      	beq.n	800a240 <HAL_RCC_OscConfig+0xc0>
 800a25e:	e014      	b.n	800a28a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a260:	f7fb f876 	bl	8005350 <HAL_GetTick>
 800a264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a266:	e008      	b.n	800a27a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a268:	f7fb f872 	bl	8005350 <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	2b64      	cmp	r3, #100	@ 0x64
 800a274:	d901      	bls.n	800a27a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e1f3      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a27a:	4b51      	ldr	r3, [pc, #324]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1f0      	bne.n	800a268 <HAL_RCC_OscConfig+0xe8>
 800a286:	e000      	b.n	800a28a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d063      	beq.n	800a35e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a296:	4b4a      	ldr	r3, [pc, #296]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f003 030c 	and.w	r3, r3, #12
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2a2:	4b47      	ldr	r3, [pc, #284]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a2aa:	2b08      	cmp	r3, #8
 800a2ac:	d11c      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2ae:	4b44      	ldr	r3, [pc, #272]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d116      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2ba:	4b41      	ldr	r3, [pc, #260]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d005      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x152>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d001      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e1c7      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2d2:	4b3b      	ldr	r3, [pc, #236]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	4937      	ldr	r1, [pc, #220]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2e6:	e03a      	b.n	800a35e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d020      	beq.n	800a332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2f0:	4b34      	ldr	r3, [pc, #208]	@ (800a3c4 <HAL_RCC_OscConfig+0x244>)
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f6:	f7fb f82b 	bl	8005350 <HAL_GetTick>
 800a2fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2fc:	e008      	b.n	800a310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2fe:	f7fb f827 	bl	8005350 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d901      	bls.n	800a310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e1a8      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a310:	4b2b      	ldr	r3, [pc, #172]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0f0      	beq.n	800a2fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a31c:	4b28      	ldr	r3, [pc, #160]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	4925      	ldr	r1, [pc, #148]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	600b      	str	r3, [r1, #0]
 800a330:	e015      	b.n	800a35e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a332:	4b24      	ldr	r3, [pc, #144]	@ (800a3c4 <HAL_RCC_OscConfig+0x244>)
 800a334:	2200      	movs	r2, #0
 800a336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a338:	f7fb f80a 	bl	8005350 <HAL_GetTick>
 800a33c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a33e:	e008      	b.n	800a352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a340:	f7fb f806 	bl	8005350 <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d901      	bls.n	800a352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e187      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a352:	4b1b      	ldr	r3, [pc, #108]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1f0      	bne.n	800a340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d036      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d016      	beq.n	800a3a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a372:	4b15      	ldr	r3, [pc, #84]	@ (800a3c8 <HAL_RCC_OscConfig+0x248>)
 800a374:	2201      	movs	r2, #1
 800a376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a378:	f7fa ffea 	bl	8005350 <HAL_GetTick>
 800a37c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a37e:	e008      	b.n	800a392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a380:	f7fa ffe6 	bl	8005350 <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d901      	bls.n	800a392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e167      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a392:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c0 <HAL_RCC_OscConfig+0x240>)
 800a394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a396:	f003 0302 	and.w	r3, r3, #2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0f0      	beq.n	800a380 <HAL_RCC_OscConfig+0x200>
 800a39e:	e01b      	b.n	800a3d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3a0:	4b09      	ldr	r3, [pc, #36]	@ (800a3c8 <HAL_RCC_OscConfig+0x248>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3a6:	f7fa ffd3 	bl	8005350 <HAL_GetTick>
 800a3aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3ac:	e00e      	b.n	800a3cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3ae:	f7fa ffcf 	bl	8005350 <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d907      	bls.n	800a3cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e150      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
 800a3c0:	40023800 	.word	0x40023800
 800a3c4:	42470000 	.word	0x42470000
 800a3c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3cc:	4b88      	ldr	r3, [pc, #544]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a3ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1ea      	bne.n	800a3ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 8097 	beq.w	800a514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3ea:	4b81      	ldr	r3, [pc, #516]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10f      	bne.n	800a416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60bb      	str	r3, [r7, #8]
 800a3fa:	4b7d      	ldr	r3, [pc, #500]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fe:	4a7c      	ldr	r2, [pc, #496]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a404:	6413      	str	r3, [r2, #64]	@ 0x40
 800a406:	4b7a      	ldr	r3, [pc, #488]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a40a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a40e:	60bb      	str	r3, [r7, #8]
 800a410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a412:	2301      	movs	r3, #1
 800a414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a416:	4b77      	ldr	r3, [pc, #476]	@ (800a5f4 <HAL_RCC_OscConfig+0x474>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d118      	bne.n	800a454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a422:	4b74      	ldr	r3, [pc, #464]	@ (800a5f4 <HAL_RCC_OscConfig+0x474>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a73      	ldr	r2, [pc, #460]	@ (800a5f4 <HAL_RCC_OscConfig+0x474>)
 800a428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a42c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a42e:	f7fa ff8f 	bl	8005350 <HAL_GetTick>
 800a432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a434:	e008      	b.n	800a448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a436:	f7fa ff8b 	bl	8005350 <HAL_GetTick>
 800a43a:	4602      	mov	r2, r0
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	2b02      	cmp	r3, #2
 800a442:	d901      	bls.n	800a448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e10c      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a448:	4b6a      	ldr	r3, [pc, #424]	@ (800a5f4 <HAL_RCC_OscConfig+0x474>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a450:	2b00      	cmp	r3, #0
 800a452:	d0f0      	beq.n	800a436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d106      	bne.n	800a46a <HAL_RCC_OscConfig+0x2ea>
 800a45c:	4b64      	ldr	r3, [pc, #400]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a45e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a460:	4a63      	ldr	r2, [pc, #396]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a462:	f043 0301 	orr.w	r3, r3, #1
 800a466:	6713      	str	r3, [r2, #112]	@ 0x70
 800a468:	e01c      	b.n	800a4a4 <HAL_RCC_OscConfig+0x324>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d10c      	bne.n	800a48c <HAL_RCC_OscConfig+0x30c>
 800a472:	4b5f      	ldr	r3, [pc, #380]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a476:	4a5e      	ldr	r2, [pc, #376]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a478:	f043 0304 	orr.w	r3, r3, #4
 800a47c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a47e:	4b5c      	ldr	r3, [pc, #368]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a482:	4a5b      	ldr	r2, [pc, #364]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a484:	f043 0301 	orr.w	r3, r3, #1
 800a488:	6713      	str	r3, [r2, #112]	@ 0x70
 800a48a:	e00b      	b.n	800a4a4 <HAL_RCC_OscConfig+0x324>
 800a48c:	4b58      	ldr	r3, [pc, #352]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a48e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a490:	4a57      	ldr	r2, [pc, #348]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a492:	f023 0301 	bic.w	r3, r3, #1
 800a496:	6713      	str	r3, [r2, #112]	@ 0x70
 800a498:	4b55      	ldr	r3, [pc, #340]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a49a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49c:	4a54      	ldr	r2, [pc, #336]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a49e:	f023 0304 	bic.w	r3, r3, #4
 800a4a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d015      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4ac:	f7fa ff50 	bl	8005350 <HAL_GetTick>
 800a4b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4b2:	e00a      	b.n	800a4ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4b4:	f7fa ff4c 	bl	8005350 <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d901      	bls.n	800a4ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e0cb      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4ca:	4b49      	ldr	r3, [pc, #292]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a4cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0ee      	beq.n	800a4b4 <HAL_RCC_OscConfig+0x334>
 800a4d6:	e014      	b.n	800a502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4d8:	f7fa ff3a 	bl	8005350 <HAL_GetTick>
 800a4dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4de:	e00a      	b.n	800a4f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4e0:	f7fa ff36 	bl	8005350 <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e0b5      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4f6:	4b3e      	ldr	r3, [pc, #248]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1ee      	bne.n	800a4e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d105      	bne.n	800a514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a508:	4b39      	ldr	r3, [pc, #228]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a50c:	4a38      	ldr	r2, [pc, #224]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a50e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80a1 	beq.w	800a660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a51e:	4b34      	ldr	r3, [pc, #208]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f003 030c 	and.w	r3, r3, #12
 800a526:	2b08      	cmp	r3, #8
 800a528:	d05c      	beq.n	800a5e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d141      	bne.n	800a5b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a532:	4b31      	ldr	r3, [pc, #196]	@ (800a5f8 <HAL_RCC_OscConfig+0x478>)
 800a534:	2200      	movs	r2, #0
 800a536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a538:	f7fa ff0a 	bl	8005350 <HAL_GetTick>
 800a53c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a53e:	e008      	b.n	800a552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a540:	f7fa ff06 	bl	8005350 <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e087      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a552:	4b27      	ldr	r3, [pc, #156]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1f0      	bne.n	800a540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	69da      	ldr	r2, [r3, #28]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	431a      	orrs	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56c:	019b      	lsls	r3, r3, #6
 800a56e:	431a      	orrs	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	085b      	lsrs	r3, r3, #1
 800a576:	3b01      	subs	r3, #1
 800a578:	041b      	lsls	r3, r3, #16
 800a57a:	431a      	orrs	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a580:	061b      	lsls	r3, r3, #24
 800a582:	491b      	ldr	r1, [pc, #108]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a584:	4313      	orrs	r3, r2
 800a586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a588:	4b1b      	ldr	r3, [pc, #108]	@ (800a5f8 <HAL_RCC_OscConfig+0x478>)
 800a58a:	2201      	movs	r2, #1
 800a58c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a58e:	f7fa fedf 	bl	8005350 <HAL_GetTick>
 800a592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a594:	e008      	b.n	800a5a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a596:	f7fa fedb 	bl	8005350 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d901      	bls.n	800a5a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e05c      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5a8:	4b11      	ldr	r3, [pc, #68]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0f0      	beq.n	800a596 <HAL_RCC_OscConfig+0x416>
 800a5b4:	e054      	b.n	800a660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5b6:	4b10      	ldr	r3, [pc, #64]	@ (800a5f8 <HAL_RCC_OscConfig+0x478>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5bc:	f7fa fec8 	bl	8005350 <HAL_GetTick>
 800a5c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5c2:	e008      	b.n	800a5d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5c4:	f7fa fec4 	bl	8005350 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d901      	bls.n	800a5d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e045      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5d6:	4b06      	ldr	r3, [pc, #24]	@ (800a5f0 <HAL_RCC_OscConfig+0x470>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1f0      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x444>
 800a5e2:	e03d      	b.n	800a660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d107      	bne.n	800a5fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e038      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
 800a5f0:	40023800 	.word	0x40023800
 800a5f4:	40007000 	.word	0x40007000
 800a5f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a5fc:	4b1b      	ldr	r3, [pc, #108]	@ (800a66c <HAL_RCC_OscConfig+0x4ec>)
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d028      	beq.n	800a65c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a614:	429a      	cmp	r2, r3
 800a616:	d121      	bne.n	800a65c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a622:	429a      	cmp	r2, r3
 800a624:	d11a      	bne.n	800a65c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a62c:	4013      	ands	r3, r2
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a634:	4293      	cmp	r3, r2
 800a636:	d111      	bne.n	800a65c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a642:	085b      	lsrs	r3, r3, #1
 800a644:	3b01      	subs	r3, #1
 800a646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a648:	429a      	cmp	r2, r3
 800a64a:	d107      	bne.n	800a65c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a658:	429a      	cmp	r2, r3
 800a65a:	d001      	beq.n	800a660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	40023800 	.word	0x40023800

0800a670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d101      	bne.n	800a684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e0cc      	b.n	800a81e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a684:	4b68      	ldr	r3, [pc, #416]	@ (800a828 <HAL_RCC_ClockConfig+0x1b8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0307 	and.w	r3, r3, #7
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d90c      	bls.n	800a6ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a692:	4b65      	ldr	r3, [pc, #404]	@ (800a828 <HAL_RCC_ClockConfig+0x1b8>)
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	b2d2      	uxtb	r2, r2
 800a698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a69a:	4b63      	ldr	r3, [pc, #396]	@ (800a828 <HAL_RCC_ClockConfig+0x1b8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d001      	beq.n	800a6ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e0b8      	b.n	800a81e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d020      	beq.n	800a6fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6c4:	4b59      	ldr	r3, [pc, #356]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	4a58      	ldr	r2, [pc, #352]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a6ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a6ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0308 	and.w	r3, r3, #8
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d005      	beq.n	800a6e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6dc:	4b53      	ldr	r3, [pc, #332]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	4a52      	ldr	r2, [pc, #328]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a6e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a6e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6e8:	4b50      	ldr	r3, [pc, #320]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	494d      	ldr	r1, [pc, #308]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d044      	beq.n	800a790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d107      	bne.n	800a71e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a70e:	4b47      	ldr	r3, [pc, #284]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d119      	bne.n	800a74e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e07f      	b.n	800a81e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	2b02      	cmp	r3, #2
 800a724:	d003      	beq.n	800a72e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d107      	bne.n	800a73e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a72e:	4b3f      	ldr	r3, [pc, #252]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d109      	bne.n	800a74e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e06f      	b.n	800a81e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a73e:	4b3b      	ldr	r3, [pc, #236]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 0302 	and.w	r3, r3, #2
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e067      	b.n	800a81e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a74e:	4b37      	ldr	r3, [pc, #220]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f023 0203 	bic.w	r2, r3, #3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	4934      	ldr	r1, [pc, #208]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a760:	f7fa fdf6 	bl	8005350 <HAL_GetTick>
 800a764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a766:	e00a      	b.n	800a77e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a768:	f7fa fdf2 	bl	8005350 <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a776:	4293      	cmp	r3, r2
 800a778:	d901      	bls.n	800a77e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e04f      	b.n	800a81e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a77e:	4b2b      	ldr	r3, [pc, #172]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	f003 020c 	and.w	r2, r3, #12
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d1eb      	bne.n	800a768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a790:	4b25      	ldr	r3, [pc, #148]	@ (800a828 <HAL_RCC_ClockConfig+0x1b8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0307 	and.w	r3, r3, #7
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d20c      	bcs.n	800a7b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a79e:	4b22      	ldr	r3, [pc, #136]	@ (800a828 <HAL_RCC_ClockConfig+0x1b8>)
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	b2d2      	uxtb	r2, r2
 800a7a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7a6:	4b20      	ldr	r3, [pc, #128]	@ (800a828 <HAL_RCC_ClockConfig+0x1b8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0307 	and.w	r3, r3, #7
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d001      	beq.n	800a7b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e032      	b.n	800a81e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d008      	beq.n	800a7d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7c4:	4b19      	ldr	r3, [pc, #100]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	4916      	ldr	r1, [pc, #88]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0308 	and.w	r3, r3, #8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d009      	beq.n	800a7f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7e2:	4b12      	ldr	r3, [pc, #72]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	490e      	ldr	r1, [pc, #56]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a7f6:	f000 f821 	bl	800a83c <HAL_RCC_GetSysClockFreq>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a82c <HAL_RCC_ClockConfig+0x1bc>)
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	091b      	lsrs	r3, r3, #4
 800a802:	f003 030f 	and.w	r3, r3, #15
 800a806:	490a      	ldr	r1, [pc, #40]	@ (800a830 <HAL_RCC_ClockConfig+0x1c0>)
 800a808:	5ccb      	ldrb	r3, [r1, r3]
 800a80a:	fa22 f303 	lsr.w	r3, r2, r3
 800a80e:	4a09      	ldr	r2, [pc, #36]	@ (800a834 <HAL_RCC_ClockConfig+0x1c4>)
 800a810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a812:	4b09      	ldr	r3, [pc, #36]	@ (800a838 <HAL_RCC_ClockConfig+0x1c8>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4618      	mov	r0, r3
 800a818:	f7fa fd56 	bl	80052c8 <HAL_InitTick>

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	40023c00 	.word	0x40023c00
 800a82c:	40023800 	.word	0x40023800
 800a830:	08011bb0 	.word	0x08011bb0
 800a834:	200000f0 	.word	0x200000f0
 800a838:	2000012c 	.word	0x2000012c

0800a83c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a83c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a840:	b094      	sub	sp, #80	@ 0x50
 800a842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a854:	4b79      	ldr	r3, [pc, #484]	@ (800aa3c <HAL_RCC_GetSysClockFreq+0x200>)
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f003 030c 	and.w	r3, r3, #12
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	d00d      	beq.n	800a87c <HAL_RCC_GetSysClockFreq+0x40>
 800a860:	2b08      	cmp	r3, #8
 800a862:	f200 80e1 	bhi.w	800aa28 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <HAL_RCC_GetSysClockFreq+0x34>
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d003      	beq.n	800a876 <HAL_RCC_GetSysClockFreq+0x3a>
 800a86e:	e0db      	b.n	800aa28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a870:	4b73      	ldr	r3, [pc, #460]	@ (800aa40 <HAL_RCC_GetSysClockFreq+0x204>)
 800a872:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a874:	e0db      	b.n	800aa2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a876:	4b73      	ldr	r3, [pc, #460]	@ (800aa44 <HAL_RCC_GetSysClockFreq+0x208>)
 800a878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a87a:	e0d8      	b.n	800aa2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a87c:	4b6f      	ldr	r3, [pc, #444]	@ (800aa3c <HAL_RCC_GetSysClockFreq+0x200>)
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a884:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a886:	4b6d      	ldr	r3, [pc, #436]	@ (800aa3c <HAL_RCC_GetSysClockFreq+0x200>)
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d063      	beq.n	800a95a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a892:	4b6a      	ldr	r3, [pc, #424]	@ (800aa3c <HAL_RCC_GetSysClockFreq+0x200>)
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	099b      	lsrs	r3, r3, #6
 800a898:	2200      	movs	r2, #0
 800a89a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a89c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	462b      	mov	r3, r5
 800a8b2:	f04f 0000 	mov.w	r0, #0
 800a8b6:	f04f 0100 	mov.w	r1, #0
 800a8ba:	0159      	lsls	r1, r3, #5
 800a8bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8c0:	0150      	lsls	r0, r2, #5
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	1a51      	subs	r1, r2, r1
 800a8ca:	6139      	str	r1, [r7, #16]
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	eb63 0301 	sbc.w	r3, r3, r1
 800a8d2:	617b      	str	r3, [r7, #20]
 800a8d4:	f04f 0200 	mov.w	r2, #0
 800a8d8:	f04f 0300 	mov.w	r3, #0
 800a8dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8e0:	4659      	mov	r1, fp
 800a8e2:	018b      	lsls	r3, r1, #6
 800a8e4:	4651      	mov	r1, sl
 800a8e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a8ea:	4651      	mov	r1, sl
 800a8ec:	018a      	lsls	r2, r1, #6
 800a8ee:	4651      	mov	r1, sl
 800a8f0:	ebb2 0801 	subs.w	r8, r2, r1
 800a8f4:	4659      	mov	r1, fp
 800a8f6:	eb63 0901 	sbc.w	r9, r3, r1
 800a8fa:	f04f 0200 	mov.w	r2, #0
 800a8fe:	f04f 0300 	mov.w	r3, #0
 800a902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a90a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a90e:	4690      	mov	r8, r2
 800a910:	4699      	mov	r9, r3
 800a912:	4623      	mov	r3, r4
 800a914:	eb18 0303 	adds.w	r3, r8, r3
 800a918:	60bb      	str	r3, [r7, #8]
 800a91a:	462b      	mov	r3, r5
 800a91c:	eb49 0303 	adc.w	r3, r9, r3
 800a920:	60fb      	str	r3, [r7, #12]
 800a922:	f04f 0200 	mov.w	r2, #0
 800a926:	f04f 0300 	mov.w	r3, #0
 800a92a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a92e:	4629      	mov	r1, r5
 800a930:	024b      	lsls	r3, r1, #9
 800a932:	4621      	mov	r1, r4
 800a934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a938:	4621      	mov	r1, r4
 800a93a:	024a      	lsls	r2, r1, #9
 800a93c:	4610      	mov	r0, r2
 800a93e:	4619      	mov	r1, r3
 800a940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a942:	2200      	movs	r2, #0
 800a944:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a94c:	f7f6 f92c 	bl	8000ba8 <__aeabi_uldivmod>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4613      	mov	r3, r2
 800a956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a958:	e058      	b.n	800aa0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a95a:	4b38      	ldr	r3, [pc, #224]	@ (800aa3c <HAL_RCC_GetSysClockFreq+0x200>)
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	099b      	lsrs	r3, r3, #6
 800a960:	2200      	movs	r2, #0
 800a962:	4618      	mov	r0, r3
 800a964:	4611      	mov	r1, r2
 800a966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a96a:	623b      	str	r3, [r7, #32]
 800a96c:	2300      	movs	r3, #0
 800a96e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a974:	4642      	mov	r2, r8
 800a976:	464b      	mov	r3, r9
 800a978:	f04f 0000 	mov.w	r0, #0
 800a97c:	f04f 0100 	mov.w	r1, #0
 800a980:	0159      	lsls	r1, r3, #5
 800a982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a986:	0150      	lsls	r0, r2, #5
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4641      	mov	r1, r8
 800a98e:	ebb2 0a01 	subs.w	sl, r2, r1
 800a992:	4649      	mov	r1, r9
 800a994:	eb63 0b01 	sbc.w	fp, r3, r1
 800a998:	f04f 0200 	mov.w	r2, #0
 800a99c:	f04f 0300 	mov.w	r3, #0
 800a9a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a9a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a9a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a9ac:	ebb2 040a 	subs.w	r4, r2, sl
 800a9b0:	eb63 050b 	sbc.w	r5, r3, fp
 800a9b4:	f04f 0200 	mov.w	r2, #0
 800a9b8:	f04f 0300 	mov.w	r3, #0
 800a9bc:	00eb      	lsls	r3, r5, #3
 800a9be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9c2:	00e2      	lsls	r2, r4, #3
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	461d      	mov	r5, r3
 800a9c8:	4643      	mov	r3, r8
 800a9ca:	18e3      	adds	r3, r4, r3
 800a9cc:	603b      	str	r3, [r7, #0]
 800a9ce:	464b      	mov	r3, r9
 800a9d0:	eb45 0303 	adc.w	r3, r5, r3
 800a9d4:	607b      	str	r3, [r7, #4]
 800a9d6:	f04f 0200 	mov.w	r2, #0
 800a9da:	f04f 0300 	mov.w	r3, #0
 800a9de:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	028b      	lsls	r3, r1, #10
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	028a      	lsls	r2, r1, #10
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	61bb      	str	r3, [r7, #24]
 800a9fa:	61fa      	str	r2, [r7, #28]
 800a9fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa00:	f7f6 f8d2 	bl	8000ba8 <__aeabi_uldivmod>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	4613      	mov	r3, r2
 800aa0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800aa0c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa3c <HAL_RCC_GetSysClockFreq+0x200>)
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	0c1b      	lsrs	r3, r3, #16
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	3301      	adds	r3, #1
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800aa1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa20:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aa26:	e002      	b.n	800aa2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa28:	4b05      	ldr	r3, [pc, #20]	@ (800aa40 <HAL_RCC_GetSysClockFreq+0x204>)
 800aa2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aa2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3750      	adds	r7, #80	@ 0x50
 800aa34:	46bd      	mov	sp, r7
 800aa36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa3a:	bf00      	nop
 800aa3c:	40023800 	.word	0x40023800
 800aa40:	00f42400 	.word	0x00f42400
 800aa44:	007a1200 	.word	0x007a1200

0800aa48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa4c:	4b03      	ldr	r3, [pc, #12]	@ (800aa5c <HAL_RCC_GetHCLKFreq+0x14>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	200000f0 	.word	0x200000f0

0800aa60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aa64:	f7ff fff0 	bl	800aa48 <HAL_RCC_GetHCLKFreq>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	4b05      	ldr	r3, [pc, #20]	@ (800aa80 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	0a9b      	lsrs	r3, r3, #10
 800aa70:	f003 0307 	and.w	r3, r3, #7
 800aa74:	4903      	ldr	r1, [pc, #12]	@ (800aa84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa76:	5ccb      	ldrb	r3, [r1, r3]
 800aa78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	40023800 	.word	0x40023800
 800aa84:	08011bc0 	.word	0x08011bc0

0800aa88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aa8c:	f7ff ffdc 	bl	800aa48 <HAL_RCC_GetHCLKFreq>
 800aa90:	4602      	mov	r2, r0
 800aa92:	4b05      	ldr	r3, [pc, #20]	@ (800aaa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	0b5b      	lsrs	r3, r3, #13
 800aa98:	f003 0307 	and.w	r3, r3, #7
 800aa9c:	4903      	ldr	r1, [pc, #12]	@ (800aaac <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa9e:	5ccb      	ldrb	r3, [r1, r3]
 800aaa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	40023800 	.word	0x40023800
 800aaac:	08011bc0 	.word	0x08011bc0

0800aab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e07b      	b.n	800abba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d108      	bne.n	800aadc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aad2:	d009      	beq.n	800aae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	61da      	str	r2, [r3, #28]
 800aada:	e005      	b.n	800aae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d106      	bne.n	800ab08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7f9 fc0e 	bl	8004324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ab30:	431a      	orrs	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	431a      	orrs	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab62:	431a      	orrs	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab6c:	ea42 0103 	orr.w	r1, r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	0c1b      	lsrs	r3, r3, #16
 800ab86:	f003 0104 	and.w	r1, r3, #4
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8e:	f003 0210 	and.w	r2, r3, #16
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69da      	ldr	r2, [r3, #28]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b08a      	sub	sp, #40	@ 0x28
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
 800abce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800abd0:	2301      	movs	r3, #1
 800abd2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abd4:	f7fa fbbc 	bl	8005350 <HAL_GetTick>
 800abd8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800abe0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800abe8:	887b      	ldrh	r3, [r7, #2]
 800abea:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800abec:	7ffb      	ldrb	r3, [r7, #31]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d00c      	beq.n	800ac0c <HAL_SPI_TransmitReceive+0x4a>
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abf8:	d106      	bne.n	800ac08 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d102      	bne.n	800ac08 <HAL_SPI_TransmitReceive+0x46>
 800ac02:	7ffb      	ldrb	r3, [r7, #31]
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d001      	beq.n	800ac0c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e17f      	b.n	800af0c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d005      	beq.n	800ac1e <HAL_SPI_TransmitReceive+0x5c>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <HAL_SPI_TransmitReceive+0x5c>
 800ac18:	887b      	ldrh	r3, [r7, #2]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e174      	b.n	800af0c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d101      	bne.n	800ac30 <HAL_SPI_TransmitReceive+0x6e>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e16d      	b.n	800af0c <HAL_SPI_TransmitReceive+0x34a>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b04      	cmp	r3, #4
 800ac42:	d003      	beq.n	800ac4c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2205      	movs	r2, #5
 800ac48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	887a      	ldrh	r2, [r7, #2]
 800ac5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	887a      	ldrh	r2, [r7, #2]
 800ac62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	887a      	ldrh	r2, [r7, #2]
 800ac6e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	887a      	ldrh	r2, [r7, #2]
 800ac74:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac8c:	2b40      	cmp	r3, #64	@ 0x40
 800ac8e:	d007      	beq.n	800aca0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aca8:	d17e      	bne.n	800ada8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <HAL_SPI_TransmitReceive+0xf6>
 800acb2:	8afb      	ldrh	r3, [r7, #22]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d16c      	bne.n	800ad92 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbc:	881a      	ldrh	r2, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc8:	1c9a      	adds	r2, r3, #2
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800acdc:	e059      	b.n	800ad92 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f003 0302 	and.w	r3, r3, #2
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d11b      	bne.n	800ad24 <HAL_SPI_TransmitReceive+0x162>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d016      	beq.n	800ad24 <HAL_SPI_TransmitReceive+0x162>
 800acf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d113      	bne.n	800ad24 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad00:	881a      	ldrh	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad0c:	1c9a      	adds	r2, r3, #2
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad20:	2300      	movs	r3, #0
 800ad22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d119      	bne.n	800ad66 <HAL_SPI_TransmitReceive+0x1a4>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d014      	beq.n	800ad66 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68da      	ldr	r2, [r3, #12]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad46:	b292      	uxth	r2, r2
 800ad48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4e:	1c9a      	adds	r2, r3, #2
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad62:	2301      	movs	r3, #1
 800ad64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ad66:	f7fa faf3 	bl	8005350 <HAL_GetTick>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d80d      	bhi.n	800ad92 <HAL_SPI_TransmitReceive+0x1d0>
 800ad76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7c:	d009      	beq.n	800ad92 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e0bc      	b.n	800af0c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1a0      	bne.n	800acde <HAL_SPI_TransmitReceive+0x11c>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d19b      	bne.n	800acde <HAL_SPI_TransmitReceive+0x11c>
 800ada6:	e082      	b.n	800aeae <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <HAL_SPI_TransmitReceive+0x1f4>
 800adb0:	8afb      	ldrh	r3, [r7, #22]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d171      	bne.n	800ae9a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	330c      	adds	r3, #12
 800adc0:	7812      	ldrb	r2, [r2, #0]
 800adc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc8:	1c5a      	adds	r2, r3, #1
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800add2:	b29b      	uxth	r3, r3
 800add4:	3b01      	subs	r3, #1
 800add6:	b29a      	uxth	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800addc:	e05d      	b.n	800ae9a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d11c      	bne.n	800ae26 <HAL_SPI_TransmitReceive+0x264>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d017      	beq.n	800ae26 <HAL_SPI_TransmitReceive+0x264>
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d114      	bne.n	800ae26 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	330c      	adds	r3, #12
 800ae06:	7812      	ldrb	r2, [r2, #0]
 800ae08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d119      	bne.n	800ae68 <HAL_SPI_TransmitReceive+0x2a6>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d014      	beq.n	800ae68 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae48:	b2d2      	uxtb	r2, r2
 800ae4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae64:	2301      	movs	r3, #1
 800ae66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ae68:	f7fa fa72 	bl	8005350 <HAL_GetTick>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d803      	bhi.n	800ae80 <HAL_SPI_TransmitReceive+0x2be>
 800ae78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7e:	d102      	bne.n	800ae86 <HAL_SPI_TransmitReceive+0x2c4>
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d109      	bne.n	800ae9a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e038      	b.n	800af0c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d19c      	bne.n	800adde <HAL_SPI_TransmitReceive+0x21c>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d197      	bne.n	800adde <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aeae:	6a3a      	ldr	r2, [r7, #32]
 800aeb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 f8b6 	bl	800b024 <SPI_EndRxTxTransaction>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d008      	beq.n	800aed0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2220      	movs	r2, #32
 800aec2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e01d      	b.n	800af0c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aed8:	2300      	movs	r3, #0
 800aeda:	613b      	str	r3, [r7, #16]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	613b      	str	r3, [r7, #16]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	613b      	str	r3, [r7, #16]
 800aeec:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e000      	b.n	800af0c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800af0a:	2300      	movs	r3, #0
  }
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3728      	adds	r7, #40	@ 0x28
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b088      	sub	sp, #32
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	4613      	mov	r3, r2
 800af22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af24:	f7fa fa14 	bl	8005350 <HAL_GetTick>
 800af28:	4602      	mov	r2, r0
 800af2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2c:	1a9b      	subs	r3, r3, r2
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	4413      	add	r3, r2
 800af32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af34:	f7fa fa0c 	bl	8005350 <HAL_GetTick>
 800af38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af3a:	4b39      	ldr	r3, [pc, #228]	@ (800b020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	015b      	lsls	r3, r3, #5
 800af40:	0d1b      	lsrs	r3, r3, #20
 800af42:	69fa      	ldr	r2, [r7, #28]
 800af44:	fb02 f303 	mul.w	r3, r2, r3
 800af48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af4a:	e055      	b.n	800aff8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af52:	d051      	beq.n	800aff8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af54:	f7fa f9fc 	bl	8005350 <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	69fa      	ldr	r2, [r7, #28]
 800af60:	429a      	cmp	r2, r3
 800af62:	d902      	bls.n	800af6a <SPI_WaitFlagStateUntilTimeout+0x56>
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d13d      	bne.n	800afe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800af78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af82:	d111      	bne.n	800afa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af8c:	d004      	beq.n	800af98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af96:	d107      	bne.n	800afa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afb0:	d10f      	bne.n	800afd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800afd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2201      	movs	r2, #1
 800afd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e018      	b.n	800b018 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d102      	bne.n	800aff2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	61fb      	str	r3, [r7, #28]
 800aff0:	e002      	b.n	800aff8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	4013      	ands	r3, r2
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	429a      	cmp	r2, r3
 800b006:	bf0c      	ite	eq
 800b008:	2301      	moveq	r3, #1
 800b00a:	2300      	movne	r3, #0
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	461a      	mov	r2, r3
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	429a      	cmp	r2, r3
 800b014:	d19a      	bne.n	800af4c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	200000f0 	.word	0x200000f0

0800b024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b088      	sub	sp, #32
 800b028:	af02      	add	r7, sp, #8
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2201      	movs	r2, #1
 800b038:	2102      	movs	r1, #2
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff ff6a 	bl	800af14 <SPI_WaitFlagStateUntilTimeout>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d007      	beq.n	800b056 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b04a:	f043 0220 	orr.w	r2, r3, #32
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e032      	b.n	800b0bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b056:	4b1b      	ldr	r3, [pc, #108]	@ (800b0c4 <SPI_EndRxTxTransaction+0xa0>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a1b      	ldr	r2, [pc, #108]	@ (800b0c8 <SPI_EndRxTxTransaction+0xa4>)
 800b05c:	fba2 2303 	umull	r2, r3, r2, r3
 800b060:	0d5b      	lsrs	r3, r3, #21
 800b062:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b066:	fb02 f303 	mul.w	r3, r2, r3
 800b06a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b074:	d112      	bne.n	800b09c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2200      	movs	r2, #0
 800b07e:	2180      	movs	r1, #128	@ 0x80
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff ff47 	bl	800af14 <SPI_WaitFlagStateUntilTimeout>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d016      	beq.n	800b0ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b090:	f043 0220 	orr.w	r2, r3, #32
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e00f      	b.n	800b0bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0b2:	2b80      	cmp	r3, #128	@ 0x80
 800b0b4:	d0f2      	beq.n	800b09c <SPI_EndRxTxTransaction+0x78>
 800b0b6:	e000      	b.n	800b0ba <SPI_EndRxTxTransaction+0x96>
        break;
 800b0b8:	bf00      	nop
  }

  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	200000f0 	.word	0x200000f0
 800b0c8:	165e9f81 	.word	0x165e9f81

0800b0cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e041      	b.n	800b162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7f9 f97e 	bl	80043f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3304      	adds	r3, #4
 800b108:	4619      	mov	r1, r3
 800b10a:	4610      	mov	r0, r2
 800b10c:	f000 ff2e 	bl	800bf6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d001      	beq.n	800b184 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	e046      	b.n	800b212 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a23      	ldr	r2, [pc, #140]	@ (800b220 <HAL_TIM_Base_Start+0xb4>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d022      	beq.n	800b1dc <HAL_TIM_Base_Start+0x70>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b19e:	d01d      	beq.n	800b1dc <HAL_TIM_Base_Start+0x70>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800b224 <HAL_TIM_Base_Start+0xb8>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d018      	beq.n	800b1dc <HAL_TIM_Base_Start+0x70>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b228 <HAL_TIM_Base_Start+0xbc>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d013      	beq.n	800b1dc <HAL_TIM_Base_Start+0x70>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b22c <HAL_TIM_Base_Start+0xc0>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d00e      	beq.n	800b1dc <HAL_TIM_Base_Start+0x70>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a1b      	ldr	r2, [pc, #108]	@ (800b230 <HAL_TIM_Base_Start+0xc4>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d009      	beq.n	800b1dc <HAL_TIM_Base_Start+0x70>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a19      	ldr	r2, [pc, #100]	@ (800b234 <HAL_TIM_Base_Start+0xc8>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d004      	beq.n	800b1dc <HAL_TIM_Base_Start+0x70>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a18      	ldr	r2, [pc, #96]	@ (800b238 <HAL_TIM_Base_Start+0xcc>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d111      	bne.n	800b200 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b06      	cmp	r3, #6
 800b1ec:	d010      	beq.n	800b210 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f042 0201 	orr.w	r2, r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1fe:	e007      	b.n	800b210 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f042 0201 	orr.w	r2, r2, #1
 800b20e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	40010000 	.word	0x40010000
 800b224:	40000400 	.word	0x40000400
 800b228:	40000800 	.word	0x40000800
 800b22c:	40000c00 	.word	0x40000c00
 800b230:	40010400 	.word	0x40010400
 800b234:	40014000 	.word	0x40014000
 800b238:	40001800 	.word	0x40001800

0800b23c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6a1a      	ldr	r2, [r3, #32]
 800b24a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b24e:	4013      	ands	r3, r2
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10f      	bne.n	800b274 <HAL_TIM_Base_Stop+0x38>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6a1a      	ldr	r2, [r3, #32]
 800b25a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b25e:	4013      	ands	r3, r2
 800b260:	2b00      	cmp	r3, #0
 800b262:	d107      	bne.n	800b274 <HAL_TIM_Base_Stop+0x38>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0201 	bic.w	r2, r2, #1
 800b272:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
	...

0800b28c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d001      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e04e      	b.n	800b342 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f042 0201 	orr.w	r2, r2, #1
 800b2ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a23      	ldr	r2, [pc, #140]	@ (800b350 <HAL_TIM_Base_Start_IT+0xc4>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d022      	beq.n	800b30c <HAL_TIM_Base_Start_IT+0x80>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ce:	d01d      	beq.n	800b30c <HAL_TIM_Base_Start_IT+0x80>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a1f      	ldr	r2, [pc, #124]	@ (800b354 <HAL_TIM_Base_Start_IT+0xc8>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d018      	beq.n	800b30c <HAL_TIM_Base_Start_IT+0x80>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a1e      	ldr	r2, [pc, #120]	@ (800b358 <HAL_TIM_Base_Start_IT+0xcc>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d013      	beq.n	800b30c <HAL_TIM_Base_Start_IT+0x80>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b35c <HAL_TIM_Base_Start_IT+0xd0>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00e      	beq.n	800b30c <HAL_TIM_Base_Start_IT+0x80>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a1b      	ldr	r2, [pc, #108]	@ (800b360 <HAL_TIM_Base_Start_IT+0xd4>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d009      	beq.n	800b30c <HAL_TIM_Base_Start_IT+0x80>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a19      	ldr	r2, [pc, #100]	@ (800b364 <HAL_TIM_Base_Start_IT+0xd8>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d004      	beq.n	800b30c <HAL_TIM_Base_Start_IT+0x80>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a18      	ldr	r2, [pc, #96]	@ (800b368 <HAL_TIM_Base_Start_IT+0xdc>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d111      	bne.n	800b330 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f003 0307 	and.w	r3, r3, #7
 800b316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b06      	cmp	r3, #6
 800b31c:	d010      	beq.n	800b340 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f042 0201 	orr.w	r2, r2, #1
 800b32c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b32e:	e007      	b.n	800b340 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f042 0201 	orr.w	r2, r2, #1
 800b33e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	40010000 	.word	0x40010000
 800b354:	40000400 	.word	0x40000400
 800b358:	40000800 	.word	0x40000800
 800b35c:	40000c00 	.word	0x40000c00
 800b360:	40010400 	.word	0x40010400
 800b364:	40014000 	.word	0x40014000
 800b368:	40001800 	.word	0x40001800

0800b36c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e041      	b.n	800b402 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f839 	bl	800b40a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2202      	movs	r2, #2
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	f000 fdde 	bl	800bf6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b083      	sub	sp, #12
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b412:	bf00      	nop
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e041      	b.n	800b4b4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d106      	bne.n	800b44a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f839 	bl	800b4bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2202      	movs	r2, #2
 800b44e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	3304      	adds	r3, #4
 800b45a:	4619      	mov	r1, r3
 800b45c:	4610      	mov	r0, r2
 800b45e:	f000 fd85 	bl	800bf6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d104      	bne.n	800b4ee <HAL_TIM_IC_Start_IT+0x1e>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	e013      	b.n	800b516 <HAL_TIM_IC_Start_IT+0x46>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	d104      	bne.n	800b4fe <HAL_TIM_IC_Start_IT+0x2e>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	e00b      	b.n	800b516 <HAL_TIM_IC_Start_IT+0x46>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b08      	cmp	r3, #8
 800b502:	d104      	bne.n	800b50e <HAL_TIM_IC_Start_IT+0x3e>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	e003      	b.n	800b516 <HAL_TIM_IC_Start_IT+0x46>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b514:	b2db      	uxtb	r3, r3
 800b516:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <HAL_TIM_IC_Start_IT+0x58>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b524:	b2db      	uxtb	r3, r3
 800b526:	e013      	b.n	800b550 <HAL_TIM_IC_Start_IT+0x80>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	2b04      	cmp	r3, #4
 800b52c:	d104      	bne.n	800b538 <HAL_TIM_IC_Start_IT+0x68>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b534:	b2db      	uxtb	r3, r3
 800b536:	e00b      	b.n	800b550 <HAL_TIM_IC_Start_IT+0x80>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	2b08      	cmp	r3, #8
 800b53c:	d104      	bne.n	800b548 <HAL_TIM_IC_Start_IT+0x78>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b544:	b2db      	uxtb	r3, r3
 800b546:	e003      	b.n	800b550 <HAL_TIM_IC_Start_IT+0x80>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b552:	7bbb      	ldrb	r3, [r7, #14]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d102      	bne.n	800b55e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b558:	7b7b      	ldrb	r3, [r7, #13]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d001      	beq.n	800b562 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e0cc      	b.n	800b6fc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d104      	bne.n	800b572 <HAL_TIM_IC_Start_IT+0xa2>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b570:	e013      	b.n	800b59a <HAL_TIM_IC_Start_IT+0xca>
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b04      	cmp	r3, #4
 800b576:	d104      	bne.n	800b582 <HAL_TIM_IC_Start_IT+0xb2>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b580:	e00b      	b.n	800b59a <HAL_TIM_IC_Start_IT+0xca>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b08      	cmp	r3, #8
 800b586:	d104      	bne.n	800b592 <HAL_TIM_IC_Start_IT+0xc2>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2202      	movs	r2, #2
 800b58c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b590:	e003      	b.n	800b59a <HAL_TIM_IC_Start_IT+0xca>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2202      	movs	r2, #2
 800b596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d104      	bne.n	800b5aa <HAL_TIM_IC_Start_IT+0xda>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b5a8:	e013      	b.n	800b5d2 <HAL_TIM_IC_Start_IT+0x102>
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b04      	cmp	r3, #4
 800b5ae:	d104      	bne.n	800b5ba <HAL_TIM_IC_Start_IT+0xea>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b5b8:	e00b      	b.n	800b5d2 <HAL_TIM_IC_Start_IT+0x102>
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b08      	cmp	r3, #8
 800b5be:	d104      	bne.n	800b5ca <HAL_TIM_IC_Start_IT+0xfa>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5c8:	e003      	b.n	800b5d2 <HAL_TIM_IC_Start_IT+0x102>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b0c      	cmp	r3, #12
 800b5d6:	d841      	bhi.n	800b65c <HAL_TIM_IC_Start_IT+0x18c>
 800b5d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b5e0 <HAL_TIM_IC_Start_IT+0x110>)
 800b5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5de:	bf00      	nop
 800b5e0:	0800b615 	.word	0x0800b615
 800b5e4:	0800b65d 	.word	0x0800b65d
 800b5e8:	0800b65d 	.word	0x0800b65d
 800b5ec:	0800b65d 	.word	0x0800b65d
 800b5f0:	0800b627 	.word	0x0800b627
 800b5f4:	0800b65d 	.word	0x0800b65d
 800b5f8:	0800b65d 	.word	0x0800b65d
 800b5fc:	0800b65d 	.word	0x0800b65d
 800b600:	0800b639 	.word	0x0800b639
 800b604:	0800b65d 	.word	0x0800b65d
 800b608:	0800b65d 	.word	0x0800b65d
 800b60c:	0800b65d 	.word	0x0800b65d
 800b610:	0800b64b 	.word	0x0800b64b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f042 0202 	orr.w	r2, r2, #2
 800b622:	60da      	str	r2, [r3, #12]
      break;
 800b624:	e01d      	b.n	800b662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f042 0204 	orr.w	r2, r2, #4
 800b634:	60da      	str	r2, [r3, #12]
      break;
 800b636:	e014      	b.n	800b662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68da      	ldr	r2, [r3, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f042 0208 	orr.w	r2, r2, #8
 800b646:	60da      	str	r2, [r3, #12]
      break;
 800b648:	e00b      	b.n	800b662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68da      	ldr	r2, [r3, #12]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f042 0210 	orr.w	r2, r2, #16
 800b658:	60da      	str	r2, [r3, #12]
      break;
 800b65a:	e002      	b.n	800b662 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	73fb      	strb	r3, [r7, #15]
      break;
 800b660:	bf00      	nop
  }

  if (status == HAL_OK)
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d148      	bne.n	800b6fa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2201      	movs	r2, #1
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	4618      	mov	r0, r3
 800b672:	f001 f895 	bl	800c7a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a22      	ldr	r2, [pc, #136]	@ (800b704 <HAL_TIM_IC_Start_IT+0x234>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d022      	beq.n	800b6c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b688:	d01d      	beq.n	800b6c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a1e      	ldr	r2, [pc, #120]	@ (800b708 <HAL_TIM_IC_Start_IT+0x238>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d018      	beq.n	800b6c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a1c      	ldr	r2, [pc, #112]	@ (800b70c <HAL_TIM_IC_Start_IT+0x23c>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d013      	beq.n	800b6c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a1b      	ldr	r2, [pc, #108]	@ (800b710 <HAL_TIM_IC_Start_IT+0x240>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d00e      	beq.n	800b6c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a19      	ldr	r2, [pc, #100]	@ (800b714 <HAL_TIM_IC_Start_IT+0x244>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d009      	beq.n	800b6c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a18      	ldr	r2, [pc, #96]	@ (800b718 <HAL_TIM_IC_Start_IT+0x248>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d004      	beq.n	800b6c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a16      	ldr	r2, [pc, #88]	@ (800b71c <HAL_TIM_IC_Start_IT+0x24c>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d111      	bne.n	800b6ea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f003 0307 	and.w	r3, r3, #7
 800b6d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b06      	cmp	r3, #6
 800b6d6:	d010      	beq.n	800b6fa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f042 0201 	orr.w	r2, r2, #1
 800b6e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6e8:	e007      	b.n	800b6fa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f042 0201 	orr.w	r2, r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	40010000 	.word	0x40010000
 800b708:	40000400 	.word	0x40000400
 800b70c:	40000800 	.word	0x40000800
 800b710:	40000c00 	.word	0x40000c00
 800b714:	40010400 	.word	0x40010400
 800b718:	40014000 	.word	0x40014000
 800b71c:	40001800 	.word	0x40001800

0800b720 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b0c      	cmp	r3, #12
 800b732:	d841      	bhi.n	800b7b8 <HAL_TIM_IC_Stop_IT+0x98>
 800b734:	a201      	add	r2, pc, #4	@ (adr r2, 800b73c <HAL_TIM_IC_Stop_IT+0x1c>)
 800b736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73a:	bf00      	nop
 800b73c:	0800b771 	.word	0x0800b771
 800b740:	0800b7b9 	.word	0x0800b7b9
 800b744:	0800b7b9 	.word	0x0800b7b9
 800b748:	0800b7b9 	.word	0x0800b7b9
 800b74c:	0800b783 	.word	0x0800b783
 800b750:	0800b7b9 	.word	0x0800b7b9
 800b754:	0800b7b9 	.word	0x0800b7b9
 800b758:	0800b7b9 	.word	0x0800b7b9
 800b75c:	0800b795 	.word	0x0800b795
 800b760:	0800b7b9 	.word	0x0800b7b9
 800b764:	0800b7b9 	.word	0x0800b7b9
 800b768:	0800b7b9 	.word	0x0800b7b9
 800b76c:	0800b7a7 	.word	0x0800b7a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0202 	bic.w	r2, r2, #2
 800b77e:	60da      	str	r2, [r3, #12]
      break;
 800b780:	e01d      	b.n	800b7be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f022 0204 	bic.w	r2, r2, #4
 800b790:	60da      	str	r2, [r3, #12]
      break;
 800b792:	e014      	b.n	800b7be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68da      	ldr	r2, [r3, #12]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f022 0208 	bic.w	r2, r2, #8
 800b7a2:	60da      	str	r2, [r3, #12]
      break;
 800b7a4:	e00b      	b.n	800b7be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68da      	ldr	r2, [r3, #12]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f022 0210 	bic.w	r2, r2, #16
 800b7b4:	60da      	str	r2, [r3, #12]
      break;
 800b7b6:	e002      	b.n	800b7be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b7bc:	bf00      	nop
  }

  if (status == HAL_OK)
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d156      	bne.n	800b872 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	6839      	ldr	r1, [r7, #0]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 ffe7 	bl	800c7a0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6a1a      	ldr	r2, [r3, #32]
 800b7d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b7dc:	4013      	ands	r3, r2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10f      	bne.n	800b802 <HAL_TIM_IC_Stop_IT+0xe2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6a1a      	ldr	r2, [r3, #32]
 800b7e8:	f240 4344 	movw	r3, #1092	@ 0x444
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d107      	bne.n	800b802 <HAL_TIM_IC_Stop_IT+0xe2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f022 0201 	bic.w	r2, r2, #1
 800b800:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d104      	bne.n	800b812 <HAL_TIM_IC_Stop_IT+0xf2>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b810:	e013      	b.n	800b83a <HAL_TIM_IC_Stop_IT+0x11a>
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b04      	cmp	r3, #4
 800b816:	d104      	bne.n	800b822 <HAL_TIM_IC_Stop_IT+0x102>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b820:	e00b      	b.n	800b83a <HAL_TIM_IC_Stop_IT+0x11a>
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b08      	cmp	r3, #8
 800b826:	d104      	bne.n	800b832 <HAL_TIM_IC_Stop_IT+0x112>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b830:	e003      	b.n	800b83a <HAL_TIM_IC_Stop_IT+0x11a>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d104      	bne.n	800b84a <HAL_TIM_IC_Stop_IT+0x12a>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b848:	e013      	b.n	800b872 <HAL_TIM_IC_Stop_IT+0x152>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b04      	cmp	r3, #4
 800b84e:	d104      	bne.n	800b85a <HAL_TIM_IC_Stop_IT+0x13a>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b858:	e00b      	b.n	800b872 <HAL_TIM_IC_Stop_IT+0x152>
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	2b08      	cmp	r3, #8
 800b85e:	d104      	bne.n	800b86a <HAL_TIM_IC_Stop_IT+0x14a>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b868:	e003      	b.n	800b872 <HAL_TIM_IC_Stop_IT+0x152>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800b872:	7bfb      	ldrb	r3, [r7, #15]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	691b      	ldr	r3, [r3, #16]
 800b892:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f003 0302 	and.w	r3, r3, #2
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d020      	beq.n	800b8e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f003 0302 	and.w	r3, r3, #2
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d01b      	beq.n	800b8e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f06f 0202 	mvn.w	r2, #2
 800b8b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	f003 0303 	and.w	r3, r3, #3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7f9 fa50 	bl	8004d6c <HAL_TIM_IC_CaptureCallback>
 800b8cc:	e005      	b.n	800b8da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fb2e 	bl	800bf30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fb35 	bl	800bf44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f003 0304 	and.w	r3, r3, #4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d020      	beq.n	800b92c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f003 0304 	and.w	r3, r3, #4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01b      	beq.n	800b92c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f06f 0204 	mvn.w	r2, #4
 800b8fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2202      	movs	r2, #2
 800b902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7f9 fa2a 	bl	8004d6c <HAL_TIM_IC_CaptureCallback>
 800b918:	e005      	b.n	800b926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fb08 	bl	800bf30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fb0f 	bl	800bf44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f003 0308 	and.w	r3, r3, #8
 800b932:	2b00      	cmp	r3, #0
 800b934:	d020      	beq.n	800b978 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f003 0308 	and.w	r3, r3, #8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01b      	beq.n	800b978 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f06f 0208 	mvn.w	r2, #8
 800b948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2204      	movs	r2, #4
 800b94e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	69db      	ldr	r3, [r3, #28]
 800b956:	f003 0303 	and.w	r3, r3, #3
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d003      	beq.n	800b966 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7f9 fa04 	bl	8004d6c <HAL_TIM_IC_CaptureCallback>
 800b964:	e005      	b.n	800b972 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fae2 	bl	800bf30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 fae9 	bl	800bf44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	f003 0310 	and.w	r3, r3, #16
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d020      	beq.n	800b9c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f003 0310 	and.w	r3, r3, #16
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01b      	beq.n	800b9c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f06f 0210 	mvn.w	r2, #16
 800b994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2208      	movs	r2, #8
 800b99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7f9 f9de 	bl	8004d6c <HAL_TIM_IC_CaptureCallback>
 800b9b0:	e005      	b.n	800b9be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fabc 	bl	800bf30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fac3 	bl	800bf44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00c      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d007      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f06f 0201 	mvn.w	r2, #1
 800b9e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7f6 ffee 	bl	80029c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00c      	beq.n	800ba0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d007      	beq.n	800ba0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ba04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 ffc8 	bl	800c99c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00c      	beq.n	800ba30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d007      	beq.n	800ba30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ba28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fa94 	bl	800bf58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f003 0320 	and.w	r3, r3, #32
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00c      	beq.n	800ba54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f003 0320 	and.w	r3, r3, #32
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d007      	beq.n	800ba54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f06f 0220 	mvn.w	r2, #32
 800ba4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 ff9a 	bl	800c988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba54:	bf00      	nop
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b086      	sub	sp, #24
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d101      	bne.n	800ba7a <HAL_TIM_IC_ConfigChannel+0x1e>
 800ba76:	2302      	movs	r3, #2
 800ba78:	e088      	b.n	800bb8c <HAL_TIM_IC_ConfigChannel+0x130>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d11b      	bne.n	800bac0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800ba98:	f000 fcbe 	bl	800c418 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699a      	ldr	r2, [r3, #24]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f022 020c 	bic.w	r2, r2, #12
 800baaa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6999      	ldr	r1, [r3, #24]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	689a      	ldr	r2, [r3, #8]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	619a      	str	r2, [r3, #24]
 800babe:	e060      	b.n	800bb82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b04      	cmp	r3, #4
 800bac4:	d11c      	bne.n	800bb00 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800bad6:	f000 fd42 	bl	800c55e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	699a      	ldr	r2, [r3, #24]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800bae8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6999      	ldr	r1, [r3, #24]
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	021a      	lsls	r2, r3, #8
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	430a      	orrs	r2, r1
 800bafc:	619a      	str	r2, [r3, #24]
 800bafe:	e040      	b.n	800bb82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b08      	cmp	r3, #8
 800bb04:	d11b      	bne.n	800bb3e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800bb16:	f000 fd8f 	bl	800c638 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	69da      	ldr	r2, [r3, #28]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 020c 	bic.w	r2, r2, #12
 800bb28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	69d9      	ldr	r1, [r3, #28]
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	61da      	str	r2, [r3, #28]
 800bb3c:	e021      	b.n	800bb82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b0c      	cmp	r3, #12
 800bb42:	d11c      	bne.n	800bb7e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800bb54:	f000 fdac 	bl	800c6b0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	69da      	ldr	r2, [r3, #28]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800bb66:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	69d9      	ldr	r1, [r3, #28]
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	021a      	lsls	r2, r3, #8
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	61da      	str	r2, [r3, #28]
 800bb7c:	e001      	b.n	800bb82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d101      	bne.n	800bbb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	e0ae      	b.n	800bd10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b0c      	cmp	r3, #12
 800bbbe:	f200 809f 	bhi.w	800bd00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bbc2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc8:	0800bbfd 	.word	0x0800bbfd
 800bbcc:	0800bd01 	.word	0x0800bd01
 800bbd0:	0800bd01 	.word	0x0800bd01
 800bbd4:	0800bd01 	.word	0x0800bd01
 800bbd8:	0800bc3d 	.word	0x0800bc3d
 800bbdc:	0800bd01 	.word	0x0800bd01
 800bbe0:	0800bd01 	.word	0x0800bd01
 800bbe4:	0800bd01 	.word	0x0800bd01
 800bbe8:	0800bc7f 	.word	0x0800bc7f
 800bbec:	0800bd01 	.word	0x0800bd01
 800bbf0:	0800bd01 	.word	0x0800bd01
 800bbf4:	0800bd01 	.word	0x0800bd01
 800bbf8:	0800bcbf 	.word	0x0800bcbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68b9      	ldr	r1, [r7, #8]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 fa58 	bl	800c0b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	699a      	ldr	r2, [r3, #24]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f042 0208 	orr.w	r2, r2, #8
 800bc16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	699a      	ldr	r2, [r3, #24]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 0204 	bic.w	r2, r2, #4
 800bc26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6999      	ldr	r1, [r3, #24]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	691a      	ldr	r2, [r3, #16]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	430a      	orrs	r2, r1
 800bc38:	619a      	str	r2, [r3, #24]
      break;
 800bc3a:	e064      	b.n	800bd06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68b9      	ldr	r1, [r7, #8]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 faa8 	bl	800c198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	699a      	ldr	r2, [r3, #24]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	699a      	ldr	r2, [r3, #24]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6999      	ldr	r1, [r3, #24]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	021a      	lsls	r2, r3, #8
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	619a      	str	r2, [r3, #24]
      break;
 800bc7c:	e043      	b.n	800bd06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68b9      	ldr	r1, [r7, #8]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f000 fafd 	bl	800c284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	69da      	ldr	r2, [r3, #28]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f042 0208 	orr.w	r2, r2, #8
 800bc98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	69da      	ldr	r2, [r3, #28]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f022 0204 	bic.w	r2, r2, #4
 800bca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	69d9      	ldr	r1, [r3, #28]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	691a      	ldr	r2, [r3, #16]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	61da      	str	r2, [r3, #28]
      break;
 800bcbc:	e023      	b.n	800bd06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68b9      	ldr	r1, [r7, #8]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f000 fb51 	bl	800c36c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	69da      	ldr	r2, [r3, #28]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	69da      	ldr	r2, [r3, #28]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69d9      	ldr	r1, [r3, #28]
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	021a      	lsls	r2, r3, #8
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	430a      	orrs	r2, r1
 800bcfc:	61da      	str	r2, [r3, #28]
      break;
 800bcfe:	e002      	b.n	800bd06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	75fb      	strb	r3, [r7, #23]
      break;
 800bd04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d101      	bne.n	800bd34 <HAL_TIM_ConfigClockSource+0x1c>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e0b4      	b.n	800be9e <HAL_TIM_ConfigClockSource+0x186>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bd52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd6c:	d03e      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0xd4>
 800bd6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd72:	f200 8087 	bhi.w	800be84 <HAL_TIM_ConfigClockSource+0x16c>
 800bd76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd7a:	f000 8086 	beq.w	800be8a <HAL_TIM_ConfigClockSource+0x172>
 800bd7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd82:	d87f      	bhi.n	800be84 <HAL_TIM_ConfigClockSource+0x16c>
 800bd84:	2b70      	cmp	r3, #112	@ 0x70
 800bd86:	d01a      	beq.n	800bdbe <HAL_TIM_ConfigClockSource+0xa6>
 800bd88:	2b70      	cmp	r3, #112	@ 0x70
 800bd8a:	d87b      	bhi.n	800be84 <HAL_TIM_ConfigClockSource+0x16c>
 800bd8c:	2b60      	cmp	r3, #96	@ 0x60
 800bd8e:	d050      	beq.n	800be32 <HAL_TIM_ConfigClockSource+0x11a>
 800bd90:	2b60      	cmp	r3, #96	@ 0x60
 800bd92:	d877      	bhi.n	800be84 <HAL_TIM_ConfigClockSource+0x16c>
 800bd94:	2b50      	cmp	r3, #80	@ 0x50
 800bd96:	d03c      	beq.n	800be12 <HAL_TIM_ConfigClockSource+0xfa>
 800bd98:	2b50      	cmp	r3, #80	@ 0x50
 800bd9a:	d873      	bhi.n	800be84 <HAL_TIM_ConfigClockSource+0x16c>
 800bd9c:	2b40      	cmp	r3, #64	@ 0x40
 800bd9e:	d058      	beq.n	800be52 <HAL_TIM_ConfigClockSource+0x13a>
 800bda0:	2b40      	cmp	r3, #64	@ 0x40
 800bda2:	d86f      	bhi.n	800be84 <HAL_TIM_ConfigClockSource+0x16c>
 800bda4:	2b30      	cmp	r3, #48	@ 0x30
 800bda6:	d064      	beq.n	800be72 <HAL_TIM_ConfigClockSource+0x15a>
 800bda8:	2b30      	cmp	r3, #48	@ 0x30
 800bdaa:	d86b      	bhi.n	800be84 <HAL_TIM_ConfigClockSource+0x16c>
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d060      	beq.n	800be72 <HAL_TIM_ConfigClockSource+0x15a>
 800bdb0:	2b20      	cmp	r3, #32
 800bdb2:	d867      	bhi.n	800be84 <HAL_TIM_ConfigClockSource+0x16c>
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d05c      	beq.n	800be72 <HAL_TIM_ConfigClockSource+0x15a>
 800bdb8:	2b10      	cmp	r3, #16
 800bdba:	d05a      	beq.n	800be72 <HAL_TIM_ConfigClockSource+0x15a>
 800bdbc:	e062      	b.n	800be84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bdce:	f000 fcc7 	bl	800c760 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bde0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	609a      	str	r2, [r3, #8]
      break;
 800bdea:	e04f      	b.n	800be8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bdfc:	f000 fcb0 	bl	800c760 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	689a      	ldr	r2, [r3, #8]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800be0e:	609a      	str	r2, [r3, #8]
      break;
 800be10:	e03c      	b.n	800be8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be1e:	461a      	mov	r2, r3
 800be20:	f000 fb6e 	bl	800c500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2150      	movs	r1, #80	@ 0x50
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 fc7d 	bl	800c72a <TIM_ITRx_SetConfig>
      break;
 800be30:	e02c      	b.n	800be8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be3e:	461a      	mov	r2, r3
 800be40:	f000 fbca 	bl	800c5d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2160      	movs	r1, #96	@ 0x60
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 fc6d 	bl	800c72a <TIM_ITRx_SetConfig>
      break;
 800be50:	e01c      	b.n	800be8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be5e:	461a      	mov	r2, r3
 800be60:	f000 fb4e 	bl	800c500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2140      	movs	r1, #64	@ 0x40
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fc5d 	bl	800c72a <TIM_ITRx_SetConfig>
      break;
 800be70:	e00c      	b.n	800be8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4619      	mov	r1, r3
 800be7c:	4610      	mov	r0, r2
 800be7e:	f000 fc54 	bl	800c72a <TIM_ITRx_SetConfig>
      break;
 800be82:	e003      	b.n	800be8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	73fb      	strb	r3, [r7, #15]
      break;
 800be88:	e000      	b.n	800be8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2201      	movs	r2, #1
 800be90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
	...

0800bea8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	2b0c      	cmp	r3, #12
 800beba:	d831      	bhi.n	800bf20 <HAL_TIM_ReadCapturedValue+0x78>
 800bebc:	a201      	add	r2, pc, #4	@ (adr r2, 800bec4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800bebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec2:	bf00      	nop
 800bec4:	0800bef9 	.word	0x0800bef9
 800bec8:	0800bf21 	.word	0x0800bf21
 800becc:	0800bf21 	.word	0x0800bf21
 800bed0:	0800bf21 	.word	0x0800bf21
 800bed4:	0800bf03 	.word	0x0800bf03
 800bed8:	0800bf21 	.word	0x0800bf21
 800bedc:	0800bf21 	.word	0x0800bf21
 800bee0:	0800bf21 	.word	0x0800bf21
 800bee4:	0800bf0d 	.word	0x0800bf0d
 800bee8:	0800bf21 	.word	0x0800bf21
 800beec:	0800bf21 	.word	0x0800bf21
 800bef0:	0800bf21 	.word	0x0800bf21
 800bef4:	0800bf17 	.word	0x0800bf17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800befe:	60fb      	str	r3, [r7, #12]

      break;
 800bf00:	e00f      	b.n	800bf22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf08:	60fb      	str	r3, [r7, #12]

      break;
 800bf0a:	e00a      	b.n	800bf22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf12:	60fb      	str	r3, [r7, #12]

      break;
 800bf14:	e005      	b.n	800bf22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf1c:	60fb      	str	r3, [r7, #12]

      break;
 800bf1e:	e000      	b.n	800bf22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800bf20:	bf00      	nop
  }

  return tmpreg;
 800bf22:	68fb      	ldr	r3, [r7, #12]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a43      	ldr	r2, [pc, #268]	@ (800c08c <TIM_Base_SetConfig+0x120>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d013      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8a:	d00f      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a40      	ldr	r2, [pc, #256]	@ (800c090 <TIM_Base_SetConfig+0x124>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d00b      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a3f      	ldr	r2, [pc, #252]	@ (800c094 <TIM_Base_SetConfig+0x128>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d007      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a3e      	ldr	r2, [pc, #248]	@ (800c098 <TIM_Base_SetConfig+0x12c>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d003      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a3d      	ldr	r2, [pc, #244]	@ (800c09c <TIM_Base_SetConfig+0x130>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d108      	bne.n	800bfbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a32      	ldr	r2, [pc, #200]	@ (800c08c <TIM_Base_SetConfig+0x120>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d02b      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfcc:	d027      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a2f      	ldr	r2, [pc, #188]	@ (800c090 <TIM_Base_SetConfig+0x124>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d023      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a2e      	ldr	r2, [pc, #184]	@ (800c094 <TIM_Base_SetConfig+0x128>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d01f      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a2d      	ldr	r2, [pc, #180]	@ (800c098 <TIM_Base_SetConfig+0x12c>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d01b      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a2c      	ldr	r2, [pc, #176]	@ (800c09c <TIM_Base_SetConfig+0x130>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d017      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a2b      	ldr	r2, [pc, #172]	@ (800c0a0 <TIM_Base_SetConfig+0x134>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d013      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a2a      	ldr	r2, [pc, #168]	@ (800c0a4 <TIM_Base_SetConfig+0x138>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d00f      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a29      	ldr	r2, [pc, #164]	@ (800c0a8 <TIM_Base_SetConfig+0x13c>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d00b      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a28      	ldr	r2, [pc, #160]	@ (800c0ac <TIM_Base_SetConfig+0x140>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d007      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a27      	ldr	r2, [pc, #156]	@ (800c0b0 <TIM_Base_SetConfig+0x144>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d003      	beq.n	800c01e <TIM_Base_SetConfig+0xb2>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a26      	ldr	r2, [pc, #152]	@ (800c0b4 <TIM_Base_SetConfig+0x148>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d108      	bne.n	800c030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	689a      	ldr	r2, [r3, #8]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a0e      	ldr	r2, [pc, #56]	@ (800c08c <TIM_Base_SetConfig+0x120>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d003      	beq.n	800c05e <TIM_Base_SetConfig+0xf2>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a10      	ldr	r2, [pc, #64]	@ (800c09c <TIM_Base_SetConfig+0x130>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d103      	bne.n	800c066 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	691a      	ldr	r2, [r3, #16]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f043 0204 	orr.w	r2, r3, #4
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	601a      	str	r2, [r3, #0]
}
 800c07e:	bf00      	nop
 800c080:	3714      	adds	r7, #20
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	40010000 	.word	0x40010000
 800c090:	40000400 	.word	0x40000400
 800c094:	40000800 	.word	0x40000800
 800c098:	40000c00 	.word	0x40000c00
 800c09c:	40010400 	.word	0x40010400
 800c0a0:	40014000 	.word	0x40014000
 800c0a4:	40014400 	.word	0x40014400
 800c0a8:	40014800 	.word	0x40014800
 800c0ac:	40001800 	.word	0x40001800
 800c0b0:	40001c00 	.word	0x40001c00
 800c0b4:	40002000 	.word	0x40002000

0800c0b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a1b      	ldr	r3, [r3, #32]
 800c0cc:	f023 0201 	bic.w	r2, r3, #1
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0303 	bic.w	r3, r3, #3
 800c0ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f023 0302 	bic.w	r3, r3, #2
 800c100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	4313      	orrs	r3, r2
 800c10a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a20      	ldr	r2, [pc, #128]	@ (800c190 <TIM_OC1_SetConfig+0xd8>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d003      	beq.n	800c11c <TIM_OC1_SetConfig+0x64>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a1f      	ldr	r2, [pc, #124]	@ (800c194 <TIM_OC1_SetConfig+0xdc>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d10c      	bne.n	800c136 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	f023 0308 	bic.w	r3, r3, #8
 800c122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	697a      	ldr	r2, [r7, #20]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f023 0304 	bic.w	r3, r3, #4
 800c134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a15      	ldr	r2, [pc, #84]	@ (800c190 <TIM_OC1_SetConfig+0xd8>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d003      	beq.n	800c146 <TIM_OC1_SetConfig+0x8e>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a14      	ldr	r2, [pc, #80]	@ (800c194 <TIM_OC1_SetConfig+0xdc>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d111      	bne.n	800c16a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c14c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	4313      	orrs	r3, r2
 800c168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	621a      	str	r2, [r3, #32]
}
 800c184:	bf00      	nop
 800c186:	371c      	adds	r7, #28
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	40010000 	.word	0x40010000
 800c194:	40010400 	.word	0x40010400

0800c198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c198:	b480      	push	{r7}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a1b      	ldr	r3, [r3, #32]
 800c1a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a1b      	ldr	r3, [r3, #32]
 800c1ac:	f023 0210 	bic.w	r2, r3, #16
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	021b      	lsls	r3, r3, #8
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f023 0320 	bic.w	r3, r3, #32
 800c1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	011b      	lsls	r3, r3, #4
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a22      	ldr	r2, [pc, #136]	@ (800c27c <TIM_OC2_SetConfig+0xe4>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d003      	beq.n	800c200 <TIM_OC2_SetConfig+0x68>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a21      	ldr	r2, [pc, #132]	@ (800c280 <TIM_OC2_SetConfig+0xe8>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d10d      	bne.n	800c21c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	011b      	lsls	r3, r3, #4
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	4313      	orrs	r3, r2
 800c212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c21a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a17      	ldr	r2, [pc, #92]	@ (800c27c <TIM_OC2_SetConfig+0xe4>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d003      	beq.n	800c22c <TIM_OC2_SetConfig+0x94>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a16      	ldr	r2, [pc, #88]	@ (800c280 <TIM_OC2_SetConfig+0xe8>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d113      	bne.n	800c254 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c23a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	695b      	ldr	r3, [r3, #20]
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	4313      	orrs	r3, r2
 800c246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	4313      	orrs	r3, r2
 800c252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	685a      	ldr	r2, [r3, #4]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	621a      	str	r2, [r3, #32]
}
 800c26e:	bf00      	nop
 800c270:	371c      	adds	r7, #28
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	40010000 	.word	0x40010000
 800c280:	40010400 	.word	0x40010400

0800c284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a1b      	ldr	r3, [r3, #32]
 800c292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	69db      	ldr	r3, [r3, #28]
 800c2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f023 0303 	bic.w	r3, r3, #3
 800c2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	021b      	lsls	r3, r3, #8
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a21      	ldr	r2, [pc, #132]	@ (800c364 <TIM_OC3_SetConfig+0xe0>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d003      	beq.n	800c2ea <TIM_OC3_SetConfig+0x66>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a20      	ldr	r2, [pc, #128]	@ (800c368 <TIM_OC3_SetConfig+0xe4>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d10d      	bne.n	800c306 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c2f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	021b      	lsls	r3, r3, #8
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a16      	ldr	r2, [pc, #88]	@ (800c364 <TIM_OC3_SetConfig+0xe0>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d003      	beq.n	800c316 <TIM_OC3_SetConfig+0x92>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a15      	ldr	r2, [pc, #84]	@ (800c368 <TIM_OC3_SetConfig+0xe4>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d113      	bne.n	800c33e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c31c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	011b      	lsls	r3, r3, #4
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	4313      	orrs	r3, r2
 800c330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	699b      	ldr	r3, [r3, #24]
 800c336:	011b      	lsls	r3, r3, #4
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	621a      	str	r2, [r3, #32]
}
 800c358:	bf00      	nop
 800c35a:	371c      	adds	r7, #28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	40010000 	.word	0x40010000
 800c368:	40010400 	.word	0x40010400

0800c36c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a1b      	ldr	r3, [r3, #32]
 800c380:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	69db      	ldr	r3, [r3, #28]
 800c392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	021b      	lsls	r3, r3, #8
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c3b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	031b      	lsls	r3, r3, #12
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a12      	ldr	r2, [pc, #72]	@ (800c410 <TIM_OC4_SetConfig+0xa4>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d003      	beq.n	800c3d4 <TIM_OC4_SetConfig+0x68>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a11      	ldr	r2, [pc, #68]	@ (800c414 <TIM_OC4_SetConfig+0xa8>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d109      	bne.n	800c3e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	019b      	lsls	r3, r3, #6
 800c3e2:	697a      	ldr	r2, [r7, #20]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	621a      	str	r2, [r3, #32]
}
 800c402:	bf00      	nop
 800c404:	371c      	adds	r7, #28
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	40010000 	.word	0x40010000
 800c414:	40010400 	.word	0x40010400

0800c418 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6a1b      	ldr	r3, [r3, #32]
 800c430:	f023 0201 	bic.w	r2, r3, #1
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4a28      	ldr	r2, [pc, #160]	@ (800c4e4 <TIM_TI1_SetConfig+0xcc>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d01b      	beq.n	800c47e <TIM_TI1_SetConfig+0x66>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c44c:	d017      	beq.n	800c47e <TIM_TI1_SetConfig+0x66>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4a25      	ldr	r2, [pc, #148]	@ (800c4e8 <TIM_TI1_SetConfig+0xd0>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d013      	beq.n	800c47e <TIM_TI1_SetConfig+0x66>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	4a24      	ldr	r2, [pc, #144]	@ (800c4ec <TIM_TI1_SetConfig+0xd4>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d00f      	beq.n	800c47e <TIM_TI1_SetConfig+0x66>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	4a23      	ldr	r2, [pc, #140]	@ (800c4f0 <TIM_TI1_SetConfig+0xd8>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d00b      	beq.n	800c47e <TIM_TI1_SetConfig+0x66>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	4a22      	ldr	r2, [pc, #136]	@ (800c4f4 <TIM_TI1_SetConfig+0xdc>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d007      	beq.n	800c47e <TIM_TI1_SetConfig+0x66>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	4a21      	ldr	r2, [pc, #132]	@ (800c4f8 <TIM_TI1_SetConfig+0xe0>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d003      	beq.n	800c47e <TIM_TI1_SetConfig+0x66>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	4a20      	ldr	r2, [pc, #128]	@ (800c4fc <TIM_TI1_SetConfig+0xe4>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d101      	bne.n	800c482 <TIM_TI1_SetConfig+0x6a>
 800c47e:	2301      	movs	r3, #1
 800c480:	e000      	b.n	800c484 <TIM_TI1_SetConfig+0x6c>
 800c482:	2300      	movs	r3, #0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d008      	beq.n	800c49a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f023 0303 	bic.w	r3, r3, #3
 800c48e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4313      	orrs	r3, r2
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e003      	b.n	800c4a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f043 0301 	orr.w	r3, r3, #1
 800c4a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c4a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	011b      	lsls	r3, r3, #4
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	f023 030a 	bic.w	r3, r3, #10
 800c4bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	f003 030a 	and.w	r3, r3, #10
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	693a      	ldr	r2, [r7, #16]
 800c4d4:	621a      	str	r2, [r3, #32]
}
 800c4d6:	bf00      	nop
 800c4d8:	371c      	adds	r7, #28
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	40010000 	.word	0x40010000
 800c4e8:	40000400 	.word	0x40000400
 800c4ec:	40000800 	.word	0x40000800
 800c4f0:	40000c00 	.word	0x40000c00
 800c4f4:	40010400 	.word	0x40010400
 800c4f8:	40014000 	.word	0x40014000
 800c4fc:	40001800 	.word	0x40001800

0800c500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c500:	b480      	push	{r7}
 800c502:	b087      	sub	sp, #28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6a1b      	ldr	r3, [r3, #32]
 800c510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	f023 0201 	bic.w	r2, r3, #1
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c52a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	011b      	lsls	r3, r3, #4
 800c530:	693a      	ldr	r2, [r7, #16]
 800c532:	4313      	orrs	r3, r2
 800c534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f023 030a 	bic.w	r3, r3, #10
 800c53c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	4313      	orrs	r3, r2
 800c544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	621a      	str	r2, [r3, #32]
}
 800c552:	bf00      	nop
 800c554:	371c      	adds	r7, #28
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c55e:	b480      	push	{r7}
 800c560:	b087      	sub	sp, #28
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	607a      	str	r2, [r7, #4]
 800c56a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6a1b      	ldr	r3, [r3, #32]
 800c570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	f023 0210 	bic.w	r2, r3, #16
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c58a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	021b      	lsls	r3, r3, #8
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	4313      	orrs	r3, r2
 800c594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c59c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	031b      	lsls	r3, r3, #12
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	693a      	ldr	r2, [r7, #16]
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c5b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	011b      	lsls	r3, r3, #4
 800c5b6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	697a      	ldr	r2, [r7, #20]
 800c5ca:	621a      	str	r2, [r3, #32]
}
 800c5cc:	bf00      	nop
 800c5ce:	371c      	adds	r7, #28
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b087      	sub	sp, #28
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	f023 0210 	bic.w	r2, r3, #16
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	031b      	lsls	r3, r3, #12
 800c608:	693a      	ldr	r2, [r7, #16]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	011b      	lsls	r3, r3, #4
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	621a      	str	r2, [r3, #32]
}
 800c62c:	bf00      	nop
 800c62e:	371c      	adds	r7, #28
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c638:	b480      	push	{r7}
 800c63a:	b087      	sub	sp, #28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
 800c644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6a1b      	ldr	r3, [r3, #32]
 800c64a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6a1b      	ldr	r3, [r3, #32]
 800c650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	69db      	ldr	r3, [r3, #28]
 800c65c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f023 0303 	bic.w	r3, r3, #3
 800c664:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c674:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	011b      	lsls	r3, r3, #4
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	4313      	orrs	r3, r2
 800c680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800c688:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	4313      	orrs	r3, r2
 800c696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	621a      	str	r2, [r3, #32]
}
 800c6a4:	bf00      	nop
 800c6a6:	371c      	adds	r7, #28
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6a1b      	ldr	r3, [r3, #32]
 800c6c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	69db      	ldr	r3, [r3, #28]
 800c6d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	021b      	lsls	r3, r3, #8
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c6ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	031b      	lsls	r3, r3, #12
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800c702:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	031b      	lsls	r3, r3, #12
 800c708:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	4313      	orrs	r3, r2
 800c710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	621a      	str	r2, [r3, #32]
}
 800c71e:	bf00      	nop
 800c720:	371c      	adds	r7, #28
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b085      	sub	sp, #20
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4313      	orrs	r3, r2
 800c748:	f043 0307 	orr.w	r3, r3, #7
 800c74c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	609a      	str	r2, [r3, #8]
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c760:	b480      	push	{r7}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c77a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	021a      	lsls	r2, r3, #8
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	431a      	orrs	r2, r3
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	4313      	orrs	r3, r2
 800c788:	697a      	ldr	r2, [r7, #20]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	609a      	str	r2, [r3, #8]
}
 800c794:	bf00      	nop
 800c796:	371c      	adds	r7, #28
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f003 031f 	and.w	r3, r3, #31
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6a1a      	ldr	r2, [r3, #32]
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	43db      	mvns	r3, r3
 800c7c2:	401a      	ands	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6a1a      	ldr	r2, [r3, #32]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	f003 031f 	and.w	r3, r3, #31
 800c7d2:	6879      	ldr	r1, [r7, #4]
 800c7d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	621a      	str	r2, [r3, #32]
}
 800c7de:	bf00      	nop
 800c7e0:	371c      	adds	r7, #28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
	...

0800c7ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d101      	bne.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c800:	2302      	movs	r3, #2
 800c802:	e05a      	b.n	800c8ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2202      	movs	r2, #2
 800c810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c82a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	4313      	orrs	r3, r2
 800c834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a21      	ldr	r2, [pc, #132]	@ (800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d022      	beq.n	800c88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c850:	d01d      	beq.n	800c88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a1d      	ldr	r2, [pc, #116]	@ (800c8cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d018      	beq.n	800c88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a1b      	ldr	r2, [pc, #108]	@ (800c8d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d013      	beq.n	800c88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a1a      	ldr	r2, [pc, #104]	@ (800c8d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d00e      	beq.n	800c88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a18      	ldr	r2, [pc, #96]	@ (800c8d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d009      	beq.n	800c88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a17      	ldr	r2, [pc, #92]	@ (800c8dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d004      	beq.n	800c88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a15      	ldr	r2, [pc, #84]	@ (800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d10c      	bne.n	800c8a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	40010000 	.word	0x40010000
 800c8cc:	40000400 	.word	0x40000400
 800c8d0:	40000800 	.word	0x40000800
 800c8d4:	40000c00 	.word	0x40000c00
 800c8d8:	40010400 	.word	0x40010400
 800c8dc:	40014000 	.word	0x40014000
 800c8e0:	40001800 	.word	0x40001800

0800c8e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d101      	bne.n	800c900 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c8fc:	2302      	movs	r3, #2
 800c8fe:	e03d      	b.n	800c97c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	4313      	orrs	r3, r2
 800c914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	4313      	orrs	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	4313      	orrs	r3, r2
 800c930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	695b      	ldr	r3, [r3, #20]
 800c958:	4313      	orrs	r3, r2
 800c95a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	69db      	ldr	r3, [r3, #28]
 800c966:	4313      	orrs	r3, r2
 800c968:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e042      	b.n	800ca48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7f7 fef4 	bl	80047c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2224      	movs	r2, #36	@ 0x24
 800c9e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c9f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fd7f 	bl	800d4f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	691a      	ldr	r2, [r3, #16]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	695a      	ldr	r2, [r3, #20]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	68da      	ldr	r2, [r3, #12]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ca28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2220      	movs	r2, #32
 800ca34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	@ 0x28
 800ca54:	af02      	add	r7, sp, #8
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	603b      	str	r3, [r7, #0]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b20      	cmp	r3, #32
 800ca6e:	d175      	bne.n	800cb5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <HAL_UART_Transmit+0x2c>
 800ca76:	88fb      	ldrh	r3, [r7, #6]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e06e      	b.n	800cb5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2221      	movs	r2, #33	@ 0x21
 800ca8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca8e:	f7f8 fc5f 	bl	8005350 <HAL_GetTick>
 800ca92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	88fa      	ldrh	r2, [r7, #6]
 800ca98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	88fa      	ldrh	r2, [r7, #6]
 800ca9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800caa8:	d108      	bne.n	800cabc <HAL_UART_Transmit+0x6c>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d104      	bne.n	800cabc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	61bb      	str	r3, [r7, #24]
 800caba:	e003      	b.n	800cac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cac4:	e02e      	b.n	800cb24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2200      	movs	r2, #0
 800cace:	2180      	movs	r1, #128	@ 0x80
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f000 fb1d 	bl	800d110 <UART_WaitOnFlagUntilTimeout>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2220      	movs	r2, #32
 800cae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	e03a      	b.n	800cb5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10b      	bne.n	800cb06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cafc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	3302      	adds	r3, #2
 800cb02:	61bb      	str	r3, [r7, #24]
 800cb04:	e007      	b.n	800cb16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	781a      	ldrb	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	3301      	adds	r3, #1
 800cb14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1cb      	bne.n	800cac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2200      	movs	r2, #0
 800cb36:	2140      	movs	r1, #64	@ 0x40
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 fae9 	bl	800d110 <UART_WaitOnFlagUntilTimeout>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e006      	b.n	800cb5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2220      	movs	r2, #32
 800cb54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e000      	b.n	800cb5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800cb5c:	2302      	movs	r3, #2
  }
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3720      	adds	r7, #32
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
	...

0800cb68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b0ba      	sub	sp, #232	@ 0xe8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cb94:	2300      	movs	r3, #0
 800cb96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb9e:	f003 030f 	and.w	r3, r3, #15
 800cba2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10f      	bne.n	800cbce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cbae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbb2:	f003 0320 	and.w	r3, r3, #32
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d009      	beq.n	800cbce <HAL_UART_IRQHandler+0x66>
 800cbba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbbe:	f003 0320 	and.w	r3, r3, #32
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fbd7 	bl	800d37a <UART_Receive_IT>
      return;
 800cbcc:	e273      	b.n	800d0b6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cbce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 80de 	beq.w	800cd94 <HAL_UART_IRQHandler+0x22c>
 800cbd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbdc:	f003 0301 	and.w	r3, r3, #1
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d106      	bne.n	800cbf2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cbe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbe8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 80d1 	beq.w	800cd94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cbf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbf6:	f003 0301 	and.w	r3, r3, #1
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00b      	beq.n	800cc16 <HAL_UART_IRQHandler+0xae>
 800cbfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d005      	beq.n	800cc16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc0e:	f043 0201 	orr.w	r2, r3, #1
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cc16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc1a:	f003 0304 	and.w	r3, r3, #4
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00b      	beq.n	800cc3a <HAL_UART_IRQHandler+0xd2>
 800cc22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d005      	beq.n	800cc3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc32:	f043 0202 	orr.w	r2, r3, #2
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cc3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc3e:	f003 0302 	and.w	r3, r3, #2
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00b      	beq.n	800cc5e <HAL_UART_IRQHandler+0xf6>
 800cc46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc4a:	f003 0301 	and.w	r3, r3, #1
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d005      	beq.n	800cc5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc56:	f043 0204 	orr.w	r2, r3, #4
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cc5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc62:	f003 0308 	and.w	r3, r3, #8
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d011      	beq.n	800cc8e <HAL_UART_IRQHandler+0x126>
 800cc6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc6e:	f003 0320 	and.w	r3, r3, #32
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d105      	bne.n	800cc82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cc76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d005      	beq.n	800cc8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc86:	f043 0208 	orr.w	r2, r3, #8
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 820a 	beq.w	800d0ac <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc9c:	f003 0320 	and.w	r3, r3, #32
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d008      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x14e>
 800cca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cca8:	f003 0320 	and.w	r3, r3, #32
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fb62 	bl	800d37a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc0:	2b40      	cmp	r3, #64	@ 0x40
 800ccc2:	bf0c      	ite	eq
 800ccc4:	2301      	moveq	r3, #1
 800ccc6:	2300      	movne	r3, #0
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd2:	f003 0308 	and.w	r3, r3, #8
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d103      	bne.n	800cce2 <HAL_UART_IRQHandler+0x17a>
 800ccda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d04f      	beq.n	800cd82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fa6d 	bl	800d1c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccf2:	2b40      	cmp	r3, #64	@ 0x40
 800ccf4:	d141      	bne.n	800cd7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3314      	adds	r3, #20
 800ccfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd04:	e853 3f00 	ldrex	r3, [r3]
 800cd08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cd0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	3314      	adds	r3, #20
 800cd1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cd22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cd26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cd2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cd32:	e841 2300 	strex	r3, r2, [r1]
 800cd36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cd3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1d9      	bne.n	800ccf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d013      	beq.n	800cd72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd4e:	4a8a      	ldr	r2, [pc, #552]	@ (800cf78 <HAL_UART_IRQHandler+0x410>)
 800cd50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fa f9d2 	bl	8007100 <HAL_DMA_Abort_IT>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d016      	beq.n	800cd90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd70:	e00e      	b.n	800cd90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f9b6 	bl	800d0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd78:	e00a      	b.n	800cd90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 f9b2 	bl	800d0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd80:	e006      	b.n	800cd90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f9ae 	bl	800d0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800cd8e:	e18d      	b.n	800d0ac <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd90:	bf00      	nop
    return;
 800cd92:	e18b      	b.n	800d0ac <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	f040 8167 	bne.w	800d06c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cd9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cda2:	f003 0310 	and.w	r3, r3, #16
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f000 8160 	beq.w	800d06c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800cdac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdb0:	f003 0310 	and.w	r3, r3, #16
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 8159 	beq.w	800d06c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cdba:	2300      	movs	r3, #0
 800cdbc:	60bb      	str	r3, [r7, #8]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	60bb      	str	r3, [r7, #8]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	60bb      	str	r3, [r7, #8]
 800cdce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdda:	2b40      	cmp	r3, #64	@ 0x40
 800cddc:	f040 80ce 	bne.w	800cf7c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cdec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 80a9 	beq.w	800cf48 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cdfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	f080 80a2 	bcs.w	800cf48 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce10:	69db      	ldr	r3, [r3, #28]
 800ce12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce16:	f000 8088 	beq.w	800cf2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	330c      	adds	r3, #12
 800ce20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce28:	e853 3f00 	ldrex	r3, [r3]
 800ce2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ce30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	330c      	adds	r3, #12
 800ce42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ce46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ce4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ce52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ce56:	e841 2300 	strex	r3, r2, [r1]
 800ce5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ce5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1d9      	bne.n	800ce1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3314      	adds	r3, #20
 800ce6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ce70:	e853 3f00 	ldrex	r3, [r3]
 800ce74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ce76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce78:	f023 0301 	bic.w	r3, r3, #1
 800ce7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3314      	adds	r3, #20
 800ce86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ce8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ce8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ce92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ce96:	e841 2300 	strex	r3, r2, [r1]
 800ce9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ce9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1e1      	bne.n	800ce66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3314      	adds	r3, #20
 800cea8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ceac:	e853 3f00 	ldrex	r3, [r3]
 800ceb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ceb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ceb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ceb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3314      	adds	r3, #20
 800cec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cec6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cec8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cecc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cece:	e841 2300 	strex	r3, r2, [r1]
 800ced2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ced4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1e3      	bne.n	800cea2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2220      	movs	r2, #32
 800cede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	330c      	adds	r3, #12
 800ceee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cef2:	e853 3f00 	ldrex	r3, [r3]
 800cef6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cefa:	f023 0310 	bic.w	r3, r3, #16
 800cefe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	330c      	adds	r3, #12
 800cf08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cf0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cf0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf14:	e841 2300 	strex	r3, r2, [r1]
 800cf18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1e3      	bne.n	800cee8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fa f87b 	bl	8007020 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f8d9 	bl	800d0f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cf46:	e0b3      	b.n	800d0b0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cf4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cf50:	429a      	cmp	r2, r3
 800cf52:	f040 80ad 	bne.w	800d0b0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf5a:	69db      	ldr	r3, [r3, #28]
 800cf5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf60:	f040 80a6 	bne.w	800d0b0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2202      	movs	r2, #2
 800cf68:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f8c1 	bl	800d0f8 <HAL_UARTEx_RxEventCallback>
      return;
 800cf76:	e09b      	b.n	800d0b0 <HAL_UART_IRQHandler+0x548>
 800cf78:	0800d289 	.word	0x0800d289
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f000 808e 	beq.w	800d0b4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800cf98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 8089 	beq.w	800d0b4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	330c      	adds	r3, #12
 800cfa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfac:	e853 3f00 	ldrex	r3, [r3]
 800cfb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cfb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	330c      	adds	r3, #12
 800cfc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800cfc6:	647a      	str	r2, [r7, #68]	@ 0x44
 800cfc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfce:	e841 2300 	strex	r3, r2, [r1]
 800cfd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e3      	bne.n	800cfa2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	3314      	adds	r3, #20
 800cfe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	e853 3f00 	ldrex	r3, [r3]
 800cfe8:	623b      	str	r3, [r7, #32]
   return(result);
 800cfea:	6a3b      	ldr	r3, [r7, #32]
 800cfec:	f023 0301 	bic.w	r3, r3, #1
 800cff0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	3314      	adds	r3, #20
 800cffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cffe:	633a      	str	r2, [r7, #48]	@ 0x30
 800d000:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d006:	e841 2300 	strex	r3, r2, [r1]
 800d00a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1e3      	bne.n	800cfda <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2220      	movs	r2, #32
 800d016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	330c      	adds	r3, #12
 800d026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	e853 3f00 	ldrex	r3, [r3]
 800d02e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f023 0310 	bic.w	r3, r3, #16
 800d036:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	330c      	adds	r3, #12
 800d040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d044:	61fa      	str	r2, [r7, #28]
 800d046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d048:	69b9      	ldr	r1, [r7, #24]
 800d04a:	69fa      	ldr	r2, [r7, #28]
 800d04c:	e841 2300 	strex	r3, r2, [r1]
 800d050:	617b      	str	r3, [r7, #20]
   return(result);
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1e3      	bne.n	800d020 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2202      	movs	r2, #2
 800d05c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d05e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f847 	bl	800d0f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d06a:	e023      	b.n	800d0b4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d074:	2b00      	cmp	r3, #0
 800d076:	d009      	beq.n	800d08c <HAL_UART_IRQHandler+0x524>
 800d078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d07c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f910 	bl	800d2aa <UART_Transmit_IT>
    return;
 800d08a:	e014      	b.n	800d0b6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00e      	beq.n	800d0b6 <HAL_UART_IRQHandler+0x54e>
 800d098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d008      	beq.n	800d0b6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f950 	bl	800d34a <UART_EndTransmit_IT>
    return;
 800d0aa:	e004      	b.n	800d0b6 <HAL_UART_IRQHandler+0x54e>
    return;
 800d0ac:	bf00      	nop
 800d0ae:	e002      	b.n	800d0b6 <HAL_UART_IRQHandler+0x54e>
      return;
 800d0b0:	bf00      	nop
 800d0b2:	e000      	b.n	800d0b6 <HAL_UART_IRQHandler+0x54e>
      return;
 800d0b4:	bf00      	nop
  }
}
 800d0b6:	37e8      	adds	r7, #232	@ 0xe8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d0c4:	bf00      	nop
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	4613      	mov	r3, r2
 800d11e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d120:	e03b      	b.n	800d19a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d122:	6a3b      	ldr	r3, [r7, #32]
 800d124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d128:	d037      	beq.n	800d19a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d12a:	f7f8 f911 	bl	8005350 <HAL_GetTick>
 800d12e:	4602      	mov	r2, r0
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	6a3a      	ldr	r2, [r7, #32]
 800d136:	429a      	cmp	r2, r3
 800d138:	d302      	bcc.n	800d140 <UART_WaitOnFlagUntilTimeout+0x30>
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d101      	bne.n	800d144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d140:	2303      	movs	r3, #3
 800d142:	e03a      	b.n	800d1ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	f003 0304 	and.w	r3, r3, #4
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d023      	beq.n	800d19a <UART_WaitOnFlagUntilTimeout+0x8a>
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	2b80      	cmp	r3, #128	@ 0x80
 800d156:	d020      	beq.n	800d19a <UART_WaitOnFlagUntilTimeout+0x8a>
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b40      	cmp	r3, #64	@ 0x40
 800d15c:	d01d      	beq.n	800d19a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 0308 	and.w	r3, r3, #8
 800d168:	2b08      	cmp	r3, #8
 800d16a:	d116      	bne.n	800d19a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d16c:	2300      	movs	r3, #0
 800d16e:	617b      	str	r3, [r7, #20]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	617b      	str	r3, [r7, #20]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	617b      	str	r3, [r7, #20]
 800d180:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 f81d 	bl	800d1c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2208      	movs	r2, #8
 800d18c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	e00f      	b.n	800d1ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	bf0c      	ite	eq
 800d1aa:	2301      	moveq	r3, #1
 800d1ac:	2300      	movne	r3, #0
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d0b4      	beq.n	800d122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	b095      	sub	sp, #84	@ 0x54
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	330c      	adds	r3, #12
 800d1d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d4:	e853 3f00 	ldrex	r3, [r3]
 800d1d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	330c      	adds	r3, #12
 800d1e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1ea:	643a      	str	r2, [r7, #64]	@ 0x40
 800d1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1f2:	e841 2300 	strex	r3, r2, [r1]
 800d1f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1e5      	bne.n	800d1ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	3314      	adds	r3, #20
 800d204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	e853 3f00 	ldrex	r3, [r3]
 800d20c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	f023 0301 	bic.w	r3, r3, #1
 800d214:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3314      	adds	r3, #20
 800d21c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d21e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d220:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d226:	e841 2300 	strex	r3, r2, [r1]
 800d22a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1e5      	bne.n	800d1fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d236:	2b01      	cmp	r3, #1
 800d238:	d119      	bne.n	800d26e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	330c      	adds	r3, #12
 800d240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	e853 3f00 	ldrex	r3, [r3]
 800d248:	60bb      	str	r3, [r7, #8]
   return(result);
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	f023 0310 	bic.w	r3, r3, #16
 800d250:	647b      	str	r3, [r7, #68]	@ 0x44
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	330c      	adds	r3, #12
 800d258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d25a:	61ba      	str	r2, [r7, #24]
 800d25c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25e:	6979      	ldr	r1, [r7, #20]
 800d260:	69ba      	ldr	r2, [r7, #24]
 800d262:	e841 2300 	strex	r3, r2, [r1]
 800d266:	613b      	str	r3, [r7, #16]
   return(result);
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1e5      	bne.n	800d23a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2220      	movs	r2, #32
 800d272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d27c:	bf00      	nop
 800d27e:	3754      	adds	r7, #84	@ 0x54
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d294:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f7ff ff21 	bl	800d0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2a2:	bf00      	nop
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	b085      	sub	sp, #20
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	2b21      	cmp	r3, #33	@ 0x21
 800d2bc:	d13e      	bne.n	800d33c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2c6:	d114      	bne.n	800d2f2 <UART_Transmit_IT+0x48>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d110      	bne.n	800d2f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a1b      	ldr	r3, [r3, #32]
 800d2d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	1c9a      	adds	r2, r3, #2
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	621a      	str	r2, [r3, #32]
 800d2f0:	e008      	b.n	800d304 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a1b      	ldr	r3, [r3, #32]
 800d2f6:	1c59      	adds	r1, r3, #1
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	6211      	str	r1, [r2, #32]
 800d2fc:	781a      	ldrb	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d308:	b29b      	uxth	r3, r3
 800d30a:	3b01      	subs	r3, #1
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	4619      	mov	r1, r3
 800d312:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10f      	bne.n	800d338 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68da      	ldr	r2, [r3, #12]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d326:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	68da      	ldr	r2, [r3, #12]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d336:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	e000      	b.n	800d33e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d33c:	2302      	movs	r3, #2
  }
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3714      	adds	r7, #20
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68da      	ldr	r2, [r3, #12]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d360:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2220      	movs	r2, #32
 800d366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff fea6 	bl	800d0bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b08c      	sub	sp, #48	@ 0x30
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800d382:	2300      	movs	r3, #0
 800d384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800d386:	2300      	movs	r3, #0
 800d388:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b22      	cmp	r3, #34	@ 0x22
 800d394:	f040 80aa 	bne.w	800d4ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3a0:	d115      	bne.n	800d3ce <UART_Receive_IT+0x54>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d111      	bne.n	800d3ce <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c6:	1c9a      	adds	r2, r3, #2
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	629a      	str	r2, [r3, #40]	@ 0x28
 800d3cc:	e024      	b.n	800d418 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3dc:	d007      	beq.n	800d3ee <UART_Receive_IT+0x74>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10a      	bne.n	800d3fc <UART_Receive_IT+0x82>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	691b      	ldr	r3, [r3, #16]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d106      	bne.n	800d3fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	e008      	b.n	800d40e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	b2db      	uxtb	r3, r3
 800d404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d412:	1c5a      	adds	r2, r3, #1
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	3b01      	subs	r3, #1
 800d420:	b29b      	uxth	r3, r3
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4619      	mov	r1, r3
 800d426:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d15d      	bne.n	800d4e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f022 0220 	bic.w	r2, r2, #32
 800d43a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68da      	ldr	r2, [r3, #12]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d44a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	695a      	ldr	r2, [r3, #20]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f022 0201 	bic.w	r2, r2, #1
 800d45a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2220      	movs	r2, #32
 800d460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d135      	bne.n	800d4de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	330c      	adds	r3, #12
 800d47e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	e853 3f00 	ldrex	r3, [r3]
 800d486:	613b      	str	r3, [r7, #16]
   return(result);
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f023 0310 	bic.w	r3, r3, #16
 800d48e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	330c      	adds	r3, #12
 800d496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d498:	623a      	str	r2, [r7, #32]
 800d49a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49c:	69f9      	ldr	r1, [r7, #28]
 800d49e:	6a3a      	ldr	r2, [r7, #32]
 800d4a0:	e841 2300 	strex	r3, r2, [r1]
 800d4a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1e5      	bne.n	800d478 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f003 0310 	and.w	r3, r3, #16
 800d4b6:	2b10      	cmp	r3, #16
 800d4b8:	d10a      	bne.n	800d4d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	60fb      	str	r3, [r7, #12]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	60fb      	str	r3, [r7, #12]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff fe0e 	bl	800d0f8 <HAL_UARTEx_RxEventCallback>
 800d4dc:	e002      	b.n	800d4e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff fdf6 	bl	800d0d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	e002      	b.n	800d4ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	e000      	b.n	800d4ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d4ec:	2302      	movs	r3, #2
  }
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3730      	adds	r7, #48	@ 0x30
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
	...

0800d4f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4fc:	b0c0      	sub	sp, #256	@ 0x100
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d514:	68d9      	ldr	r1, [r3, #12]
 800d516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	ea40 0301 	orr.w	r3, r0, r1
 800d520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d526:	689a      	ldr	r2, [r3, #8]
 800d528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	431a      	orrs	r2, r3
 800d530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	431a      	orrs	r2, r3
 800d538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	4313      	orrs	r3, r2
 800d540:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d550:	f021 010c 	bic.w	r1, r1, #12
 800d554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d55e:	430b      	orrs	r3, r1
 800d560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d572:	6999      	ldr	r1, [r3, #24]
 800d574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	ea40 0301 	orr.w	r3, r0, r1
 800d57e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	4b8f      	ldr	r3, [pc, #572]	@ (800d7c4 <UART_SetConfig+0x2cc>)
 800d588:	429a      	cmp	r2, r3
 800d58a:	d005      	beq.n	800d598 <UART_SetConfig+0xa0>
 800d58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	4b8d      	ldr	r3, [pc, #564]	@ (800d7c8 <UART_SetConfig+0x2d0>)
 800d594:	429a      	cmp	r2, r3
 800d596:	d104      	bne.n	800d5a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d598:	f7fd fa76 	bl	800aa88 <HAL_RCC_GetPCLK2Freq>
 800d59c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d5a0:	e003      	b.n	800d5aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d5a2:	f7fd fa5d 	bl	800aa60 <HAL_RCC_GetPCLK1Freq>
 800d5a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5ae:	69db      	ldr	r3, [r3, #28]
 800d5b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d5b4:	f040 810c 	bne.w	800d7d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d5b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d5c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d5c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	462b      	mov	r3, r5
 800d5ce:	1891      	adds	r1, r2, r2
 800d5d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d5d2:	415b      	adcs	r3, r3
 800d5d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d5d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d5da:	4621      	mov	r1, r4
 800d5dc:	eb12 0801 	adds.w	r8, r2, r1
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	eb43 0901 	adc.w	r9, r3, r1
 800d5e6:	f04f 0200 	mov.w	r2, #0
 800d5ea:	f04f 0300 	mov.w	r3, #0
 800d5ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d5f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d5f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d5fa:	4690      	mov	r8, r2
 800d5fc:	4699      	mov	r9, r3
 800d5fe:	4623      	mov	r3, r4
 800d600:	eb18 0303 	adds.w	r3, r8, r3
 800d604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d608:	462b      	mov	r3, r5
 800d60a:	eb49 0303 	adc.w	r3, r9, r3
 800d60e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d61e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d626:	460b      	mov	r3, r1
 800d628:	18db      	adds	r3, r3, r3
 800d62a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d62c:	4613      	mov	r3, r2
 800d62e:	eb42 0303 	adc.w	r3, r2, r3
 800d632:	657b      	str	r3, [r7, #84]	@ 0x54
 800d634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d63c:	f7f3 fab4 	bl	8000ba8 <__aeabi_uldivmod>
 800d640:	4602      	mov	r2, r0
 800d642:	460b      	mov	r3, r1
 800d644:	4b61      	ldr	r3, [pc, #388]	@ (800d7cc <UART_SetConfig+0x2d4>)
 800d646:	fba3 2302 	umull	r2, r3, r3, r2
 800d64a:	095b      	lsrs	r3, r3, #5
 800d64c:	011c      	lsls	r4, r3, #4
 800d64e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d652:	2200      	movs	r2, #0
 800d654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d658:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d65c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d660:	4642      	mov	r2, r8
 800d662:	464b      	mov	r3, r9
 800d664:	1891      	adds	r1, r2, r2
 800d666:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d668:	415b      	adcs	r3, r3
 800d66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d66c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d670:	4641      	mov	r1, r8
 800d672:	eb12 0a01 	adds.w	sl, r2, r1
 800d676:	4649      	mov	r1, r9
 800d678:	eb43 0b01 	adc.w	fp, r3, r1
 800d67c:	f04f 0200 	mov.w	r2, #0
 800d680:	f04f 0300 	mov.w	r3, #0
 800d684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d68c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d690:	4692      	mov	sl, r2
 800d692:	469b      	mov	fp, r3
 800d694:	4643      	mov	r3, r8
 800d696:	eb1a 0303 	adds.w	r3, sl, r3
 800d69a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d69e:	464b      	mov	r3, r9
 800d6a0:	eb4b 0303 	adc.w	r3, fp, r3
 800d6a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d6b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d6b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	18db      	adds	r3, r3, r3
 800d6c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	eb42 0303 	adc.w	r3, r2, r3
 800d6c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d6ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d6d2:	f7f3 fa69 	bl	8000ba8 <__aeabi_uldivmod>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4611      	mov	r1, r2
 800d6dc:	4b3b      	ldr	r3, [pc, #236]	@ (800d7cc <UART_SetConfig+0x2d4>)
 800d6de:	fba3 2301 	umull	r2, r3, r3, r1
 800d6e2:	095b      	lsrs	r3, r3, #5
 800d6e4:	2264      	movs	r2, #100	@ 0x64
 800d6e6:	fb02 f303 	mul.w	r3, r2, r3
 800d6ea:	1acb      	subs	r3, r1, r3
 800d6ec:	00db      	lsls	r3, r3, #3
 800d6ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d6f2:	4b36      	ldr	r3, [pc, #216]	@ (800d7cc <UART_SetConfig+0x2d4>)
 800d6f4:	fba3 2302 	umull	r2, r3, r3, r2
 800d6f8:	095b      	lsrs	r3, r3, #5
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d700:	441c      	add	r4, r3
 800d702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d706:	2200      	movs	r2, #0
 800d708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d70c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d714:	4642      	mov	r2, r8
 800d716:	464b      	mov	r3, r9
 800d718:	1891      	adds	r1, r2, r2
 800d71a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d71c:	415b      	adcs	r3, r3
 800d71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d724:	4641      	mov	r1, r8
 800d726:	1851      	adds	r1, r2, r1
 800d728:	6339      	str	r1, [r7, #48]	@ 0x30
 800d72a:	4649      	mov	r1, r9
 800d72c:	414b      	adcs	r3, r1
 800d72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d730:	f04f 0200 	mov.w	r2, #0
 800d734:	f04f 0300 	mov.w	r3, #0
 800d738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d73c:	4659      	mov	r1, fp
 800d73e:	00cb      	lsls	r3, r1, #3
 800d740:	4651      	mov	r1, sl
 800d742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d746:	4651      	mov	r1, sl
 800d748:	00ca      	lsls	r2, r1, #3
 800d74a:	4610      	mov	r0, r2
 800d74c:	4619      	mov	r1, r3
 800d74e:	4603      	mov	r3, r0
 800d750:	4642      	mov	r2, r8
 800d752:	189b      	adds	r3, r3, r2
 800d754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d758:	464b      	mov	r3, r9
 800d75a:	460a      	mov	r2, r1
 800d75c:	eb42 0303 	adc.w	r3, r2, r3
 800d760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d770:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d778:	460b      	mov	r3, r1
 800d77a:	18db      	adds	r3, r3, r3
 800d77c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d77e:	4613      	mov	r3, r2
 800d780:	eb42 0303 	adc.w	r3, r2, r3
 800d784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d78a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d78e:	f7f3 fa0b 	bl	8000ba8 <__aeabi_uldivmod>
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	4b0d      	ldr	r3, [pc, #52]	@ (800d7cc <UART_SetConfig+0x2d4>)
 800d798:	fba3 1302 	umull	r1, r3, r3, r2
 800d79c:	095b      	lsrs	r3, r3, #5
 800d79e:	2164      	movs	r1, #100	@ 0x64
 800d7a0:	fb01 f303 	mul.w	r3, r1, r3
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	00db      	lsls	r3, r3, #3
 800d7a8:	3332      	adds	r3, #50	@ 0x32
 800d7aa:	4a08      	ldr	r2, [pc, #32]	@ (800d7cc <UART_SetConfig+0x2d4>)
 800d7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b0:	095b      	lsrs	r3, r3, #5
 800d7b2:	f003 0207 	and.w	r2, r3, #7
 800d7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4422      	add	r2, r4
 800d7be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d7c0:	e106      	b.n	800d9d0 <UART_SetConfig+0x4d8>
 800d7c2:	bf00      	nop
 800d7c4:	40011000 	.word	0x40011000
 800d7c8:	40011400 	.word	0x40011400
 800d7cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d7d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d7da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d7de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d7e2:	4642      	mov	r2, r8
 800d7e4:	464b      	mov	r3, r9
 800d7e6:	1891      	adds	r1, r2, r2
 800d7e8:	6239      	str	r1, [r7, #32]
 800d7ea:	415b      	adcs	r3, r3
 800d7ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d7f2:	4641      	mov	r1, r8
 800d7f4:	1854      	adds	r4, r2, r1
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	eb43 0501 	adc.w	r5, r3, r1
 800d7fc:	f04f 0200 	mov.w	r2, #0
 800d800:	f04f 0300 	mov.w	r3, #0
 800d804:	00eb      	lsls	r3, r5, #3
 800d806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d80a:	00e2      	lsls	r2, r4, #3
 800d80c:	4614      	mov	r4, r2
 800d80e:	461d      	mov	r5, r3
 800d810:	4643      	mov	r3, r8
 800d812:	18e3      	adds	r3, r4, r3
 800d814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d818:	464b      	mov	r3, r9
 800d81a:	eb45 0303 	adc.w	r3, r5, r3
 800d81e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d82e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d832:	f04f 0200 	mov.w	r2, #0
 800d836:	f04f 0300 	mov.w	r3, #0
 800d83a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d83e:	4629      	mov	r1, r5
 800d840:	008b      	lsls	r3, r1, #2
 800d842:	4621      	mov	r1, r4
 800d844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d848:	4621      	mov	r1, r4
 800d84a:	008a      	lsls	r2, r1, #2
 800d84c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d850:	f7f3 f9aa 	bl	8000ba8 <__aeabi_uldivmod>
 800d854:	4602      	mov	r2, r0
 800d856:	460b      	mov	r3, r1
 800d858:	4b60      	ldr	r3, [pc, #384]	@ (800d9dc <UART_SetConfig+0x4e4>)
 800d85a:	fba3 2302 	umull	r2, r3, r3, r2
 800d85e:	095b      	lsrs	r3, r3, #5
 800d860:	011c      	lsls	r4, r3, #4
 800d862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d866:	2200      	movs	r2, #0
 800d868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d86c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d874:	4642      	mov	r2, r8
 800d876:	464b      	mov	r3, r9
 800d878:	1891      	adds	r1, r2, r2
 800d87a:	61b9      	str	r1, [r7, #24]
 800d87c:	415b      	adcs	r3, r3
 800d87e:	61fb      	str	r3, [r7, #28]
 800d880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d884:	4641      	mov	r1, r8
 800d886:	1851      	adds	r1, r2, r1
 800d888:	6139      	str	r1, [r7, #16]
 800d88a:	4649      	mov	r1, r9
 800d88c:	414b      	adcs	r3, r1
 800d88e:	617b      	str	r3, [r7, #20]
 800d890:	f04f 0200 	mov.w	r2, #0
 800d894:	f04f 0300 	mov.w	r3, #0
 800d898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d89c:	4659      	mov	r1, fp
 800d89e:	00cb      	lsls	r3, r1, #3
 800d8a0:	4651      	mov	r1, sl
 800d8a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d8a6:	4651      	mov	r1, sl
 800d8a8:	00ca      	lsls	r2, r1, #3
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	4642      	mov	r2, r8
 800d8b2:	189b      	adds	r3, r3, r2
 800d8b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d8b8:	464b      	mov	r3, r9
 800d8ba:	460a      	mov	r2, r1
 800d8bc:	eb42 0303 	adc.w	r3, r2, r3
 800d8c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d8ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d8d0:	f04f 0200 	mov.w	r2, #0
 800d8d4:	f04f 0300 	mov.w	r3, #0
 800d8d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d8dc:	4649      	mov	r1, r9
 800d8de:	008b      	lsls	r3, r1, #2
 800d8e0:	4641      	mov	r1, r8
 800d8e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d8e6:	4641      	mov	r1, r8
 800d8e8:	008a      	lsls	r2, r1, #2
 800d8ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d8ee:	f7f3 f95b 	bl	8000ba8 <__aeabi_uldivmod>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	4b38      	ldr	r3, [pc, #224]	@ (800d9dc <UART_SetConfig+0x4e4>)
 800d8fa:	fba3 2301 	umull	r2, r3, r3, r1
 800d8fe:	095b      	lsrs	r3, r3, #5
 800d900:	2264      	movs	r2, #100	@ 0x64
 800d902:	fb02 f303 	mul.w	r3, r2, r3
 800d906:	1acb      	subs	r3, r1, r3
 800d908:	011b      	lsls	r3, r3, #4
 800d90a:	3332      	adds	r3, #50	@ 0x32
 800d90c:	4a33      	ldr	r2, [pc, #204]	@ (800d9dc <UART_SetConfig+0x4e4>)
 800d90e:	fba2 2303 	umull	r2, r3, r2, r3
 800d912:	095b      	lsrs	r3, r3, #5
 800d914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d918:	441c      	add	r4, r3
 800d91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d91e:	2200      	movs	r2, #0
 800d920:	673b      	str	r3, [r7, #112]	@ 0x70
 800d922:	677a      	str	r2, [r7, #116]	@ 0x74
 800d924:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d928:	4642      	mov	r2, r8
 800d92a:	464b      	mov	r3, r9
 800d92c:	1891      	adds	r1, r2, r2
 800d92e:	60b9      	str	r1, [r7, #8]
 800d930:	415b      	adcs	r3, r3
 800d932:	60fb      	str	r3, [r7, #12]
 800d934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d938:	4641      	mov	r1, r8
 800d93a:	1851      	adds	r1, r2, r1
 800d93c:	6039      	str	r1, [r7, #0]
 800d93e:	4649      	mov	r1, r9
 800d940:	414b      	adcs	r3, r1
 800d942:	607b      	str	r3, [r7, #4]
 800d944:	f04f 0200 	mov.w	r2, #0
 800d948:	f04f 0300 	mov.w	r3, #0
 800d94c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d950:	4659      	mov	r1, fp
 800d952:	00cb      	lsls	r3, r1, #3
 800d954:	4651      	mov	r1, sl
 800d956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d95a:	4651      	mov	r1, sl
 800d95c:	00ca      	lsls	r2, r1, #3
 800d95e:	4610      	mov	r0, r2
 800d960:	4619      	mov	r1, r3
 800d962:	4603      	mov	r3, r0
 800d964:	4642      	mov	r2, r8
 800d966:	189b      	adds	r3, r3, r2
 800d968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d96a:	464b      	mov	r3, r9
 800d96c:	460a      	mov	r2, r1
 800d96e:	eb42 0303 	adc.w	r3, r2, r3
 800d972:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d97e:	667a      	str	r2, [r7, #100]	@ 0x64
 800d980:	f04f 0200 	mov.w	r2, #0
 800d984:	f04f 0300 	mov.w	r3, #0
 800d988:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d98c:	4649      	mov	r1, r9
 800d98e:	008b      	lsls	r3, r1, #2
 800d990:	4641      	mov	r1, r8
 800d992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d996:	4641      	mov	r1, r8
 800d998:	008a      	lsls	r2, r1, #2
 800d99a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d99e:	f7f3 f903 	bl	8000ba8 <__aeabi_uldivmod>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d9dc <UART_SetConfig+0x4e4>)
 800d9a8:	fba3 1302 	umull	r1, r3, r3, r2
 800d9ac:	095b      	lsrs	r3, r3, #5
 800d9ae:	2164      	movs	r1, #100	@ 0x64
 800d9b0:	fb01 f303 	mul.w	r3, r1, r3
 800d9b4:	1ad3      	subs	r3, r2, r3
 800d9b6:	011b      	lsls	r3, r3, #4
 800d9b8:	3332      	adds	r3, #50	@ 0x32
 800d9ba:	4a08      	ldr	r2, [pc, #32]	@ (800d9dc <UART_SetConfig+0x4e4>)
 800d9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c0:	095b      	lsrs	r3, r3, #5
 800d9c2:	f003 020f 	and.w	r2, r3, #15
 800d9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4422      	add	r2, r4
 800d9ce:	609a      	str	r2, [r3, #8]
}
 800d9d0:	bf00      	nop
 800d9d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9dc:	51eb851f 	.word	0x51eb851f

0800d9e0 <__cvt>:
 800d9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e4:	ec57 6b10 	vmov	r6, r7, d0
 800d9e8:	2f00      	cmp	r7, #0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	463b      	mov	r3, r7
 800d9f0:	bfbb      	ittet	lt
 800d9f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d9f6:	461f      	movlt	r7, r3
 800d9f8:	2300      	movge	r3, #0
 800d9fa:	232d      	movlt	r3, #45	@ 0x2d
 800d9fc:	700b      	strb	r3, [r1, #0]
 800d9fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da00:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800da04:	4691      	mov	r9, r2
 800da06:	f023 0820 	bic.w	r8, r3, #32
 800da0a:	bfbc      	itt	lt
 800da0c:	4632      	movlt	r2, r6
 800da0e:	4616      	movlt	r6, r2
 800da10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800da14:	d005      	beq.n	800da22 <__cvt+0x42>
 800da16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800da1a:	d100      	bne.n	800da1e <__cvt+0x3e>
 800da1c:	3401      	adds	r4, #1
 800da1e:	2102      	movs	r1, #2
 800da20:	e000      	b.n	800da24 <__cvt+0x44>
 800da22:	2103      	movs	r1, #3
 800da24:	ab03      	add	r3, sp, #12
 800da26:	9301      	str	r3, [sp, #4]
 800da28:	ab02      	add	r3, sp, #8
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	ec47 6b10 	vmov	d0, r6, r7
 800da30:	4653      	mov	r3, sl
 800da32:	4622      	mov	r2, r4
 800da34:	f000 ffa0 	bl	800e978 <_dtoa_r>
 800da38:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800da3c:	4605      	mov	r5, r0
 800da3e:	d119      	bne.n	800da74 <__cvt+0x94>
 800da40:	f019 0f01 	tst.w	r9, #1
 800da44:	d00e      	beq.n	800da64 <__cvt+0x84>
 800da46:	eb00 0904 	add.w	r9, r0, r4
 800da4a:	2200      	movs	r2, #0
 800da4c:	2300      	movs	r3, #0
 800da4e:	4630      	mov	r0, r6
 800da50:	4639      	mov	r1, r7
 800da52:	f7f3 f839 	bl	8000ac8 <__aeabi_dcmpeq>
 800da56:	b108      	cbz	r0, 800da5c <__cvt+0x7c>
 800da58:	f8cd 900c 	str.w	r9, [sp, #12]
 800da5c:	2230      	movs	r2, #48	@ 0x30
 800da5e:	9b03      	ldr	r3, [sp, #12]
 800da60:	454b      	cmp	r3, r9
 800da62:	d31e      	bcc.n	800daa2 <__cvt+0xc2>
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da68:	1b5b      	subs	r3, r3, r5
 800da6a:	4628      	mov	r0, r5
 800da6c:	6013      	str	r3, [r2, #0]
 800da6e:	b004      	add	sp, #16
 800da70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800da78:	eb00 0904 	add.w	r9, r0, r4
 800da7c:	d1e5      	bne.n	800da4a <__cvt+0x6a>
 800da7e:	7803      	ldrb	r3, [r0, #0]
 800da80:	2b30      	cmp	r3, #48	@ 0x30
 800da82:	d10a      	bne.n	800da9a <__cvt+0xba>
 800da84:	2200      	movs	r2, #0
 800da86:	2300      	movs	r3, #0
 800da88:	4630      	mov	r0, r6
 800da8a:	4639      	mov	r1, r7
 800da8c:	f7f3 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800da90:	b918      	cbnz	r0, 800da9a <__cvt+0xba>
 800da92:	f1c4 0401 	rsb	r4, r4, #1
 800da96:	f8ca 4000 	str.w	r4, [sl]
 800da9a:	f8da 3000 	ldr.w	r3, [sl]
 800da9e:	4499      	add	r9, r3
 800daa0:	e7d3      	b.n	800da4a <__cvt+0x6a>
 800daa2:	1c59      	adds	r1, r3, #1
 800daa4:	9103      	str	r1, [sp, #12]
 800daa6:	701a      	strb	r2, [r3, #0]
 800daa8:	e7d9      	b.n	800da5e <__cvt+0x7e>

0800daaa <__exponent>:
 800daaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daac:	2900      	cmp	r1, #0
 800daae:	bfba      	itte	lt
 800dab0:	4249      	neglt	r1, r1
 800dab2:	232d      	movlt	r3, #45	@ 0x2d
 800dab4:	232b      	movge	r3, #43	@ 0x2b
 800dab6:	2909      	cmp	r1, #9
 800dab8:	7002      	strb	r2, [r0, #0]
 800daba:	7043      	strb	r3, [r0, #1]
 800dabc:	dd29      	ble.n	800db12 <__exponent+0x68>
 800dabe:	f10d 0307 	add.w	r3, sp, #7
 800dac2:	461d      	mov	r5, r3
 800dac4:	270a      	movs	r7, #10
 800dac6:	461a      	mov	r2, r3
 800dac8:	fbb1 f6f7 	udiv	r6, r1, r7
 800dacc:	fb07 1416 	mls	r4, r7, r6, r1
 800dad0:	3430      	adds	r4, #48	@ 0x30
 800dad2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dad6:	460c      	mov	r4, r1
 800dad8:	2c63      	cmp	r4, #99	@ 0x63
 800dada:	f103 33ff 	add.w	r3, r3, #4294967295
 800dade:	4631      	mov	r1, r6
 800dae0:	dcf1      	bgt.n	800dac6 <__exponent+0x1c>
 800dae2:	3130      	adds	r1, #48	@ 0x30
 800dae4:	1e94      	subs	r4, r2, #2
 800dae6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800daea:	1c41      	adds	r1, r0, #1
 800daec:	4623      	mov	r3, r4
 800daee:	42ab      	cmp	r3, r5
 800daf0:	d30a      	bcc.n	800db08 <__exponent+0x5e>
 800daf2:	f10d 0309 	add.w	r3, sp, #9
 800daf6:	1a9b      	subs	r3, r3, r2
 800daf8:	42ac      	cmp	r4, r5
 800dafa:	bf88      	it	hi
 800dafc:	2300      	movhi	r3, #0
 800dafe:	3302      	adds	r3, #2
 800db00:	4403      	add	r3, r0
 800db02:	1a18      	subs	r0, r3, r0
 800db04:	b003      	add	sp, #12
 800db06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db08:	f813 6b01 	ldrb.w	r6, [r3], #1
 800db0c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800db10:	e7ed      	b.n	800daee <__exponent+0x44>
 800db12:	2330      	movs	r3, #48	@ 0x30
 800db14:	3130      	adds	r1, #48	@ 0x30
 800db16:	7083      	strb	r3, [r0, #2]
 800db18:	70c1      	strb	r1, [r0, #3]
 800db1a:	1d03      	adds	r3, r0, #4
 800db1c:	e7f1      	b.n	800db02 <__exponent+0x58>
	...

0800db20 <_printf_float>:
 800db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	b08d      	sub	sp, #52	@ 0x34
 800db26:	460c      	mov	r4, r1
 800db28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800db2c:	4616      	mov	r6, r2
 800db2e:	461f      	mov	r7, r3
 800db30:	4605      	mov	r5, r0
 800db32:	f000 fe13 	bl	800e75c <_localeconv_r>
 800db36:	6803      	ldr	r3, [r0, #0]
 800db38:	9304      	str	r3, [sp, #16]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7f2 fb98 	bl	8000270 <strlen>
 800db40:	2300      	movs	r3, #0
 800db42:	930a      	str	r3, [sp, #40]	@ 0x28
 800db44:	f8d8 3000 	ldr.w	r3, [r8]
 800db48:	9005      	str	r0, [sp, #20]
 800db4a:	3307      	adds	r3, #7
 800db4c:	f023 0307 	bic.w	r3, r3, #7
 800db50:	f103 0208 	add.w	r2, r3, #8
 800db54:	f894 a018 	ldrb.w	sl, [r4, #24]
 800db58:	f8d4 b000 	ldr.w	fp, [r4]
 800db5c:	f8c8 2000 	str.w	r2, [r8]
 800db60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800db68:	9307      	str	r3, [sp, #28]
 800db6a:	f8cd 8018 	str.w	r8, [sp, #24]
 800db6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800db72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db76:	4b9c      	ldr	r3, [pc, #624]	@ (800dde8 <_printf_float+0x2c8>)
 800db78:	f04f 32ff 	mov.w	r2, #4294967295
 800db7c:	f7f2 ffd6 	bl	8000b2c <__aeabi_dcmpun>
 800db80:	bb70      	cbnz	r0, 800dbe0 <_printf_float+0xc0>
 800db82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db86:	4b98      	ldr	r3, [pc, #608]	@ (800dde8 <_printf_float+0x2c8>)
 800db88:	f04f 32ff 	mov.w	r2, #4294967295
 800db8c:	f7f2 ffb0 	bl	8000af0 <__aeabi_dcmple>
 800db90:	bb30      	cbnz	r0, 800dbe0 <_printf_float+0xc0>
 800db92:	2200      	movs	r2, #0
 800db94:	2300      	movs	r3, #0
 800db96:	4640      	mov	r0, r8
 800db98:	4649      	mov	r1, r9
 800db9a:	f7f2 ff9f 	bl	8000adc <__aeabi_dcmplt>
 800db9e:	b110      	cbz	r0, 800dba6 <_printf_float+0x86>
 800dba0:	232d      	movs	r3, #45	@ 0x2d
 800dba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dba6:	4a91      	ldr	r2, [pc, #580]	@ (800ddec <_printf_float+0x2cc>)
 800dba8:	4b91      	ldr	r3, [pc, #580]	@ (800ddf0 <_printf_float+0x2d0>)
 800dbaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dbae:	bf8c      	ite	hi
 800dbb0:	4690      	movhi	r8, r2
 800dbb2:	4698      	movls	r8, r3
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	6123      	str	r3, [r4, #16]
 800dbb8:	f02b 0304 	bic.w	r3, fp, #4
 800dbbc:	6023      	str	r3, [r4, #0]
 800dbbe:	f04f 0900 	mov.w	r9, #0
 800dbc2:	9700      	str	r7, [sp, #0]
 800dbc4:	4633      	mov	r3, r6
 800dbc6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dbc8:	4621      	mov	r1, r4
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f000 f9d2 	bl	800df74 <_printf_common>
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	f040 808d 	bne.w	800dcf0 <_printf_float+0x1d0>
 800dbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbda:	b00d      	add	sp, #52	@ 0x34
 800dbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe0:	4642      	mov	r2, r8
 800dbe2:	464b      	mov	r3, r9
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	f7f2 ffa0 	bl	8000b2c <__aeabi_dcmpun>
 800dbec:	b140      	cbz	r0, 800dc00 <_printf_float+0xe0>
 800dbee:	464b      	mov	r3, r9
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	bfbc      	itt	lt
 800dbf4:	232d      	movlt	r3, #45	@ 0x2d
 800dbf6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dbfa:	4a7e      	ldr	r2, [pc, #504]	@ (800ddf4 <_printf_float+0x2d4>)
 800dbfc:	4b7e      	ldr	r3, [pc, #504]	@ (800ddf8 <_printf_float+0x2d8>)
 800dbfe:	e7d4      	b.n	800dbaa <_printf_float+0x8a>
 800dc00:	6863      	ldr	r3, [r4, #4]
 800dc02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dc06:	9206      	str	r2, [sp, #24]
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	d13b      	bne.n	800dc84 <_printf_float+0x164>
 800dc0c:	2306      	movs	r3, #6
 800dc0e:	6063      	str	r3, [r4, #4]
 800dc10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dc14:	2300      	movs	r3, #0
 800dc16:	6022      	str	r2, [r4, #0]
 800dc18:	9303      	str	r3, [sp, #12]
 800dc1a:	ab0a      	add	r3, sp, #40	@ 0x28
 800dc1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dc20:	ab09      	add	r3, sp, #36	@ 0x24
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	6861      	ldr	r1, [r4, #4]
 800dc26:	ec49 8b10 	vmov	d0, r8, r9
 800dc2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dc2e:	4628      	mov	r0, r5
 800dc30:	f7ff fed6 	bl	800d9e0 <__cvt>
 800dc34:	9b06      	ldr	r3, [sp, #24]
 800dc36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc38:	2b47      	cmp	r3, #71	@ 0x47
 800dc3a:	4680      	mov	r8, r0
 800dc3c:	d129      	bne.n	800dc92 <_printf_float+0x172>
 800dc3e:	1cc8      	adds	r0, r1, #3
 800dc40:	db02      	blt.n	800dc48 <_printf_float+0x128>
 800dc42:	6863      	ldr	r3, [r4, #4]
 800dc44:	4299      	cmp	r1, r3
 800dc46:	dd41      	ble.n	800dccc <_printf_float+0x1ac>
 800dc48:	f1aa 0a02 	sub.w	sl, sl, #2
 800dc4c:	fa5f fa8a 	uxtb.w	sl, sl
 800dc50:	3901      	subs	r1, #1
 800dc52:	4652      	mov	r2, sl
 800dc54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dc58:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc5a:	f7ff ff26 	bl	800daaa <__exponent>
 800dc5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc60:	1813      	adds	r3, r2, r0
 800dc62:	2a01      	cmp	r2, #1
 800dc64:	4681      	mov	r9, r0
 800dc66:	6123      	str	r3, [r4, #16]
 800dc68:	dc02      	bgt.n	800dc70 <_printf_float+0x150>
 800dc6a:	6822      	ldr	r2, [r4, #0]
 800dc6c:	07d2      	lsls	r2, r2, #31
 800dc6e:	d501      	bpl.n	800dc74 <_printf_float+0x154>
 800dc70:	3301      	adds	r3, #1
 800dc72:	6123      	str	r3, [r4, #16]
 800dc74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d0a2      	beq.n	800dbc2 <_printf_float+0xa2>
 800dc7c:	232d      	movs	r3, #45	@ 0x2d
 800dc7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc82:	e79e      	b.n	800dbc2 <_printf_float+0xa2>
 800dc84:	9a06      	ldr	r2, [sp, #24]
 800dc86:	2a47      	cmp	r2, #71	@ 0x47
 800dc88:	d1c2      	bne.n	800dc10 <_printf_float+0xf0>
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1c0      	bne.n	800dc10 <_printf_float+0xf0>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e7bd      	b.n	800dc0e <_printf_float+0xee>
 800dc92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc96:	d9db      	bls.n	800dc50 <_printf_float+0x130>
 800dc98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dc9c:	d118      	bne.n	800dcd0 <_printf_float+0x1b0>
 800dc9e:	2900      	cmp	r1, #0
 800dca0:	6863      	ldr	r3, [r4, #4]
 800dca2:	dd0b      	ble.n	800dcbc <_printf_float+0x19c>
 800dca4:	6121      	str	r1, [r4, #16]
 800dca6:	b913      	cbnz	r3, 800dcae <_printf_float+0x18e>
 800dca8:	6822      	ldr	r2, [r4, #0]
 800dcaa:	07d0      	lsls	r0, r2, #31
 800dcac:	d502      	bpl.n	800dcb4 <_printf_float+0x194>
 800dcae:	3301      	adds	r3, #1
 800dcb0:	440b      	add	r3, r1
 800dcb2:	6123      	str	r3, [r4, #16]
 800dcb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dcb6:	f04f 0900 	mov.w	r9, #0
 800dcba:	e7db      	b.n	800dc74 <_printf_float+0x154>
 800dcbc:	b913      	cbnz	r3, 800dcc4 <_printf_float+0x1a4>
 800dcbe:	6822      	ldr	r2, [r4, #0]
 800dcc0:	07d2      	lsls	r2, r2, #31
 800dcc2:	d501      	bpl.n	800dcc8 <_printf_float+0x1a8>
 800dcc4:	3302      	adds	r3, #2
 800dcc6:	e7f4      	b.n	800dcb2 <_printf_float+0x192>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e7f2      	b.n	800dcb2 <_printf_float+0x192>
 800dccc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dcd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcd2:	4299      	cmp	r1, r3
 800dcd4:	db05      	blt.n	800dce2 <_printf_float+0x1c2>
 800dcd6:	6823      	ldr	r3, [r4, #0]
 800dcd8:	6121      	str	r1, [r4, #16]
 800dcda:	07d8      	lsls	r0, r3, #31
 800dcdc:	d5ea      	bpl.n	800dcb4 <_printf_float+0x194>
 800dcde:	1c4b      	adds	r3, r1, #1
 800dce0:	e7e7      	b.n	800dcb2 <_printf_float+0x192>
 800dce2:	2900      	cmp	r1, #0
 800dce4:	bfd4      	ite	le
 800dce6:	f1c1 0202 	rsble	r2, r1, #2
 800dcea:	2201      	movgt	r2, #1
 800dcec:	4413      	add	r3, r2
 800dcee:	e7e0      	b.n	800dcb2 <_printf_float+0x192>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	055a      	lsls	r2, r3, #21
 800dcf4:	d407      	bmi.n	800dd06 <_printf_float+0x1e6>
 800dcf6:	6923      	ldr	r3, [r4, #16]
 800dcf8:	4642      	mov	r2, r8
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	47b8      	blx	r7
 800dd00:	3001      	adds	r0, #1
 800dd02:	d12b      	bne.n	800dd5c <_printf_float+0x23c>
 800dd04:	e767      	b.n	800dbd6 <_printf_float+0xb6>
 800dd06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dd0a:	f240 80dd 	bls.w	800dec8 <_printf_float+0x3a8>
 800dd0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dd12:	2200      	movs	r2, #0
 800dd14:	2300      	movs	r3, #0
 800dd16:	f7f2 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	d033      	beq.n	800dd86 <_printf_float+0x266>
 800dd1e:	4a37      	ldr	r2, [pc, #220]	@ (800ddfc <_printf_float+0x2dc>)
 800dd20:	2301      	movs	r3, #1
 800dd22:	4631      	mov	r1, r6
 800dd24:	4628      	mov	r0, r5
 800dd26:	47b8      	blx	r7
 800dd28:	3001      	adds	r0, #1
 800dd2a:	f43f af54 	beq.w	800dbd6 <_printf_float+0xb6>
 800dd2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dd32:	4543      	cmp	r3, r8
 800dd34:	db02      	blt.n	800dd3c <_printf_float+0x21c>
 800dd36:	6823      	ldr	r3, [r4, #0]
 800dd38:	07d8      	lsls	r0, r3, #31
 800dd3a:	d50f      	bpl.n	800dd5c <_printf_float+0x23c>
 800dd3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd40:	4631      	mov	r1, r6
 800dd42:	4628      	mov	r0, r5
 800dd44:	47b8      	blx	r7
 800dd46:	3001      	adds	r0, #1
 800dd48:	f43f af45 	beq.w	800dbd6 <_printf_float+0xb6>
 800dd4c:	f04f 0900 	mov.w	r9, #0
 800dd50:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd54:	f104 0a1a 	add.w	sl, r4, #26
 800dd58:	45c8      	cmp	r8, r9
 800dd5a:	dc09      	bgt.n	800dd70 <_printf_float+0x250>
 800dd5c:	6823      	ldr	r3, [r4, #0]
 800dd5e:	079b      	lsls	r3, r3, #30
 800dd60:	f100 8103 	bmi.w	800df6a <_printf_float+0x44a>
 800dd64:	68e0      	ldr	r0, [r4, #12]
 800dd66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd68:	4298      	cmp	r0, r3
 800dd6a:	bfb8      	it	lt
 800dd6c:	4618      	movlt	r0, r3
 800dd6e:	e734      	b.n	800dbda <_printf_float+0xba>
 800dd70:	2301      	movs	r3, #1
 800dd72:	4652      	mov	r2, sl
 800dd74:	4631      	mov	r1, r6
 800dd76:	4628      	mov	r0, r5
 800dd78:	47b8      	blx	r7
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	f43f af2b 	beq.w	800dbd6 <_printf_float+0xb6>
 800dd80:	f109 0901 	add.w	r9, r9, #1
 800dd84:	e7e8      	b.n	800dd58 <_printf_float+0x238>
 800dd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	dc39      	bgt.n	800de00 <_printf_float+0x2e0>
 800dd8c:	4a1b      	ldr	r2, [pc, #108]	@ (800ddfc <_printf_float+0x2dc>)
 800dd8e:	2301      	movs	r3, #1
 800dd90:	4631      	mov	r1, r6
 800dd92:	4628      	mov	r0, r5
 800dd94:	47b8      	blx	r7
 800dd96:	3001      	adds	r0, #1
 800dd98:	f43f af1d 	beq.w	800dbd6 <_printf_float+0xb6>
 800dd9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dda0:	ea59 0303 	orrs.w	r3, r9, r3
 800dda4:	d102      	bne.n	800ddac <_printf_float+0x28c>
 800dda6:	6823      	ldr	r3, [r4, #0]
 800dda8:	07d9      	lsls	r1, r3, #31
 800ddaa:	d5d7      	bpl.n	800dd5c <_printf_float+0x23c>
 800ddac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddb0:	4631      	mov	r1, r6
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	47b8      	blx	r7
 800ddb6:	3001      	adds	r0, #1
 800ddb8:	f43f af0d 	beq.w	800dbd6 <_printf_float+0xb6>
 800ddbc:	f04f 0a00 	mov.w	sl, #0
 800ddc0:	f104 0b1a 	add.w	fp, r4, #26
 800ddc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddc6:	425b      	negs	r3, r3
 800ddc8:	4553      	cmp	r3, sl
 800ddca:	dc01      	bgt.n	800ddd0 <_printf_float+0x2b0>
 800ddcc:	464b      	mov	r3, r9
 800ddce:	e793      	b.n	800dcf8 <_printf_float+0x1d8>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	465a      	mov	r2, fp
 800ddd4:	4631      	mov	r1, r6
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	47b8      	blx	r7
 800ddda:	3001      	adds	r0, #1
 800dddc:	f43f aefb 	beq.w	800dbd6 <_printf_float+0xb6>
 800dde0:	f10a 0a01 	add.w	sl, sl, #1
 800dde4:	e7ee      	b.n	800ddc4 <_printf_float+0x2a4>
 800dde6:	bf00      	nop
 800dde8:	7fefffff 	.word	0x7fefffff
 800ddec:	08011bd4 	.word	0x08011bd4
 800ddf0:	08011bd0 	.word	0x08011bd0
 800ddf4:	08011bdc 	.word	0x08011bdc
 800ddf8:	08011bd8 	.word	0x08011bd8
 800ddfc:	08011be0 	.word	0x08011be0
 800de00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800de02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800de06:	4553      	cmp	r3, sl
 800de08:	bfa8      	it	ge
 800de0a:	4653      	movge	r3, sl
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	4699      	mov	r9, r3
 800de10:	dc36      	bgt.n	800de80 <_printf_float+0x360>
 800de12:	f04f 0b00 	mov.w	fp, #0
 800de16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de1a:	f104 021a 	add.w	r2, r4, #26
 800de1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800de20:	9306      	str	r3, [sp, #24]
 800de22:	eba3 0309 	sub.w	r3, r3, r9
 800de26:	455b      	cmp	r3, fp
 800de28:	dc31      	bgt.n	800de8e <_printf_float+0x36e>
 800de2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de2c:	459a      	cmp	sl, r3
 800de2e:	dc3a      	bgt.n	800dea6 <_printf_float+0x386>
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	07da      	lsls	r2, r3, #31
 800de34:	d437      	bmi.n	800dea6 <_printf_float+0x386>
 800de36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de38:	ebaa 0903 	sub.w	r9, sl, r3
 800de3c:	9b06      	ldr	r3, [sp, #24]
 800de3e:	ebaa 0303 	sub.w	r3, sl, r3
 800de42:	4599      	cmp	r9, r3
 800de44:	bfa8      	it	ge
 800de46:	4699      	movge	r9, r3
 800de48:	f1b9 0f00 	cmp.w	r9, #0
 800de4c:	dc33      	bgt.n	800deb6 <_printf_float+0x396>
 800de4e:	f04f 0800 	mov.w	r8, #0
 800de52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de56:	f104 0b1a 	add.w	fp, r4, #26
 800de5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de5c:	ebaa 0303 	sub.w	r3, sl, r3
 800de60:	eba3 0309 	sub.w	r3, r3, r9
 800de64:	4543      	cmp	r3, r8
 800de66:	f77f af79 	ble.w	800dd5c <_printf_float+0x23c>
 800de6a:	2301      	movs	r3, #1
 800de6c:	465a      	mov	r2, fp
 800de6e:	4631      	mov	r1, r6
 800de70:	4628      	mov	r0, r5
 800de72:	47b8      	blx	r7
 800de74:	3001      	adds	r0, #1
 800de76:	f43f aeae 	beq.w	800dbd6 <_printf_float+0xb6>
 800de7a:	f108 0801 	add.w	r8, r8, #1
 800de7e:	e7ec      	b.n	800de5a <_printf_float+0x33a>
 800de80:	4642      	mov	r2, r8
 800de82:	4631      	mov	r1, r6
 800de84:	4628      	mov	r0, r5
 800de86:	47b8      	blx	r7
 800de88:	3001      	adds	r0, #1
 800de8a:	d1c2      	bne.n	800de12 <_printf_float+0x2f2>
 800de8c:	e6a3      	b.n	800dbd6 <_printf_float+0xb6>
 800de8e:	2301      	movs	r3, #1
 800de90:	4631      	mov	r1, r6
 800de92:	4628      	mov	r0, r5
 800de94:	9206      	str	r2, [sp, #24]
 800de96:	47b8      	blx	r7
 800de98:	3001      	adds	r0, #1
 800de9a:	f43f ae9c 	beq.w	800dbd6 <_printf_float+0xb6>
 800de9e:	9a06      	ldr	r2, [sp, #24]
 800dea0:	f10b 0b01 	add.w	fp, fp, #1
 800dea4:	e7bb      	b.n	800de1e <_printf_float+0x2fe>
 800dea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deaa:	4631      	mov	r1, r6
 800deac:	4628      	mov	r0, r5
 800deae:	47b8      	blx	r7
 800deb0:	3001      	adds	r0, #1
 800deb2:	d1c0      	bne.n	800de36 <_printf_float+0x316>
 800deb4:	e68f      	b.n	800dbd6 <_printf_float+0xb6>
 800deb6:	9a06      	ldr	r2, [sp, #24]
 800deb8:	464b      	mov	r3, r9
 800deba:	4442      	add	r2, r8
 800debc:	4631      	mov	r1, r6
 800debe:	4628      	mov	r0, r5
 800dec0:	47b8      	blx	r7
 800dec2:	3001      	adds	r0, #1
 800dec4:	d1c3      	bne.n	800de4e <_printf_float+0x32e>
 800dec6:	e686      	b.n	800dbd6 <_printf_float+0xb6>
 800dec8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800decc:	f1ba 0f01 	cmp.w	sl, #1
 800ded0:	dc01      	bgt.n	800ded6 <_printf_float+0x3b6>
 800ded2:	07db      	lsls	r3, r3, #31
 800ded4:	d536      	bpl.n	800df44 <_printf_float+0x424>
 800ded6:	2301      	movs	r3, #1
 800ded8:	4642      	mov	r2, r8
 800deda:	4631      	mov	r1, r6
 800dedc:	4628      	mov	r0, r5
 800dede:	47b8      	blx	r7
 800dee0:	3001      	adds	r0, #1
 800dee2:	f43f ae78 	beq.w	800dbd6 <_printf_float+0xb6>
 800dee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deea:	4631      	mov	r1, r6
 800deec:	4628      	mov	r0, r5
 800deee:	47b8      	blx	r7
 800def0:	3001      	adds	r0, #1
 800def2:	f43f ae70 	beq.w	800dbd6 <_printf_float+0xb6>
 800def6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800defa:	2200      	movs	r2, #0
 800defc:	2300      	movs	r3, #0
 800defe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df02:	f7f2 fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 800df06:	b9c0      	cbnz	r0, 800df3a <_printf_float+0x41a>
 800df08:	4653      	mov	r3, sl
 800df0a:	f108 0201 	add.w	r2, r8, #1
 800df0e:	4631      	mov	r1, r6
 800df10:	4628      	mov	r0, r5
 800df12:	47b8      	blx	r7
 800df14:	3001      	adds	r0, #1
 800df16:	d10c      	bne.n	800df32 <_printf_float+0x412>
 800df18:	e65d      	b.n	800dbd6 <_printf_float+0xb6>
 800df1a:	2301      	movs	r3, #1
 800df1c:	465a      	mov	r2, fp
 800df1e:	4631      	mov	r1, r6
 800df20:	4628      	mov	r0, r5
 800df22:	47b8      	blx	r7
 800df24:	3001      	adds	r0, #1
 800df26:	f43f ae56 	beq.w	800dbd6 <_printf_float+0xb6>
 800df2a:	f108 0801 	add.w	r8, r8, #1
 800df2e:	45d0      	cmp	r8, sl
 800df30:	dbf3      	blt.n	800df1a <_printf_float+0x3fa>
 800df32:	464b      	mov	r3, r9
 800df34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800df38:	e6df      	b.n	800dcfa <_printf_float+0x1da>
 800df3a:	f04f 0800 	mov.w	r8, #0
 800df3e:	f104 0b1a 	add.w	fp, r4, #26
 800df42:	e7f4      	b.n	800df2e <_printf_float+0x40e>
 800df44:	2301      	movs	r3, #1
 800df46:	4642      	mov	r2, r8
 800df48:	e7e1      	b.n	800df0e <_printf_float+0x3ee>
 800df4a:	2301      	movs	r3, #1
 800df4c:	464a      	mov	r2, r9
 800df4e:	4631      	mov	r1, r6
 800df50:	4628      	mov	r0, r5
 800df52:	47b8      	blx	r7
 800df54:	3001      	adds	r0, #1
 800df56:	f43f ae3e 	beq.w	800dbd6 <_printf_float+0xb6>
 800df5a:	f108 0801 	add.w	r8, r8, #1
 800df5e:	68e3      	ldr	r3, [r4, #12]
 800df60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df62:	1a5b      	subs	r3, r3, r1
 800df64:	4543      	cmp	r3, r8
 800df66:	dcf0      	bgt.n	800df4a <_printf_float+0x42a>
 800df68:	e6fc      	b.n	800dd64 <_printf_float+0x244>
 800df6a:	f04f 0800 	mov.w	r8, #0
 800df6e:	f104 0919 	add.w	r9, r4, #25
 800df72:	e7f4      	b.n	800df5e <_printf_float+0x43e>

0800df74 <_printf_common>:
 800df74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df78:	4616      	mov	r6, r2
 800df7a:	4698      	mov	r8, r3
 800df7c:	688a      	ldr	r2, [r1, #8]
 800df7e:	690b      	ldr	r3, [r1, #16]
 800df80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df84:	4293      	cmp	r3, r2
 800df86:	bfb8      	it	lt
 800df88:	4613      	movlt	r3, r2
 800df8a:	6033      	str	r3, [r6, #0]
 800df8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df90:	4607      	mov	r7, r0
 800df92:	460c      	mov	r4, r1
 800df94:	b10a      	cbz	r2, 800df9a <_printf_common+0x26>
 800df96:	3301      	adds	r3, #1
 800df98:	6033      	str	r3, [r6, #0]
 800df9a:	6823      	ldr	r3, [r4, #0]
 800df9c:	0699      	lsls	r1, r3, #26
 800df9e:	bf42      	ittt	mi
 800dfa0:	6833      	ldrmi	r3, [r6, #0]
 800dfa2:	3302      	addmi	r3, #2
 800dfa4:	6033      	strmi	r3, [r6, #0]
 800dfa6:	6825      	ldr	r5, [r4, #0]
 800dfa8:	f015 0506 	ands.w	r5, r5, #6
 800dfac:	d106      	bne.n	800dfbc <_printf_common+0x48>
 800dfae:	f104 0a19 	add.w	sl, r4, #25
 800dfb2:	68e3      	ldr	r3, [r4, #12]
 800dfb4:	6832      	ldr	r2, [r6, #0]
 800dfb6:	1a9b      	subs	r3, r3, r2
 800dfb8:	42ab      	cmp	r3, r5
 800dfba:	dc26      	bgt.n	800e00a <_printf_common+0x96>
 800dfbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dfc0:	6822      	ldr	r2, [r4, #0]
 800dfc2:	3b00      	subs	r3, #0
 800dfc4:	bf18      	it	ne
 800dfc6:	2301      	movne	r3, #1
 800dfc8:	0692      	lsls	r2, r2, #26
 800dfca:	d42b      	bmi.n	800e024 <_printf_common+0xb0>
 800dfcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dfd0:	4641      	mov	r1, r8
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	47c8      	blx	r9
 800dfd6:	3001      	adds	r0, #1
 800dfd8:	d01e      	beq.n	800e018 <_printf_common+0xa4>
 800dfda:	6823      	ldr	r3, [r4, #0]
 800dfdc:	6922      	ldr	r2, [r4, #16]
 800dfde:	f003 0306 	and.w	r3, r3, #6
 800dfe2:	2b04      	cmp	r3, #4
 800dfe4:	bf02      	ittt	eq
 800dfe6:	68e5      	ldreq	r5, [r4, #12]
 800dfe8:	6833      	ldreq	r3, [r6, #0]
 800dfea:	1aed      	subeq	r5, r5, r3
 800dfec:	68a3      	ldr	r3, [r4, #8]
 800dfee:	bf0c      	ite	eq
 800dff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dff4:	2500      	movne	r5, #0
 800dff6:	4293      	cmp	r3, r2
 800dff8:	bfc4      	itt	gt
 800dffa:	1a9b      	subgt	r3, r3, r2
 800dffc:	18ed      	addgt	r5, r5, r3
 800dffe:	2600      	movs	r6, #0
 800e000:	341a      	adds	r4, #26
 800e002:	42b5      	cmp	r5, r6
 800e004:	d11a      	bne.n	800e03c <_printf_common+0xc8>
 800e006:	2000      	movs	r0, #0
 800e008:	e008      	b.n	800e01c <_printf_common+0xa8>
 800e00a:	2301      	movs	r3, #1
 800e00c:	4652      	mov	r2, sl
 800e00e:	4641      	mov	r1, r8
 800e010:	4638      	mov	r0, r7
 800e012:	47c8      	blx	r9
 800e014:	3001      	adds	r0, #1
 800e016:	d103      	bne.n	800e020 <_printf_common+0xac>
 800e018:	f04f 30ff 	mov.w	r0, #4294967295
 800e01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e020:	3501      	adds	r5, #1
 800e022:	e7c6      	b.n	800dfb2 <_printf_common+0x3e>
 800e024:	18e1      	adds	r1, r4, r3
 800e026:	1c5a      	adds	r2, r3, #1
 800e028:	2030      	movs	r0, #48	@ 0x30
 800e02a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e02e:	4422      	add	r2, r4
 800e030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e034:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e038:	3302      	adds	r3, #2
 800e03a:	e7c7      	b.n	800dfcc <_printf_common+0x58>
 800e03c:	2301      	movs	r3, #1
 800e03e:	4622      	mov	r2, r4
 800e040:	4641      	mov	r1, r8
 800e042:	4638      	mov	r0, r7
 800e044:	47c8      	blx	r9
 800e046:	3001      	adds	r0, #1
 800e048:	d0e6      	beq.n	800e018 <_printf_common+0xa4>
 800e04a:	3601      	adds	r6, #1
 800e04c:	e7d9      	b.n	800e002 <_printf_common+0x8e>
	...

0800e050 <_printf_i>:
 800e050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e054:	7e0f      	ldrb	r7, [r1, #24]
 800e056:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e058:	2f78      	cmp	r7, #120	@ 0x78
 800e05a:	4691      	mov	r9, r2
 800e05c:	4680      	mov	r8, r0
 800e05e:	460c      	mov	r4, r1
 800e060:	469a      	mov	sl, r3
 800e062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e066:	d807      	bhi.n	800e078 <_printf_i+0x28>
 800e068:	2f62      	cmp	r7, #98	@ 0x62
 800e06a:	d80a      	bhi.n	800e082 <_printf_i+0x32>
 800e06c:	2f00      	cmp	r7, #0
 800e06e:	f000 80d1 	beq.w	800e214 <_printf_i+0x1c4>
 800e072:	2f58      	cmp	r7, #88	@ 0x58
 800e074:	f000 80b8 	beq.w	800e1e8 <_printf_i+0x198>
 800e078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e07c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e080:	e03a      	b.n	800e0f8 <_printf_i+0xa8>
 800e082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e086:	2b15      	cmp	r3, #21
 800e088:	d8f6      	bhi.n	800e078 <_printf_i+0x28>
 800e08a:	a101      	add	r1, pc, #4	@ (adr r1, 800e090 <_printf_i+0x40>)
 800e08c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e090:	0800e0e9 	.word	0x0800e0e9
 800e094:	0800e0fd 	.word	0x0800e0fd
 800e098:	0800e079 	.word	0x0800e079
 800e09c:	0800e079 	.word	0x0800e079
 800e0a0:	0800e079 	.word	0x0800e079
 800e0a4:	0800e079 	.word	0x0800e079
 800e0a8:	0800e0fd 	.word	0x0800e0fd
 800e0ac:	0800e079 	.word	0x0800e079
 800e0b0:	0800e079 	.word	0x0800e079
 800e0b4:	0800e079 	.word	0x0800e079
 800e0b8:	0800e079 	.word	0x0800e079
 800e0bc:	0800e1fb 	.word	0x0800e1fb
 800e0c0:	0800e127 	.word	0x0800e127
 800e0c4:	0800e1b5 	.word	0x0800e1b5
 800e0c8:	0800e079 	.word	0x0800e079
 800e0cc:	0800e079 	.word	0x0800e079
 800e0d0:	0800e21d 	.word	0x0800e21d
 800e0d4:	0800e079 	.word	0x0800e079
 800e0d8:	0800e127 	.word	0x0800e127
 800e0dc:	0800e079 	.word	0x0800e079
 800e0e0:	0800e079 	.word	0x0800e079
 800e0e4:	0800e1bd 	.word	0x0800e1bd
 800e0e8:	6833      	ldr	r3, [r6, #0]
 800e0ea:	1d1a      	adds	r2, r3, #4
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	6032      	str	r2, [r6, #0]
 800e0f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e09c      	b.n	800e236 <_printf_i+0x1e6>
 800e0fc:	6833      	ldr	r3, [r6, #0]
 800e0fe:	6820      	ldr	r0, [r4, #0]
 800e100:	1d19      	adds	r1, r3, #4
 800e102:	6031      	str	r1, [r6, #0]
 800e104:	0606      	lsls	r6, r0, #24
 800e106:	d501      	bpl.n	800e10c <_printf_i+0xbc>
 800e108:	681d      	ldr	r5, [r3, #0]
 800e10a:	e003      	b.n	800e114 <_printf_i+0xc4>
 800e10c:	0645      	lsls	r5, r0, #25
 800e10e:	d5fb      	bpl.n	800e108 <_printf_i+0xb8>
 800e110:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e114:	2d00      	cmp	r5, #0
 800e116:	da03      	bge.n	800e120 <_printf_i+0xd0>
 800e118:	232d      	movs	r3, #45	@ 0x2d
 800e11a:	426d      	negs	r5, r5
 800e11c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e120:	4858      	ldr	r0, [pc, #352]	@ (800e284 <_printf_i+0x234>)
 800e122:	230a      	movs	r3, #10
 800e124:	e011      	b.n	800e14a <_printf_i+0xfa>
 800e126:	6821      	ldr	r1, [r4, #0]
 800e128:	6833      	ldr	r3, [r6, #0]
 800e12a:	0608      	lsls	r0, r1, #24
 800e12c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e130:	d402      	bmi.n	800e138 <_printf_i+0xe8>
 800e132:	0649      	lsls	r1, r1, #25
 800e134:	bf48      	it	mi
 800e136:	b2ad      	uxthmi	r5, r5
 800e138:	2f6f      	cmp	r7, #111	@ 0x6f
 800e13a:	4852      	ldr	r0, [pc, #328]	@ (800e284 <_printf_i+0x234>)
 800e13c:	6033      	str	r3, [r6, #0]
 800e13e:	bf14      	ite	ne
 800e140:	230a      	movne	r3, #10
 800e142:	2308      	moveq	r3, #8
 800e144:	2100      	movs	r1, #0
 800e146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e14a:	6866      	ldr	r6, [r4, #4]
 800e14c:	60a6      	str	r6, [r4, #8]
 800e14e:	2e00      	cmp	r6, #0
 800e150:	db05      	blt.n	800e15e <_printf_i+0x10e>
 800e152:	6821      	ldr	r1, [r4, #0]
 800e154:	432e      	orrs	r6, r5
 800e156:	f021 0104 	bic.w	r1, r1, #4
 800e15a:	6021      	str	r1, [r4, #0]
 800e15c:	d04b      	beq.n	800e1f6 <_printf_i+0x1a6>
 800e15e:	4616      	mov	r6, r2
 800e160:	fbb5 f1f3 	udiv	r1, r5, r3
 800e164:	fb03 5711 	mls	r7, r3, r1, r5
 800e168:	5dc7      	ldrb	r7, [r0, r7]
 800e16a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e16e:	462f      	mov	r7, r5
 800e170:	42bb      	cmp	r3, r7
 800e172:	460d      	mov	r5, r1
 800e174:	d9f4      	bls.n	800e160 <_printf_i+0x110>
 800e176:	2b08      	cmp	r3, #8
 800e178:	d10b      	bne.n	800e192 <_printf_i+0x142>
 800e17a:	6823      	ldr	r3, [r4, #0]
 800e17c:	07df      	lsls	r7, r3, #31
 800e17e:	d508      	bpl.n	800e192 <_printf_i+0x142>
 800e180:	6923      	ldr	r3, [r4, #16]
 800e182:	6861      	ldr	r1, [r4, #4]
 800e184:	4299      	cmp	r1, r3
 800e186:	bfde      	ittt	le
 800e188:	2330      	movle	r3, #48	@ 0x30
 800e18a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e18e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e192:	1b92      	subs	r2, r2, r6
 800e194:	6122      	str	r2, [r4, #16]
 800e196:	f8cd a000 	str.w	sl, [sp]
 800e19a:	464b      	mov	r3, r9
 800e19c:	aa03      	add	r2, sp, #12
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4640      	mov	r0, r8
 800e1a2:	f7ff fee7 	bl	800df74 <_printf_common>
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	d14a      	bne.n	800e240 <_printf_i+0x1f0>
 800e1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ae:	b004      	add	sp, #16
 800e1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	f043 0320 	orr.w	r3, r3, #32
 800e1ba:	6023      	str	r3, [r4, #0]
 800e1bc:	4832      	ldr	r0, [pc, #200]	@ (800e288 <_printf_i+0x238>)
 800e1be:	2778      	movs	r7, #120	@ 0x78
 800e1c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	6831      	ldr	r1, [r6, #0]
 800e1c8:	061f      	lsls	r7, r3, #24
 800e1ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800e1ce:	d402      	bmi.n	800e1d6 <_printf_i+0x186>
 800e1d0:	065f      	lsls	r7, r3, #25
 800e1d2:	bf48      	it	mi
 800e1d4:	b2ad      	uxthmi	r5, r5
 800e1d6:	6031      	str	r1, [r6, #0]
 800e1d8:	07d9      	lsls	r1, r3, #31
 800e1da:	bf44      	itt	mi
 800e1dc:	f043 0320 	orrmi.w	r3, r3, #32
 800e1e0:	6023      	strmi	r3, [r4, #0]
 800e1e2:	b11d      	cbz	r5, 800e1ec <_printf_i+0x19c>
 800e1e4:	2310      	movs	r3, #16
 800e1e6:	e7ad      	b.n	800e144 <_printf_i+0xf4>
 800e1e8:	4826      	ldr	r0, [pc, #152]	@ (800e284 <_printf_i+0x234>)
 800e1ea:	e7e9      	b.n	800e1c0 <_printf_i+0x170>
 800e1ec:	6823      	ldr	r3, [r4, #0]
 800e1ee:	f023 0320 	bic.w	r3, r3, #32
 800e1f2:	6023      	str	r3, [r4, #0]
 800e1f4:	e7f6      	b.n	800e1e4 <_printf_i+0x194>
 800e1f6:	4616      	mov	r6, r2
 800e1f8:	e7bd      	b.n	800e176 <_printf_i+0x126>
 800e1fa:	6833      	ldr	r3, [r6, #0]
 800e1fc:	6825      	ldr	r5, [r4, #0]
 800e1fe:	6961      	ldr	r1, [r4, #20]
 800e200:	1d18      	adds	r0, r3, #4
 800e202:	6030      	str	r0, [r6, #0]
 800e204:	062e      	lsls	r6, r5, #24
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	d501      	bpl.n	800e20e <_printf_i+0x1be>
 800e20a:	6019      	str	r1, [r3, #0]
 800e20c:	e002      	b.n	800e214 <_printf_i+0x1c4>
 800e20e:	0668      	lsls	r0, r5, #25
 800e210:	d5fb      	bpl.n	800e20a <_printf_i+0x1ba>
 800e212:	8019      	strh	r1, [r3, #0]
 800e214:	2300      	movs	r3, #0
 800e216:	6123      	str	r3, [r4, #16]
 800e218:	4616      	mov	r6, r2
 800e21a:	e7bc      	b.n	800e196 <_printf_i+0x146>
 800e21c:	6833      	ldr	r3, [r6, #0]
 800e21e:	1d1a      	adds	r2, r3, #4
 800e220:	6032      	str	r2, [r6, #0]
 800e222:	681e      	ldr	r6, [r3, #0]
 800e224:	6862      	ldr	r2, [r4, #4]
 800e226:	2100      	movs	r1, #0
 800e228:	4630      	mov	r0, r6
 800e22a:	f7f1 ffd1 	bl	80001d0 <memchr>
 800e22e:	b108      	cbz	r0, 800e234 <_printf_i+0x1e4>
 800e230:	1b80      	subs	r0, r0, r6
 800e232:	6060      	str	r0, [r4, #4]
 800e234:	6863      	ldr	r3, [r4, #4]
 800e236:	6123      	str	r3, [r4, #16]
 800e238:	2300      	movs	r3, #0
 800e23a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e23e:	e7aa      	b.n	800e196 <_printf_i+0x146>
 800e240:	6923      	ldr	r3, [r4, #16]
 800e242:	4632      	mov	r2, r6
 800e244:	4649      	mov	r1, r9
 800e246:	4640      	mov	r0, r8
 800e248:	47d0      	blx	sl
 800e24a:	3001      	adds	r0, #1
 800e24c:	d0ad      	beq.n	800e1aa <_printf_i+0x15a>
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	079b      	lsls	r3, r3, #30
 800e252:	d413      	bmi.n	800e27c <_printf_i+0x22c>
 800e254:	68e0      	ldr	r0, [r4, #12]
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	4298      	cmp	r0, r3
 800e25a:	bfb8      	it	lt
 800e25c:	4618      	movlt	r0, r3
 800e25e:	e7a6      	b.n	800e1ae <_printf_i+0x15e>
 800e260:	2301      	movs	r3, #1
 800e262:	4632      	mov	r2, r6
 800e264:	4649      	mov	r1, r9
 800e266:	4640      	mov	r0, r8
 800e268:	47d0      	blx	sl
 800e26a:	3001      	adds	r0, #1
 800e26c:	d09d      	beq.n	800e1aa <_printf_i+0x15a>
 800e26e:	3501      	adds	r5, #1
 800e270:	68e3      	ldr	r3, [r4, #12]
 800e272:	9903      	ldr	r1, [sp, #12]
 800e274:	1a5b      	subs	r3, r3, r1
 800e276:	42ab      	cmp	r3, r5
 800e278:	dcf2      	bgt.n	800e260 <_printf_i+0x210>
 800e27a:	e7eb      	b.n	800e254 <_printf_i+0x204>
 800e27c:	2500      	movs	r5, #0
 800e27e:	f104 0619 	add.w	r6, r4, #25
 800e282:	e7f5      	b.n	800e270 <_printf_i+0x220>
 800e284:	08011be2 	.word	0x08011be2
 800e288:	08011bf3 	.word	0x08011bf3

0800e28c <std>:
 800e28c:	2300      	movs	r3, #0
 800e28e:	b510      	push	{r4, lr}
 800e290:	4604      	mov	r4, r0
 800e292:	e9c0 3300 	strd	r3, r3, [r0]
 800e296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e29a:	6083      	str	r3, [r0, #8]
 800e29c:	8181      	strh	r1, [r0, #12]
 800e29e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e2a0:	81c2      	strh	r2, [r0, #14]
 800e2a2:	6183      	str	r3, [r0, #24]
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	2208      	movs	r2, #8
 800e2a8:	305c      	adds	r0, #92	@ 0x5c
 800e2aa:	f000 fa4f 	bl	800e74c <memset>
 800e2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e4 <std+0x58>)
 800e2b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e8 <std+0x5c>)
 800e2b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ec <std+0x60>)
 800e2b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f0 <std+0x64>)
 800e2bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800e2be:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f4 <std+0x68>)
 800e2c0:	6224      	str	r4, [r4, #32]
 800e2c2:	429c      	cmp	r4, r3
 800e2c4:	d006      	beq.n	800e2d4 <std+0x48>
 800e2c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e2ca:	4294      	cmp	r4, r2
 800e2cc:	d002      	beq.n	800e2d4 <std+0x48>
 800e2ce:	33d0      	adds	r3, #208	@ 0xd0
 800e2d0:	429c      	cmp	r4, r3
 800e2d2:	d105      	bne.n	800e2e0 <std+0x54>
 800e2d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2dc:	f000 bab2 	b.w	800e844 <__retarget_lock_init_recursive>
 800e2e0:	bd10      	pop	{r4, pc}
 800e2e2:	bf00      	nop
 800e2e4:	0800e57d 	.word	0x0800e57d
 800e2e8:	0800e59f 	.word	0x0800e59f
 800e2ec:	0800e5d7 	.word	0x0800e5d7
 800e2f0:	0800e5fb 	.word	0x0800e5fb
 800e2f4:	200017ec 	.word	0x200017ec

0800e2f8 <stdio_exit_handler>:
 800e2f8:	4a02      	ldr	r2, [pc, #8]	@ (800e304 <stdio_exit_handler+0xc>)
 800e2fa:	4903      	ldr	r1, [pc, #12]	@ (800e308 <stdio_exit_handler+0x10>)
 800e2fc:	4803      	ldr	r0, [pc, #12]	@ (800e30c <stdio_exit_handler+0x14>)
 800e2fe:	f000 b869 	b.w	800e3d4 <_fwalk_sglue>
 800e302:	bf00      	nop
 800e304:	20000134 	.word	0x20000134
 800e308:	08010449 	.word	0x08010449
 800e30c:	20000144 	.word	0x20000144

0800e310 <cleanup_stdio>:
 800e310:	6841      	ldr	r1, [r0, #4]
 800e312:	4b0c      	ldr	r3, [pc, #48]	@ (800e344 <cleanup_stdio+0x34>)
 800e314:	4299      	cmp	r1, r3
 800e316:	b510      	push	{r4, lr}
 800e318:	4604      	mov	r4, r0
 800e31a:	d001      	beq.n	800e320 <cleanup_stdio+0x10>
 800e31c:	f002 f894 	bl	8010448 <_fflush_r>
 800e320:	68a1      	ldr	r1, [r4, #8]
 800e322:	4b09      	ldr	r3, [pc, #36]	@ (800e348 <cleanup_stdio+0x38>)
 800e324:	4299      	cmp	r1, r3
 800e326:	d002      	beq.n	800e32e <cleanup_stdio+0x1e>
 800e328:	4620      	mov	r0, r4
 800e32a:	f002 f88d 	bl	8010448 <_fflush_r>
 800e32e:	68e1      	ldr	r1, [r4, #12]
 800e330:	4b06      	ldr	r3, [pc, #24]	@ (800e34c <cleanup_stdio+0x3c>)
 800e332:	4299      	cmp	r1, r3
 800e334:	d004      	beq.n	800e340 <cleanup_stdio+0x30>
 800e336:	4620      	mov	r0, r4
 800e338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e33c:	f002 b884 	b.w	8010448 <_fflush_r>
 800e340:	bd10      	pop	{r4, pc}
 800e342:	bf00      	nop
 800e344:	200017ec 	.word	0x200017ec
 800e348:	20001854 	.word	0x20001854
 800e34c:	200018bc 	.word	0x200018bc

0800e350 <global_stdio_init.part.0>:
 800e350:	b510      	push	{r4, lr}
 800e352:	4b0b      	ldr	r3, [pc, #44]	@ (800e380 <global_stdio_init.part.0+0x30>)
 800e354:	4c0b      	ldr	r4, [pc, #44]	@ (800e384 <global_stdio_init.part.0+0x34>)
 800e356:	4a0c      	ldr	r2, [pc, #48]	@ (800e388 <global_stdio_init.part.0+0x38>)
 800e358:	601a      	str	r2, [r3, #0]
 800e35a:	4620      	mov	r0, r4
 800e35c:	2200      	movs	r2, #0
 800e35e:	2104      	movs	r1, #4
 800e360:	f7ff ff94 	bl	800e28c <std>
 800e364:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e368:	2201      	movs	r2, #1
 800e36a:	2109      	movs	r1, #9
 800e36c:	f7ff ff8e 	bl	800e28c <std>
 800e370:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e374:	2202      	movs	r2, #2
 800e376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e37a:	2112      	movs	r1, #18
 800e37c:	f7ff bf86 	b.w	800e28c <std>
 800e380:	20001924 	.word	0x20001924
 800e384:	200017ec 	.word	0x200017ec
 800e388:	0800e2f9 	.word	0x0800e2f9

0800e38c <__sfp_lock_acquire>:
 800e38c:	4801      	ldr	r0, [pc, #4]	@ (800e394 <__sfp_lock_acquire+0x8>)
 800e38e:	f000 ba5a 	b.w	800e846 <__retarget_lock_acquire_recursive>
 800e392:	bf00      	nop
 800e394:	2000192d 	.word	0x2000192d

0800e398 <__sfp_lock_release>:
 800e398:	4801      	ldr	r0, [pc, #4]	@ (800e3a0 <__sfp_lock_release+0x8>)
 800e39a:	f000 ba55 	b.w	800e848 <__retarget_lock_release_recursive>
 800e39e:	bf00      	nop
 800e3a0:	2000192d 	.word	0x2000192d

0800e3a4 <__sinit>:
 800e3a4:	b510      	push	{r4, lr}
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	f7ff fff0 	bl	800e38c <__sfp_lock_acquire>
 800e3ac:	6a23      	ldr	r3, [r4, #32]
 800e3ae:	b11b      	cbz	r3, 800e3b8 <__sinit+0x14>
 800e3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3b4:	f7ff bff0 	b.w	800e398 <__sfp_lock_release>
 800e3b8:	4b04      	ldr	r3, [pc, #16]	@ (800e3cc <__sinit+0x28>)
 800e3ba:	6223      	str	r3, [r4, #32]
 800e3bc:	4b04      	ldr	r3, [pc, #16]	@ (800e3d0 <__sinit+0x2c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1f5      	bne.n	800e3b0 <__sinit+0xc>
 800e3c4:	f7ff ffc4 	bl	800e350 <global_stdio_init.part.0>
 800e3c8:	e7f2      	b.n	800e3b0 <__sinit+0xc>
 800e3ca:	bf00      	nop
 800e3cc:	0800e311 	.word	0x0800e311
 800e3d0:	20001924 	.word	0x20001924

0800e3d4 <_fwalk_sglue>:
 800e3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3d8:	4607      	mov	r7, r0
 800e3da:	4688      	mov	r8, r1
 800e3dc:	4614      	mov	r4, r2
 800e3de:	2600      	movs	r6, #0
 800e3e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3e4:	f1b9 0901 	subs.w	r9, r9, #1
 800e3e8:	d505      	bpl.n	800e3f6 <_fwalk_sglue+0x22>
 800e3ea:	6824      	ldr	r4, [r4, #0]
 800e3ec:	2c00      	cmp	r4, #0
 800e3ee:	d1f7      	bne.n	800e3e0 <_fwalk_sglue+0xc>
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3f6:	89ab      	ldrh	r3, [r5, #12]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d907      	bls.n	800e40c <_fwalk_sglue+0x38>
 800e3fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e400:	3301      	adds	r3, #1
 800e402:	d003      	beq.n	800e40c <_fwalk_sglue+0x38>
 800e404:	4629      	mov	r1, r5
 800e406:	4638      	mov	r0, r7
 800e408:	47c0      	blx	r8
 800e40a:	4306      	orrs	r6, r0
 800e40c:	3568      	adds	r5, #104	@ 0x68
 800e40e:	e7e9      	b.n	800e3e4 <_fwalk_sglue+0x10>

0800e410 <_puts_r>:
 800e410:	6a03      	ldr	r3, [r0, #32]
 800e412:	b570      	push	{r4, r5, r6, lr}
 800e414:	6884      	ldr	r4, [r0, #8]
 800e416:	4605      	mov	r5, r0
 800e418:	460e      	mov	r6, r1
 800e41a:	b90b      	cbnz	r3, 800e420 <_puts_r+0x10>
 800e41c:	f7ff ffc2 	bl	800e3a4 <__sinit>
 800e420:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e422:	07db      	lsls	r3, r3, #31
 800e424:	d405      	bmi.n	800e432 <_puts_r+0x22>
 800e426:	89a3      	ldrh	r3, [r4, #12]
 800e428:	0598      	lsls	r0, r3, #22
 800e42a:	d402      	bmi.n	800e432 <_puts_r+0x22>
 800e42c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e42e:	f000 fa0a 	bl	800e846 <__retarget_lock_acquire_recursive>
 800e432:	89a3      	ldrh	r3, [r4, #12]
 800e434:	0719      	lsls	r1, r3, #28
 800e436:	d502      	bpl.n	800e43e <_puts_r+0x2e>
 800e438:	6923      	ldr	r3, [r4, #16]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d135      	bne.n	800e4aa <_puts_r+0x9a>
 800e43e:	4621      	mov	r1, r4
 800e440:	4628      	mov	r0, r5
 800e442:	f000 f91d 	bl	800e680 <__swsetup_r>
 800e446:	b380      	cbz	r0, 800e4aa <_puts_r+0x9a>
 800e448:	f04f 35ff 	mov.w	r5, #4294967295
 800e44c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e44e:	07da      	lsls	r2, r3, #31
 800e450:	d405      	bmi.n	800e45e <_puts_r+0x4e>
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	059b      	lsls	r3, r3, #22
 800e456:	d402      	bmi.n	800e45e <_puts_r+0x4e>
 800e458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e45a:	f000 f9f5 	bl	800e848 <__retarget_lock_release_recursive>
 800e45e:	4628      	mov	r0, r5
 800e460:	bd70      	pop	{r4, r5, r6, pc}
 800e462:	2b00      	cmp	r3, #0
 800e464:	da04      	bge.n	800e470 <_puts_r+0x60>
 800e466:	69a2      	ldr	r2, [r4, #24]
 800e468:	429a      	cmp	r2, r3
 800e46a:	dc17      	bgt.n	800e49c <_puts_r+0x8c>
 800e46c:	290a      	cmp	r1, #10
 800e46e:	d015      	beq.n	800e49c <_puts_r+0x8c>
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	1c5a      	adds	r2, r3, #1
 800e474:	6022      	str	r2, [r4, #0]
 800e476:	7019      	strb	r1, [r3, #0]
 800e478:	68a3      	ldr	r3, [r4, #8]
 800e47a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e47e:	3b01      	subs	r3, #1
 800e480:	60a3      	str	r3, [r4, #8]
 800e482:	2900      	cmp	r1, #0
 800e484:	d1ed      	bne.n	800e462 <_puts_r+0x52>
 800e486:	2b00      	cmp	r3, #0
 800e488:	da11      	bge.n	800e4ae <_puts_r+0x9e>
 800e48a:	4622      	mov	r2, r4
 800e48c:	210a      	movs	r1, #10
 800e48e:	4628      	mov	r0, r5
 800e490:	f000 f8b7 	bl	800e602 <__swbuf_r>
 800e494:	3001      	adds	r0, #1
 800e496:	d0d7      	beq.n	800e448 <_puts_r+0x38>
 800e498:	250a      	movs	r5, #10
 800e49a:	e7d7      	b.n	800e44c <_puts_r+0x3c>
 800e49c:	4622      	mov	r2, r4
 800e49e:	4628      	mov	r0, r5
 800e4a0:	f000 f8af 	bl	800e602 <__swbuf_r>
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	d1e7      	bne.n	800e478 <_puts_r+0x68>
 800e4a8:	e7ce      	b.n	800e448 <_puts_r+0x38>
 800e4aa:	3e01      	subs	r6, #1
 800e4ac:	e7e4      	b.n	800e478 <_puts_r+0x68>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	6022      	str	r2, [r4, #0]
 800e4b4:	220a      	movs	r2, #10
 800e4b6:	701a      	strb	r2, [r3, #0]
 800e4b8:	e7ee      	b.n	800e498 <_puts_r+0x88>
	...

0800e4bc <puts>:
 800e4bc:	4b02      	ldr	r3, [pc, #8]	@ (800e4c8 <puts+0xc>)
 800e4be:	4601      	mov	r1, r0
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f7ff bfa5 	b.w	800e410 <_puts_r>
 800e4c6:	bf00      	nop
 800e4c8:	20000140 	.word	0x20000140

0800e4cc <sniprintf>:
 800e4cc:	b40c      	push	{r2, r3}
 800e4ce:	b530      	push	{r4, r5, lr}
 800e4d0:	4b18      	ldr	r3, [pc, #96]	@ (800e534 <sniprintf+0x68>)
 800e4d2:	1e0c      	subs	r4, r1, #0
 800e4d4:	681d      	ldr	r5, [r3, #0]
 800e4d6:	b09d      	sub	sp, #116	@ 0x74
 800e4d8:	da08      	bge.n	800e4ec <sniprintf+0x20>
 800e4da:	238b      	movs	r3, #139	@ 0x8b
 800e4dc:	602b      	str	r3, [r5, #0]
 800e4de:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e2:	b01d      	add	sp, #116	@ 0x74
 800e4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4e8:	b002      	add	sp, #8
 800e4ea:	4770      	bx	lr
 800e4ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e4f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e4f4:	f04f 0300 	mov.w	r3, #0
 800e4f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e4fa:	bf14      	ite	ne
 800e4fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e500:	4623      	moveq	r3, r4
 800e502:	9304      	str	r3, [sp, #16]
 800e504:	9307      	str	r3, [sp, #28]
 800e506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e50a:	9002      	str	r0, [sp, #8]
 800e50c:	9006      	str	r0, [sp, #24]
 800e50e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e512:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e514:	ab21      	add	r3, sp, #132	@ 0x84
 800e516:	a902      	add	r1, sp, #8
 800e518:	4628      	mov	r0, r5
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	f001 fcd2 	bl	800fec4 <_svfiprintf_r>
 800e520:	1c43      	adds	r3, r0, #1
 800e522:	bfbc      	itt	lt
 800e524:	238b      	movlt	r3, #139	@ 0x8b
 800e526:	602b      	strlt	r3, [r5, #0]
 800e528:	2c00      	cmp	r4, #0
 800e52a:	d0da      	beq.n	800e4e2 <sniprintf+0x16>
 800e52c:	9b02      	ldr	r3, [sp, #8]
 800e52e:	2200      	movs	r2, #0
 800e530:	701a      	strb	r2, [r3, #0]
 800e532:	e7d6      	b.n	800e4e2 <sniprintf+0x16>
 800e534:	20000140 	.word	0x20000140

0800e538 <siprintf>:
 800e538:	b40e      	push	{r1, r2, r3}
 800e53a:	b510      	push	{r4, lr}
 800e53c:	b09d      	sub	sp, #116	@ 0x74
 800e53e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e540:	9002      	str	r0, [sp, #8]
 800e542:	9006      	str	r0, [sp, #24]
 800e544:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e548:	480a      	ldr	r0, [pc, #40]	@ (800e574 <siprintf+0x3c>)
 800e54a:	9107      	str	r1, [sp, #28]
 800e54c:	9104      	str	r1, [sp, #16]
 800e54e:	490a      	ldr	r1, [pc, #40]	@ (800e578 <siprintf+0x40>)
 800e550:	f853 2b04 	ldr.w	r2, [r3], #4
 800e554:	9105      	str	r1, [sp, #20]
 800e556:	2400      	movs	r4, #0
 800e558:	a902      	add	r1, sp, #8
 800e55a:	6800      	ldr	r0, [r0, #0]
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e560:	f001 fcb0 	bl	800fec4 <_svfiprintf_r>
 800e564:	9b02      	ldr	r3, [sp, #8]
 800e566:	701c      	strb	r4, [r3, #0]
 800e568:	b01d      	add	sp, #116	@ 0x74
 800e56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e56e:	b003      	add	sp, #12
 800e570:	4770      	bx	lr
 800e572:	bf00      	nop
 800e574:	20000140 	.word	0x20000140
 800e578:	ffff0208 	.word	0xffff0208

0800e57c <__sread>:
 800e57c:	b510      	push	{r4, lr}
 800e57e:	460c      	mov	r4, r1
 800e580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e584:	f000 f910 	bl	800e7a8 <_read_r>
 800e588:	2800      	cmp	r0, #0
 800e58a:	bfab      	itete	ge
 800e58c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e58e:	89a3      	ldrhlt	r3, [r4, #12]
 800e590:	181b      	addge	r3, r3, r0
 800e592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e596:	bfac      	ite	ge
 800e598:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e59a:	81a3      	strhlt	r3, [r4, #12]
 800e59c:	bd10      	pop	{r4, pc}

0800e59e <__swrite>:
 800e59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a2:	461f      	mov	r7, r3
 800e5a4:	898b      	ldrh	r3, [r1, #12]
 800e5a6:	05db      	lsls	r3, r3, #23
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	4616      	mov	r6, r2
 800e5ae:	d505      	bpl.n	800e5bc <__swrite+0x1e>
 800e5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f000 f8e4 	bl	800e784 <_lseek_r>
 800e5bc:	89a3      	ldrh	r3, [r4, #12]
 800e5be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e5c6:	81a3      	strh	r3, [r4, #12]
 800e5c8:	4632      	mov	r2, r6
 800e5ca:	463b      	mov	r3, r7
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d2:	f000 b8fb 	b.w	800e7cc <_write_r>

0800e5d6 <__sseek>:
 800e5d6:	b510      	push	{r4, lr}
 800e5d8:	460c      	mov	r4, r1
 800e5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5de:	f000 f8d1 	bl	800e784 <_lseek_r>
 800e5e2:	1c43      	adds	r3, r0, #1
 800e5e4:	89a3      	ldrh	r3, [r4, #12]
 800e5e6:	bf15      	itete	ne
 800e5e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e5ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e5ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e5f2:	81a3      	strheq	r3, [r4, #12]
 800e5f4:	bf18      	it	ne
 800e5f6:	81a3      	strhne	r3, [r4, #12]
 800e5f8:	bd10      	pop	{r4, pc}

0800e5fa <__sclose>:
 800e5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5fe:	f000 b8b1 	b.w	800e764 <_close_r>

0800e602 <__swbuf_r>:
 800e602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e604:	460e      	mov	r6, r1
 800e606:	4614      	mov	r4, r2
 800e608:	4605      	mov	r5, r0
 800e60a:	b118      	cbz	r0, 800e614 <__swbuf_r+0x12>
 800e60c:	6a03      	ldr	r3, [r0, #32]
 800e60e:	b90b      	cbnz	r3, 800e614 <__swbuf_r+0x12>
 800e610:	f7ff fec8 	bl	800e3a4 <__sinit>
 800e614:	69a3      	ldr	r3, [r4, #24]
 800e616:	60a3      	str	r3, [r4, #8]
 800e618:	89a3      	ldrh	r3, [r4, #12]
 800e61a:	071a      	lsls	r2, r3, #28
 800e61c:	d501      	bpl.n	800e622 <__swbuf_r+0x20>
 800e61e:	6923      	ldr	r3, [r4, #16]
 800e620:	b943      	cbnz	r3, 800e634 <__swbuf_r+0x32>
 800e622:	4621      	mov	r1, r4
 800e624:	4628      	mov	r0, r5
 800e626:	f000 f82b 	bl	800e680 <__swsetup_r>
 800e62a:	b118      	cbz	r0, 800e634 <__swbuf_r+0x32>
 800e62c:	f04f 37ff 	mov.w	r7, #4294967295
 800e630:	4638      	mov	r0, r7
 800e632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e634:	6823      	ldr	r3, [r4, #0]
 800e636:	6922      	ldr	r2, [r4, #16]
 800e638:	1a98      	subs	r0, r3, r2
 800e63a:	6963      	ldr	r3, [r4, #20]
 800e63c:	b2f6      	uxtb	r6, r6
 800e63e:	4283      	cmp	r3, r0
 800e640:	4637      	mov	r7, r6
 800e642:	dc05      	bgt.n	800e650 <__swbuf_r+0x4e>
 800e644:	4621      	mov	r1, r4
 800e646:	4628      	mov	r0, r5
 800e648:	f001 fefe 	bl	8010448 <_fflush_r>
 800e64c:	2800      	cmp	r0, #0
 800e64e:	d1ed      	bne.n	800e62c <__swbuf_r+0x2a>
 800e650:	68a3      	ldr	r3, [r4, #8]
 800e652:	3b01      	subs	r3, #1
 800e654:	60a3      	str	r3, [r4, #8]
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	1c5a      	adds	r2, r3, #1
 800e65a:	6022      	str	r2, [r4, #0]
 800e65c:	701e      	strb	r6, [r3, #0]
 800e65e:	6962      	ldr	r2, [r4, #20]
 800e660:	1c43      	adds	r3, r0, #1
 800e662:	429a      	cmp	r2, r3
 800e664:	d004      	beq.n	800e670 <__swbuf_r+0x6e>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	07db      	lsls	r3, r3, #31
 800e66a:	d5e1      	bpl.n	800e630 <__swbuf_r+0x2e>
 800e66c:	2e0a      	cmp	r6, #10
 800e66e:	d1df      	bne.n	800e630 <__swbuf_r+0x2e>
 800e670:	4621      	mov	r1, r4
 800e672:	4628      	mov	r0, r5
 800e674:	f001 fee8 	bl	8010448 <_fflush_r>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d0d9      	beq.n	800e630 <__swbuf_r+0x2e>
 800e67c:	e7d6      	b.n	800e62c <__swbuf_r+0x2a>
	...

0800e680 <__swsetup_r>:
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	4b29      	ldr	r3, [pc, #164]	@ (800e728 <__swsetup_r+0xa8>)
 800e684:	4605      	mov	r5, r0
 800e686:	6818      	ldr	r0, [r3, #0]
 800e688:	460c      	mov	r4, r1
 800e68a:	b118      	cbz	r0, 800e694 <__swsetup_r+0x14>
 800e68c:	6a03      	ldr	r3, [r0, #32]
 800e68e:	b90b      	cbnz	r3, 800e694 <__swsetup_r+0x14>
 800e690:	f7ff fe88 	bl	800e3a4 <__sinit>
 800e694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e698:	0719      	lsls	r1, r3, #28
 800e69a:	d422      	bmi.n	800e6e2 <__swsetup_r+0x62>
 800e69c:	06da      	lsls	r2, r3, #27
 800e69e:	d407      	bmi.n	800e6b0 <__swsetup_r+0x30>
 800e6a0:	2209      	movs	r2, #9
 800e6a2:	602a      	str	r2, [r5, #0]
 800e6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ae:	e033      	b.n	800e718 <__swsetup_r+0x98>
 800e6b0:	0758      	lsls	r0, r3, #29
 800e6b2:	d512      	bpl.n	800e6da <__swsetup_r+0x5a>
 800e6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6b6:	b141      	cbz	r1, 800e6ca <__swsetup_r+0x4a>
 800e6b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6bc:	4299      	cmp	r1, r3
 800e6be:	d002      	beq.n	800e6c6 <__swsetup_r+0x46>
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	f000 ff29 	bl	800f518 <_free_r>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	6063      	str	r3, [r4, #4]
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	f043 0308 	orr.w	r3, r3, #8
 800e6e0:	81a3      	strh	r3, [r4, #12]
 800e6e2:	6923      	ldr	r3, [r4, #16]
 800e6e4:	b94b      	cbnz	r3, 800e6fa <__swsetup_r+0x7a>
 800e6e6:	89a3      	ldrh	r3, [r4, #12]
 800e6e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6f0:	d003      	beq.n	800e6fa <__swsetup_r+0x7a>
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	f001 fef5 	bl	80104e4 <__smakebuf_r>
 800e6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6fe:	f013 0201 	ands.w	r2, r3, #1
 800e702:	d00a      	beq.n	800e71a <__swsetup_r+0x9a>
 800e704:	2200      	movs	r2, #0
 800e706:	60a2      	str	r2, [r4, #8]
 800e708:	6962      	ldr	r2, [r4, #20]
 800e70a:	4252      	negs	r2, r2
 800e70c:	61a2      	str	r2, [r4, #24]
 800e70e:	6922      	ldr	r2, [r4, #16]
 800e710:	b942      	cbnz	r2, 800e724 <__swsetup_r+0xa4>
 800e712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e716:	d1c5      	bne.n	800e6a4 <__swsetup_r+0x24>
 800e718:	bd38      	pop	{r3, r4, r5, pc}
 800e71a:	0799      	lsls	r1, r3, #30
 800e71c:	bf58      	it	pl
 800e71e:	6962      	ldrpl	r2, [r4, #20]
 800e720:	60a2      	str	r2, [r4, #8]
 800e722:	e7f4      	b.n	800e70e <__swsetup_r+0x8e>
 800e724:	2000      	movs	r0, #0
 800e726:	e7f7      	b.n	800e718 <__swsetup_r+0x98>
 800e728:	20000140 	.word	0x20000140

0800e72c <memcmp>:
 800e72c:	b510      	push	{r4, lr}
 800e72e:	3901      	subs	r1, #1
 800e730:	4402      	add	r2, r0
 800e732:	4290      	cmp	r0, r2
 800e734:	d101      	bne.n	800e73a <memcmp+0xe>
 800e736:	2000      	movs	r0, #0
 800e738:	e005      	b.n	800e746 <memcmp+0x1a>
 800e73a:	7803      	ldrb	r3, [r0, #0]
 800e73c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e740:	42a3      	cmp	r3, r4
 800e742:	d001      	beq.n	800e748 <memcmp+0x1c>
 800e744:	1b18      	subs	r0, r3, r4
 800e746:	bd10      	pop	{r4, pc}
 800e748:	3001      	adds	r0, #1
 800e74a:	e7f2      	b.n	800e732 <memcmp+0x6>

0800e74c <memset>:
 800e74c:	4402      	add	r2, r0
 800e74e:	4603      	mov	r3, r0
 800e750:	4293      	cmp	r3, r2
 800e752:	d100      	bne.n	800e756 <memset+0xa>
 800e754:	4770      	bx	lr
 800e756:	f803 1b01 	strb.w	r1, [r3], #1
 800e75a:	e7f9      	b.n	800e750 <memset+0x4>

0800e75c <_localeconv_r>:
 800e75c:	4800      	ldr	r0, [pc, #0]	@ (800e760 <_localeconv_r+0x4>)
 800e75e:	4770      	bx	lr
 800e760:	20000280 	.word	0x20000280

0800e764 <_close_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4d06      	ldr	r5, [pc, #24]	@ (800e780 <_close_r+0x1c>)
 800e768:	2300      	movs	r3, #0
 800e76a:	4604      	mov	r4, r0
 800e76c:	4608      	mov	r0, r1
 800e76e:	602b      	str	r3, [r5, #0]
 800e770:	f7f6 f9fa 	bl	8004b68 <_close>
 800e774:	1c43      	adds	r3, r0, #1
 800e776:	d102      	bne.n	800e77e <_close_r+0x1a>
 800e778:	682b      	ldr	r3, [r5, #0]
 800e77a:	b103      	cbz	r3, 800e77e <_close_r+0x1a>
 800e77c:	6023      	str	r3, [r4, #0]
 800e77e:	bd38      	pop	{r3, r4, r5, pc}
 800e780:	20001928 	.word	0x20001928

0800e784 <_lseek_r>:
 800e784:	b538      	push	{r3, r4, r5, lr}
 800e786:	4d07      	ldr	r5, [pc, #28]	@ (800e7a4 <_lseek_r+0x20>)
 800e788:	4604      	mov	r4, r0
 800e78a:	4608      	mov	r0, r1
 800e78c:	4611      	mov	r1, r2
 800e78e:	2200      	movs	r2, #0
 800e790:	602a      	str	r2, [r5, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	f7f6 fa0f 	bl	8004bb6 <_lseek>
 800e798:	1c43      	adds	r3, r0, #1
 800e79a:	d102      	bne.n	800e7a2 <_lseek_r+0x1e>
 800e79c:	682b      	ldr	r3, [r5, #0]
 800e79e:	b103      	cbz	r3, 800e7a2 <_lseek_r+0x1e>
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	bd38      	pop	{r3, r4, r5, pc}
 800e7a4:	20001928 	.word	0x20001928

0800e7a8 <_read_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4d07      	ldr	r5, [pc, #28]	@ (800e7c8 <_read_r+0x20>)
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	4608      	mov	r0, r1
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	602a      	str	r2, [r5, #0]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	f7f6 f99d 	bl	8004af6 <_read>
 800e7bc:	1c43      	adds	r3, r0, #1
 800e7be:	d102      	bne.n	800e7c6 <_read_r+0x1e>
 800e7c0:	682b      	ldr	r3, [r5, #0]
 800e7c2:	b103      	cbz	r3, 800e7c6 <_read_r+0x1e>
 800e7c4:	6023      	str	r3, [r4, #0]
 800e7c6:	bd38      	pop	{r3, r4, r5, pc}
 800e7c8:	20001928 	.word	0x20001928

0800e7cc <_write_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d07      	ldr	r5, [pc, #28]	@ (800e7ec <_write_r+0x20>)
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	4608      	mov	r0, r1
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	602a      	str	r2, [r5, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	f7f6 f9a8 	bl	8004b30 <_write>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d102      	bne.n	800e7ea <_write_r+0x1e>
 800e7e4:	682b      	ldr	r3, [r5, #0]
 800e7e6:	b103      	cbz	r3, 800e7ea <_write_r+0x1e>
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	bd38      	pop	{r3, r4, r5, pc}
 800e7ec:	20001928 	.word	0x20001928

0800e7f0 <__errno>:
 800e7f0:	4b01      	ldr	r3, [pc, #4]	@ (800e7f8 <__errno+0x8>)
 800e7f2:	6818      	ldr	r0, [r3, #0]
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	20000140 	.word	0x20000140

0800e7fc <__libc_init_array>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4d0d      	ldr	r5, [pc, #52]	@ (800e834 <__libc_init_array+0x38>)
 800e800:	4c0d      	ldr	r4, [pc, #52]	@ (800e838 <__libc_init_array+0x3c>)
 800e802:	1b64      	subs	r4, r4, r5
 800e804:	10a4      	asrs	r4, r4, #2
 800e806:	2600      	movs	r6, #0
 800e808:	42a6      	cmp	r6, r4
 800e80a:	d109      	bne.n	800e820 <__libc_init_array+0x24>
 800e80c:	4d0b      	ldr	r5, [pc, #44]	@ (800e83c <__libc_init_array+0x40>)
 800e80e:	4c0c      	ldr	r4, [pc, #48]	@ (800e840 <__libc_init_array+0x44>)
 800e810:	f002 fb9e 	bl	8010f50 <_init>
 800e814:	1b64      	subs	r4, r4, r5
 800e816:	10a4      	asrs	r4, r4, #2
 800e818:	2600      	movs	r6, #0
 800e81a:	42a6      	cmp	r6, r4
 800e81c:	d105      	bne.n	800e82a <__libc_init_array+0x2e>
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	f855 3b04 	ldr.w	r3, [r5], #4
 800e824:	4798      	blx	r3
 800e826:	3601      	adds	r6, #1
 800e828:	e7ee      	b.n	800e808 <__libc_init_array+0xc>
 800e82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e82e:	4798      	blx	r3
 800e830:	3601      	adds	r6, #1
 800e832:	e7f2      	b.n	800e81a <__libc_init_array+0x1e>
 800e834:	08011f64 	.word	0x08011f64
 800e838:	08011f64 	.word	0x08011f64
 800e83c:	08011f64 	.word	0x08011f64
 800e840:	08011f68 	.word	0x08011f68

0800e844 <__retarget_lock_init_recursive>:
 800e844:	4770      	bx	lr

0800e846 <__retarget_lock_acquire_recursive>:
 800e846:	4770      	bx	lr

0800e848 <__retarget_lock_release_recursive>:
 800e848:	4770      	bx	lr

0800e84a <memcpy>:
 800e84a:	440a      	add	r2, r1
 800e84c:	4291      	cmp	r1, r2
 800e84e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e852:	d100      	bne.n	800e856 <memcpy+0xc>
 800e854:	4770      	bx	lr
 800e856:	b510      	push	{r4, lr}
 800e858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e85c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e860:	4291      	cmp	r1, r2
 800e862:	d1f9      	bne.n	800e858 <memcpy+0xe>
 800e864:	bd10      	pop	{r4, pc}

0800e866 <quorem>:
 800e866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86a:	6903      	ldr	r3, [r0, #16]
 800e86c:	690c      	ldr	r4, [r1, #16]
 800e86e:	42a3      	cmp	r3, r4
 800e870:	4607      	mov	r7, r0
 800e872:	db7e      	blt.n	800e972 <quorem+0x10c>
 800e874:	3c01      	subs	r4, #1
 800e876:	f101 0814 	add.w	r8, r1, #20
 800e87a:	00a3      	lsls	r3, r4, #2
 800e87c:	f100 0514 	add.w	r5, r0, #20
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e88c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e890:	3301      	adds	r3, #1
 800e892:	429a      	cmp	r2, r3
 800e894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e898:	fbb2 f6f3 	udiv	r6, r2, r3
 800e89c:	d32e      	bcc.n	800e8fc <quorem+0x96>
 800e89e:	f04f 0a00 	mov.w	sl, #0
 800e8a2:	46c4      	mov	ip, r8
 800e8a4:	46ae      	mov	lr, r5
 800e8a6:	46d3      	mov	fp, sl
 800e8a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e8ac:	b298      	uxth	r0, r3
 800e8ae:	fb06 a000 	mla	r0, r6, r0, sl
 800e8b2:	0c02      	lsrs	r2, r0, #16
 800e8b4:	0c1b      	lsrs	r3, r3, #16
 800e8b6:	fb06 2303 	mla	r3, r6, r3, r2
 800e8ba:	f8de 2000 	ldr.w	r2, [lr]
 800e8be:	b280      	uxth	r0, r0
 800e8c0:	b292      	uxth	r2, r2
 800e8c2:	1a12      	subs	r2, r2, r0
 800e8c4:	445a      	add	r2, fp
 800e8c6:	f8de 0000 	ldr.w	r0, [lr]
 800e8ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e8d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e8d8:	b292      	uxth	r2, r2
 800e8da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e8de:	45e1      	cmp	r9, ip
 800e8e0:	f84e 2b04 	str.w	r2, [lr], #4
 800e8e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e8e8:	d2de      	bcs.n	800e8a8 <quorem+0x42>
 800e8ea:	9b00      	ldr	r3, [sp, #0]
 800e8ec:	58eb      	ldr	r3, [r5, r3]
 800e8ee:	b92b      	cbnz	r3, 800e8fc <quorem+0x96>
 800e8f0:	9b01      	ldr	r3, [sp, #4]
 800e8f2:	3b04      	subs	r3, #4
 800e8f4:	429d      	cmp	r5, r3
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	d32f      	bcc.n	800e95a <quorem+0xf4>
 800e8fa:	613c      	str	r4, [r7, #16]
 800e8fc:	4638      	mov	r0, r7
 800e8fe:	f001 f97d 	bl	800fbfc <__mcmp>
 800e902:	2800      	cmp	r0, #0
 800e904:	db25      	blt.n	800e952 <quorem+0xec>
 800e906:	4629      	mov	r1, r5
 800e908:	2000      	movs	r0, #0
 800e90a:	f858 2b04 	ldr.w	r2, [r8], #4
 800e90e:	f8d1 c000 	ldr.w	ip, [r1]
 800e912:	fa1f fe82 	uxth.w	lr, r2
 800e916:	fa1f f38c 	uxth.w	r3, ip
 800e91a:	eba3 030e 	sub.w	r3, r3, lr
 800e91e:	4403      	add	r3, r0
 800e920:	0c12      	lsrs	r2, r2, #16
 800e922:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e926:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e930:	45c1      	cmp	r9, r8
 800e932:	f841 3b04 	str.w	r3, [r1], #4
 800e936:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e93a:	d2e6      	bcs.n	800e90a <quorem+0xa4>
 800e93c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e940:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e944:	b922      	cbnz	r2, 800e950 <quorem+0xea>
 800e946:	3b04      	subs	r3, #4
 800e948:	429d      	cmp	r5, r3
 800e94a:	461a      	mov	r2, r3
 800e94c:	d30b      	bcc.n	800e966 <quorem+0x100>
 800e94e:	613c      	str	r4, [r7, #16]
 800e950:	3601      	adds	r6, #1
 800e952:	4630      	mov	r0, r6
 800e954:	b003      	add	sp, #12
 800e956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e95a:	6812      	ldr	r2, [r2, #0]
 800e95c:	3b04      	subs	r3, #4
 800e95e:	2a00      	cmp	r2, #0
 800e960:	d1cb      	bne.n	800e8fa <quorem+0x94>
 800e962:	3c01      	subs	r4, #1
 800e964:	e7c6      	b.n	800e8f4 <quorem+0x8e>
 800e966:	6812      	ldr	r2, [r2, #0]
 800e968:	3b04      	subs	r3, #4
 800e96a:	2a00      	cmp	r2, #0
 800e96c:	d1ef      	bne.n	800e94e <quorem+0xe8>
 800e96e:	3c01      	subs	r4, #1
 800e970:	e7ea      	b.n	800e948 <quorem+0xe2>
 800e972:	2000      	movs	r0, #0
 800e974:	e7ee      	b.n	800e954 <quorem+0xee>
	...

0800e978 <_dtoa_r>:
 800e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	69c7      	ldr	r7, [r0, #28]
 800e97e:	b097      	sub	sp, #92	@ 0x5c
 800e980:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e984:	ec55 4b10 	vmov	r4, r5, d0
 800e988:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e98a:	9107      	str	r1, [sp, #28]
 800e98c:	4681      	mov	r9, r0
 800e98e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e990:	9311      	str	r3, [sp, #68]	@ 0x44
 800e992:	b97f      	cbnz	r7, 800e9b4 <_dtoa_r+0x3c>
 800e994:	2010      	movs	r0, #16
 800e996:	f000 fe09 	bl	800f5ac <malloc>
 800e99a:	4602      	mov	r2, r0
 800e99c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e9a0:	b920      	cbnz	r0, 800e9ac <_dtoa_r+0x34>
 800e9a2:	4ba9      	ldr	r3, [pc, #676]	@ (800ec48 <_dtoa_r+0x2d0>)
 800e9a4:	21ef      	movs	r1, #239	@ 0xef
 800e9a6:	48a9      	ldr	r0, [pc, #676]	@ (800ec4c <_dtoa_r+0x2d4>)
 800e9a8:	f001 fe24 	bl	80105f4 <__assert_func>
 800e9ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e9b0:	6007      	str	r7, [r0, #0]
 800e9b2:	60c7      	str	r7, [r0, #12]
 800e9b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e9b8:	6819      	ldr	r1, [r3, #0]
 800e9ba:	b159      	cbz	r1, 800e9d4 <_dtoa_r+0x5c>
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	604a      	str	r2, [r1, #4]
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	4093      	lsls	r3, r2
 800e9c4:	608b      	str	r3, [r1, #8]
 800e9c6:	4648      	mov	r0, r9
 800e9c8:	f000 fee6 	bl	800f798 <_Bfree>
 800e9cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	601a      	str	r2, [r3, #0]
 800e9d4:	1e2b      	subs	r3, r5, #0
 800e9d6:	bfb9      	ittee	lt
 800e9d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e9dc:	9305      	strlt	r3, [sp, #20]
 800e9de:	2300      	movge	r3, #0
 800e9e0:	6033      	strge	r3, [r6, #0]
 800e9e2:	9f05      	ldr	r7, [sp, #20]
 800e9e4:	4b9a      	ldr	r3, [pc, #616]	@ (800ec50 <_dtoa_r+0x2d8>)
 800e9e6:	bfbc      	itt	lt
 800e9e8:	2201      	movlt	r2, #1
 800e9ea:	6032      	strlt	r2, [r6, #0]
 800e9ec:	43bb      	bics	r3, r7
 800e9ee:	d112      	bne.n	800ea16 <_dtoa_r+0x9e>
 800e9f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e9f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e9f6:	6013      	str	r3, [r2, #0]
 800e9f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e9fc:	4323      	orrs	r3, r4
 800e9fe:	f000 855a 	beq.w	800f4b6 <_dtoa_r+0xb3e>
 800ea02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ec64 <_dtoa_r+0x2ec>
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f000 855c 	beq.w	800f4c6 <_dtoa_r+0xb4e>
 800ea0e:	f10a 0303 	add.w	r3, sl, #3
 800ea12:	f000 bd56 	b.w	800f4c2 <_dtoa_r+0xb4a>
 800ea16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	ec51 0b17 	vmov	r0, r1, d7
 800ea20:	2300      	movs	r3, #0
 800ea22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ea26:	f7f2 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea2a:	4680      	mov	r8, r0
 800ea2c:	b158      	cbz	r0, 800ea46 <_dtoa_r+0xce>
 800ea2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ea30:	2301      	movs	r3, #1
 800ea32:	6013      	str	r3, [r2, #0]
 800ea34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea36:	b113      	cbz	r3, 800ea3e <_dtoa_r+0xc6>
 800ea38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ea3a:	4b86      	ldr	r3, [pc, #536]	@ (800ec54 <_dtoa_r+0x2dc>)
 800ea3c:	6013      	str	r3, [r2, #0]
 800ea3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ec68 <_dtoa_r+0x2f0>
 800ea42:	f000 bd40 	b.w	800f4c6 <_dtoa_r+0xb4e>
 800ea46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ea4a:	aa14      	add	r2, sp, #80	@ 0x50
 800ea4c:	a915      	add	r1, sp, #84	@ 0x54
 800ea4e:	4648      	mov	r0, r9
 800ea50:	f001 f984 	bl	800fd5c <__d2b>
 800ea54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ea58:	9002      	str	r0, [sp, #8]
 800ea5a:	2e00      	cmp	r6, #0
 800ea5c:	d078      	beq.n	800eb50 <_dtoa_r+0x1d8>
 800ea5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ea64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ea6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ea70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ea74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ea78:	4619      	mov	r1, r3
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	4b76      	ldr	r3, [pc, #472]	@ (800ec58 <_dtoa_r+0x2e0>)
 800ea7e:	f7f1 fc03 	bl	8000288 <__aeabi_dsub>
 800ea82:	a36b      	add	r3, pc, #428	@ (adr r3, 800ec30 <_dtoa_r+0x2b8>)
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	f7f1 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ea8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ec38 <_dtoa_r+0x2c0>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	f7f1 fbfb 	bl	800028c <__adddf3>
 800ea96:	4604      	mov	r4, r0
 800ea98:	4630      	mov	r0, r6
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	f7f1 fd42 	bl	8000524 <__aeabi_i2d>
 800eaa0:	a367      	add	r3, pc, #412	@ (adr r3, 800ec40 <_dtoa_r+0x2c8>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fda7 	bl	80005f8 <__aeabi_dmul>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	4620      	mov	r0, r4
 800eab0:	4629      	mov	r1, r5
 800eab2:	f7f1 fbeb 	bl	800028c <__adddf3>
 800eab6:	4604      	mov	r4, r0
 800eab8:	460d      	mov	r5, r1
 800eaba:	f7f2 f84d 	bl	8000b58 <__aeabi_d2iz>
 800eabe:	2200      	movs	r2, #0
 800eac0:	4607      	mov	r7, r0
 800eac2:	2300      	movs	r3, #0
 800eac4:	4620      	mov	r0, r4
 800eac6:	4629      	mov	r1, r5
 800eac8:	f7f2 f808 	bl	8000adc <__aeabi_dcmplt>
 800eacc:	b140      	cbz	r0, 800eae0 <_dtoa_r+0x168>
 800eace:	4638      	mov	r0, r7
 800ead0:	f7f1 fd28 	bl	8000524 <__aeabi_i2d>
 800ead4:	4622      	mov	r2, r4
 800ead6:	462b      	mov	r3, r5
 800ead8:	f7f1 fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 800eadc:	b900      	cbnz	r0, 800eae0 <_dtoa_r+0x168>
 800eade:	3f01      	subs	r7, #1
 800eae0:	2f16      	cmp	r7, #22
 800eae2:	d852      	bhi.n	800eb8a <_dtoa_r+0x212>
 800eae4:	4b5d      	ldr	r3, [pc, #372]	@ (800ec5c <_dtoa_r+0x2e4>)
 800eae6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eaf2:	f7f1 fff3 	bl	8000adc <__aeabi_dcmplt>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d049      	beq.n	800eb8e <_dtoa_r+0x216>
 800eafa:	3f01      	subs	r7, #1
 800eafc:	2300      	movs	r3, #0
 800eafe:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb02:	1b9b      	subs	r3, r3, r6
 800eb04:	1e5a      	subs	r2, r3, #1
 800eb06:	bf45      	ittet	mi
 800eb08:	f1c3 0301 	rsbmi	r3, r3, #1
 800eb0c:	9300      	strmi	r3, [sp, #0]
 800eb0e:	2300      	movpl	r3, #0
 800eb10:	2300      	movmi	r3, #0
 800eb12:	9206      	str	r2, [sp, #24]
 800eb14:	bf54      	ite	pl
 800eb16:	9300      	strpl	r3, [sp, #0]
 800eb18:	9306      	strmi	r3, [sp, #24]
 800eb1a:	2f00      	cmp	r7, #0
 800eb1c:	db39      	blt.n	800eb92 <_dtoa_r+0x21a>
 800eb1e:	9b06      	ldr	r3, [sp, #24]
 800eb20:	970d      	str	r7, [sp, #52]	@ 0x34
 800eb22:	443b      	add	r3, r7
 800eb24:	9306      	str	r3, [sp, #24]
 800eb26:	2300      	movs	r3, #0
 800eb28:	9308      	str	r3, [sp, #32]
 800eb2a:	9b07      	ldr	r3, [sp, #28]
 800eb2c:	2b09      	cmp	r3, #9
 800eb2e:	d863      	bhi.n	800ebf8 <_dtoa_r+0x280>
 800eb30:	2b05      	cmp	r3, #5
 800eb32:	bfc4      	itt	gt
 800eb34:	3b04      	subgt	r3, #4
 800eb36:	9307      	strgt	r3, [sp, #28]
 800eb38:	9b07      	ldr	r3, [sp, #28]
 800eb3a:	f1a3 0302 	sub.w	r3, r3, #2
 800eb3e:	bfcc      	ite	gt
 800eb40:	2400      	movgt	r4, #0
 800eb42:	2401      	movle	r4, #1
 800eb44:	2b03      	cmp	r3, #3
 800eb46:	d863      	bhi.n	800ec10 <_dtoa_r+0x298>
 800eb48:	e8df f003 	tbb	[pc, r3]
 800eb4c:	2b375452 	.word	0x2b375452
 800eb50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800eb54:	441e      	add	r6, r3
 800eb56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eb5a:	2b20      	cmp	r3, #32
 800eb5c:	bfc1      	itttt	gt
 800eb5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eb62:	409f      	lslgt	r7, r3
 800eb64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eb68:	fa24 f303 	lsrgt.w	r3, r4, r3
 800eb6c:	bfd6      	itet	le
 800eb6e:	f1c3 0320 	rsble	r3, r3, #32
 800eb72:	ea47 0003 	orrgt.w	r0, r7, r3
 800eb76:	fa04 f003 	lslle.w	r0, r4, r3
 800eb7a:	f7f1 fcc3 	bl	8000504 <__aeabi_ui2d>
 800eb7e:	2201      	movs	r2, #1
 800eb80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800eb84:	3e01      	subs	r6, #1
 800eb86:	9212      	str	r2, [sp, #72]	@ 0x48
 800eb88:	e776      	b.n	800ea78 <_dtoa_r+0x100>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e7b7      	b.n	800eafe <_dtoa_r+0x186>
 800eb8e:	9010      	str	r0, [sp, #64]	@ 0x40
 800eb90:	e7b6      	b.n	800eb00 <_dtoa_r+0x188>
 800eb92:	9b00      	ldr	r3, [sp, #0]
 800eb94:	1bdb      	subs	r3, r3, r7
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	427b      	negs	r3, r7
 800eb9a:	9308      	str	r3, [sp, #32]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800eba0:	e7c3      	b.n	800eb2a <_dtoa_r+0x1b2>
 800eba2:	2301      	movs	r3, #1
 800eba4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eba8:	eb07 0b03 	add.w	fp, r7, r3
 800ebac:	f10b 0301 	add.w	r3, fp, #1
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	9303      	str	r3, [sp, #12]
 800ebb4:	bfb8      	it	lt
 800ebb6:	2301      	movlt	r3, #1
 800ebb8:	e006      	b.n	800ebc8 <_dtoa_r+0x250>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	dd28      	ble.n	800ec16 <_dtoa_r+0x29e>
 800ebc4:	469b      	mov	fp, r3
 800ebc6:	9303      	str	r3, [sp, #12]
 800ebc8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ebcc:	2100      	movs	r1, #0
 800ebce:	2204      	movs	r2, #4
 800ebd0:	f102 0514 	add.w	r5, r2, #20
 800ebd4:	429d      	cmp	r5, r3
 800ebd6:	d926      	bls.n	800ec26 <_dtoa_r+0x2ae>
 800ebd8:	6041      	str	r1, [r0, #4]
 800ebda:	4648      	mov	r0, r9
 800ebdc:	f000 fd9c 	bl	800f718 <_Balloc>
 800ebe0:	4682      	mov	sl, r0
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d142      	bne.n	800ec6c <_dtoa_r+0x2f4>
 800ebe6:	4b1e      	ldr	r3, [pc, #120]	@ (800ec60 <_dtoa_r+0x2e8>)
 800ebe8:	4602      	mov	r2, r0
 800ebea:	f240 11af 	movw	r1, #431	@ 0x1af
 800ebee:	e6da      	b.n	800e9a6 <_dtoa_r+0x2e>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e7e3      	b.n	800ebbc <_dtoa_r+0x244>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e7d5      	b.n	800eba4 <_dtoa_r+0x22c>
 800ebf8:	2401      	movs	r4, #1
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	9307      	str	r3, [sp, #28]
 800ebfe:	9409      	str	r4, [sp, #36]	@ 0x24
 800ec00:	f04f 3bff 	mov.w	fp, #4294967295
 800ec04:	2200      	movs	r2, #0
 800ec06:	f8cd b00c 	str.w	fp, [sp, #12]
 800ec0a:	2312      	movs	r3, #18
 800ec0c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec0e:	e7db      	b.n	800ebc8 <_dtoa_r+0x250>
 800ec10:	2301      	movs	r3, #1
 800ec12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec14:	e7f4      	b.n	800ec00 <_dtoa_r+0x288>
 800ec16:	f04f 0b01 	mov.w	fp, #1
 800ec1a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ec1e:	465b      	mov	r3, fp
 800ec20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ec24:	e7d0      	b.n	800ebc8 <_dtoa_r+0x250>
 800ec26:	3101      	adds	r1, #1
 800ec28:	0052      	lsls	r2, r2, #1
 800ec2a:	e7d1      	b.n	800ebd0 <_dtoa_r+0x258>
 800ec2c:	f3af 8000 	nop.w
 800ec30:	636f4361 	.word	0x636f4361
 800ec34:	3fd287a7 	.word	0x3fd287a7
 800ec38:	8b60c8b3 	.word	0x8b60c8b3
 800ec3c:	3fc68a28 	.word	0x3fc68a28
 800ec40:	509f79fb 	.word	0x509f79fb
 800ec44:	3fd34413 	.word	0x3fd34413
 800ec48:	08011c11 	.word	0x08011c11
 800ec4c:	08011c28 	.word	0x08011c28
 800ec50:	7ff00000 	.word	0x7ff00000
 800ec54:	08011be1 	.word	0x08011be1
 800ec58:	3ff80000 	.word	0x3ff80000
 800ec5c:	08011d78 	.word	0x08011d78
 800ec60:	08011c80 	.word	0x08011c80
 800ec64:	08011c0d 	.word	0x08011c0d
 800ec68:	08011be0 	.word	0x08011be0
 800ec6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ec70:	6018      	str	r0, [r3, #0]
 800ec72:	9b03      	ldr	r3, [sp, #12]
 800ec74:	2b0e      	cmp	r3, #14
 800ec76:	f200 80a1 	bhi.w	800edbc <_dtoa_r+0x444>
 800ec7a:	2c00      	cmp	r4, #0
 800ec7c:	f000 809e 	beq.w	800edbc <_dtoa_r+0x444>
 800ec80:	2f00      	cmp	r7, #0
 800ec82:	dd33      	ble.n	800ecec <_dtoa_r+0x374>
 800ec84:	4b9c      	ldr	r3, [pc, #624]	@ (800eef8 <_dtoa_r+0x580>)
 800ec86:	f007 020f 	and.w	r2, r7, #15
 800ec8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec8e:	ed93 7b00 	vldr	d7, [r3]
 800ec92:	05f8      	lsls	r0, r7, #23
 800ec94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ec98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ec9c:	d516      	bpl.n	800eccc <_dtoa_r+0x354>
 800ec9e:	4b97      	ldr	r3, [pc, #604]	@ (800eefc <_dtoa_r+0x584>)
 800eca0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eca8:	f7f1 fdd0 	bl	800084c <__aeabi_ddiv>
 800ecac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecb0:	f004 040f 	and.w	r4, r4, #15
 800ecb4:	2603      	movs	r6, #3
 800ecb6:	4d91      	ldr	r5, [pc, #580]	@ (800eefc <_dtoa_r+0x584>)
 800ecb8:	b954      	cbnz	r4, 800ecd0 <_dtoa_r+0x358>
 800ecba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ecbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecc2:	f7f1 fdc3 	bl	800084c <__aeabi_ddiv>
 800ecc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecca:	e028      	b.n	800ed1e <_dtoa_r+0x3a6>
 800eccc:	2602      	movs	r6, #2
 800ecce:	e7f2      	b.n	800ecb6 <_dtoa_r+0x33e>
 800ecd0:	07e1      	lsls	r1, r4, #31
 800ecd2:	d508      	bpl.n	800ece6 <_dtoa_r+0x36e>
 800ecd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ecd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ecdc:	f7f1 fc8c 	bl	80005f8 <__aeabi_dmul>
 800ece0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ece4:	3601      	adds	r6, #1
 800ece6:	1064      	asrs	r4, r4, #1
 800ece8:	3508      	adds	r5, #8
 800ecea:	e7e5      	b.n	800ecb8 <_dtoa_r+0x340>
 800ecec:	f000 80af 	beq.w	800ee4e <_dtoa_r+0x4d6>
 800ecf0:	427c      	negs	r4, r7
 800ecf2:	4b81      	ldr	r3, [pc, #516]	@ (800eef8 <_dtoa_r+0x580>)
 800ecf4:	4d81      	ldr	r5, [pc, #516]	@ (800eefc <_dtoa_r+0x584>)
 800ecf6:	f004 020f 	and.w	r2, r4, #15
 800ecfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ed06:	f7f1 fc77 	bl	80005f8 <__aeabi_dmul>
 800ed0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed0e:	1124      	asrs	r4, r4, #4
 800ed10:	2300      	movs	r3, #0
 800ed12:	2602      	movs	r6, #2
 800ed14:	2c00      	cmp	r4, #0
 800ed16:	f040 808f 	bne.w	800ee38 <_dtoa_r+0x4c0>
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d1d3      	bne.n	800ecc6 <_dtoa_r+0x34e>
 800ed1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 8094 	beq.w	800ee52 <_dtoa_r+0x4da>
 800ed2a:	4b75      	ldr	r3, [pc, #468]	@ (800ef00 <_dtoa_r+0x588>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	4620      	mov	r0, r4
 800ed30:	4629      	mov	r1, r5
 800ed32:	f7f1 fed3 	bl	8000adc <__aeabi_dcmplt>
 800ed36:	2800      	cmp	r0, #0
 800ed38:	f000 808b 	beq.w	800ee52 <_dtoa_r+0x4da>
 800ed3c:	9b03      	ldr	r3, [sp, #12]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f000 8087 	beq.w	800ee52 <_dtoa_r+0x4da>
 800ed44:	f1bb 0f00 	cmp.w	fp, #0
 800ed48:	dd34      	ble.n	800edb4 <_dtoa_r+0x43c>
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	4b6d      	ldr	r3, [pc, #436]	@ (800ef04 <_dtoa_r+0x58c>)
 800ed4e:	2200      	movs	r2, #0
 800ed50:	4629      	mov	r1, r5
 800ed52:	f7f1 fc51 	bl	80005f8 <__aeabi_dmul>
 800ed56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed5a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ed5e:	3601      	adds	r6, #1
 800ed60:	465c      	mov	r4, fp
 800ed62:	4630      	mov	r0, r6
 800ed64:	f7f1 fbde 	bl	8000524 <__aeabi_i2d>
 800ed68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed6c:	f7f1 fc44 	bl	80005f8 <__aeabi_dmul>
 800ed70:	4b65      	ldr	r3, [pc, #404]	@ (800ef08 <_dtoa_r+0x590>)
 800ed72:	2200      	movs	r2, #0
 800ed74:	f7f1 fa8a 	bl	800028c <__adddf3>
 800ed78:	4605      	mov	r5, r0
 800ed7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ed7e:	2c00      	cmp	r4, #0
 800ed80:	d16a      	bne.n	800ee58 <_dtoa_r+0x4e0>
 800ed82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed86:	4b61      	ldr	r3, [pc, #388]	@ (800ef0c <_dtoa_r+0x594>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f7f1 fa7d 	bl	8000288 <__aeabi_dsub>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	460b      	mov	r3, r1
 800ed92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed96:	462a      	mov	r2, r5
 800ed98:	4633      	mov	r3, r6
 800ed9a:	f7f1 febd 	bl	8000b18 <__aeabi_dcmpgt>
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	f040 8298 	bne.w	800f2d4 <_dtoa_r+0x95c>
 800eda4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eda8:	462a      	mov	r2, r5
 800edaa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800edae:	f7f1 fe95 	bl	8000adc <__aeabi_dcmplt>
 800edb2:	bb38      	cbnz	r0, 800ee04 <_dtoa_r+0x48c>
 800edb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800edb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800edbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f2c0 8157 	blt.w	800f072 <_dtoa_r+0x6fa>
 800edc4:	2f0e      	cmp	r7, #14
 800edc6:	f300 8154 	bgt.w	800f072 <_dtoa_r+0x6fa>
 800edca:	4b4b      	ldr	r3, [pc, #300]	@ (800eef8 <_dtoa_r+0x580>)
 800edcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800edd0:	ed93 7b00 	vldr	d7, [r3]
 800edd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	ed8d 7b00 	vstr	d7, [sp]
 800eddc:	f280 80e5 	bge.w	800efaa <_dtoa_r+0x632>
 800ede0:	9b03      	ldr	r3, [sp, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f300 80e1 	bgt.w	800efaa <_dtoa_r+0x632>
 800ede8:	d10c      	bne.n	800ee04 <_dtoa_r+0x48c>
 800edea:	4b48      	ldr	r3, [pc, #288]	@ (800ef0c <_dtoa_r+0x594>)
 800edec:	2200      	movs	r2, #0
 800edee:	ec51 0b17 	vmov	r0, r1, d7
 800edf2:	f7f1 fc01 	bl	80005f8 <__aeabi_dmul>
 800edf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edfa:	f7f1 fe83 	bl	8000b04 <__aeabi_dcmpge>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	f000 8266 	beq.w	800f2d0 <_dtoa_r+0x958>
 800ee04:	2400      	movs	r4, #0
 800ee06:	4625      	mov	r5, r4
 800ee08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee0a:	4656      	mov	r6, sl
 800ee0c:	ea6f 0803 	mvn.w	r8, r3
 800ee10:	2700      	movs	r7, #0
 800ee12:	4621      	mov	r1, r4
 800ee14:	4648      	mov	r0, r9
 800ee16:	f000 fcbf 	bl	800f798 <_Bfree>
 800ee1a:	2d00      	cmp	r5, #0
 800ee1c:	f000 80bd 	beq.w	800ef9a <_dtoa_r+0x622>
 800ee20:	b12f      	cbz	r7, 800ee2e <_dtoa_r+0x4b6>
 800ee22:	42af      	cmp	r7, r5
 800ee24:	d003      	beq.n	800ee2e <_dtoa_r+0x4b6>
 800ee26:	4639      	mov	r1, r7
 800ee28:	4648      	mov	r0, r9
 800ee2a:	f000 fcb5 	bl	800f798 <_Bfree>
 800ee2e:	4629      	mov	r1, r5
 800ee30:	4648      	mov	r0, r9
 800ee32:	f000 fcb1 	bl	800f798 <_Bfree>
 800ee36:	e0b0      	b.n	800ef9a <_dtoa_r+0x622>
 800ee38:	07e2      	lsls	r2, r4, #31
 800ee3a:	d505      	bpl.n	800ee48 <_dtoa_r+0x4d0>
 800ee3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee40:	f7f1 fbda 	bl	80005f8 <__aeabi_dmul>
 800ee44:	3601      	adds	r6, #1
 800ee46:	2301      	movs	r3, #1
 800ee48:	1064      	asrs	r4, r4, #1
 800ee4a:	3508      	adds	r5, #8
 800ee4c:	e762      	b.n	800ed14 <_dtoa_r+0x39c>
 800ee4e:	2602      	movs	r6, #2
 800ee50:	e765      	b.n	800ed1e <_dtoa_r+0x3a6>
 800ee52:	9c03      	ldr	r4, [sp, #12]
 800ee54:	46b8      	mov	r8, r7
 800ee56:	e784      	b.n	800ed62 <_dtoa_r+0x3ea>
 800ee58:	4b27      	ldr	r3, [pc, #156]	@ (800eef8 <_dtoa_r+0x580>)
 800ee5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee64:	4454      	add	r4, sl
 800ee66:	2900      	cmp	r1, #0
 800ee68:	d054      	beq.n	800ef14 <_dtoa_r+0x59c>
 800ee6a:	4929      	ldr	r1, [pc, #164]	@ (800ef10 <_dtoa_r+0x598>)
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	f7f1 fced 	bl	800084c <__aeabi_ddiv>
 800ee72:	4633      	mov	r3, r6
 800ee74:	462a      	mov	r2, r5
 800ee76:	f7f1 fa07 	bl	8000288 <__aeabi_dsub>
 800ee7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ee7e:	4656      	mov	r6, sl
 800ee80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee84:	f7f1 fe68 	bl	8000b58 <__aeabi_d2iz>
 800ee88:	4605      	mov	r5, r0
 800ee8a:	f7f1 fb4b 	bl	8000524 <__aeabi_i2d>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee96:	f7f1 f9f7 	bl	8000288 <__aeabi_dsub>
 800ee9a:	3530      	adds	r5, #48	@ 0x30
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	460b      	mov	r3, r1
 800eea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eea4:	f806 5b01 	strb.w	r5, [r6], #1
 800eea8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eeac:	f7f1 fe16 	bl	8000adc <__aeabi_dcmplt>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d172      	bne.n	800ef9a <_dtoa_r+0x622>
 800eeb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eeb8:	4911      	ldr	r1, [pc, #68]	@ (800ef00 <_dtoa_r+0x588>)
 800eeba:	2000      	movs	r0, #0
 800eebc:	f7f1 f9e4 	bl	8000288 <__aeabi_dsub>
 800eec0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eec4:	f7f1 fe0a 	bl	8000adc <__aeabi_dcmplt>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	f040 80b4 	bne.w	800f036 <_dtoa_r+0x6be>
 800eece:	42a6      	cmp	r6, r4
 800eed0:	f43f af70 	beq.w	800edb4 <_dtoa_r+0x43c>
 800eed4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eed8:	4b0a      	ldr	r3, [pc, #40]	@ (800ef04 <_dtoa_r+0x58c>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	f7f1 fb8c 	bl	80005f8 <__aeabi_dmul>
 800eee0:	4b08      	ldr	r3, [pc, #32]	@ (800ef04 <_dtoa_r+0x58c>)
 800eee2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eee6:	2200      	movs	r2, #0
 800eee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eeec:	f7f1 fb84 	bl	80005f8 <__aeabi_dmul>
 800eef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eef4:	e7c4      	b.n	800ee80 <_dtoa_r+0x508>
 800eef6:	bf00      	nop
 800eef8:	08011d78 	.word	0x08011d78
 800eefc:	08011d50 	.word	0x08011d50
 800ef00:	3ff00000 	.word	0x3ff00000
 800ef04:	40240000 	.word	0x40240000
 800ef08:	401c0000 	.word	0x401c0000
 800ef0c:	40140000 	.word	0x40140000
 800ef10:	3fe00000 	.word	0x3fe00000
 800ef14:	4631      	mov	r1, r6
 800ef16:	4628      	mov	r0, r5
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ef20:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ef22:	4656      	mov	r6, sl
 800ef24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef28:	f7f1 fe16 	bl	8000b58 <__aeabi_d2iz>
 800ef2c:	4605      	mov	r5, r0
 800ef2e:	f7f1 faf9 	bl	8000524 <__aeabi_i2d>
 800ef32:	4602      	mov	r2, r0
 800ef34:	460b      	mov	r3, r1
 800ef36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef3a:	f7f1 f9a5 	bl	8000288 <__aeabi_dsub>
 800ef3e:	3530      	adds	r5, #48	@ 0x30
 800ef40:	f806 5b01 	strb.w	r5, [r6], #1
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	42a6      	cmp	r6, r4
 800ef4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef4e:	f04f 0200 	mov.w	r2, #0
 800ef52:	d124      	bne.n	800ef9e <_dtoa_r+0x626>
 800ef54:	4baf      	ldr	r3, [pc, #700]	@ (800f214 <_dtoa_r+0x89c>)
 800ef56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ef5a:	f7f1 f997 	bl	800028c <__adddf3>
 800ef5e:	4602      	mov	r2, r0
 800ef60:	460b      	mov	r3, r1
 800ef62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef66:	f7f1 fdd7 	bl	8000b18 <__aeabi_dcmpgt>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d163      	bne.n	800f036 <_dtoa_r+0x6be>
 800ef6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ef72:	49a8      	ldr	r1, [pc, #672]	@ (800f214 <_dtoa_r+0x89c>)
 800ef74:	2000      	movs	r0, #0
 800ef76:	f7f1 f987 	bl	8000288 <__aeabi_dsub>
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef82:	f7f1 fdab 	bl	8000adc <__aeabi_dcmplt>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	f43f af14 	beq.w	800edb4 <_dtoa_r+0x43c>
 800ef8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ef8e:	1e73      	subs	r3, r6, #1
 800ef90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ef96:	2b30      	cmp	r3, #48	@ 0x30
 800ef98:	d0f8      	beq.n	800ef8c <_dtoa_r+0x614>
 800ef9a:	4647      	mov	r7, r8
 800ef9c:	e03b      	b.n	800f016 <_dtoa_r+0x69e>
 800ef9e:	4b9e      	ldr	r3, [pc, #632]	@ (800f218 <_dtoa_r+0x8a0>)
 800efa0:	f7f1 fb2a 	bl	80005f8 <__aeabi_dmul>
 800efa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efa8:	e7bc      	b.n	800ef24 <_dtoa_r+0x5ac>
 800efaa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800efae:	4656      	mov	r6, sl
 800efb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efb4:	4620      	mov	r0, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7f1 fc48 	bl	800084c <__aeabi_ddiv>
 800efbc:	f7f1 fdcc 	bl	8000b58 <__aeabi_d2iz>
 800efc0:	4680      	mov	r8, r0
 800efc2:	f7f1 faaf 	bl	8000524 <__aeabi_i2d>
 800efc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efca:	f7f1 fb15 	bl	80005f8 <__aeabi_dmul>
 800efce:	4602      	mov	r2, r0
 800efd0:	460b      	mov	r3, r1
 800efd2:	4620      	mov	r0, r4
 800efd4:	4629      	mov	r1, r5
 800efd6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800efda:	f7f1 f955 	bl	8000288 <__aeabi_dsub>
 800efde:	f806 4b01 	strb.w	r4, [r6], #1
 800efe2:	9d03      	ldr	r5, [sp, #12]
 800efe4:	eba6 040a 	sub.w	r4, r6, sl
 800efe8:	42a5      	cmp	r5, r4
 800efea:	4602      	mov	r2, r0
 800efec:	460b      	mov	r3, r1
 800efee:	d133      	bne.n	800f058 <_dtoa_r+0x6e0>
 800eff0:	f7f1 f94c 	bl	800028c <__adddf3>
 800eff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eff8:	4604      	mov	r4, r0
 800effa:	460d      	mov	r5, r1
 800effc:	f7f1 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 800f000:	b9c0      	cbnz	r0, 800f034 <_dtoa_r+0x6bc>
 800f002:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f006:	4620      	mov	r0, r4
 800f008:	4629      	mov	r1, r5
 800f00a:	f7f1 fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f00e:	b110      	cbz	r0, 800f016 <_dtoa_r+0x69e>
 800f010:	f018 0f01 	tst.w	r8, #1
 800f014:	d10e      	bne.n	800f034 <_dtoa_r+0x6bc>
 800f016:	9902      	ldr	r1, [sp, #8]
 800f018:	4648      	mov	r0, r9
 800f01a:	f000 fbbd 	bl	800f798 <_Bfree>
 800f01e:	2300      	movs	r3, #0
 800f020:	7033      	strb	r3, [r6, #0]
 800f022:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f024:	3701      	adds	r7, #1
 800f026:	601f      	str	r7, [r3, #0]
 800f028:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	f000 824b 	beq.w	800f4c6 <_dtoa_r+0xb4e>
 800f030:	601e      	str	r6, [r3, #0]
 800f032:	e248      	b.n	800f4c6 <_dtoa_r+0xb4e>
 800f034:	46b8      	mov	r8, r7
 800f036:	4633      	mov	r3, r6
 800f038:	461e      	mov	r6, r3
 800f03a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f03e:	2a39      	cmp	r2, #57	@ 0x39
 800f040:	d106      	bne.n	800f050 <_dtoa_r+0x6d8>
 800f042:	459a      	cmp	sl, r3
 800f044:	d1f8      	bne.n	800f038 <_dtoa_r+0x6c0>
 800f046:	2230      	movs	r2, #48	@ 0x30
 800f048:	f108 0801 	add.w	r8, r8, #1
 800f04c:	f88a 2000 	strb.w	r2, [sl]
 800f050:	781a      	ldrb	r2, [r3, #0]
 800f052:	3201      	adds	r2, #1
 800f054:	701a      	strb	r2, [r3, #0]
 800f056:	e7a0      	b.n	800ef9a <_dtoa_r+0x622>
 800f058:	4b6f      	ldr	r3, [pc, #444]	@ (800f218 <_dtoa_r+0x8a0>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	f7f1 facc 	bl	80005f8 <__aeabi_dmul>
 800f060:	2200      	movs	r2, #0
 800f062:	2300      	movs	r3, #0
 800f064:	4604      	mov	r4, r0
 800f066:	460d      	mov	r5, r1
 800f068:	f7f1 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d09f      	beq.n	800efb0 <_dtoa_r+0x638>
 800f070:	e7d1      	b.n	800f016 <_dtoa_r+0x69e>
 800f072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f074:	2a00      	cmp	r2, #0
 800f076:	f000 80ea 	beq.w	800f24e <_dtoa_r+0x8d6>
 800f07a:	9a07      	ldr	r2, [sp, #28]
 800f07c:	2a01      	cmp	r2, #1
 800f07e:	f300 80cd 	bgt.w	800f21c <_dtoa_r+0x8a4>
 800f082:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f084:	2a00      	cmp	r2, #0
 800f086:	f000 80c1 	beq.w	800f20c <_dtoa_r+0x894>
 800f08a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f08e:	9c08      	ldr	r4, [sp, #32]
 800f090:	9e00      	ldr	r6, [sp, #0]
 800f092:	9a00      	ldr	r2, [sp, #0]
 800f094:	441a      	add	r2, r3
 800f096:	9200      	str	r2, [sp, #0]
 800f098:	9a06      	ldr	r2, [sp, #24]
 800f09a:	2101      	movs	r1, #1
 800f09c:	441a      	add	r2, r3
 800f09e:	4648      	mov	r0, r9
 800f0a0:	9206      	str	r2, [sp, #24]
 800f0a2:	f000 fc2d 	bl	800f900 <__i2b>
 800f0a6:	4605      	mov	r5, r0
 800f0a8:	b166      	cbz	r6, 800f0c4 <_dtoa_r+0x74c>
 800f0aa:	9b06      	ldr	r3, [sp, #24]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	dd09      	ble.n	800f0c4 <_dtoa_r+0x74c>
 800f0b0:	42b3      	cmp	r3, r6
 800f0b2:	9a00      	ldr	r2, [sp, #0]
 800f0b4:	bfa8      	it	ge
 800f0b6:	4633      	movge	r3, r6
 800f0b8:	1ad2      	subs	r2, r2, r3
 800f0ba:	9200      	str	r2, [sp, #0]
 800f0bc:	9a06      	ldr	r2, [sp, #24]
 800f0be:	1af6      	subs	r6, r6, r3
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	9306      	str	r3, [sp, #24]
 800f0c4:	9b08      	ldr	r3, [sp, #32]
 800f0c6:	b30b      	cbz	r3, 800f10c <_dtoa_r+0x794>
 800f0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f000 80c6 	beq.w	800f25c <_dtoa_r+0x8e4>
 800f0d0:	2c00      	cmp	r4, #0
 800f0d2:	f000 80c0 	beq.w	800f256 <_dtoa_r+0x8de>
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	4622      	mov	r2, r4
 800f0da:	4648      	mov	r0, r9
 800f0dc:	f000 fcc8 	bl	800fa70 <__pow5mult>
 800f0e0:	9a02      	ldr	r2, [sp, #8]
 800f0e2:	4601      	mov	r1, r0
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	4648      	mov	r0, r9
 800f0e8:	f000 fc20 	bl	800f92c <__multiply>
 800f0ec:	9902      	ldr	r1, [sp, #8]
 800f0ee:	4680      	mov	r8, r0
 800f0f0:	4648      	mov	r0, r9
 800f0f2:	f000 fb51 	bl	800f798 <_Bfree>
 800f0f6:	9b08      	ldr	r3, [sp, #32]
 800f0f8:	1b1b      	subs	r3, r3, r4
 800f0fa:	9308      	str	r3, [sp, #32]
 800f0fc:	f000 80b1 	beq.w	800f262 <_dtoa_r+0x8ea>
 800f100:	9a08      	ldr	r2, [sp, #32]
 800f102:	4641      	mov	r1, r8
 800f104:	4648      	mov	r0, r9
 800f106:	f000 fcb3 	bl	800fa70 <__pow5mult>
 800f10a:	9002      	str	r0, [sp, #8]
 800f10c:	2101      	movs	r1, #1
 800f10e:	4648      	mov	r0, r9
 800f110:	f000 fbf6 	bl	800f900 <__i2b>
 800f114:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f116:	4604      	mov	r4, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 81d8 	beq.w	800f4ce <_dtoa_r+0xb56>
 800f11e:	461a      	mov	r2, r3
 800f120:	4601      	mov	r1, r0
 800f122:	4648      	mov	r0, r9
 800f124:	f000 fca4 	bl	800fa70 <__pow5mult>
 800f128:	9b07      	ldr	r3, [sp, #28]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	4604      	mov	r4, r0
 800f12e:	f300 809f 	bgt.w	800f270 <_dtoa_r+0x8f8>
 800f132:	9b04      	ldr	r3, [sp, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	f040 8097 	bne.w	800f268 <_dtoa_r+0x8f0>
 800f13a:	9b05      	ldr	r3, [sp, #20]
 800f13c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f140:	2b00      	cmp	r3, #0
 800f142:	f040 8093 	bne.w	800f26c <_dtoa_r+0x8f4>
 800f146:	9b05      	ldr	r3, [sp, #20]
 800f148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f14c:	0d1b      	lsrs	r3, r3, #20
 800f14e:	051b      	lsls	r3, r3, #20
 800f150:	b133      	cbz	r3, 800f160 <_dtoa_r+0x7e8>
 800f152:	9b00      	ldr	r3, [sp, #0]
 800f154:	3301      	adds	r3, #1
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	9b06      	ldr	r3, [sp, #24]
 800f15a:	3301      	adds	r3, #1
 800f15c:	9306      	str	r3, [sp, #24]
 800f15e:	2301      	movs	r3, #1
 800f160:	9308      	str	r3, [sp, #32]
 800f162:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f164:	2b00      	cmp	r3, #0
 800f166:	f000 81b8 	beq.w	800f4da <_dtoa_r+0xb62>
 800f16a:	6923      	ldr	r3, [r4, #16]
 800f16c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f170:	6918      	ldr	r0, [r3, #16]
 800f172:	f000 fb79 	bl	800f868 <__hi0bits>
 800f176:	f1c0 0020 	rsb	r0, r0, #32
 800f17a:	9b06      	ldr	r3, [sp, #24]
 800f17c:	4418      	add	r0, r3
 800f17e:	f010 001f 	ands.w	r0, r0, #31
 800f182:	f000 8082 	beq.w	800f28a <_dtoa_r+0x912>
 800f186:	f1c0 0320 	rsb	r3, r0, #32
 800f18a:	2b04      	cmp	r3, #4
 800f18c:	dd73      	ble.n	800f276 <_dtoa_r+0x8fe>
 800f18e:	9b00      	ldr	r3, [sp, #0]
 800f190:	f1c0 001c 	rsb	r0, r0, #28
 800f194:	4403      	add	r3, r0
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	9b06      	ldr	r3, [sp, #24]
 800f19a:	4403      	add	r3, r0
 800f19c:	4406      	add	r6, r0
 800f19e:	9306      	str	r3, [sp, #24]
 800f1a0:	9b00      	ldr	r3, [sp, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	dd05      	ble.n	800f1b2 <_dtoa_r+0x83a>
 800f1a6:	9902      	ldr	r1, [sp, #8]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	4648      	mov	r0, r9
 800f1ac:	f000 fcba 	bl	800fb24 <__lshift>
 800f1b0:	9002      	str	r0, [sp, #8]
 800f1b2:	9b06      	ldr	r3, [sp, #24]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	dd05      	ble.n	800f1c4 <_dtoa_r+0x84c>
 800f1b8:	4621      	mov	r1, r4
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	4648      	mov	r0, r9
 800f1be:	f000 fcb1 	bl	800fb24 <__lshift>
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d061      	beq.n	800f28e <_dtoa_r+0x916>
 800f1ca:	9802      	ldr	r0, [sp, #8]
 800f1cc:	4621      	mov	r1, r4
 800f1ce:	f000 fd15 	bl	800fbfc <__mcmp>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	da5b      	bge.n	800f28e <_dtoa_r+0x916>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	9902      	ldr	r1, [sp, #8]
 800f1da:	220a      	movs	r2, #10
 800f1dc:	4648      	mov	r0, r9
 800f1de:	f000 fafd 	bl	800f7dc <__multadd>
 800f1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1e4:	9002      	str	r0, [sp, #8]
 800f1e6:	f107 38ff 	add.w	r8, r7, #4294967295
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f000 8177 	beq.w	800f4de <_dtoa_r+0xb66>
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	220a      	movs	r2, #10
 800f1f6:	4648      	mov	r0, r9
 800f1f8:	f000 faf0 	bl	800f7dc <__multadd>
 800f1fc:	f1bb 0f00 	cmp.w	fp, #0
 800f200:	4605      	mov	r5, r0
 800f202:	dc6f      	bgt.n	800f2e4 <_dtoa_r+0x96c>
 800f204:	9b07      	ldr	r3, [sp, #28]
 800f206:	2b02      	cmp	r3, #2
 800f208:	dc49      	bgt.n	800f29e <_dtoa_r+0x926>
 800f20a:	e06b      	b.n	800f2e4 <_dtoa_r+0x96c>
 800f20c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f20e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f212:	e73c      	b.n	800f08e <_dtoa_r+0x716>
 800f214:	3fe00000 	.word	0x3fe00000
 800f218:	40240000 	.word	0x40240000
 800f21c:	9b03      	ldr	r3, [sp, #12]
 800f21e:	1e5c      	subs	r4, r3, #1
 800f220:	9b08      	ldr	r3, [sp, #32]
 800f222:	42a3      	cmp	r3, r4
 800f224:	db09      	blt.n	800f23a <_dtoa_r+0x8c2>
 800f226:	1b1c      	subs	r4, r3, r4
 800f228:	9b03      	ldr	r3, [sp, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f6bf af30 	bge.w	800f090 <_dtoa_r+0x718>
 800f230:	9b00      	ldr	r3, [sp, #0]
 800f232:	9a03      	ldr	r2, [sp, #12]
 800f234:	1a9e      	subs	r6, r3, r2
 800f236:	2300      	movs	r3, #0
 800f238:	e72b      	b.n	800f092 <_dtoa_r+0x71a>
 800f23a:	9b08      	ldr	r3, [sp, #32]
 800f23c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f23e:	9408      	str	r4, [sp, #32]
 800f240:	1ae3      	subs	r3, r4, r3
 800f242:	441a      	add	r2, r3
 800f244:	9e00      	ldr	r6, [sp, #0]
 800f246:	9b03      	ldr	r3, [sp, #12]
 800f248:	920d      	str	r2, [sp, #52]	@ 0x34
 800f24a:	2400      	movs	r4, #0
 800f24c:	e721      	b.n	800f092 <_dtoa_r+0x71a>
 800f24e:	9c08      	ldr	r4, [sp, #32]
 800f250:	9e00      	ldr	r6, [sp, #0]
 800f252:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f254:	e728      	b.n	800f0a8 <_dtoa_r+0x730>
 800f256:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f25a:	e751      	b.n	800f100 <_dtoa_r+0x788>
 800f25c:	9a08      	ldr	r2, [sp, #32]
 800f25e:	9902      	ldr	r1, [sp, #8]
 800f260:	e750      	b.n	800f104 <_dtoa_r+0x78c>
 800f262:	f8cd 8008 	str.w	r8, [sp, #8]
 800f266:	e751      	b.n	800f10c <_dtoa_r+0x794>
 800f268:	2300      	movs	r3, #0
 800f26a:	e779      	b.n	800f160 <_dtoa_r+0x7e8>
 800f26c:	9b04      	ldr	r3, [sp, #16]
 800f26e:	e777      	b.n	800f160 <_dtoa_r+0x7e8>
 800f270:	2300      	movs	r3, #0
 800f272:	9308      	str	r3, [sp, #32]
 800f274:	e779      	b.n	800f16a <_dtoa_r+0x7f2>
 800f276:	d093      	beq.n	800f1a0 <_dtoa_r+0x828>
 800f278:	9a00      	ldr	r2, [sp, #0]
 800f27a:	331c      	adds	r3, #28
 800f27c:	441a      	add	r2, r3
 800f27e:	9200      	str	r2, [sp, #0]
 800f280:	9a06      	ldr	r2, [sp, #24]
 800f282:	441a      	add	r2, r3
 800f284:	441e      	add	r6, r3
 800f286:	9206      	str	r2, [sp, #24]
 800f288:	e78a      	b.n	800f1a0 <_dtoa_r+0x828>
 800f28a:	4603      	mov	r3, r0
 800f28c:	e7f4      	b.n	800f278 <_dtoa_r+0x900>
 800f28e:	9b03      	ldr	r3, [sp, #12]
 800f290:	2b00      	cmp	r3, #0
 800f292:	46b8      	mov	r8, r7
 800f294:	dc20      	bgt.n	800f2d8 <_dtoa_r+0x960>
 800f296:	469b      	mov	fp, r3
 800f298:	9b07      	ldr	r3, [sp, #28]
 800f29a:	2b02      	cmp	r3, #2
 800f29c:	dd1e      	ble.n	800f2dc <_dtoa_r+0x964>
 800f29e:	f1bb 0f00 	cmp.w	fp, #0
 800f2a2:	f47f adb1 	bne.w	800ee08 <_dtoa_r+0x490>
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	465b      	mov	r3, fp
 800f2aa:	2205      	movs	r2, #5
 800f2ac:	4648      	mov	r0, r9
 800f2ae:	f000 fa95 	bl	800f7dc <__multadd>
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	9802      	ldr	r0, [sp, #8]
 800f2b8:	f000 fca0 	bl	800fbfc <__mcmp>
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	f77f ada3 	ble.w	800ee08 <_dtoa_r+0x490>
 800f2c2:	4656      	mov	r6, sl
 800f2c4:	2331      	movs	r3, #49	@ 0x31
 800f2c6:	f806 3b01 	strb.w	r3, [r6], #1
 800f2ca:	f108 0801 	add.w	r8, r8, #1
 800f2ce:	e59f      	b.n	800ee10 <_dtoa_r+0x498>
 800f2d0:	9c03      	ldr	r4, [sp, #12]
 800f2d2:	46b8      	mov	r8, r7
 800f2d4:	4625      	mov	r5, r4
 800f2d6:	e7f4      	b.n	800f2c2 <_dtoa_r+0x94a>
 800f2d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f2dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	f000 8101 	beq.w	800f4e6 <_dtoa_r+0xb6e>
 800f2e4:	2e00      	cmp	r6, #0
 800f2e6:	dd05      	ble.n	800f2f4 <_dtoa_r+0x97c>
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	4632      	mov	r2, r6
 800f2ec:	4648      	mov	r0, r9
 800f2ee:	f000 fc19 	bl	800fb24 <__lshift>
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	9b08      	ldr	r3, [sp, #32]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d05c      	beq.n	800f3b4 <_dtoa_r+0xa3c>
 800f2fa:	6869      	ldr	r1, [r5, #4]
 800f2fc:	4648      	mov	r0, r9
 800f2fe:	f000 fa0b 	bl	800f718 <_Balloc>
 800f302:	4606      	mov	r6, r0
 800f304:	b928      	cbnz	r0, 800f312 <_dtoa_r+0x99a>
 800f306:	4b82      	ldr	r3, [pc, #520]	@ (800f510 <_dtoa_r+0xb98>)
 800f308:	4602      	mov	r2, r0
 800f30a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f30e:	f7ff bb4a 	b.w	800e9a6 <_dtoa_r+0x2e>
 800f312:	692a      	ldr	r2, [r5, #16]
 800f314:	3202      	adds	r2, #2
 800f316:	0092      	lsls	r2, r2, #2
 800f318:	f105 010c 	add.w	r1, r5, #12
 800f31c:	300c      	adds	r0, #12
 800f31e:	f7ff fa94 	bl	800e84a <memcpy>
 800f322:	2201      	movs	r2, #1
 800f324:	4631      	mov	r1, r6
 800f326:	4648      	mov	r0, r9
 800f328:	f000 fbfc 	bl	800fb24 <__lshift>
 800f32c:	f10a 0301 	add.w	r3, sl, #1
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	eb0a 030b 	add.w	r3, sl, fp
 800f336:	9308      	str	r3, [sp, #32]
 800f338:	9b04      	ldr	r3, [sp, #16]
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	462f      	mov	r7, r5
 800f340:	9306      	str	r3, [sp, #24]
 800f342:	4605      	mov	r5, r0
 800f344:	9b00      	ldr	r3, [sp, #0]
 800f346:	9802      	ldr	r0, [sp, #8]
 800f348:	4621      	mov	r1, r4
 800f34a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f34e:	f7ff fa8a 	bl	800e866 <quorem>
 800f352:	4603      	mov	r3, r0
 800f354:	3330      	adds	r3, #48	@ 0x30
 800f356:	9003      	str	r0, [sp, #12]
 800f358:	4639      	mov	r1, r7
 800f35a:	9802      	ldr	r0, [sp, #8]
 800f35c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f35e:	f000 fc4d 	bl	800fbfc <__mcmp>
 800f362:	462a      	mov	r2, r5
 800f364:	9004      	str	r0, [sp, #16]
 800f366:	4621      	mov	r1, r4
 800f368:	4648      	mov	r0, r9
 800f36a:	f000 fc63 	bl	800fc34 <__mdiff>
 800f36e:	68c2      	ldr	r2, [r0, #12]
 800f370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f372:	4606      	mov	r6, r0
 800f374:	bb02      	cbnz	r2, 800f3b8 <_dtoa_r+0xa40>
 800f376:	4601      	mov	r1, r0
 800f378:	9802      	ldr	r0, [sp, #8]
 800f37a:	f000 fc3f 	bl	800fbfc <__mcmp>
 800f37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f380:	4602      	mov	r2, r0
 800f382:	4631      	mov	r1, r6
 800f384:	4648      	mov	r0, r9
 800f386:	920c      	str	r2, [sp, #48]	@ 0x30
 800f388:	9309      	str	r3, [sp, #36]	@ 0x24
 800f38a:	f000 fa05 	bl	800f798 <_Bfree>
 800f38e:	9b07      	ldr	r3, [sp, #28]
 800f390:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f392:	9e00      	ldr	r6, [sp, #0]
 800f394:	ea42 0103 	orr.w	r1, r2, r3
 800f398:	9b06      	ldr	r3, [sp, #24]
 800f39a:	4319      	orrs	r1, r3
 800f39c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f39e:	d10d      	bne.n	800f3bc <_dtoa_r+0xa44>
 800f3a0:	2b39      	cmp	r3, #57	@ 0x39
 800f3a2:	d027      	beq.n	800f3f4 <_dtoa_r+0xa7c>
 800f3a4:	9a04      	ldr	r2, [sp, #16]
 800f3a6:	2a00      	cmp	r2, #0
 800f3a8:	dd01      	ble.n	800f3ae <_dtoa_r+0xa36>
 800f3aa:	9b03      	ldr	r3, [sp, #12]
 800f3ac:	3331      	adds	r3, #49	@ 0x31
 800f3ae:	f88b 3000 	strb.w	r3, [fp]
 800f3b2:	e52e      	b.n	800ee12 <_dtoa_r+0x49a>
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	e7b9      	b.n	800f32c <_dtoa_r+0x9b4>
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	e7e2      	b.n	800f382 <_dtoa_r+0xa0a>
 800f3bc:	9904      	ldr	r1, [sp, #16]
 800f3be:	2900      	cmp	r1, #0
 800f3c0:	db04      	blt.n	800f3cc <_dtoa_r+0xa54>
 800f3c2:	9807      	ldr	r0, [sp, #28]
 800f3c4:	4301      	orrs	r1, r0
 800f3c6:	9806      	ldr	r0, [sp, #24]
 800f3c8:	4301      	orrs	r1, r0
 800f3ca:	d120      	bne.n	800f40e <_dtoa_r+0xa96>
 800f3cc:	2a00      	cmp	r2, #0
 800f3ce:	ddee      	ble.n	800f3ae <_dtoa_r+0xa36>
 800f3d0:	9902      	ldr	r1, [sp, #8]
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	4648      	mov	r0, r9
 800f3d8:	f000 fba4 	bl	800fb24 <__lshift>
 800f3dc:	4621      	mov	r1, r4
 800f3de:	9002      	str	r0, [sp, #8]
 800f3e0:	f000 fc0c 	bl	800fbfc <__mcmp>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	9b00      	ldr	r3, [sp, #0]
 800f3e8:	dc02      	bgt.n	800f3f0 <_dtoa_r+0xa78>
 800f3ea:	d1e0      	bne.n	800f3ae <_dtoa_r+0xa36>
 800f3ec:	07da      	lsls	r2, r3, #31
 800f3ee:	d5de      	bpl.n	800f3ae <_dtoa_r+0xa36>
 800f3f0:	2b39      	cmp	r3, #57	@ 0x39
 800f3f2:	d1da      	bne.n	800f3aa <_dtoa_r+0xa32>
 800f3f4:	2339      	movs	r3, #57	@ 0x39
 800f3f6:	f88b 3000 	strb.w	r3, [fp]
 800f3fa:	4633      	mov	r3, r6
 800f3fc:	461e      	mov	r6, r3
 800f3fe:	3b01      	subs	r3, #1
 800f400:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f404:	2a39      	cmp	r2, #57	@ 0x39
 800f406:	d04e      	beq.n	800f4a6 <_dtoa_r+0xb2e>
 800f408:	3201      	adds	r2, #1
 800f40a:	701a      	strb	r2, [r3, #0]
 800f40c:	e501      	b.n	800ee12 <_dtoa_r+0x49a>
 800f40e:	2a00      	cmp	r2, #0
 800f410:	dd03      	ble.n	800f41a <_dtoa_r+0xaa2>
 800f412:	2b39      	cmp	r3, #57	@ 0x39
 800f414:	d0ee      	beq.n	800f3f4 <_dtoa_r+0xa7c>
 800f416:	3301      	adds	r3, #1
 800f418:	e7c9      	b.n	800f3ae <_dtoa_r+0xa36>
 800f41a:	9a00      	ldr	r2, [sp, #0]
 800f41c:	9908      	ldr	r1, [sp, #32]
 800f41e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f422:	428a      	cmp	r2, r1
 800f424:	d028      	beq.n	800f478 <_dtoa_r+0xb00>
 800f426:	9902      	ldr	r1, [sp, #8]
 800f428:	2300      	movs	r3, #0
 800f42a:	220a      	movs	r2, #10
 800f42c:	4648      	mov	r0, r9
 800f42e:	f000 f9d5 	bl	800f7dc <__multadd>
 800f432:	42af      	cmp	r7, r5
 800f434:	9002      	str	r0, [sp, #8]
 800f436:	f04f 0300 	mov.w	r3, #0
 800f43a:	f04f 020a 	mov.w	r2, #10
 800f43e:	4639      	mov	r1, r7
 800f440:	4648      	mov	r0, r9
 800f442:	d107      	bne.n	800f454 <_dtoa_r+0xadc>
 800f444:	f000 f9ca 	bl	800f7dc <__multadd>
 800f448:	4607      	mov	r7, r0
 800f44a:	4605      	mov	r5, r0
 800f44c:	9b00      	ldr	r3, [sp, #0]
 800f44e:	3301      	adds	r3, #1
 800f450:	9300      	str	r3, [sp, #0]
 800f452:	e777      	b.n	800f344 <_dtoa_r+0x9cc>
 800f454:	f000 f9c2 	bl	800f7dc <__multadd>
 800f458:	4629      	mov	r1, r5
 800f45a:	4607      	mov	r7, r0
 800f45c:	2300      	movs	r3, #0
 800f45e:	220a      	movs	r2, #10
 800f460:	4648      	mov	r0, r9
 800f462:	f000 f9bb 	bl	800f7dc <__multadd>
 800f466:	4605      	mov	r5, r0
 800f468:	e7f0      	b.n	800f44c <_dtoa_r+0xad4>
 800f46a:	f1bb 0f00 	cmp.w	fp, #0
 800f46e:	bfcc      	ite	gt
 800f470:	465e      	movgt	r6, fp
 800f472:	2601      	movle	r6, #1
 800f474:	4456      	add	r6, sl
 800f476:	2700      	movs	r7, #0
 800f478:	9902      	ldr	r1, [sp, #8]
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	2201      	movs	r2, #1
 800f47e:	4648      	mov	r0, r9
 800f480:	f000 fb50 	bl	800fb24 <__lshift>
 800f484:	4621      	mov	r1, r4
 800f486:	9002      	str	r0, [sp, #8]
 800f488:	f000 fbb8 	bl	800fbfc <__mcmp>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	dcb4      	bgt.n	800f3fa <_dtoa_r+0xa82>
 800f490:	d102      	bne.n	800f498 <_dtoa_r+0xb20>
 800f492:	9b00      	ldr	r3, [sp, #0]
 800f494:	07db      	lsls	r3, r3, #31
 800f496:	d4b0      	bmi.n	800f3fa <_dtoa_r+0xa82>
 800f498:	4633      	mov	r3, r6
 800f49a:	461e      	mov	r6, r3
 800f49c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4a0:	2a30      	cmp	r2, #48	@ 0x30
 800f4a2:	d0fa      	beq.n	800f49a <_dtoa_r+0xb22>
 800f4a4:	e4b5      	b.n	800ee12 <_dtoa_r+0x49a>
 800f4a6:	459a      	cmp	sl, r3
 800f4a8:	d1a8      	bne.n	800f3fc <_dtoa_r+0xa84>
 800f4aa:	2331      	movs	r3, #49	@ 0x31
 800f4ac:	f108 0801 	add.w	r8, r8, #1
 800f4b0:	f88a 3000 	strb.w	r3, [sl]
 800f4b4:	e4ad      	b.n	800ee12 <_dtoa_r+0x49a>
 800f4b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f4b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f514 <_dtoa_r+0xb9c>
 800f4bc:	b11b      	cbz	r3, 800f4c6 <_dtoa_r+0xb4e>
 800f4be:	f10a 0308 	add.w	r3, sl, #8
 800f4c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f4c4:	6013      	str	r3, [r2, #0]
 800f4c6:	4650      	mov	r0, sl
 800f4c8:	b017      	add	sp, #92	@ 0x5c
 800f4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ce:	9b07      	ldr	r3, [sp, #28]
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	f77f ae2e 	ble.w	800f132 <_dtoa_r+0x7ba>
 800f4d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f4d8:	9308      	str	r3, [sp, #32]
 800f4da:	2001      	movs	r0, #1
 800f4dc:	e64d      	b.n	800f17a <_dtoa_r+0x802>
 800f4de:	f1bb 0f00 	cmp.w	fp, #0
 800f4e2:	f77f aed9 	ble.w	800f298 <_dtoa_r+0x920>
 800f4e6:	4656      	mov	r6, sl
 800f4e8:	9802      	ldr	r0, [sp, #8]
 800f4ea:	4621      	mov	r1, r4
 800f4ec:	f7ff f9bb 	bl	800e866 <quorem>
 800f4f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f4f4:	f806 3b01 	strb.w	r3, [r6], #1
 800f4f8:	eba6 020a 	sub.w	r2, r6, sl
 800f4fc:	4593      	cmp	fp, r2
 800f4fe:	ddb4      	ble.n	800f46a <_dtoa_r+0xaf2>
 800f500:	9902      	ldr	r1, [sp, #8]
 800f502:	2300      	movs	r3, #0
 800f504:	220a      	movs	r2, #10
 800f506:	4648      	mov	r0, r9
 800f508:	f000 f968 	bl	800f7dc <__multadd>
 800f50c:	9002      	str	r0, [sp, #8]
 800f50e:	e7eb      	b.n	800f4e8 <_dtoa_r+0xb70>
 800f510:	08011c80 	.word	0x08011c80
 800f514:	08011c04 	.word	0x08011c04

0800f518 <_free_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	4605      	mov	r5, r0
 800f51c:	2900      	cmp	r1, #0
 800f51e:	d041      	beq.n	800f5a4 <_free_r+0x8c>
 800f520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f524:	1f0c      	subs	r4, r1, #4
 800f526:	2b00      	cmp	r3, #0
 800f528:	bfb8      	it	lt
 800f52a:	18e4      	addlt	r4, r4, r3
 800f52c:	f000 f8e8 	bl	800f700 <__malloc_lock>
 800f530:	4a1d      	ldr	r2, [pc, #116]	@ (800f5a8 <_free_r+0x90>)
 800f532:	6813      	ldr	r3, [r2, #0]
 800f534:	b933      	cbnz	r3, 800f544 <_free_r+0x2c>
 800f536:	6063      	str	r3, [r4, #4]
 800f538:	6014      	str	r4, [r2, #0]
 800f53a:	4628      	mov	r0, r5
 800f53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f540:	f000 b8e4 	b.w	800f70c <__malloc_unlock>
 800f544:	42a3      	cmp	r3, r4
 800f546:	d908      	bls.n	800f55a <_free_r+0x42>
 800f548:	6820      	ldr	r0, [r4, #0]
 800f54a:	1821      	adds	r1, r4, r0
 800f54c:	428b      	cmp	r3, r1
 800f54e:	bf01      	itttt	eq
 800f550:	6819      	ldreq	r1, [r3, #0]
 800f552:	685b      	ldreq	r3, [r3, #4]
 800f554:	1809      	addeq	r1, r1, r0
 800f556:	6021      	streq	r1, [r4, #0]
 800f558:	e7ed      	b.n	800f536 <_free_r+0x1e>
 800f55a:	461a      	mov	r2, r3
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	b10b      	cbz	r3, 800f564 <_free_r+0x4c>
 800f560:	42a3      	cmp	r3, r4
 800f562:	d9fa      	bls.n	800f55a <_free_r+0x42>
 800f564:	6811      	ldr	r1, [r2, #0]
 800f566:	1850      	adds	r0, r2, r1
 800f568:	42a0      	cmp	r0, r4
 800f56a:	d10b      	bne.n	800f584 <_free_r+0x6c>
 800f56c:	6820      	ldr	r0, [r4, #0]
 800f56e:	4401      	add	r1, r0
 800f570:	1850      	adds	r0, r2, r1
 800f572:	4283      	cmp	r3, r0
 800f574:	6011      	str	r1, [r2, #0]
 800f576:	d1e0      	bne.n	800f53a <_free_r+0x22>
 800f578:	6818      	ldr	r0, [r3, #0]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	6053      	str	r3, [r2, #4]
 800f57e:	4408      	add	r0, r1
 800f580:	6010      	str	r0, [r2, #0]
 800f582:	e7da      	b.n	800f53a <_free_r+0x22>
 800f584:	d902      	bls.n	800f58c <_free_r+0x74>
 800f586:	230c      	movs	r3, #12
 800f588:	602b      	str	r3, [r5, #0]
 800f58a:	e7d6      	b.n	800f53a <_free_r+0x22>
 800f58c:	6820      	ldr	r0, [r4, #0]
 800f58e:	1821      	adds	r1, r4, r0
 800f590:	428b      	cmp	r3, r1
 800f592:	bf04      	itt	eq
 800f594:	6819      	ldreq	r1, [r3, #0]
 800f596:	685b      	ldreq	r3, [r3, #4]
 800f598:	6063      	str	r3, [r4, #4]
 800f59a:	bf04      	itt	eq
 800f59c:	1809      	addeq	r1, r1, r0
 800f59e:	6021      	streq	r1, [r4, #0]
 800f5a0:	6054      	str	r4, [r2, #4]
 800f5a2:	e7ca      	b.n	800f53a <_free_r+0x22>
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20001934 	.word	0x20001934

0800f5ac <malloc>:
 800f5ac:	4b02      	ldr	r3, [pc, #8]	@ (800f5b8 <malloc+0xc>)
 800f5ae:	4601      	mov	r1, r0
 800f5b0:	6818      	ldr	r0, [r3, #0]
 800f5b2:	f000 b825 	b.w	800f600 <_malloc_r>
 800f5b6:	bf00      	nop
 800f5b8:	20000140 	.word	0x20000140

0800f5bc <sbrk_aligned>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	4e0f      	ldr	r6, [pc, #60]	@ (800f5fc <sbrk_aligned+0x40>)
 800f5c0:	460c      	mov	r4, r1
 800f5c2:	6831      	ldr	r1, [r6, #0]
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	b911      	cbnz	r1, 800f5ce <sbrk_aligned+0x12>
 800f5c8:	f001 f804 	bl	80105d4 <_sbrk_r>
 800f5cc:	6030      	str	r0, [r6, #0]
 800f5ce:	4621      	mov	r1, r4
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f000 ffff 	bl	80105d4 <_sbrk_r>
 800f5d6:	1c43      	adds	r3, r0, #1
 800f5d8:	d103      	bne.n	800f5e2 <sbrk_aligned+0x26>
 800f5da:	f04f 34ff 	mov.w	r4, #4294967295
 800f5de:	4620      	mov	r0, r4
 800f5e0:	bd70      	pop	{r4, r5, r6, pc}
 800f5e2:	1cc4      	adds	r4, r0, #3
 800f5e4:	f024 0403 	bic.w	r4, r4, #3
 800f5e8:	42a0      	cmp	r0, r4
 800f5ea:	d0f8      	beq.n	800f5de <sbrk_aligned+0x22>
 800f5ec:	1a21      	subs	r1, r4, r0
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	f000 fff0 	bl	80105d4 <_sbrk_r>
 800f5f4:	3001      	adds	r0, #1
 800f5f6:	d1f2      	bne.n	800f5de <sbrk_aligned+0x22>
 800f5f8:	e7ef      	b.n	800f5da <sbrk_aligned+0x1e>
 800f5fa:	bf00      	nop
 800f5fc:	20001930 	.word	0x20001930

0800f600 <_malloc_r>:
 800f600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f604:	1ccd      	adds	r5, r1, #3
 800f606:	f025 0503 	bic.w	r5, r5, #3
 800f60a:	3508      	adds	r5, #8
 800f60c:	2d0c      	cmp	r5, #12
 800f60e:	bf38      	it	cc
 800f610:	250c      	movcc	r5, #12
 800f612:	2d00      	cmp	r5, #0
 800f614:	4606      	mov	r6, r0
 800f616:	db01      	blt.n	800f61c <_malloc_r+0x1c>
 800f618:	42a9      	cmp	r1, r5
 800f61a:	d904      	bls.n	800f626 <_malloc_r+0x26>
 800f61c:	230c      	movs	r3, #12
 800f61e:	6033      	str	r3, [r6, #0]
 800f620:	2000      	movs	r0, #0
 800f622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f6fc <_malloc_r+0xfc>
 800f62a:	f000 f869 	bl	800f700 <__malloc_lock>
 800f62e:	f8d8 3000 	ldr.w	r3, [r8]
 800f632:	461c      	mov	r4, r3
 800f634:	bb44      	cbnz	r4, 800f688 <_malloc_r+0x88>
 800f636:	4629      	mov	r1, r5
 800f638:	4630      	mov	r0, r6
 800f63a:	f7ff ffbf 	bl	800f5bc <sbrk_aligned>
 800f63e:	1c43      	adds	r3, r0, #1
 800f640:	4604      	mov	r4, r0
 800f642:	d158      	bne.n	800f6f6 <_malloc_r+0xf6>
 800f644:	f8d8 4000 	ldr.w	r4, [r8]
 800f648:	4627      	mov	r7, r4
 800f64a:	2f00      	cmp	r7, #0
 800f64c:	d143      	bne.n	800f6d6 <_malloc_r+0xd6>
 800f64e:	2c00      	cmp	r4, #0
 800f650:	d04b      	beq.n	800f6ea <_malloc_r+0xea>
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	4639      	mov	r1, r7
 800f656:	4630      	mov	r0, r6
 800f658:	eb04 0903 	add.w	r9, r4, r3
 800f65c:	f000 ffba 	bl	80105d4 <_sbrk_r>
 800f660:	4581      	cmp	r9, r0
 800f662:	d142      	bne.n	800f6ea <_malloc_r+0xea>
 800f664:	6821      	ldr	r1, [r4, #0]
 800f666:	1a6d      	subs	r5, r5, r1
 800f668:	4629      	mov	r1, r5
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7ff ffa6 	bl	800f5bc <sbrk_aligned>
 800f670:	3001      	adds	r0, #1
 800f672:	d03a      	beq.n	800f6ea <_malloc_r+0xea>
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	442b      	add	r3, r5
 800f678:	6023      	str	r3, [r4, #0]
 800f67a:	f8d8 3000 	ldr.w	r3, [r8]
 800f67e:	685a      	ldr	r2, [r3, #4]
 800f680:	bb62      	cbnz	r2, 800f6dc <_malloc_r+0xdc>
 800f682:	f8c8 7000 	str.w	r7, [r8]
 800f686:	e00f      	b.n	800f6a8 <_malloc_r+0xa8>
 800f688:	6822      	ldr	r2, [r4, #0]
 800f68a:	1b52      	subs	r2, r2, r5
 800f68c:	d420      	bmi.n	800f6d0 <_malloc_r+0xd0>
 800f68e:	2a0b      	cmp	r2, #11
 800f690:	d917      	bls.n	800f6c2 <_malloc_r+0xc2>
 800f692:	1961      	adds	r1, r4, r5
 800f694:	42a3      	cmp	r3, r4
 800f696:	6025      	str	r5, [r4, #0]
 800f698:	bf18      	it	ne
 800f69a:	6059      	strne	r1, [r3, #4]
 800f69c:	6863      	ldr	r3, [r4, #4]
 800f69e:	bf08      	it	eq
 800f6a0:	f8c8 1000 	streq.w	r1, [r8]
 800f6a4:	5162      	str	r2, [r4, r5]
 800f6a6:	604b      	str	r3, [r1, #4]
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	f000 f82f 	bl	800f70c <__malloc_unlock>
 800f6ae:	f104 000b 	add.w	r0, r4, #11
 800f6b2:	1d23      	adds	r3, r4, #4
 800f6b4:	f020 0007 	bic.w	r0, r0, #7
 800f6b8:	1ac2      	subs	r2, r0, r3
 800f6ba:	bf1c      	itt	ne
 800f6bc:	1a1b      	subne	r3, r3, r0
 800f6be:	50a3      	strne	r3, [r4, r2]
 800f6c0:	e7af      	b.n	800f622 <_malloc_r+0x22>
 800f6c2:	6862      	ldr	r2, [r4, #4]
 800f6c4:	42a3      	cmp	r3, r4
 800f6c6:	bf0c      	ite	eq
 800f6c8:	f8c8 2000 	streq.w	r2, [r8]
 800f6cc:	605a      	strne	r2, [r3, #4]
 800f6ce:	e7eb      	b.n	800f6a8 <_malloc_r+0xa8>
 800f6d0:	4623      	mov	r3, r4
 800f6d2:	6864      	ldr	r4, [r4, #4]
 800f6d4:	e7ae      	b.n	800f634 <_malloc_r+0x34>
 800f6d6:	463c      	mov	r4, r7
 800f6d8:	687f      	ldr	r7, [r7, #4]
 800f6da:	e7b6      	b.n	800f64a <_malloc_r+0x4a>
 800f6dc:	461a      	mov	r2, r3
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	42a3      	cmp	r3, r4
 800f6e2:	d1fb      	bne.n	800f6dc <_malloc_r+0xdc>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	6053      	str	r3, [r2, #4]
 800f6e8:	e7de      	b.n	800f6a8 <_malloc_r+0xa8>
 800f6ea:	230c      	movs	r3, #12
 800f6ec:	6033      	str	r3, [r6, #0]
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f000 f80c 	bl	800f70c <__malloc_unlock>
 800f6f4:	e794      	b.n	800f620 <_malloc_r+0x20>
 800f6f6:	6005      	str	r5, [r0, #0]
 800f6f8:	e7d6      	b.n	800f6a8 <_malloc_r+0xa8>
 800f6fa:	bf00      	nop
 800f6fc:	20001934 	.word	0x20001934

0800f700 <__malloc_lock>:
 800f700:	4801      	ldr	r0, [pc, #4]	@ (800f708 <__malloc_lock+0x8>)
 800f702:	f7ff b8a0 	b.w	800e846 <__retarget_lock_acquire_recursive>
 800f706:	bf00      	nop
 800f708:	2000192c 	.word	0x2000192c

0800f70c <__malloc_unlock>:
 800f70c:	4801      	ldr	r0, [pc, #4]	@ (800f714 <__malloc_unlock+0x8>)
 800f70e:	f7ff b89b 	b.w	800e848 <__retarget_lock_release_recursive>
 800f712:	bf00      	nop
 800f714:	2000192c 	.word	0x2000192c

0800f718 <_Balloc>:
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	69c6      	ldr	r6, [r0, #28]
 800f71c:	4604      	mov	r4, r0
 800f71e:	460d      	mov	r5, r1
 800f720:	b976      	cbnz	r6, 800f740 <_Balloc+0x28>
 800f722:	2010      	movs	r0, #16
 800f724:	f7ff ff42 	bl	800f5ac <malloc>
 800f728:	4602      	mov	r2, r0
 800f72a:	61e0      	str	r0, [r4, #28]
 800f72c:	b920      	cbnz	r0, 800f738 <_Balloc+0x20>
 800f72e:	4b18      	ldr	r3, [pc, #96]	@ (800f790 <_Balloc+0x78>)
 800f730:	4818      	ldr	r0, [pc, #96]	@ (800f794 <_Balloc+0x7c>)
 800f732:	216b      	movs	r1, #107	@ 0x6b
 800f734:	f000 ff5e 	bl	80105f4 <__assert_func>
 800f738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f73c:	6006      	str	r6, [r0, #0]
 800f73e:	60c6      	str	r6, [r0, #12]
 800f740:	69e6      	ldr	r6, [r4, #28]
 800f742:	68f3      	ldr	r3, [r6, #12]
 800f744:	b183      	cbz	r3, 800f768 <_Balloc+0x50>
 800f746:	69e3      	ldr	r3, [r4, #28]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f74e:	b9b8      	cbnz	r0, 800f780 <_Balloc+0x68>
 800f750:	2101      	movs	r1, #1
 800f752:	fa01 f605 	lsl.w	r6, r1, r5
 800f756:	1d72      	adds	r2, r6, #5
 800f758:	0092      	lsls	r2, r2, #2
 800f75a:	4620      	mov	r0, r4
 800f75c:	f000 ff68 	bl	8010630 <_calloc_r>
 800f760:	b160      	cbz	r0, 800f77c <_Balloc+0x64>
 800f762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f766:	e00e      	b.n	800f786 <_Balloc+0x6e>
 800f768:	2221      	movs	r2, #33	@ 0x21
 800f76a:	2104      	movs	r1, #4
 800f76c:	4620      	mov	r0, r4
 800f76e:	f000 ff5f 	bl	8010630 <_calloc_r>
 800f772:	69e3      	ldr	r3, [r4, #28]
 800f774:	60f0      	str	r0, [r6, #12]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d1e4      	bne.n	800f746 <_Balloc+0x2e>
 800f77c:	2000      	movs	r0, #0
 800f77e:	bd70      	pop	{r4, r5, r6, pc}
 800f780:	6802      	ldr	r2, [r0, #0]
 800f782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f786:	2300      	movs	r3, #0
 800f788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f78c:	e7f7      	b.n	800f77e <_Balloc+0x66>
 800f78e:	bf00      	nop
 800f790:	08011c11 	.word	0x08011c11
 800f794:	08011c91 	.word	0x08011c91

0800f798 <_Bfree>:
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	69c6      	ldr	r6, [r0, #28]
 800f79c:	4605      	mov	r5, r0
 800f79e:	460c      	mov	r4, r1
 800f7a0:	b976      	cbnz	r6, 800f7c0 <_Bfree+0x28>
 800f7a2:	2010      	movs	r0, #16
 800f7a4:	f7ff ff02 	bl	800f5ac <malloc>
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	61e8      	str	r0, [r5, #28]
 800f7ac:	b920      	cbnz	r0, 800f7b8 <_Bfree+0x20>
 800f7ae:	4b09      	ldr	r3, [pc, #36]	@ (800f7d4 <_Bfree+0x3c>)
 800f7b0:	4809      	ldr	r0, [pc, #36]	@ (800f7d8 <_Bfree+0x40>)
 800f7b2:	218f      	movs	r1, #143	@ 0x8f
 800f7b4:	f000 ff1e 	bl	80105f4 <__assert_func>
 800f7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7bc:	6006      	str	r6, [r0, #0]
 800f7be:	60c6      	str	r6, [r0, #12]
 800f7c0:	b13c      	cbz	r4, 800f7d2 <_Bfree+0x3a>
 800f7c2:	69eb      	ldr	r3, [r5, #28]
 800f7c4:	6862      	ldr	r2, [r4, #4]
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7cc:	6021      	str	r1, [r4, #0]
 800f7ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7d2:	bd70      	pop	{r4, r5, r6, pc}
 800f7d4:	08011c11 	.word	0x08011c11
 800f7d8:	08011c91 	.word	0x08011c91

0800f7dc <__multadd>:
 800f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e0:	690d      	ldr	r5, [r1, #16]
 800f7e2:	4607      	mov	r7, r0
 800f7e4:	460c      	mov	r4, r1
 800f7e6:	461e      	mov	r6, r3
 800f7e8:	f101 0c14 	add.w	ip, r1, #20
 800f7ec:	2000      	movs	r0, #0
 800f7ee:	f8dc 3000 	ldr.w	r3, [ip]
 800f7f2:	b299      	uxth	r1, r3
 800f7f4:	fb02 6101 	mla	r1, r2, r1, r6
 800f7f8:	0c1e      	lsrs	r6, r3, #16
 800f7fa:	0c0b      	lsrs	r3, r1, #16
 800f7fc:	fb02 3306 	mla	r3, r2, r6, r3
 800f800:	b289      	uxth	r1, r1
 800f802:	3001      	adds	r0, #1
 800f804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f808:	4285      	cmp	r5, r0
 800f80a:	f84c 1b04 	str.w	r1, [ip], #4
 800f80e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f812:	dcec      	bgt.n	800f7ee <__multadd+0x12>
 800f814:	b30e      	cbz	r6, 800f85a <__multadd+0x7e>
 800f816:	68a3      	ldr	r3, [r4, #8]
 800f818:	42ab      	cmp	r3, r5
 800f81a:	dc19      	bgt.n	800f850 <__multadd+0x74>
 800f81c:	6861      	ldr	r1, [r4, #4]
 800f81e:	4638      	mov	r0, r7
 800f820:	3101      	adds	r1, #1
 800f822:	f7ff ff79 	bl	800f718 <_Balloc>
 800f826:	4680      	mov	r8, r0
 800f828:	b928      	cbnz	r0, 800f836 <__multadd+0x5a>
 800f82a:	4602      	mov	r2, r0
 800f82c:	4b0c      	ldr	r3, [pc, #48]	@ (800f860 <__multadd+0x84>)
 800f82e:	480d      	ldr	r0, [pc, #52]	@ (800f864 <__multadd+0x88>)
 800f830:	21ba      	movs	r1, #186	@ 0xba
 800f832:	f000 fedf 	bl	80105f4 <__assert_func>
 800f836:	6922      	ldr	r2, [r4, #16]
 800f838:	3202      	adds	r2, #2
 800f83a:	f104 010c 	add.w	r1, r4, #12
 800f83e:	0092      	lsls	r2, r2, #2
 800f840:	300c      	adds	r0, #12
 800f842:	f7ff f802 	bl	800e84a <memcpy>
 800f846:	4621      	mov	r1, r4
 800f848:	4638      	mov	r0, r7
 800f84a:	f7ff ffa5 	bl	800f798 <_Bfree>
 800f84e:	4644      	mov	r4, r8
 800f850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f854:	3501      	adds	r5, #1
 800f856:	615e      	str	r6, [r3, #20]
 800f858:	6125      	str	r5, [r4, #16]
 800f85a:	4620      	mov	r0, r4
 800f85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f860:	08011c80 	.word	0x08011c80
 800f864:	08011c91 	.word	0x08011c91

0800f868 <__hi0bits>:
 800f868:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f86c:	4603      	mov	r3, r0
 800f86e:	bf36      	itet	cc
 800f870:	0403      	lslcc	r3, r0, #16
 800f872:	2000      	movcs	r0, #0
 800f874:	2010      	movcc	r0, #16
 800f876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f87a:	bf3c      	itt	cc
 800f87c:	021b      	lslcc	r3, r3, #8
 800f87e:	3008      	addcc	r0, #8
 800f880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f884:	bf3c      	itt	cc
 800f886:	011b      	lslcc	r3, r3, #4
 800f888:	3004      	addcc	r0, #4
 800f88a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f88e:	bf3c      	itt	cc
 800f890:	009b      	lslcc	r3, r3, #2
 800f892:	3002      	addcc	r0, #2
 800f894:	2b00      	cmp	r3, #0
 800f896:	db05      	blt.n	800f8a4 <__hi0bits+0x3c>
 800f898:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f89c:	f100 0001 	add.w	r0, r0, #1
 800f8a0:	bf08      	it	eq
 800f8a2:	2020      	moveq	r0, #32
 800f8a4:	4770      	bx	lr

0800f8a6 <__lo0bits>:
 800f8a6:	6803      	ldr	r3, [r0, #0]
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	f013 0007 	ands.w	r0, r3, #7
 800f8ae:	d00b      	beq.n	800f8c8 <__lo0bits+0x22>
 800f8b0:	07d9      	lsls	r1, r3, #31
 800f8b2:	d421      	bmi.n	800f8f8 <__lo0bits+0x52>
 800f8b4:	0798      	lsls	r0, r3, #30
 800f8b6:	bf49      	itett	mi
 800f8b8:	085b      	lsrmi	r3, r3, #1
 800f8ba:	089b      	lsrpl	r3, r3, #2
 800f8bc:	2001      	movmi	r0, #1
 800f8be:	6013      	strmi	r3, [r2, #0]
 800f8c0:	bf5c      	itt	pl
 800f8c2:	6013      	strpl	r3, [r2, #0]
 800f8c4:	2002      	movpl	r0, #2
 800f8c6:	4770      	bx	lr
 800f8c8:	b299      	uxth	r1, r3
 800f8ca:	b909      	cbnz	r1, 800f8d0 <__lo0bits+0x2a>
 800f8cc:	0c1b      	lsrs	r3, r3, #16
 800f8ce:	2010      	movs	r0, #16
 800f8d0:	b2d9      	uxtb	r1, r3
 800f8d2:	b909      	cbnz	r1, 800f8d8 <__lo0bits+0x32>
 800f8d4:	3008      	adds	r0, #8
 800f8d6:	0a1b      	lsrs	r3, r3, #8
 800f8d8:	0719      	lsls	r1, r3, #28
 800f8da:	bf04      	itt	eq
 800f8dc:	091b      	lsreq	r3, r3, #4
 800f8de:	3004      	addeq	r0, #4
 800f8e0:	0799      	lsls	r1, r3, #30
 800f8e2:	bf04      	itt	eq
 800f8e4:	089b      	lsreq	r3, r3, #2
 800f8e6:	3002      	addeq	r0, #2
 800f8e8:	07d9      	lsls	r1, r3, #31
 800f8ea:	d403      	bmi.n	800f8f4 <__lo0bits+0x4e>
 800f8ec:	085b      	lsrs	r3, r3, #1
 800f8ee:	f100 0001 	add.w	r0, r0, #1
 800f8f2:	d003      	beq.n	800f8fc <__lo0bits+0x56>
 800f8f4:	6013      	str	r3, [r2, #0]
 800f8f6:	4770      	bx	lr
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	4770      	bx	lr
 800f8fc:	2020      	movs	r0, #32
 800f8fe:	4770      	bx	lr

0800f900 <__i2b>:
 800f900:	b510      	push	{r4, lr}
 800f902:	460c      	mov	r4, r1
 800f904:	2101      	movs	r1, #1
 800f906:	f7ff ff07 	bl	800f718 <_Balloc>
 800f90a:	4602      	mov	r2, r0
 800f90c:	b928      	cbnz	r0, 800f91a <__i2b+0x1a>
 800f90e:	4b05      	ldr	r3, [pc, #20]	@ (800f924 <__i2b+0x24>)
 800f910:	4805      	ldr	r0, [pc, #20]	@ (800f928 <__i2b+0x28>)
 800f912:	f240 1145 	movw	r1, #325	@ 0x145
 800f916:	f000 fe6d 	bl	80105f4 <__assert_func>
 800f91a:	2301      	movs	r3, #1
 800f91c:	6144      	str	r4, [r0, #20]
 800f91e:	6103      	str	r3, [r0, #16]
 800f920:	bd10      	pop	{r4, pc}
 800f922:	bf00      	nop
 800f924:	08011c80 	.word	0x08011c80
 800f928:	08011c91 	.word	0x08011c91

0800f92c <__multiply>:
 800f92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f930:	4617      	mov	r7, r2
 800f932:	690a      	ldr	r2, [r1, #16]
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	429a      	cmp	r2, r3
 800f938:	bfa8      	it	ge
 800f93a:	463b      	movge	r3, r7
 800f93c:	4689      	mov	r9, r1
 800f93e:	bfa4      	itt	ge
 800f940:	460f      	movge	r7, r1
 800f942:	4699      	movge	r9, r3
 800f944:	693d      	ldr	r5, [r7, #16]
 800f946:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	6879      	ldr	r1, [r7, #4]
 800f94e:	eb05 060a 	add.w	r6, r5, sl
 800f952:	42b3      	cmp	r3, r6
 800f954:	b085      	sub	sp, #20
 800f956:	bfb8      	it	lt
 800f958:	3101      	addlt	r1, #1
 800f95a:	f7ff fedd 	bl	800f718 <_Balloc>
 800f95e:	b930      	cbnz	r0, 800f96e <__multiply+0x42>
 800f960:	4602      	mov	r2, r0
 800f962:	4b41      	ldr	r3, [pc, #260]	@ (800fa68 <__multiply+0x13c>)
 800f964:	4841      	ldr	r0, [pc, #260]	@ (800fa6c <__multiply+0x140>)
 800f966:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f96a:	f000 fe43 	bl	80105f4 <__assert_func>
 800f96e:	f100 0414 	add.w	r4, r0, #20
 800f972:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f976:	4623      	mov	r3, r4
 800f978:	2200      	movs	r2, #0
 800f97a:	4573      	cmp	r3, lr
 800f97c:	d320      	bcc.n	800f9c0 <__multiply+0x94>
 800f97e:	f107 0814 	add.w	r8, r7, #20
 800f982:	f109 0114 	add.w	r1, r9, #20
 800f986:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f98a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f98e:	9302      	str	r3, [sp, #8]
 800f990:	1beb      	subs	r3, r5, r7
 800f992:	3b15      	subs	r3, #21
 800f994:	f023 0303 	bic.w	r3, r3, #3
 800f998:	3304      	adds	r3, #4
 800f99a:	3715      	adds	r7, #21
 800f99c:	42bd      	cmp	r5, r7
 800f99e:	bf38      	it	cc
 800f9a0:	2304      	movcc	r3, #4
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	9b02      	ldr	r3, [sp, #8]
 800f9a6:	9103      	str	r1, [sp, #12]
 800f9a8:	428b      	cmp	r3, r1
 800f9aa:	d80c      	bhi.n	800f9c6 <__multiply+0x9a>
 800f9ac:	2e00      	cmp	r6, #0
 800f9ae:	dd03      	ble.n	800f9b8 <__multiply+0x8c>
 800f9b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d055      	beq.n	800fa64 <__multiply+0x138>
 800f9b8:	6106      	str	r6, [r0, #16]
 800f9ba:	b005      	add	sp, #20
 800f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c0:	f843 2b04 	str.w	r2, [r3], #4
 800f9c4:	e7d9      	b.n	800f97a <__multiply+0x4e>
 800f9c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f9ca:	f1ba 0f00 	cmp.w	sl, #0
 800f9ce:	d01f      	beq.n	800fa10 <__multiply+0xe4>
 800f9d0:	46c4      	mov	ip, r8
 800f9d2:	46a1      	mov	r9, r4
 800f9d4:	2700      	movs	r7, #0
 800f9d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f9da:	f8d9 3000 	ldr.w	r3, [r9]
 800f9de:	fa1f fb82 	uxth.w	fp, r2
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800f9e8:	443b      	add	r3, r7
 800f9ea:	f8d9 7000 	ldr.w	r7, [r9]
 800f9ee:	0c12      	lsrs	r2, r2, #16
 800f9f0:	0c3f      	lsrs	r7, r7, #16
 800f9f2:	fb0a 7202 	mla	r2, sl, r2, r7
 800f9f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa00:	4565      	cmp	r5, ip
 800fa02:	f849 3b04 	str.w	r3, [r9], #4
 800fa06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fa0a:	d8e4      	bhi.n	800f9d6 <__multiply+0xaa>
 800fa0c:	9b01      	ldr	r3, [sp, #4]
 800fa0e:	50e7      	str	r7, [r4, r3]
 800fa10:	9b03      	ldr	r3, [sp, #12]
 800fa12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fa16:	3104      	adds	r1, #4
 800fa18:	f1b9 0f00 	cmp.w	r9, #0
 800fa1c:	d020      	beq.n	800fa60 <__multiply+0x134>
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	4647      	mov	r7, r8
 800fa22:	46a4      	mov	ip, r4
 800fa24:	f04f 0a00 	mov.w	sl, #0
 800fa28:	f8b7 b000 	ldrh.w	fp, [r7]
 800fa2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fa30:	fb09 220b 	mla	r2, r9, fp, r2
 800fa34:	4452      	add	r2, sl
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa3c:	f84c 3b04 	str.w	r3, [ip], #4
 800fa40:	f857 3b04 	ldr.w	r3, [r7], #4
 800fa44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa48:	f8bc 3000 	ldrh.w	r3, [ip]
 800fa4c:	fb09 330a 	mla	r3, r9, sl, r3
 800fa50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fa54:	42bd      	cmp	r5, r7
 800fa56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa5a:	d8e5      	bhi.n	800fa28 <__multiply+0xfc>
 800fa5c:	9a01      	ldr	r2, [sp, #4]
 800fa5e:	50a3      	str	r3, [r4, r2]
 800fa60:	3404      	adds	r4, #4
 800fa62:	e79f      	b.n	800f9a4 <__multiply+0x78>
 800fa64:	3e01      	subs	r6, #1
 800fa66:	e7a1      	b.n	800f9ac <__multiply+0x80>
 800fa68:	08011c80 	.word	0x08011c80
 800fa6c:	08011c91 	.word	0x08011c91

0800fa70 <__pow5mult>:
 800fa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa74:	4615      	mov	r5, r2
 800fa76:	f012 0203 	ands.w	r2, r2, #3
 800fa7a:	4607      	mov	r7, r0
 800fa7c:	460e      	mov	r6, r1
 800fa7e:	d007      	beq.n	800fa90 <__pow5mult+0x20>
 800fa80:	4c25      	ldr	r4, [pc, #148]	@ (800fb18 <__pow5mult+0xa8>)
 800fa82:	3a01      	subs	r2, #1
 800fa84:	2300      	movs	r3, #0
 800fa86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa8a:	f7ff fea7 	bl	800f7dc <__multadd>
 800fa8e:	4606      	mov	r6, r0
 800fa90:	10ad      	asrs	r5, r5, #2
 800fa92:	d03d      	beq.n	800fb10 <__pow5mult+0xa0>
 800fa94:	69fc      	ldr	r4, [r7, #28]
 800fa96:	b97c      	cbnz	r4, 800fab8 <__pow5mult+0x48>
 800fa98:	2010      	movs	r0, #16
 800fa9a:	f7ff fd87 	bl	800f5ac <malloc>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	61f8      	str	r0, [r7, #28]
 800faa2:	b928      	cbnz	r0, 800fab0 <__pow5mult+0x40>
 800faa4:	4b1d      	ldr	r3, [pc, #116]	@ (800fb1c <__pow5mult+0xac>)
 800faa6:	481e      	ldr	r0, [pc, #120]	@ (800fb20 <__pow5mult+0xb0>)
 800faa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800faac:	f000 fda2 	bl	80105f4 <__assert_func>
 800fab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fab4:	6004      	str	r4, [r0, #0]
 800fab6:	60c4      	str	r4, [r0, #12]
 800fab8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fabc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fac0:	b94c      	cbnz	r4, 800fad6 <__pow5mult+0x66>
 800fac2:	f240 2171 	movw	r1, #625	@ 0x271
 800fac6:	4638      	mov	r0, r7
 800fac8:	f7ff ff1a 	bl	800f900 <__i2b>
 800facc:	2300      	movs	r3, #0
 800face:	f8c8 0008 	str.w	r0, [r8, #8]
 800fad2:	4604      	mov	r4, r0
 800fad4:	6003      	str	r3, [r0, #0]
 800fad6:	f04f 0900 	mov.w	r9, #0
 800fada:	07eb      	lsls	r3, r5, #31
 800fadc:	d50a      	bpl.n	800faf4 <__pow5mult+0x84>
 800fade:	4631      	mov	r1, r6
 800fae0:	4622      	mov	r2, r4
 800fae2:	4638      	mov	r0, r7
 800fae4:	f7ff ff22 	bl	800f92c <__multiply>
 800fae8:	4631      	mov	r1, r6
 800faea:	4680      	mov	r8, r0
 800faec:	4638      	mov	r0, r7
 800faee:	f7ff fe53 	bl	800f798 <_Bfree>
 800faf2:	4646      	mov	r6, r8
 800faf4:	106d      	asrs	r5, r5, #1
 800faf6:	d00b      	beq.n	800fb10 <__pow5mult+0xa0>
 800faf8:	6820      	ldr	r0, [r4, #0]
 800fafa:	b938      	cbnz	r0, 800fb0c <__pow5mult+0x9c>
 800fafc:	4622      	mov	r2, r4
 800fafe:	4621      	mov	r1, r4
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7ff ff13 	bl	800f92c <__multiply>
 800fb06:	6020      	str	r0, [r4, #0]
 800fb08:	f8c0 9000 	str.w	r9, [r0]
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	e7e4      	b.n	800fada <__pow5mult+0x6a>
 800fb10:	4630      	mov	r0, r6
 800fb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb16:	bf00      	nop
 800fb18:	08011d44 	.word	0x08011d44
 800fb1c:	08011c11 	.word	0x08011c11
 800fb20:	08011c91 	.word	0x08011c91

0800fb24 <__lshift>:
 800fb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb28:	460c      	mov	r4, r1
 800fb2a:	6849      	ldr	r1, [r1, #4]
 800fb2c:	6923      	ldr	r3, [r4, #16]
 800fb2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb32:	68a3      	ldr	r3, [r4, #8]
 800fb34:	4607      	mov	r7, r0
 800fb36:	4691      	mov	r9, r2
 800fb38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb3c:	f108 0601 	add.w	r6, r8, #1
 800fb40:	42b3      	cmp	r3, r6
 800fb42:	db0b      	blt.n	800fb5c <__lshift+0x38>
 800fb44:	4638      	mov	r0, r7
 800fb46:	f7ff fde7 	bl	800f718 <_Balloc>
 800fb4a:	4605      	mov	r5, r0
 800fb4c:	b948      	cbnz	r0, 800fb62 <__lshift+0x3e>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	4b28      	ldr	r3, [pc, #160]	@ (800fbf4 <__lshift+0xd0>)
 800fb52:	4829      	ldr	r0, [pc, #164]	@ (800fbf8 <__lshift+0xd4>)
 800fb54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fb58:	f000 fd4c 	bl	80105f4 <__assert_func>
 800fb5c:	3101      	adds	r1, #1
 800fb5e:	005b      	lsls	r3, r3, #1
 800fb60:	e7ee      	b.n	800fb40 <__lshift+0x1c>
 800fb62:	2300      	movs	r3, #0
 800fb64:	f100 0114 	add.w	r1, r0, #20
 800fb68:	f100 0210 	add.w	r2, r0, #16
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	4553      	cmp	r3, sl
 800fb70:	db33      	blt.n	800fbda <__lshift+0xb6>
 800fb72:	6920      	ldr	r0, [r4, #16]
 800fb74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb78:	f104 0314 	add.w	r3, r4, #20
 800fb7c:	f019 091f 	ands.w	r9, r9, #31
 800fb80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb88:	d02b      	beq.n	800fbe2 <__lshift+0xbe>
 800fb8a:	f1c9 0e20 	rsb	lr, r9, #32
 800fb8e:	468a      	mov	sl, r1
 800fb90:	2200      	movs	r2, #0
 800fb92:	6818      	ldr	r0, [r3, #0]
 800fb94:	fa00 f009 	lsl.w	r0, r0, r9
 800fb98:	4310      	orrs	r0, r2
 800fb9a:	f84a 0b04 	str.w	r0, [sl], #4
 800fb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fba2:	459c      	cmp	ip, r3
 800fba4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fba8:	d8f3      	bhi.n	800fb92 <__lshift+0x6e>
 800fbaa:	ebac 0304 	sub.w	r3, ip, r4
 800fbae:	3b15      	subs	r3, #21
 800fbb0:	f023 0303 	bic.w	r3, r3, #3
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	f104 0015 	add.w	r0, r4, #21
 800fbba:	4560      	cmp	r0, ip
 800fbbc:	bf88      	it	hi
 800fbbe:	2304      	movhi	r3, #4
 800fbc0:	50ca      	str	r2, [r1, r3]
 800fbc2:	b10a      	cbz	r2, 800fbc8 <__lshift+0xa4>
 800fbc4:	f108 0602 	add.w	r6, r8, #2
 800fbc8:	3e01      	subs	r6, #1
 800fbca:	4638      	mov	r0, r7
 800fbcc:	612e      	str	r6, [r5, #16]
 800fbce:	4621      	mov	r1, r4
 800fbd0:	f7ff fde2 	bl	800f798 <_Bfree>
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbda:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbde:	3301      	adds	r3, #1
 800fbe0:	e7c5      	b.n	800fb6e <__lshift+0x4a>
 800fbe2:	3904      	subs	r1, #4
 800fbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbec:	459c      	cmp	ip, r3
 800fbee:	d8f9      	bhi.n	800fbe4 <__lshift+0xc0>
 800fbf0:	e7ea      	b.n	800fbc8 <__lshift+0xa4>
 800fbf2:	bf00      	nop
 800fbf4:	08011c80 	.word	0x08011c80
 800fbf8:	08011c91 	.word	0x08011c91

0800fbfc <__mcmp>:
 800fbfc:	690a      	ldr	r2, [r1, #16]
 800fbfe:	4603      	mov	r3, r0
 800fc00:	6900      	ldr	r0, [r0, #16]
 800fc02:	1a80      	subs	r0, r0, r2
 800fc04:	b530      	push	{r4, r5, lr}
 800fc06:	d10e      	bne.n	800fc26 <__mcmp+0x2a>
 800fc08:	3314      	adds	r3, #20
 800fc0a:	3114      	adds	r1, #20
 800fc0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fc10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fc14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc1c:	4295      	cmp	r5, r2
 800fc1e:	d003      	beq.n	800fc28 <__mcmp+0x2c>
 800fc20:	d205      	bcs.n	800fc2e <__mcmp+0x32>
 800fc22:	f04f 30ff 	mov.w	r0, #4294967295
 800fc26:	bd30      	pop	{r4, r5, pc}
 800fc28:	42a3      	cmp	r3, r4
 800fc2a:	d3f3      	bcc.n	800fc14 <__mcmp+0x18>
 800fc2c:	e7fb      	b.n	800fc26 <__mcmp+0x2a>
 800fc2e:	2001      	movs	r0, #1
 800fc30:	e7f9      	b.n	800fc26 <__mcmp+0x2a>
	...

0800fc34 <__mdiff>:
 800fc34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc38:	4689      	mov	r9, r1
 800fc3a:	4606      	mov	r6, r0
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	4648      	mov	r0, r9
 800fc40:	4614      	mov	r4, r2
 800fc42:	f7ff ffdb 	bl	800fbfc <__mcmp>
 800fc46:	1e05      	subs	r5, r0, #0
 800fc48:	d112      	bne.n	800fc70 <__mdiff+0x3c>
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f7ff fd63 	bl	800f718 <_Balloc>
 800fc52:	4602      	mov	r2, r0
 800fc54:	b928      	cbnz	r0, 800fc62 <__mdiff+0x2e>
 800fc56:	4b3f      	ldr	r3, [pc, #252]	@ (800fd54 <__mdiff+0x120>)
 800fc58:	f240 2137 	movw	r1, #567	@ 0x237
 800fc5c:	483e      	ldr	r0, [pc, #248]	@ (800fd58 <__mdiff+0x124>)
 800fc5e:	f000 fcc9 	bl	80105f4 <__assert_func>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc68:	4610      	mov	r0, r2
 800fc6a:	b003      	add	sp, #12
 800fc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc70:	bfbc      	itt	lt
 800fc72:	464b      	movlt	r3, r9
 800fc74:	46a1      	movlt	r9, r4
 800fc76:	4630      	mov	r0, r6
 800fc78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fc7c:	bfba      	itte	lt
 800fc7e:	461c      	movlt	r4, r3
 800fc80:	2501      	movlt	r5, #1
 800fc82:	2500      	movge	r5, #0
 800fc84:	f7ff fd48 	bl	800f718 <_Balloc>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	b918      	cbnz	r0, 800fc94 <__mdiff+0x60>
 800fc8c:	4b31      	ldr	r3, [pc, #196]	@ (800fd54 <__mdiff+0x120>)
 800fc8e:	f240 2145 	movw	r1, #581	@ 0x245
 800fc92:	e7e3      	b.n	800fc5c <__mdiff+0x28>
 800fc94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fc98:	6926      	ldr	r6, [r4, #16]
 800fc9a:	60c5      	str	r5, [r0, #12]
 800fc9c:	f109 0310 	add.w	r3, r9, #16
 800fca0:	f109 0514 	add.w	r5, r9, #20
 800fca4:	f104 0e14 	add.w	lr, r4, #20
 800fca8:	f100 0b14 	add.w	fp, r0, #20
 800fcac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fcb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fcb4:	9301      	str	r3, [sp, #4]
 800fcb6:	46d9      	mov	r9, fp
 800fcb8:	f04f 0c00 	mov.w	ip, #0
 800fcbc:	9b01      	ldr	r3, [sp, #4]
 800fcbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fcc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fcc6:	9301      	str	r3, [sp, #4]
 800fcc8:	fa1f f38a 	uxth.w	r3, sl
 800fccc:	4619      	mov	r1, r3
 800fcce:	b283      	uxth	r3, r0
 800fcd0:	1acb      	subs	r3, r1, r3
 800fcd2:	0c00      	lsrs	r0, r0, #16
 800fcd4:	4463      	add	r3, ip
 800fcd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fcda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fce4:	4576      	cmp	r6, lr
 800fce6:	f849 3b04 	str.w	r3, [r9], #4
 800fcea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fcee:	d8e5      	bhi.n	800fcbc <__mdiff+0x88>
 800fcf0:	1b33      	subs	r3, r6, r4
 800fcf2:	3b15      	subs	r3, #21
 800fcf4:	f023 0303 	bic.w	r3, r3, #3
 800fcf8:	3415      	adds	r4, #21
 800fcfa:	3304      	adds	r3, #4
 800fcfc:	42a6      	cmp	r6, r4
 800fcfe:	bf38      	it	cc
 800fd00:	2304      	movcc	r3, #4
 800fd02:	441d      	add	r5, r3
 800fd04:	445b      	add	r3, fp
 800fd06:	461e      	mov	r6, r3
 800fd08:	462c      	mov	r4, r5
 800fd0a:	4544      	cmp	r4, r8
 800fd0c:	d30e      	bcc.n	800fd2c <__mdiff+0xf8>
 800fd0e:	f108 0103 	add.w	r1, r8, #3
 800fd12:	1b49      	subs	r1, r1, r5
 800fd14:	f021 0103 	bic.w	r1, r1, #3
 800fd18:	3d03      	subs	r5, #3
 800fd1a:	45a8      	cmp	r8, r5
 800fd1c:	bf38      	it	cc
 800fd1e:	2100      	movcc	r1, #0
 800fd20:	440b      	add	r3, r1
 800fd22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd26:	b191      	cbz	r1, 800fd4e <__mdiff+0x11a>
 800fd28:	6117      	str	r7, [r2, #16]
 800fd2a:	e79d      	b.n	800fc68 <__mdiff+0x34>
 800fd2c:	f854 1b04 	ldr.w	r1, [r4], #4
 800fd30:	46e6      	mov	lr, ip
 800fd32:	0c08      	lsrs	r0, r1, #16
 800fd34:	fa1c fc81 	uxtah	ip, ip, r1
 800fd38:	4471      	add	r1, lr
 800fd3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fd3e:	b289      	uxth	r1, r1
 800fd40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fd44:	f846 1b04 	str.w	r1, [r6], #4
 800fd48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd4c:	e7dd      	b.n	800fd0a <__mdiff+0xd6>
 800fd4e:	3f01      	subs	r7, #1
 800fd50:	e7e7      	b.n	800fd22 <__mdiff+0xee>
 800fd52:	bf00      	nop
 800fd54:	08011c80 	.word	0x08011c80
 800fd58:	08011c91 	.word	0x08011c91

0800fd5c <__d2b>:
 800fd5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd60:	460f      	mov	r7, r1
 800fd62:	2101      	movs	r1, #1
 800fd64:	ec59 8b10 	vmov	r8, r9, d0
 800fd68:	4616      	mov	r6, r2
 800fd6a:	f7ff fcd5 	bl	800f718 <_Balloc>
 800fd6e:	4604      	mov	r4, r0
 800fd70:	b930      	cbnz	r0, 800fd80 <__d2b+0x24>
 800fd72:	4602      	mov	r2, r0
 800fd74:	4b23      	ldr	r3, [pc, #140]	@ (800fe04 <__d2b+0xa8>)
 800fd76:	4824      	ldr	r0, [pc, #144]	@ (800fe08 <__d2b+0xac>)
 800fd78:	f240 310f 	movw	r1, #783	@ 0x30f
 800fd7c:	f000 fc3a 	bl	80105f4 <__assert_func>
 800fd80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd88:	b10d      	cbz	r5, 800fd8e <__d2b+0x32>
 800fd8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd8e:	9301      	str	r3, [sp, #4]
 800fd90:	f1b8 0300 	subs.w	r3, r8, #0
 800fd94:	d023      	beq.n	800fdde <__d2b+0x82>
 800fd96:	4668      	mov	r0, sp
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	f7ff fd84 	bl	800f8a6 <__lo0bits>
 800fd9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fda2:	b1d0      	cbz	r0, 800fdda <__d2b+0x7e>
 800fda4:	f1c0 0320 	rsb	r3, r0, #32
 800fda8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdac:	430b      	orrs	r3, r1
 800fdae:	40c2      	lsrs	r2, r0
 800fdb0:	6163      	str	r3, [r4, #20]
 800fdb2:	9201      	str	r2, [sp, #4]
 800fdb4:	9b01      	ldr	r3, [sp, #4]
 800fdb6:	61a3      	str	r3, [r4, #24]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	bf0c      	ite	eq
 800fdbc:	2201      	moveq	r2, #1
 800fdbe:	2202      	movne	r2, #2
 800fdc0:	6122      	str	r2, [r4, #16]
 800fdc2:	b1a5      	cbz	r5, 800fdee <__d2b+0x92>
 800fdc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fdc8:	4405      	add	r5, r0
 800fdca:	603d      	str	r5, [r7, #0]
 800fdcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fdd0:	6030      	str	r0, [r6, #0]
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	b003      	add	sp, #12
 800fdd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdda:	6161      	str	r1, [r4, #20]
 800fddc:	e7ea      	b.n	800fdb4 <__d2b+0x58>
 800fdde:	a801      	add	r0, sp, #4
 800fde0:	f7ff fd61 	bl	800f8a6 <__lo0bits>
 800fde4:	9b01      	ldr	r3, [sp, #4]
 800fde6:	6163      	str	r3, [r4, #20]
 800fde8:	3020      	adds	r0, #32
 800fdea:	2201      	movs	r2, #1
 800fdec:	e7e8      	b.n	800fdc0 <__d2b+0x64>
 800fdee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fdf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fdf6:	6038      	str	r0, [r7, #0]
 800fdf8:	6918      	ldr	r0, [r3, #16]
 800fdfa:	f7ff fd35 	bl	800f868 <__hi0bits>
 800fdfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe02:	e7e5      	b.n	800fdd0 <__d2b+0x74>
 800fe04:	08011c80 	.word	0x08011c80
 800fe08:	08011c91 	.word	0x08011c91

0800fe0c <__ssputs_r>:
 800fe0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe10:	688e      	ldr	r6, [r1, #8]
 800fe12:	461f      	mov	r7, r3
 800fe14:	42be      	cmp	r6, r7
 800fe16:	680b      	ldr	r3, [r1, #0]
 800fe18:	4682      	mov	sl, r0
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	4690      	mov	r8, r2
 800fe1e:	d82d      	bhi.n	800fe7c <__ssputs_r+0x70>
 800fe20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe28:	d026      	beq.n	800fe78 <__ssputs_r+0x6c>
 800fe2a:	6965      	ldr	r5, [r4, #20]
 800fe2c:	6909      	ldr	r1, [r1, #16]
 800fe2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe32:	eba3 0901 	sub.w	r9, r3, r1
 800fe36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe3a:	1c7b      	adds	r3, r7, #1
 800fe3c:	444b      	add	r3, r9
 800fe3e:	106d      	asrs	r5, r5, #1
 800fe40:	429d      	cmp	r5, r3
 800fe42:	bf38      	it	cc
 800fe44:	461d      	movcc	r5, r3
 800fe46:	0553      	lsls	r3, r2, #21
 800fe48:	d527      	bpl.n	800fe9a <__ssputs_r+0x8e>
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	f7ff fbd8 	bl	800f600 <_malloc_r>
 800fe50:	4606      	mov	r6, r0
 800fe52:	b360      	cbz	r0, 800feae <__ssputs_r+0xa2>
 800fe54:	6921      	ldr	r1, [r4, #16]
 800fe56:	464a      	mov	r2, r9
 800fe58:	f7fe fcf7 	bl	800e84a <memcpy>
 800fe5c:	89a3      	ldrh	r3, [r4, #12]
 800fe5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe66:	81a3      	strh	r3, [r4, #12]
 800fe68:	6126      	str	r6, [r4, #16]
 800fe6a:	6165      	str	r5, [r4, #20]
 800fe6c:	444e      	add	r6, r9
 800fe6e:	eba5 0509 	sub.w	r5, r5, r9
 800fe72:	6026      	str	r6, [r4, #0]
 800fe74:	60a5      	str	r5, [r4, #8]
 800fe76:	463e      	mov	r6, r7
 800fe78:	42be      	cmp	r6, r7
 800fe7a:	d900      	bls.n	800fe7e <__ssputs_r+0x72>
 800fe7c:	463e      	mov	r6, r7
 800fe7e:	6820      	ldr	r0, [r4, #0]
 800fe80:	4632      	mov	r2, r6
 800fe82:	4641      	mov	r1, r8
 800fe84:	f000 fb6a 	bl	801055c <memmove>
 800fe88:	68a3      	ldr	r3, [r4, #8]
 800fe8a:	1b9b      	subs	r3, r3, r6
 800fe8c:	60a3      	str	r3, [r4, #8]
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	4433      	add	r3, r6
 800fe92:	6023      	str	r3, [r4, #0]
 800fe94:	2000      	movs	r0, #0
 800fe96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe9a:	462a      	mov	r2, r5
 800fe9c:	f000 fbee 	bl	801067c <_realloc_r>
 800fea0:	4606      	mov	r6, r0
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d1e0      	bne.n	800fe68 <__ssputs_r+0x5c>
 800fea6:	6921      	ldr	r1, [r4, #16]
 800fea8:	4650      	mov	r0, sl
 800feaa:	f7ff fb35 	bl	800f518 <_free_r>
 800feae:	230c      	movs	r3, #12
 800feb0:	f8ca 3000 	str.w	r3, [sl]
 800feb4:	89a3      	ldrh	r3, [r4, #12]
 800feb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800feba:	81a3      	strh	r3, [r4, #12]
 800febc:	f04f 30ff 	mov.w	r0, #4294967295
 800fec0:	e7e9      	b.n	800fe96 <__ssputs_r+0x8a>
	...

0800fec4 <_svfiprintf_r>:
 800fec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec8:	4698      	mov	r8, r3
 800feca:	898b      	ldrh	r3, [r1, #12]
 800fecc:	061b      	lsls	r3, r3, #24
 800fece:	b09d      	sub	sp, #116	@ 0x74
 800fed0:	4607      	mov	r7, r0
 800fed2:	460d      	mov	r5, r1
 800fed4:	4614      	mov	r4, r2
 800fed6:	d510      	bpl.n	800fefa <_svfiprintf_r+0x36>
 800fed8:	690b      	ldr	r3, [r1, #16]
 800feda:	b973      	cbnz	r3, 800fefa <_svfiprintf_r+0x36>
 800fedc:	2140      	movs	r1, #64	@ 0x40
 800fede:	f7ff fb8f 	bl	800f600 <_malloc_r>
 800fee2:	6028      	str	r0, [r5, #0]
 800fee4:	6128      	str	r0, [r5, #16]
 800fee6:	b930      	cbnz	r0, 800fef6 <_svfiprintf_r+0x32>
 800fee8:	230c      	movs	r3, #12
 800feea:	603b      	str	r3, [r7, #0]
 800feec:	f04f 30ff 	mov.w	r0, #4294967295
 800fef0:	b01d      	add	sp, #116	@ 0x74
 800fef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef6:	2340      	movs	r3, #64	@ 0x40
 800fef8:	616b      	str	r3, [r5, #20]
 800fefa:	2300      	movs	r3, #0
 800fefc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fefe:	2320      	movs	r3, #32
 800ff00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff04:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff08:	2330      	movs	r3, #48	@ 0x30
 800ff0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80100a8 <_svfiprintf_r+0x1e4>
 800ff0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff12:	f04f 0901 	mov.w	r9, #1
 800ff16:	4623      	mov	r3, r4
 800ff18:	469a      	mov	sl, r3
 800ff1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff1e:	b10a      	cbz	r2, 800ff24 <_svfiprintf_r+0x60>
 800ff20:	2a25      	cmp	r2, #37	@ 0x25
 800ff22:	d1f9      	bne.n	800ff18 <_svfiprintf_r+0x54>
 800ff24:	ebba 0b04 	subs.w	fp, sl, r4
 800ff28:	d00b      	beq.n	800ff42 <_svfiprintf_r+0x7e>
 800ff2a:	465b      	mov	r3, fp
 800ff2c:	4622      	mov	r2, r4
 800ff2e:	4629      	mov	r1, r5
 800ff30:	4638      	mov	r0, r7
 800ff32:	f7ff ff6b 	bl	800fe0c <__ssputs_r>
 800ff36:	3001      	adds	r0, #1
 800ff38:	f000 80a7 	beq.w	801008a <_svfiprintf_r+0x1c6>
 800ff3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff3e:	445a      	add	r2, fp
 800ff40:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff42:	f89a 3000 	ldrb.w	r3, [sl]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	f000 809f 	beq.w	801008a <_svfiprintf_r+0x1c6>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff56:	f10a 0a01 	add.w	sl, sl, #1
 800ff5a:	9304      	str	r3, [sp, #16]
 800ff5c:	9307      	str	r3, [sp, #28]
 800ff5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff62:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff64:	4654      	mov	r4, sl
 800ff66:	2205      	movs	r2, #5
 800ff68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff6c:	484e      	ldr	r0, [pc, #312]	@ (80100a8 <_svfiprintf_r+0x1e4>)
 800ff6e:	f7f0 f92f 	bl	80001d0 <memchr>
 800ff72:	9a04      	ldr	r2, [sp, #16]
 800ff74:	b9d8      	cbnz	r0, 800ffae <_svfiprintf_r+0xea>
 800ff76:	06d0      	lsls	r0, r2, #27
 800ff78:	bf44      	itt	mi
 800ff7a:	2320      	movmi	r3, #32
 800ff7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff80:	0711      	lsls	r1, r2, #28
 800ff82:	bf44      	itt	mi
 800ff84:	232b      	movmi	r3, #43	@ 0x2b
 800ff86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff90:	d015      	beq.n	800ffbe <_svfiprintf_r+0xfa>
 800ff92:	9a07      	ldr	r2, [sp, #28]
 800ff94:	4654      	mov	r4, sl
 800ff96:	2000      	movs	r0, #0
 800ff98:	f04f 0c0a 	mov.w	ip, #10
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffa2:	3b30      	subs	r3, #48	@ 0x30
 800ffa4:	2b09      	cmp	r3, #9
 800ffa6:	d94b      	bls.n	8010040 <_svfiprintf_r+0x17c>
 800ffa8:	b1b0      	cbz	r0, 800ffd8 <_svfiprintf_r+0x114>
 800ffaa:	9207      	str	r2, [sp, #28]
 800ffac:	e014      	b.n	800ffd8 <_svfiprintf_r+0x114>
 800ffae:	eba0 0308 	sub.w	r3, r0, r8
 800ffb2:	fa09 f303 	lsl.w	r3, r9, r3
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	9304      	str	r3, [sp, #16]
 800ffba:	46a2      	mov	sl, r4
 800ffbc:	e7d2      	b.n	800ff64 <_svfiprintf_r+0xa0>
 800ffbe:	9b03      	ldr	r3, [sp, #12]
 800ffc0:	1d19      	adds	r1, r3, #4
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	9103      	str	r1, [sp, #12]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	bfbb      	ittet	lt
 800ffca:	425b      	neglt	r3, r3
 800ffcc:	f042 0202 	orrlt.w	r2, r2, #2
 800ffd0:	9307      	strge	r3, [sp, #28]
 800ffd2:	9307      	strlt	r3, [sp, #28]
 800ffd4:	bfb8      	it	lt
 800ffd6:	9204      	strlt	r2, [sp, #16]
 800ffd8:	7823      	ldrb	r3, [r4, #0]
 800ffda:	2b2e      	cmp	r3, #46	@ 0x2e
 800ffdc:	d10a      	bne.n	800fff4 <_svfiprintf_r+0x130>
 800ffde:	7863      	ldrb	r3, [r4, #1]
 800ffe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffe2:	d132      	bne.n	801004a <_svfiprintf_r+0x186>
 800ffe4:	9b03      	ldr	r3, [sp, #12]
 800ffe6:	1d1a      	adds	r2, r3, #4
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	9203      	str	r2, [sp, #12]
 800ffec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fff0:	3402      	adds	r4, #2
 800fff2:	9305      	str	r3, [sp, #20]
 800fff4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80100b8 <_svfiprintf_r+0x1f4>
 800fff8:	7821      	ldrb	r1, [r4, #0]
 800fffa:	2203      	movs	r2, #3
 800fffc:	4650      	mov	r0, sl
 800fffe:	f7f0 f8e7 	bl	80001d0 <memchr>
 8010002:	b138      	cbz	r0, 8010014 <_svfiprintf_r+0x150>
 8010004:	9b04      	ldr	r3, [sp, #16]
 8010006:	eba0 000a 	sub.w	r0, r0, sl
 801000a:	2240      	movs	r2, #64	@ 0x40
 801000c:	4082      	lsls	r2, r0
 801000e:	4313      	orrs	r3, r2
 8010010:	3401      	adds	r4, #1
 8010012:	9304      	str	r3, [sp, #16]
 8010014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010018:	4824      	ldr	r0, [pc, #144]	@ (80100ac <_svfiprintf_r+0x1e8>)
 801001a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801001e:	2206      	movs	r2, #6
 8010020:	f7f0 f8d6 	bl	80001d0 <memchr>
 8010024:	2800      	cmp	r0, #0
 8010026:	d036      	beq.n	8010096 <_svfiprintf_r+0x1d2>
 8010028:	4b21      	ldr	r3, [pc, #132]	@ (80100b0 <_svfiprintf_r+0x1ec>)
 801002a:	bb1b      	cbnz	r3, 8010074 <_svfiprintf_r+0x1b0>
 801002c:	9b03      	ldr	r3, [sp, #12]
 801002e:	3307      	adds	r3, #7
 8010030:	f023 0307 	bic.w	r3, r3, #7
 8010034:	3308      	adds	r3, #8
 8010036:	9303      	str	r3, [sp, #12]
 8010038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801003a:	4433      	add	r3, r6
 801003c:	9309      	str	r3, [sp, #36]	@ 0x24
 801003e:	e76a      	b.n	800ff16 <_svfiprintf_r+0x52>
 8010040:	fb0c 3202 	mla	r2, ip, r2, r3
 8010044:	460c      	mov	r4, r1
 8010046:	2001      	movs	r0, #1
 8010048:	e7a8      	b.n	800ff9c <_svfiprintf_r+0xd8>
 801004a:	2300      	movs	r3, #0
 801004c:	3401      	adds	r4, #1
 801004e:	9305      	str	r3, [sp, #20]
 8010050:	4619      	mov	r1, r3
 8010052:	f04f 0c0a 	mov.w	ip, #10
 8010056:	4620      	mov	r0, r4
 8010058:	f810 2b01 	ldrb.w	r2, [r0], #1
 801005c:	3a30      	subs	r2, #48	@ 0x30
 801005e:	2a09      	cmp	r2, #9
 8010060:	d903      	bls.n	801006a <_svfiprintf_r+0x1a6>
 8010062:	2b00      	cmp	r3, #0
 8010064:	d0c6      	beq.n	800fff4 <_svfiprintf_r+0x130>
 8010066:	9105      	str	r1, [sp, #20]
 8010068:	e7c4      	b.n	800fff4 <_svfiprintf_r+0x130>
 801006a:	fb0c 2101 	mla	r1, ip, r1, r2
 801006e:	4604      	mov	r4, r0
 8010070:	2301      	movs	r3, #1
 8010072:	e7f0      	b.n	8010056 <_svfiprintf_r+0x192>
 8010074:	ab03      	add	r3, sp, #12
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	462a      	mov	r2, r5
 801007a:	4b0e      	ldr	r3, [pc, #56]	@ (80100b4 <_svfiprintf_r+0x1f0>)
 801007c:	a904      	add	r1, sp, #16
 801007e:	4638      	mov	r0, r7
 8010080:	f7fd fd4e 	bl	800db20 <_printf_float>
 8010084:	1c42      	adds	r2, r0, #1
 8010086:	4606      	mov	r6, r0
 8010088:	d1d6      	bne.n	8010038 <_svfiprintf_r+0x174>
 801008a:	89ab      	ldrh	r3, [r5, #12]
 801008c:	065b      	lsls	r3, r3, #25
 801008e:	f53f af2d 	bmi.w	800feec <_svfiprintf_r+0x28>
 8010092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010094:	e72c      	b.n	800fef0 <_svfiprintf_r+0x2c>
 8010096:	ab03      	add	r3, sp, #12
 8010098:	9300      	str	r3, [sp, #0]
 801009a:	462a      	mov	r2, r5
 801009c:	4b05      	ldr	r3, [pc, #20]	@ (80100b4 <_svfiprintf_r+0x1f0>)
 801009e:	a904      	add	r1, sp, #16
 80100a0:	4638      	mov	r0, r7
 80100a2:	f7fd ffd5 	bl	800e050 <_printf_i>
 80100a6:	e7ed      	b.n	8010084 <_svfiprintf_r+0x1c0>
 80100a8:	08011cea 	.word	0x08011cea
 80100ac:	08011cf4 	.word	0x08011cf4
 80100b0:	0800db21 	.word	0x0800db21
 80100b4:	0800fe0d 	.word	0x0800fe0d
 80100b8:	08011cf0 	.word	0x08011cf0

080100bc <__sfputc_r>:
 80100bc:	6893      	ldr	r3, [r2, #8]
 80100be:	3b01      	subs	r3, #1
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	b410      	push	{r4}
 80100c4:	6093      	str	r3, [r2, #8]
 80100c6:	da08      	bge.n	80100da <__sfputc_r+0x1e>
 80100c8:	6994      	ldr	r4, [r2, #24]
 80100ca:	42a3      	cmp	r3, r4
 80100cc:	db01      	blt.n	80100d2 <__sfputc_r+0x16>
 80100ce:	290a      	cmp	r1, #10
 80100d0:	d103      	bne.n	80100da <__sfputc_r+0x1e>
 80100d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100d6:	f7fe ba94 	b.w	800e602 <__swbuf_r>
 80100da:	6813      	ldr	r3, [r2, #0]
 80100dc:	1c58      	adds	r0, r3, #1
 80100de:	6010      	str	r0, [r2, #0]
 80100e0:	7019      	strb	r1, [r3, #0]
 80100e2:	4608      	mov	r0, r1
 80100e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <__sfputs_r>:
 80100ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ec:	4606      	mov	r6, r0
 80100ee:	460f      	mov	r7, r1
 80100f0:	4614      	mov	r4, r2
 80100f2:	18d5      	adds	r5, r2, r3
 80100f4:	42ac      	cmp	r4, r5
 80100f6:	d101      	bne.n	80100fc <__sfputs_r+0x12>
 80100f8:	2000      	movs	r0, #0
 80100fa:	e007      	b.n	801010c <__sfputs_r+0x22>
 80100fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010100:	463a      	mov	r2, r7
 8010102:	4630      	mov	r0, r6
 8010104:	f7ff ffda 	bl	80100bc <__sfputc_r>
 8010108:	1c43      	adds	r3, r0, #1
 801010a:	d1f3      	bne.n	80100f4 <__sfputs_r+0xa>
 801010c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010110 <_vfiprintf_r>:
 8010110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010114:	460d      	mov	r5, r1
 8010116:	b09d      	sub	sp, #116	@ 0x74
 8010118:	4614      	mov	r4, r2
 801011a:	4698      	mov	r8, r3
 801011c:	4606      	mov	r6, r0
 801011e:	b118      	cbz	r0, 8010128 <_vfiprintf_r+0x18>
 8010120:	6a03      	ldr	r3, [r0, #32]
 8010122:	b90b      	cbnz	r3, 8010128 <_vfiprintf_r+0x18>
 8010124:	f7fe f93e 	bl	800e3a4 <__sinit>
 8010128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801012a:	07d9      	lsls	r1, r3, #31
 801012c:	d405      	bmi.n	801013a <_vfiprintf_r+0x2a>
 801012e:	89ab      	ldrh	r3, [r5, #12]
 8010130:	059a      	lsls	r2, r3, #22
 8010132:	d402      	bmi.n	801013a <_vfiprintf_r+0x2a>
 8010134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010136:	f7fe fb86 	bl	800e846 <__retarget_lock_acquire_recursive>
 801013a:	89ab      	ldrh	r3, [r5, #12]
 801013c:	071b      	lsls	r3, r3, #28
 801013e:	d501      	bpl.n	8010144 <_vfiprintf_r+0x34>
 8010140:	692b      	ldr	r3, [r5, #16]
 8010142:	b99b      	cbnz	r3, 801016c <_vfiprintf_r+0x5c>
 8010144:	4629      	mov	r1, r5
 8010146:	4630      	mov	r0, r6
 8010148:	f7fe fa9a 	bl	800e680 <__swsetup_r>
 801014c:	b170      	cbz	r0, 801016c <_vfiprintf_r+0x5c>
 801014e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010150:	07dc      	lsls	r4, r3, #31
 8010152:	d504      	bpl.n	801015e <_vfiprintf_r+0x4e>
 8010154:	f04f 30ff 	mov.w	r0, #4294967295
 8010158:	b01d      	add	sp, #116	@ 0x74
 801015a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015e:	89ab      	ldrh	r3, [r5, #12]
 8010160:	0598      	lsls	r0, r3, #22
 8010162:	d4f7      	bmi.n	8010154 <_vfiprintf_r+0x44>
 8010164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010166:	f7fe fb6f 	bl	800e848 <__retarget_lock_release_recursive>
 801016a:	e7f3      	b.n	8010154 <_vfiprintf_r+0x44>
 801016c:	2300      	movs	r3, #0
 801016e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010170:	2320      	movs	r3, #32
 8010172:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010176:	f8cd 800c 	str.w	r8, [sp, #12]
 801017a:	2330      	movs	r3, #48	@ 0x30
 801017c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801032c <_vfiprintf_r+0x21c>
 8010180:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010184:	f04f 0901 	mov.w	r9, #1
 8010188:	4623      	mov	r3, r4
 801018a:	469a      	mov	sl, r3
 801018c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010190:	b10a      	cbz	r2, 8010196 <_vfiprintf_r+0x86>
 8010192:	2a25      	cmp	r2, #37	@ 0x25
 8010194:	d1f9      	bne.n	801018a <_vfiprintf_r+0x7a>
 8010196:	ebba 0b04 	subs.w	fp, sl, r4
 801019a:	d00b      	beq.n	80101b4 <_vfiprintf_r+0xa4>
 801019c:	465b      	mov	r3, fp
 801019e:	4622      	mov	r2, r4
 80101a0:	4629      	mov	r1, r5
 80101a2:	4630      	mov	r0, r6
 80101a4:	f7ff ffa1 	bl	80100ea <__sfputs_r>
 80101a8:	3001      	adds	r0, #1
 80101aa:	f000 80a7 	beq.w	80102fc <_vfiprintf_r+0x1ec>
 80101ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101b0:	445a      	add	r2, fp
 80101b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80101b4:	f89a 3000 	ldrb.w	r3, [sl]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 809f 	beq.w	80102fc <_vfiprintf_r+0x1ec>
 80101be:	2300      	movs	r3, #0
 80101c0:	f04f 32ff 	mov.w	r2, #4294967295
 80101c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101c8:	f10a 0a01 	add.w	sl, sl, #1
 80101cc:	9304      	str	r3, [sp, #16]
 80101ce:	9307      	str	r3, [sp, #28]
 80101d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80101d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80101d6:	4654      	mov	r4, sl
 80101d8:	2205      	movs	r2, #5
 80101da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101de:	4853      	ldr	r0, [pc, #332]	@ (801032c <_vfiprintf_r+0x21c>)
 80101e0:	f7ef fff6 	bl	80001d0 <memchr>
 80101e4:	9a04      	ldr	r2, [sp, #16]
 80101e6:	b9d8      	cbnz	r0, 8010220 <_vfiprintf_r+0x110>
 80101e8:	06d1      	lsls	r1, r2, #27
 80101ea:	bf44      	itt	mi
 80101ec:	2320      	movmi	r3, #32
 80101ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101f2:	0713      	lsls	r3, r2, #28
 80101f4:	bf44      	itt	mi
 80101f6:	232b      	movmi	r3, #43	@ 0x2b
 80101f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010200:	2b2a      	cmp	r3, #42	@ 0x2a
 8010202:	d015      	beq.n	8010230 <_vfiprintf_r+0x120>
 8010204:	9a07      	ldr	r2, [sp, #28]
 8010206:	4654      	mov	r4, sl
 8010208:	2000      	movs	r0, #0
 801020a:	f04f 0c0a 	mov.w	ip, #10
 801020e:	4621      	mov	r1, r4
 8010210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010214:	3b30      	subs	r3, #48	@ 0x30
 8010216:	2b09      	cmp	r3, #9
 8010218:	d94b      	bls.n	80102b2 <_vfiprintf_r+0x1a2>
 801021a:	b1b0      	cbz	r0, 801024a <_vfiprintf_r+0x13a>
 801021c:	9207      	str	r2, [sp, #28]
 801021e:	e014      	b.n	801024a <_vfiprintf_r+0x13a>
 8010220:	eba0 0308 	sub.w	r3, r0, r8
 8010224:	fa09 f303 	lsl.w	r3, r9, r3
 8010228:	4313      	orrs	r3, r2
 801022a:	9304      	str	r3, [sp, #16]
 801022c:	46a2      	mov	sl, r4
 801022e:	e7d2      	b.n	80101d6 <_vfiprintf_r+0xc6>
 8010230:	9b03      	ldr	r3, [sp, #12]
 8010232:	1d19      	adds	r1, r3, #4
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	9103      	str	r1, [sp, #12]
 8010238:	2b00      	cmp	r3, #0
 801023a:	bfbb      	ittet	lt
 801023c:	425b      	neglt	r3, r3
 801023e:	f042 0202 	orrlt.w	r2, r2, #2
 8010242:	9307      	strge	r3, [sp, #28]
 8010244:	9307      	strlt	r3, [sp, #28]
 8010246:	bfb8      	it	lt
 8010248:	9204      	strlt	r2, [sp, #16]
 801024a:	7823      	ldrb	r3, [r4, #0]
 801024c:	2b2e      	cmp	r3, #46	@ 0x2e
 801024e:	d10a      	bne.n	8010266 <_vfiprintf_r+0x156>
 8010250:	7863      	ldrb	r3, [r4, #1]
 8010252:	2b2a      	cmp	r3, #42	@ 0x2a
 8010254:	d132      	bne.n	80102bc <_vfiprintf_r+0x1ac>
 8010256:	9b03      	ldr	r3, [sp, #12]
 8010258:	1d1a      	adds	r2, r3, #4
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	9203      	str	r2, [sp, #12]
 801025e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010262:	3402      	adds	r4, #2
 8010264:	9305      	str	r3, [sp, #20]
 8010266:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801033c <_vfiprintf_r+0x22c>
 801026a:	7821      	ldrb	r1, [r4, #0]
 801026c:	2203      	movs	r2, #3
 801026e:	4650      	mov	r0, sl
 8010270:	f7ef ffae 	bl	80001d0 <memchr>
 8010274:	b138      	cbz	r0, 8010286 <_vfiprintf_r+0x176>
 8010276:	9b04      	ldr	r3, [sp, #16]
 8010278:	eba0 000a 	sub.w	r0, r0, sl
 801027c:	2240      	movs	r2, #64	@ 0x40
 801027e:	4082      	lsls	r2, r0
 8010280:	4313      	orrs	r3, r2
 8010282:	3401      	adds	r4, #1
 8010284:	9304      	str	r3, [sp, #16]
 8010286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801028a:	4829      	ldr	r0, [pc, #164]	@ (8010330 <_vfiprintf_r+0x220>)
 801028c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010290:	2206      	movs	r2, #6
 8010292:	f7ef ff9d 	bl	80001d0 <memchr>
 8010296:	2800      	cmp	r0, #0
 8010298:	d03f      	beq.n	801031a <_vfiprintf_r+0x20a>
 801029a:	4b26      	ldr	r3, [pc, #152]	@ (8010334 <_vfiprintf_r+0x224>)
 801029c:	bb1b      	cbnz	r3, 80102e6 <_vfiprintf_r+0x1d6>
 801029e:	9b03      	ldr	r3, [sp, #12]
 80102a0:	3307      	adds	r3, #7
 80102a2:	f023 0307 	bic.w	r3, r3, #7
 80102a6:	3308      	adds	r3, #8
 80102a8:	9303      	str	r3, [sp, #12]
 80102aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ac:	443b      	add	r3, r7
 80102ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80102b0:	e76a      	b.n	8010188 <_vfiprintf_r+0x78>
 80102b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80102b6:	460c      	mov	r4, r1
 80102b8:	2001      	movs	r0, #1
 80102ba:	e7a8      	b.n	801020e <_vfiprintf_r+0xfe>
 80102bc:	2300      	movs	r3, #0
 80102be:	3401      	adds	r4, #1
 80102c0:	9305      	str	r3, [sp, #20]
 80102c2:	4619      	mov	r1, r3
 80102c4:	f04f 0c0a 	mov.w	ip, #10
 80102c8:	4620      	mov	r0, r4
 80102ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ce:	3a30      	subs	r2, #48	@ 0x30
 80102d0:	2a09      	cmp	r2, #9
 80102d2:	d903      	bls.n	80102dc <_vfiprintf_r+0x1cc>
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d0c6      	beq.n	8010266 <_vfiprintf_r+0x156>
 80102d8:	9105      	str	r1, [sp, #20]
 80102da:	e7c4      	b.n	8010266 <_vfiprintf_r+0x156>
 80102dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80102e0:	4604      	mov	r4, r0
 80102e2:	2301      	movs	r3, #1
 80102e4:	e7f0      	b.n	80102c8 <_vfiprintf_r+0x1b8>
 80102e6:	ab03      	add	r3, sp, #12
 80102e8:	9300      	str	r3, [sp, #0]
 80102ea:	462a      	mov	r2, r5
 80102ec:	4b12      	ldr	r3, [pc, #72]	@ (8010338 <_vfiprintf_r+0x228>)
 80102ee:	a904      	add	r1, sp, #16
 80102f0:	4630      	mov	r0, r6
 80102f2:	f7fd fc15 	bl	800db20 <_printf_float>
 80102f6:	4607      	mov	r7, r0
 80102f8:	1c78      	adds	r0, r7, #1
 80102fa:	d1d6      	bne.n	80102aa <_vfiprintf_r+0x19a>
 80102fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80102fe:	07d9      	lsls	r1, r3, #31
 8010300:	d405      	bmi.n	801030e <_vfiprintf_r+0x1fe>
 8010302:	89ab      	ldrh	r3, [r5, #12]
 8010304:	059a      	lsls	r2, r3, #22
 8010306:	d402      	bmi.n	801030e <_vfiprintf_r+0x1fe>
 8010308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801030a:	f7fe fa9d 	bl	800e848 <__retarget_lock_release_recursive>
 801030e:	89ab      	ldrh	r3, [r5, #12]
 8010310:	065b      	lsls	r3, r3, #25
 8010312:	f53f af1f 	bmi.w	8010154 <_vfiprintf_r+0x44>
 8010316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010318:	e71e      	b.n	8010158 <_vfiprintf_r+0x48>
 801031a:	ab03      	add	r3, sp, #12
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	462a      	mov	r2, r5
 8010320:	4b05      	ldr	r3, [pc, #20]	@ (8010338 <_vfiprintf_r+0x228>)
 8010322:	a904      	add	r1, sp, #16
 8010324:	4630      	mov	r0, r6
 8010326:	f7fd fe93 	bl	800e050 <_printf_i>
 801032a:	e7e4      	b.n	80102f6 <_vfiprintf_r+0x1e6>
 801032c:	08011cea 	.word	0x08011cea
 8010330:	08011cf4 	.word	0x08011cf4
 8010334:	0800db21 	.word	0x0800db21
 8010338:	080100eb 	.word	0x080100eb
 801033c:	08011cf0 	.word	0x08011cf0

08010340 <__sflush_r>:
 8010340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010348:	0716      	lsls	r6, r2, #28
 801034a:	4605      	mov	r5, r0
 801034c:	460c      	mov	r4, r1
 801034e:	d454      	bmi.n	80103fa <__sflush_r+0xba>
 8010350:	684b      	ldr	r3, [r1, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	dc02      	bgt.n	801035c <__sflush_r+0x1c>
 8010356:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010358:	2b00      	cmp	r3, #0
 801035a:	dd48      	ble.n	80103ee <__sflush_r+0xae>
 801035c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801035e:	2e00      	cmp	r6, #0
 8010360:	d045      	beq.n	80103ee <__sflush_r+0xae>
 8010362:	2300      	movs	r3, #0
 8010364:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010368:	682f      	ldr	r7, [r5, #0]
 801036a:	6a21      	ldr	r1, [r4, #32]
 801036c:	602b      	str	r3, [r5, #0]
 801036e:	d030      	beq.n	80103d2 <__sflush_r+0x92>
 8010370:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010372:	89a3      	ldrh	r3, [r4, #12]
 8010374:	0759      	lsls	r1, r3, #29
 8010376:	d505      	bpl.n	8010384 <__sflush_r+0x44>
 8010378:	6863      	ldr	r3, [r4, #4]
 801037a:	1ad2      	subs	r2, r2, r3
 801037c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801037e:	b10b      	cbz	r3, 8010384 <__sflush_r+0x44>
 8010380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010382:	1ad2      	subs	r2, r2, r3
 8010384:	2300      	movs	r3, #0
 8010386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010388:	6a21      	ldr	r1, [r4, #32]
 801038a:	4628      	mov	r0, r5
 801038c:	47b0      	blx	r6
 801038e:	1c43      	adds	r3, r0, #1
 8010390:	89a3      	ldrh	r3, [r4, #12]
 8010392:	d106      	bne.n	80103a2 <__sflush_r+0x62>
 8010394:	6829      	ldr	r1, [r5, #0]
 8010396:	291d      	cmp	r1, #29
 8010398:	d82b      	bhi.n	80103f2 <__sflush_r+0xb2>
 801039a:	4a2a      	ldr	r2, [pc, #168]	@ (8010444 <__sflush_r+0x104>)
 801039c:	40ca      	lsrs	r2, r1
 801039e:	07d6      	lsls	r6, r2, #31
 80103a0:	d527      	bpl.n	80103f2 <__sflush_r+0xb2>
 80103a2:	2200      	movs	r2, #0
 80103a4:	6062      	str	r2, [r4, #4]
 80103a6:	04d9      	lsls	r1, r3, #19
 80103a8:	6922      	ldr	r2, [r4, #16]
 80103aa:	6022      	str	r2, [r4, #0]
 80103ac:	d504      	bpl.n	80103b8 <__sflush_r+0x78>
 80103ae:	1c42      	adds	r2, r0, #1
 80103b0:	d101      	bne.n	80103b6 <__sflush_r+0x76>
 80103b2:	682b      	ldr	r3, [r5, #0]
 80103b4:	b903      	cbnz	r3, 80103b8 <__sflush_r+0x78>
 80103b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80103b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80103ba:	602f      	str	r7, [r5, #0]
 80103bc:	b1b9      	cbz	r1, 80103ee <__sflush_r+0xae>
 80103be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80103c2:	4299      	cmp	r1, r3
 80103c4:	d002      	beq.n	80103cc <__sflush_r+0x8c>
 80103c6:	4628      	mov	r0, r5
 80103c8:	f7ff f8a6 	bl	800f518 <_free_r>
 80103cc:	2300      	movs	r3, #0
 80103ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80103d0:	e00d      	b.n	80103ee <__sflush_r+0xae>
 80103d2:	2301      	movs	r3, #1
 80103d4:	4628      	mov	r0, r5
 80103d6:	47b0      	blx	r6
 80103d8:	4602      	mov	r2, r0
 80103da:	1c50      	adds	r0, r2, #1
 80103dc:	d1c9      	bne.n	8010372 <__sflush_r+0x32>
 80103de:	682b      	ldr	r3, [r5, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d0c6      	beq.n	8010372 <__sflush_r+0x32>
 80103e4:	2b1d      	cmp	r3, #29
 80103e6:	d001      	beq.n	80103ec <__sflush_r+0xac>
 80103e8:	2b16      	cmp	r3, #22
 80103ea:	d11e      	bne.n	801042a <__sflush_r+0xea>
 80103ec:	602f      	str	r7, [r5, #0]
 80103ee:	2000      	movs	r0, #0
 80103f0:	e022      	b.n	8010438 <__sflush_r+0xf8>
 80103f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103f6:	b21b      	sxth	r3, r3
 80103f8:	e01b      	b.n	8010432 <__sflush_r+0xf2>
 80103fa:	690f      	ldr	r7, [r1, #16]
 80103fc:	2f00      	cmp	r7, #0
 80103fe:	d0f6      	beq.n	80103ee <__sflush_r+0xae>
 8010400:	0793      	lsls	r3, r2, #30
 8010402:	680e      	ldr	r6, [r1, #0]
 8010404:	bf08      	it	eq
 8010406:	694b      	ldreq	r3, [r1, #20]
 8010408:	600f      	str	r7, [r1, #0]
 801040a:	bf18      	it	ne
 801040c:	2300      	movne	r3, #0
 801040e:	eba6 0807 	sub.w	r8, r6, r7
 8010412:	608b      	str	r3, [r1, #8]
 8010414:	f1b8 0f00 	cmp.w	r8, #0
 8010418:	dde9      	ble.n	80103ee <__sflush_r+0xae>
 801041a:	6a21      	ldr	r1, [r4, #32]
 801041c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801041e:	4643      	mov	r3, r8
 8010420:	463a      	mov	r2, r7
 8010422:	4628      	mov	r0, r5
 8010424:	47b0      	blx	r6
 8010426:	2800      	cmp	r0, #0
 8010428:	dc08      	bgt.n	801043c <__sflush_r+0xfc>
 801042a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801042e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010432:	81a3      	strh	r3, [r4, #12]
 8010434:	f04f 30ff 	mov.w	r0, #4294967295
 8010438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801043c:	4407      	add	r7, r0
 801043e:	eba8 0800 	sub.w	r8, r8, r0
 8010442:	e7e7      	b.n	8010414 <__sflush_r+0xd4>
 8010444:	20400001 	.word	0x20400001

08010448 <_fflush_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	690b      	ldr	r3, [r1, #16]
 801044c:	4605      	mov	r5, r0
 801044e:	460c      	mov	r4, r1
 8010450:	b913      	cbnz	r3, 8010458 <_fflush_r+0x10>
 8010452:	2500      	movs	r5, #0
 8010454:	4628      	mov	r0, r5
 8010456:	bd38      	pop	{r3, r4, r5, pc}
 8010458:	b118      	cbz	r0, 8010462 <_fflush_r+0x1a>
 801045a:	6a03      	ldr	r3, [r0, #32]
 801045c:	b90b      	cbnz	r3, 8010462 <_fflush_r+0x1a>
 801045e:	f7fd ffa1 	bl	800e3a4 <__sinit>
 8010462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d0f3      	beq.n	8010452 <_fflush_r+0xa>
 801046a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801046c:	07d0      	lsls	r0, r2, #31
 801046e:	d404      	bmi.n	801047a <_fflush_r+0x32>
 8010470:	0599      	lsls	r1, r3, #22
 8010472:	d402      	bmi.n	801047a <_fflush_r+0x32>
 8010474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010476:	f7fe f9e6 	bl	800e846 <__retarget_lock_acquire_recursive>
 801047a:	4628      	mov	r0, r5
 801047c:	4621      	mov	r1, r4
 801047e:	f7ff ff5f 	bl	8010340 <__sflush_r>
 8010482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010484:	07da      	lsls	r2, r3, #31
 8010486:	4605      	mov	r5, r0
 8010488:	d4e4      	bmi.n	8010454 <_fflush_r+0xc>
 801048a:	89a3      	ldrh	r3, [r4, #12]
 801048c:	059b      	lsls	r3, r3, #22
 801048e:	d4e1      	bmi.n	8010454 <_fflush_r+0xc>
 8010490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010492:	f7fe f9d9 	bl	800e848 <__retarget_lock_release_recursive>
 8010496:	e7dd      	b.n	8010454 <_fflush_r+0xc>

08010498 <__swhatbuf_r>:
 8010498:	b570      	push	{r4, r5, r6, lr}
 801049a:	460c      	mov	r4, r1
 801049c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104a0:	2900      	cmp	r1, #0
 80104a2:	b096      	sub	sp, #88	@ 0x58
 80104a4:	4615      	mov	r5, r2
 80104a6:	461e      	mov	r6, r3
 80104a8:	da0d      	bge.n	80104c6 <__swhatbuf_r+0x2e>
 80104aa:	89a3      	ldrh	r3, [r4, #12]
 80104ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80104b0:	f04f 0100 	mov.w	r1, #0
 80104b4:	bf14      	ite	ne
 80104b6:	2340      	movne	r3, #64	@ 0x40
 80104b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80104bc:	2000      	movs	r0, #0
 80104be:	6031      	str	r1, [r6, #0]
 80104c0:	602b      	str	r3, [r5, #0]
 80104c2:	b016      	add	sp, #88	@ 0x58
 80104c4:	bd70      	pop	{r4, r5, r6, pc}
 80104c6:	466a      	mov	r2, sp
 80104c8:	f000 f862 	bl	8010590 <_fstat_r>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	dbec      	blt.n	80104aa <__swhatbuf_r+0x12>
 80104d0:	9901      	ldr	r1, [sp, #4]
 80104d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80104d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80104da:	4259      	negs	r1, r3
 80104dc:	4159      	adcs	r1, r3
 80104de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80104e2:	e7eb      	b.n	80104bc <__swhatbuf_r+0x24>

080104e4 <__smakebuf_r>:
 80104e4:	898b      	ldrh	r3, [r1, #12]
 80104e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104e8:	079d      	lsls	r5, r3, #30
 80104ea:	4606      	mov	r6, r0
 80104ec:	460c      	mov	r4, r1
 80104ee:	d507      	bpl.n	8010500 <__smakebuf_r+0x1c>
 80104f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	6123      	str	r3, [r4, #16]
 80104f8:	2301      	movs	r3, #1
 80104fa:	6163      	str	r3, [r4, #20]
 80104fc:	b003      	add	sp, #12
 80104fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010500:	ab01      	add	r3, sp, #4
 8010502:	466a      	mov	r2, sp
 8010504:	f7ff ffc8 	bl	8010498 <__swhatbuf_r>
 8010508:	9f00      	ldr	r7, [sp, #0]
 801050a:	4605      	mov	r5, r0
 801050c:	4639      	mov	r1, r7
 801050e:	4630      	mov	r0, r6
 8010510:	f7ff f876 	bl	800f600 <_malloc_r>
 8010514:	b948      	cbnz	r0, 801052a <__smakebuf_r+0x46>
 8010516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801051a:	059a      	lsls	r2, r3, #22
 801051c:	d4ee      	bmi.n	80104fc <__smakebuf_r+0x18>
 801051e:	f023 0303 	bic.w	r3, r3, #3
 8010522:	f043 0302 	orr.w	r3, r3, #2
 8010526:	81a3      	strh	r3, [r4, #12]
 8010528:	e7e2      	b.n	80104f0 <__smakebuf_r+0xc>
 801052a:	89a3      	ldrh	r3, [r4, #12]
 801052c:	6020      	str	r0, [r4, #0]
 801052e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010532:	81a3      	strh	r3, [r4, #12]
 8010534:	9b01      	ldr	r3, [sp, #4]
 8010536:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801053a:	b15b      	cbz	r3, 8010554 <__smakebuf_r+0x70>
 801053c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010540:	4630      	mov	r0, r6
 8010542:	f000 f837 	bl	80105b4 <_isatty_r>
 8010546:	b128      	cbz	r0, 8010554 <__smakebuf_r+0x70>
 8010548:	89a3      	ldrh	r3, [r4, #12]
 801054a:	f023 0303 	bic.w	r3, r3, #3
 801054e:	f043 0301 	orr.w	r3, r3, #1
 8010552:	81a3      	strh	r3, [r4, #12]
 8010554:	89a3      	ldrh	r3, [r4, #12]
 8010556:	431d      	orrs	r5, r3
 8010558:	81a5      	strh	r5, [r4, #12]
 801055a:	e7cf      	b.n	80104fc <__smakebuf_r+0x18>

0801055c <memmove>:
 801055c:	4288      	cmp	r0, r1
 801055e:	b510      	push	{r4, lr}
 8010560:	eb01 0402 	add.w	r4, r1, r2
 8010564:	d902      	bls.n	801056c <memmove+0x10>
 8010566:	4284      	cmp	r4, r0
 8010568:	4623      	mov	r3, r4
 801056a:	d807      	bhi.n	801057c <memmove+0x20>
 801056c:	1e43      	subs	r3, r0, #1
 801056e:	42a1      	cmp	r1, r4
 8010570:	d008      	beq.n	8010584 <memmove+0x28>
 8010572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010576:	f803 2f01 	strb.w	r2, [r3, #1]!
 801057a:	e7f8      	b.n	801056e <memmove+0x12>
 801057c:	4402      	add	r2, r0
 801057e:	4601      	mov	r1, r0
 8010580:	428a      	cmp	r2, r1
 8010582:	d100      	bne.n	8010586 <memmove+0x2a>
 8010584:	bd10      	pop	{r4, pc}
 8010586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801058a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801058e:	e7f7      	b.n	8010580 <memmove+0x24>

08010590 <_fstat_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d07      	ldr	r5, [pc, #28]	@ (80105b0 <_fstat_r+0x20>)
 8010594:	2300      	movs	r3, #0
 8010596:	4604      	mov	r4, r0
 8010598:	4608      	mov	r0, r1
 801059a:	4611      	mov	r1, r2
 801059c:	602b      	str	r3, [r5, #0]
 801059e:	f7f4 faef 	bl	8004b80 <_fstat>
 80105a2:	1c43      	adds	r3, r0, #1
 80105a4:	d102      	bne.n	80105ac <_fstat_r+0x1c>
 80105a6:	682b      	ldr	r3, [r5, #0]
 80105a8:	b103      	cbz	r3, 80105ac <_fstat_r+0x1c>
 80105aa:	6023      	str	r3, [r4, #0]
 80105ac:	bd38      	pop	{r3, r4, r5, pc}
 80105ae:	bf00      	nop
 80105b0:	20001928 	.word	0x20001928

080105b4 <_isatty_r>:
 80105b4:	b538      	push	{r3, r4, r5, lr}
 80105b6:	4d06      	ldr	r5, [pc, #24]	@ (80105d0 <_isatty_r+0x1c>)
 80105b8:	2300      	movs	r3, #0
 80105ba:	4604      	mov	r4, r0
 80105bc:	4608      	mov	r0, r1
 80105be:	602b      	str	r3, [r5, #0]
 80105c0:	f7f4 faee 	bl	8004ba0 <_isatty>
 80105c4:	1c43      	adds	r3, r0, #1
 80105c6:	d102      	bne.n	80105ce <_isatty_r+0x1a>
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	b103      	cbz	r3, 80105ce <_isatty_r+0x1a>
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	bd38      	pop	{r3, r4, r5, pc}
 80105d0:	20001928 	.word	0x20001928

080105d4 <_sbrk_r>:
 80105d4:	b538      	push	{r3, r4, r5, lr}
 80105d6:	4d06      	ldr	r5, [pc, #24]	@ (80105f0 <_sbrk_r+0x1c>)
 80105d8:	2300      	movs	r3, #0
 80105da:	4604      	mov	r4, r0
 80105dc:	4608      	mov	r0, r1
 80105de:	602b      	str	r3, [r5, #0]
 80105e0:	f7f4 faf6 	bl	8004bd0 <_sbrk>
 80105e4:	1c43      	adds	r3, r0, #1
 80105e6:	d102      	bne.n	80105ee <_sbrk_r+0x1a>
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	b103      	cbz	r3, 80105ee <_sbrk_r+0x1a>
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	bd38      	pop	{r3, r4, r5, pc}
 80105f0:	20001928 	.word	0x20001928

080105f4 <__assert_func>:
 80105f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105f6:	4614      	mov	r4, r2
 80105f8:	461a      	mov	r2, r3
 80105fa:	4b09      	ldr	r3, [pc, #36]	@ (8010620 <__assert_func+0x2c>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4605      	mov	r5, r0
 8010600:	68d8      	ldr	r0, [r3, #12]
 8010602:	b14c      	cbz	r4, 8010618 <__assert_func+0x24>
 8010604:	4b07      	ldr	r3, [pc, #28]	@ (8010624 <__assert_func+0x30>)
 8010606:	9100      	str	r1, [sp, #0]
 8010608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801060c:	4906      	ldr	r1, [pc, #24]	@ (8010628 <__assert_func+0x34>)
 801060e:	462b      	mov	r3, r5
 8010610:	f000 f870 	bl	80106f4 <fiprintf>
 8010614:	f000 f880 	bl	8010718 <abort>
 8010618:	4b04      	ldr	r3, [pc, #16]	@ (801062c <__assert_func+0x38>)
 801061a:	461c      	mov	r4, r3
 801061c:	e7f3      	b.n	8010606 <__assert_func+0x12>
 801061e:	bf00      	nop
 8010620:	20000140 	.word	0x20000140
 8010624:	08011d05 	.word	0x08011d05
 8010628:	08011d12 	.word	0x08011d12
 801062c:	08011d40 	.word	0x08011d40

08010630 <_calloc_r>:
 8010630:	b570      	push	{r4, r5, r6, lr}
 8010632:	fba1 5402 	umull	r5, r4, r1, r2
 8010636:	b934      	cbnz	r4, 8010646 <_calloc_r+0x16>
 8010638:	4629      	mov	r1, r5
 801063a:	f7fe ffe1 	bl	800f600 <_malloc_r>
 801063e:	4606      	mov	r6, r0
 8010640:	b928      	cbnz	r0, 801064e <_calloc_r+0x1e>
 8010642:	4630      	mov	r0, r6
 8010644:	bd70      	pop	{r4, r5, r6, pc}
 8010646:	220c      	movs	r2, #12
 8010648:	6002      	str	r2, [r0, #0]
 801064a:	2600      	movs	r6, #0
 801064c:	e7f9      	b.n	8010642 <_calloc_r+0x12>
 801064e:	462a      	mov	r2, r5
 8010650:	4621      	mov	r1, r4
 8010652:	f7fe f87b 	bl	800e74c <memset>
 8010656:	e7f4      	b.n	8010642 <_calloc_r+0x12>

08010658 <__ascii_mbtowc>:
 8010658:	b082      	sub	sp, #8
 801065a:	b901      	cbnz	r1, 801065e <__ascii_mbtowc+0x6>
 801065c:	a901      	add	r1, sp, #4
 801065e:	b142      	cbz	r2, 8010672 <__ascii_mbtowc+0x1a>
 8010660:	b14b      	cbz	r3, 8010676 <__ascii_mbtowc+0x1e>
 8010662:	7813      	ldrb	r3, [r2, #0]
 8010664:	600b      	str	r3, [r1, #0]
 8010666:	7812      	ldrb	r2, [r2, #0]
 8010668:	1e10      	subs	r0, r2, #0
 801066a:	bf18      	it	ne
 801066c:	2001      	movne	r0, #1
 801066e:	b002      	add	sp, #8
 8010670:	4770      	bx	lr
 8010672:	4610      	mov	r0, r2
 8010674:	e7fb      	b.n	801066e <__ascii_mbtowc+0x16>
 8010676:	f06f 0001 	mvn.w	r0, #1
 801067a:	e7f8      	b.n	801066e <__ascii_mbtowc+0x16>

0801067c <_realloc_r>:
 801067c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010680:	4607      	mov	r7, r0
 8010682:	4614      	mov	r4, r2
 8010684:	460d      	mov	r5, r1
 8010686:	b921      	cbnz	r1, 8010692 <_realloc_r+0x16>
 8010688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801068c:	4611      	mov	r1, r2
 801068e:	f7fe bfb7 	b.w	800f600 <_malloc_r>
 8010692:	b92a      	cbnz	r2, 80106a0 <_realloc_r+0x24>
 8010694:	f7fe ff40 	bl	800f518 <_free_r>
 8010698:	4625      	mov	r5, r4
 801069a:	4628      	mov	r0, r5
 801069c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a0:	f000 f841 	bl	8010726 <_malloc_usable_size_r>
 80106a4:	4284      	cmp	r4, r0
 80106a6:	4606      	mov	r6, r0
 80106a8:	d802      	bhi.n	80106b0 <_realloc_r+0x34>
 80106aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80106ae:	d8f4      	bhi.n	801069a <_realloc_r+0x1e>
 80106b0:	4621      	mov	r1, r4
 80106b2:	4638      	mov	r0, r7
 80106b4:	f7fe ffa4 	bl	800f600 <_malloc_r>
 80106b8:	4680      	mov	r8, r0
 80106ba:	b908      	cbnz	r0, 80106c0 <_realloc_r+0x44>
 80106bc:	4645      	mov	r5, r8
 80106be:	e7ec      	b.n	801069a <_realloc_r+0x1e>
 80106c0:	42b4      	cmp	r4, r6
 80106c2:	4622      	mov	r2, r4
 80106c4:	4629      	mov	r1, r5
 80106c6:	bf28      	it	cs
 80106c8:	4632      	movcs	r2, r6
 80106ca:	f7fe f8be 	bl	800e84a <memcpy>
 80106ce:	4629      	mov	r1, r5
 80106d0:	4638      	mov	r0, r7
 80106d2:	f7fe ff21 	bl	800f518 <_free_r>
 80106d6:	e7f1      	b.n	80106bc <_realloc_r+0x40>

080106d8 <__ascii_wctomb>:
 80106d8:	4603      	mov	r3, r0
 80106da:	4608      	mov	r0, r1
 80106dc:	b141      	cbz	r1, 80106f0 <__ascii_wctomb+0x18>
 80106de:	2aff      	cmp	r2, #255	@ 0xff
 80106e0:	d904      	bls.n	80106ec <__ascii_wctomb+0x14>
 80106e2:	228a      	movs	r2, #138	@ 0x8a
 80106e4:	601a      	str	r2, [r3, #0]
 80106e6:	f04f 30ff 	mov.w	r0, #4294967295
 80106ea:	4770      	bx	lr
 80106ec:	700a      	strb	r2, [r1, #0]
 80106ee:	2001      	movs	r0, #1
 80106f0:	4770      	bx	lr
	...

080106f4 <fiprintf>:
 80106f4:	b40e      	push	{r1, r2, r3}
 80106f6:	b503      	push	{r0, r1, lr}
 80106f8:	4601      	mov	r1, r0
 80106fa:	ab03      	add	r3, sp, #12
 80106fc:	4805      	ldr	r0, [pc, #20]	@ (8010714 <fiprintf+0x20>)
 80106fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010702:	6800      	ldr	r0, [r0, #0]
 8010704:	9301      	str	r3, [sp, #4]
 8010706:	f7ff fd03 	bl	8010110 <_vfiprintf_r>
 801070a:	b002      	add	sp, #8
 801070c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010710:	b003      	add	sp, #12
 8010712:	4770      	bx	lr
 8010714:	20000140 	.word	0x20000140

08010718 <abort>:
 8010718:	b508      	push	{r3, lr}
 801071a:	2006      	movs	r0, #6
 801071c:	f000 f834 	bl	8010788 <raise>
 8010720:	2001      	movs	r0, #1
 8010722:	f7f4 f9dd 	bl	8004ae0 <_exit>

08010726 <_malloc_usable_size_r>:
 8010726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801072a:	1f18      	subs	r0, r3, #4
 801072c:	2b00      	cmp	r3, #0
 801072e:	bfbc      	itt	lt
 8010730:	580b      	ldrlt	r3, [r1, r0]
 8010732:	18c0      	addlt	r0, r0, r3
 8010734:	4770      	bx	lr

08010736 <_raise_r>:
 8010736:	291f      	cmp	r1, #31
 8010738:	b538      	push	{r3, r4, r5, lr}
 801073a:	4605      	mov	r5, r0
 801073c:	460c      	mov	r4, r1
 801073e:	d904      	bls.n	801074a <_raise_r+0x14>
 8010740:	2316      	movs	r3, #22
 8010742:	6003      	str	r3, [r0, #0]
 8010744:	f04f 30ff 	mov.w	r0, #4294967295
 8010748:	bd38      	pop	{r3, r4, r5, pc}
 801074a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801074c:	b112      	cbz	r2, 8010754 <_raise_r+0x1e>
 801074e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010752:	b94b      	cbnz	r3, 8010768 <_raise_r+0x32>
 8010754:	4628      	mov	r0, r5
 8010756:	f000 f831 	bl	80107bc <_getpid_r>
 801075a:	4622      	mov	r2, r4
 801075c:	4601      	mov	r1, r0
 801075e:	4628      	mov	r0, r5
 8010760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010764:	f000 b818 	b.w	8010798 <_kill_r>
 8010768:	2b01      	cmp	r3, #1
 801076a:	d00a      	beq.n	8010782 <_raise_r+0x4c>
 801076c:	1c59      	adds	r1, r3, #1
 801076e:	d103      	bne.n	8010778 <_raise_r+0x42>
 8010770:	2316      	movs	r3, #22
 8010772:	6003      	str	r3, [r0, #0]
 8010774:	2001      	movs	r0, #1
 8010776:	e7e7      	b.n	8010748 <_raise_r+0x12>
 8010778:	2100      	movs	r1, #0
 801077a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801077e:	4620      	mov	r0, r4
 8010780:	4798      	blx	r3
 8010782:	2000      	movs	r0, #0
 8010784:	e7e0      	b.n	8010748 <_raise_r+0x12>
	...

08010788 <raise>:
 8010788:	4b02      	ldr	r3, [pc, #8]	@ (8010794 <raise+0xc>)
 801078a:	4601      	mov	r1, r0
 801078c:	6818      	ldr	r0, [r3, #0]
 801078e:	f7ff bfd2 	b.w	8010736 <_raise_r>
 8010792:	bf00      	nop
 8010794:	20000140 	.word	0x20000140

08010798 <_kill_r>:
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	4d07      	ldr	r5, [pc, #28]	@ (80107b8 <_kill_r+0x20>)
 801079c:	2300      	movs	r3, #0
 801079e:	4604      	mov	r4, r0
 80107a0:	4608      	mov	r0, r1
 80107a2:	4611      	mov	r1, r2
 80107a4:	602b      	str	r3, [r5, #0]
 80107a6:	f7f4 f98b 	bl	8004ac0 <_kill>
 80107aa:	1c43      	adds	r3, r0, #1
 80107ac:	d102      	bne.n	80107b4 <_kill_r+0x1c>
 80107ae:	682b      	ldr	r3, [r5, #0]
 80107b0:	b103      	cbz	r3, 80107b4 <_kill_r+0x1c>
 80107b2:	6023      	str	r3, [r4, #0]
 80107b4:	bd38      	pop	{r3, r4, r5, pc}
 80107b6:	bf00      	nop
 80107b8:	20001928 	.word	0x20001928

080107bc <_getpid_r>:
 80107bc:	f7f4 b978 	b.w	8004ab0 <_getpid>

080107c0 <powf>:
 80107c0:	b508      	push	{r3, lr}
 80107c2:	ed2d 8b04 	vpush	{d8-d9}
 80107c6:	eeb0 8a60 	vmov.f32	s16, s1
 80107ca:	eeb0 9a40 	vmov.f32	s18, s0
 80107ce:	f000 f859 	bl	8010884 <__ieee754_powf>
 80107d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80107d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107da:	eef0 8a40 	vmov.f32	s17, s0
 80107de:	d63e      	bvs.n	801085e <powf+0x9e>
 80107e0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80107e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e8:	d112      	bne.n	8010810 <powf+0x50>
 80107ea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80107ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f2:	d039      	beq.n	8010868 <powf+0xa8>
 80107f4:	eeb0 0a48 	vmov.f32	s0, s16
 80107f8:	f000 f839 	bl	801086e <finitef>
 80107fc:	b378      	cbz	r0, 801085e <powf+0x9e>
 80107fe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010806:	d52a      	bpl.n	801085e <powf+0x9e>
 8010808:	f7fd fff2 	bl	800e7f0 <__errno>
 801080c:	2322      	movs	r3, #34	@ 0x22
 801080e:	e014      	b.n	801083a <powf+0x7a>
 8010810:	f000 f82d 	bl	801086e <finitef>
 8010814:	b998      	cbnz	r0, 801083e <powf+0x7e>
 8010816:	eeb0 0a49 	vmov.f32	s0, s18
 801081a:	f000 f828 	bl	801086e <finitef>
 801081e:	b170      	cbz	r0, 801083e <powf+0x7e>
 8010820:	eeb0 0a48 	vmov.f32	s0, s16
 8010824:	f000 f823 	bl	801086e <finitef>
 8010828:	b148      	cbz	r0, 801083e <powf+0x7e>
 801082a:	eef4 8a68 	vcmp.f32	s17, s17
 801082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010832:	d7e9      	bvc.n	8010808 <powf+0x48>
 8010834:	f7fd ffdc 	bl	800e7f0 <__errno>
 8010838:	2321      	movs	r3, #33	@ 0x21
 801083a:	6003      	str	r3, [r0, #0]
 801083c:	e00f      	b.n	801085e <powf+0x9e>
 801083e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010846:	d10a      	bne.n	801085e <powf+0x9e>
 8010848:	eeb0 0a49 	vmov.f32	s0, s18
 801084c:	f000 f80f 	bl	801086e <finitef>
 8010850:	b128      	cbz	r0, 801085e <powf+0x9e>
 8010852:	eeb0 0a48 	vmov.f32	s0, s16
 8010856:	f000 f80a 	bl	801086e <finitef>
 801085a:	2800      	cmp	r0, #0
 801085c:	d1d4      	bne.n	8010808 <powf+0x48>
 801085e:	eeb0 0a68 	vmov.f32	s0, s17
 8010862:	ecbd 8b04 	vpop	{d8-d9}
 8010866:	bd08      	pop	{r3, pc}
 8010868:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801086c:	e7f7      	b.n	801085e <powf+0x9e>

0801086e <finitef>:
 801086e:	ee10 3a10 	vmov	r3, s0
 8010872:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010876:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801087a:	bfac      	ite	ge
 801087c:	2000      	movge	r0, #0
 801087e:	2001      	movlt	r0, #1
 8010880:	4770      	bx	lr
	...

08010884 <__ieee754_powf>:
 8010884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010888:	ee10 4a90 	vmov	r4, s1
 801088c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010890:	ed2d 8b02 	vpush	{d8}
 8010894:	ee10 6a10 	vmov	r6, s0
 8010898:	eeb0 8a40 	vmov.f32	s16, s0
 801089c:	eef0 8a60 	vmov.f32	s17, s1
 80108a0:	d10c      	bne.n	80108bc <__ieee754_powf+0x38>
 80108a2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80108a6:	0076      	lsls	r6, r6, #1
 80108a8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80108ac:	f240 8274 	bls.w	8010d98 <__ieee754_powf+0x514>
 80108b0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80108b4:	ecbd 8b02 	vpop	{d8}
 80108b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108bc:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80108c0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80108c4:	d802      	bhi.n	80108cc <__ieee754_powf+0x48>
 80108c6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80108ca:	d908      	bls.n	80108de <__ieee754_powf+0x5a>
 80108cc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80108d0:	d1ee      	bne.n	80108b0 <__ieee754_powf+0x2c>
 80108d2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80108d6:	0064      	lsls	r4, r4, #1
 80108d8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80108dc:	e7e6      	b.n	80108ac <__ieee754_powf+0x28>
 80108de:	2e00      	cmp	r6, #0
 80108e0:	da1f      	bge.n	8010922 <__ieee754_powf+0x9e>
 80108e2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80108e6:	f080 8260 	bcs.w	8010daa <__ieee754_powf+0x526>
 80108ea:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80108ee:	d32f      	bcc.n	8010950 <__ieee754_powf+0xcc>
 80108f0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80108f4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80108f8:	fa49 f503 	asr.w	r5, r9, r3
 80108fc:	fa05 f303 	lsl.w	r3, r5, r3
 8010900:	454b      	cmp	r3, r9
 8010902:	d123      	bne.n	801094c <__ieee754_powf+0xc8>
 8010904:	f005 0501 	and.w	r5, r5, #1
 8010908:	f1c5 0502 	rsb	r5, r5, #2
 801090c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010910:	d11f      	bne.n	8010952 <__ieee754_powf+0xce>
 8010912:	2c00      	cmp	r4, #0
 8010914:	f280 8246 	bge.w	8010da4 <__ieee754_powf+0x520>
 8010918:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801091c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010920:	e7c8      	b.n	80108b4 <__ieee754_powf+0x30>
 8010922:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010926:	d111      	bne.n	801094c <__ieee754_powf+0xc8>
 8010928:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801092c:	f000 8234 	beq.w	8010d98 <__ieee754_powf+0x514>
 8010930:	d906      	bls.n	8010940 <__ieee754_powf+0xbc>
 8010932:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8010c48 <__ieee754_powf+0x3c4>
 8010936:	2c00      	cmp	r4, #0
 8010938:	bfa8      	it	ge
 801093a:	eeb0 0a68 	vmovge.f32	s0, s17
 801093e:	e7b9      	b.n	80108b4 <__ieee754_powf+0x30>
 8010940:	2c00      	cmp	r4, #0
 8010942:	f280 822c 	bge.w	8010d9e <__ieee754_powf+0x51a>
 8010946:	eeb1 0a68 	vneg.f32	s0, s17
 801094a:	e7b3      	b.n	80108b4 <__ieee754_powf+0x30>
 801094c:	2500      	movs	r5, #0
 801094e:	e7dd      	b.n	801090c <__ieee754_powf+0x88>
 8010950:	2500      	movs	r5, #0
 8010952:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010956:	d102      	bne.n	801095e <__ieee754_powf+0xda>
 8010958:	ee28 0a08 	vmul.f32	s0, s16, s16
 801095c:	e7aa      	b.n	80108b4 <__ieee754_powf+0x30>
 801095e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010962:	f040 8227 	bne.w	8010db4 <__ieee754_powf+0x530>
 8010966:	2e00      	cmp	r6, #0
 8010968:	f2c0 8224 	blt.w	8010db4 <__ieee754_powf+0x530>
 801096c:	eeb0 0a48 	vmov.f32	s0, s16
 8010970:	ecbd 8b02 	vpop	{d8}
 8010974:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010978:	f000 bae6 	b.w	8010f48 <__ieee754_sqrtf>
 801097c:	2d01      	cmp	r5, #1
 801097e:	d199      	bne.n	80108b4 <__ieee754_powf+0x30>
 8010980:	eeb1 0a40 	vneg.f32	s0, s0
 8010984:	e796      	b.n	80108b4 <__ieee754_powf+0x30>
 8010986:	0ff0      	lsrs	r0, r6, #31
 8010988:	3801      	subs	r0, #1
 801098a:	ea55 0300 	orrs.w	r3, r5, r0
 801098e:	d104      	bne.n	801099a <__ieee754_powf+0x116>
 8010990:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010994:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010998:	e78c      	b.n	80108b4 <__ieee754_powf+0x30>
 801099a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801099e:	d96d      	bls.n	8010a7c <__ieee754_powf+0x1f8>
 80109a0:	4baa      	ldr	r3, [pc, #680]	@ (8010c4c <__ieee754_powf+0x3c8>)
 80109a2:	4598      	cmp	r8, r3
 80109a4:	d808      	bhi.n	80109b8 <__ieee754_powf+0x134>
 80109a6:	2c00      	cmp	r4, #0
 80109a8:	da0b      	bge.n	80109c2 <__ieee754_powf+0x13e>
 80109aa:	2000      	movs	r0, #0
 80109ac:	ecbd 8b02 	vpop	{d8}
 80109b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109b4:	f000 bac2 	b.w	8010f3c <__math_oflowf>
 80109b8:	4ba5      	ldr	r3, [pc, #660]	@ (8010c50 <__ieee754_powf+0x3cc>)
 80109ba:	4598      	cmp	r8, r3
 80109bc:	d908      	bls.n	80109d0 <__ieee754_powf+0x14c>
 80109be:	2c00      	cmp	r4, #0
 80109c0:	dcf3      	bgt.n	80109aa <__ieee754_powf+0x126>
 80109c2:	2000      	movs	r0, #0
 80109c4:	ecbd 8b02 	vpop	{d8}
 80109c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109cc:	f000 bab0 	b.w	8010f30 <__math_uflowf>
 80109d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80109d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80109d8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8010c54 <__ieee754_powf+0x3d0>
 80109dc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80109e0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80109e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80109e8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80109ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 80109f0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8010c58 <__ieee754_powf+0x3d4>
 80109f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80109f8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8010c5c <__ieee754_powf+0x3d8>
 80109fc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010a00:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8010c60 <__ieee754_powf+0x3dc>
 8010a04:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010a08:	eeb0 7a67 	vmov.f32	s14, s15
 8010a0c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010a10:	ee17 3a10 	vmov	r3, s14
 8010a14:	f36f 030b 	bfc	r3, #0, #12
 8010a18:	ee07 3a10 	vmov	s14, r3
 8010a1c:	eeb0 6a47 	vmov.f32	s12, s14
 8010a20:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010a24:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010a28:	3d01      	subs	r5, #1
 8010a2a:	4305      	orrs	r5, r0
 8010a2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a30:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010a34:	f36f 040b 	bfc	r4, #0, #12
 8010a38:	bf18      	it	ne
 8010a3a:	eeb0 8a66 	vmovne.f32	s16, s13
 8010a3e:	ee06 4a90 	vmov	s13, r4
 8010a42:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010a46:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8010a4a:	ee67 7a26 	vmul.f32	s15, s14, s13
 8010a4e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8010a52:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010a56:	ee17 1a10 	vmov	r1, s14
 8010a5a:	2900      	cmp	r1, #0
 8010a5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010a60:	f340 80dd 	ble.w	8010c1e <__ieee754_powf+0x39a>
 8010a64:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010a68:	f240 80ca 	bls.w	8010c00 <__ieee754_powf+0x37c>
 8010a6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a74:	bf4c      	ite	mi
 8010a76:	2001      	movmi	r0, #1
 8010a78:	2000      	movpl	r0, #0
 8010a7a:	e797      	b.n	80109ac <__ieee754_powf+0x128>
 8010a7c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8010a80:	bf01      	itttt	eq
 8010a82:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010c64 <__ieee754_powf+0x3e0>
 8010a86:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010a8a:	f06f 0317 	mvneq.w	r3, #23
 8010a8e:	ee17 7a90 	vmoveq	r7, s15
 8010a92:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010a96:	bf18      	it	ne
 8010a98:	2300      	movne	r3, #0
 8010a9a:	3a7f      	subs	r2, #127	@ 0x7f
 8010a9c:	441a      	add	r2, r3
 8010a9e:	4b72      	ldr	r3, [pc, #456]	@ (8010c68 <__ieee754_powf+0x3e4>)
 8010aa0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010aa4:	429f      	cmp	r7, r3
 8010aa6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010aaa:	dd06      	ble.n	8010aba <__ieee754_powf+0x236>
 8010aac:	4b6f      	ldr	r3, [pc, #444]	@ (8010c6c <__ieee754_powf+0x3e8>)
 8010aae:	429f      	cmp	r7, r3
 8010ab0:	f340 80a4 	ble.w	8010bfc <__ieee754_powf+0x378>
 8010ab4:	3201      	adds	r2, #1
 8010ab6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010aba:	2600      	movs	r6, #0
 8010abc:	4b6c      	ldr	r3, [pc, #432]	@ (8010c70 <__ieee754_powf+0x3ec>)
 8010abe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8010ac2:	ee07 1a10 	vmov	s14, r1
 8010ac6:	edd3 5a00 	vldr	s11, [r3]
 8010aca:	4b6a      	ldr	r3, [pc, #424]	@ (8010c74 <__ieee754_powf+0x3f0>)
 8010acc:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010ad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ad4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010ad8:	1049      	asrs	r1, r1, #1
 8010ada:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010ade:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010ae2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010ae6:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010aea:	ee07 1a90 	vmov	s15, r1
 8010aee:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010af2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010af6:	ee15 7a10 	vmov	r7, s10
 8010afa:	401f      	ands	r7, r3
 8010afc:	ee06 7a90 	vmov	s13, r7
 8010b00:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010b04:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010b08:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010b0c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010b10:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010c78 <__ieee754_powf+0x3f4>
 8010b14:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010c7c <__ieee754_powf+0x3f8>
 8010b18:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010b1c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010c80 <__ieee754_powf+0x3fc>
 8010b20:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010b24:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010c54 <__ieee754_powf+0x3d0>
 8010b28:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010b2c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010c84 <__ieee754_powf+0x400>
 8010b30:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010b34:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010c88 <__ieee754_powf+0x404>
 8010b38:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010b3c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010b40:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010b44:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010b48:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010b4c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8010b50:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010b54:	eef0 5a67 	vmov.f32	s11, s15
 8010b58:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010b5c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010b60:	ee15 1a90 	vmov	r1, s11
 8010b64:	4019      	ands	r1, r3
 8010b66:	ee05 1a90 	vmov	s11, r1
 8010b6a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010b6e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8010b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b76:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010b7a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010b7e:	eeb0 6a67 	vmov.f32	s12, s15
 8010b82:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010b86:	ee16 1a10 	vmov	r1, s12
 8010b8a:	4019      	ands	r1, r3
 8010b8c:	ee06 1a10 	vmov	s12, r1
 8010b90:	eeb0 7a46 	vmov.f32	s14, s12
 8010b94:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010b98:	493c      	ldr	r1, [pc, #240]	@ (8010c8c <__ieee754_powf+0x408>)
 8010b9a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8010b9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ba2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8010c90 <__ieee754_powf+0x40c>
 8010ba6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010c94 <__ieee754_powf+0x410>
 8010baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010bae:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010c98 <__ieee754_powf+0x414>
 8010bb2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010bb6:	ed91 7a00 	vldr	s14, [r1]
 8010bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010bbe:	ee07 2a10 	vmov	s14, r2
 8010bc2:	4a36      	ldr	r2, [pc, #216]	@ (8010c9c <__ieee754_powf+0x418>)
 8010bc4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010bc8:	eeb0 7a67 	vmov.f32	s14, s15
 8010bcc:	eea6 7a25 	vfma.f32	s14, s12, s11
 8010bd0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010bd4:	ed92 5a00 	vldr	s10, [r2]
 8010bd8:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010bdc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010be0:	ee17 2a10 	vmov	r2, s14
 8010be4:	401a      	ands	r2, r3
 8010be6:	ee07 2a10 	vmov	s14, r2
 8010bea:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010bee:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010bf2:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010bf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010bfa:	e715      	b.n	8010a28 <__ieee754_powf+0x1a4>
 8010bfc:	2601      	movs	r6, #1
 8010bfe:	e75d      	b.n	8010abc <__ieee754_powf+0x238>
 8010c00:	d152      	bne.n	8010ca8 <__ieee754_powf+0x424>
 8010c02:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010ca0 <__ieee754_powf+0x41c>
 8010c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c0a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010c0e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c16:	f73f af29 	bgt.w	8010a6c <__ieee754_powf+0x1e8>
 8010c1a:	2386      	movs	r3, #134	@ 0x86
 8010c1c:	e048      	b.n	8010cb0 <__ieee754_powf+0x42c>
 8010c1e:	4a21      	ldr	r2, [pc, #132]	@ (8010ca4 <__ieee754_powf+0x420>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d907      	bls.n	8010c34 <__ieee754_powf+0x3b0>
 8010c24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2c:	bf4c      	ite	mi
 8010c2e:	2001      	movmi	r0, #1
 8010c30:	2000      	movpl	r0, #0
 8010c32:	e6c7      	b.n	80109c4 <__ieee754_powf+0x140>
 8010c34:	d138      	bne.n	8010ca8 <__ieee754_powf+0x424>
 8010c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c3a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c42:	dbea      	blt.n	8010c1a <__ieee754_powf+0x396>
 8010c44:	e7ee      	b.n	8010c24 <__ieee754_powf+0x3a0>
 8010c46:	bf00      	nop
 8010c48:	00000000 	.word	0x00000000
 8010c4c:	3f7ffff3 	.word	0x3f7ffff3
 8010c50:	3f800007 	.word	0x3f800007
 8010c54:	3eaaaaab 	.word	0x3eaaaaab
 8010c58:	3fb8aa00 	.word	0x3fb8aa00
 8010c5c:	3fb8aa3b 	.word	0x3fb8aa3b
 8010c60:	36eca570 	.word	0x36eca570
 8010c64:	4b800000 	.word	0x4b800000
 8010c68:	001cc471 	.word	0x001cc471
 8010c6c:	005db3d6 	.word	0x005db3d6
 8010c70:	08011f54 	.word	0x08011f54
 8010c74:	fffff000 	.word	0xfffff000
 8010c78:	3e6c3255 	.word	0x3e6c3255
 8010c7c:	3e53f142 	.word	0x3e53f142
 8010c80:	3e8ba305 	.word	0x3e8ba305
 8010c84:	3edb6db7 	.word	0x3edb6db7
 8010c88:	3f19999a 	.word	0x3f19999a
 8010c8c:	08011f44 	.word	0x08011f44
 8010c90:	3f76384f 	.word	0x3f76384f
 8010c94:	3f763800 	.word	0x3f763800
 8010c98:	369dc3a0 	.word	0x369dc3a0
 8010c9c:	08011f4c 	.word	0x08011f4c
 8010ca0:	3338aa3c 	.word	0x3338aa3c
 8010ca4:	43160000 	.word	0x43160000
 8010ca8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010cac:	d96f      	bls.n	8010d8e <__ieee754_powf+0x50a>
 8010cae:	15db      	asrs	r3, r3, #23
 8010cb0:	3b7e      	subs	r3, #126	@ 0x7e
 8010cb2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010cb6:	4118      	asrs	r0, r3
 8010cb8:	4408      	add	r0, r1
 8010cba:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8010df8 <__ieee754_powf+0x574>)
 8010cc0:	3b7f      	subs	r3, #127	@ 0x7f
 8010cc2:	411a      	asrs	r2, r3
 8010cc4:	4002      	ands	r2, r0
 8010cc6:	ee07 2a10 	vmov	s14, r2
 8010cca:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8010cce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cd2:	f1c3 0317 	rsb	r3, r3, #23
 8010cd6:	4118      	asrs	r0, r3
 8010cd8:	2900      	cmp	r1, #0
 8010cda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cde:	bfb8      	it	lt
 8010ce0:	4240      	neglt	r0, r0
 8010ce2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8010ce6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8010dfc <__ieee754_powf+0x578>
 8010cea:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8010e00 <__ieee754_powf+0x57c>
 8010cee:	ee16 3a90 	vmov	r3, s13
 8010cf2:	f36f 030b 	bfc	r3, #0, #12
 8010cf6:	ee06 3a90 	vmov	s13, r3
 8010cfa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010cfe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010d02:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010d06:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8010e04 <__ieee754_powf+0x580>
 8010d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d0e:	eee0 7a87 	vfma.f32	s15, s1, s14
 8010d12:	eeb0 7a67 	vmov.f32	s14, s15
 8010d16:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010d1a:	eef0 5a47 	vmov.f32	s11, s14
 8010d1e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8010d22:	ee67 6a07 	vmul.f32	s13, s14, s14
 8010d26:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010d2a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8010e08 <__ieee754_powf+0x584>
 8010d2e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8010e0c <__ieee754_powf+0x588>
 8010d32:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010d36:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8010e10 <__ieee754_powf+0x58c>
 8010d3a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010d3e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8010e14 <__ieee754_powf+0x590>
 8010d42:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8010d46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010e18 <__ieee754_powf+0x594>
 8010d4a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010d4e:	eeb0 6a47 	vmov.f32	s12, s14
 8010d52:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8010d56:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010d5a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8010d5e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010d62:	eee7 7a27 	vfma.f32	s15, s14, s15
 8010d66:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010d6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010d76:	ee10 3a10 	vmov	r3, s0
 8010d7a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010d7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010d82:	da06      	bge.n	8010d92 <__ieee754_powf+0x50e>
 8010d84:	f000 f854 	bl	8010e30 <scalbnf>
 8010d88:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010d8c:	e592      	b.n	80108b4 <__ieee754_powf+0x30>
 8010d8e:	2000      	movs	r0, #0
 8010d90:	e7a7      	b.n	8010ce2 <__ieee754_powf+0x45e>
 8010d92:	ee00 3a10 	vmov	s0, r3
 8010d96:	e7f7      	b.n	8010d88 <__ieee754_powf+0x504>
 8010d98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010d9c:	e58a      	b.n	80108b4 <__ieee754_powf+0x30>
 8010d9e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8010e1c <__ieee754_powf+0x598>
 8010da2:	e587      	b.n	80108b4 <__ieee754_powf+0x30>
 8010da4:	eeb0 0a48 	vmov.f32	s0, s16
 8010da8:	e584      	b.n	80108b4 <__ieee754_powf+0x30>
 8010daa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010dae:	f43f adbb 	beq.w	8010928 <__ieee754_powf+0xa4>
 8010db2:	2502      	movs	r5, #2
 8010db4:	eeb0 0a48 	vmov.f32	s0, s16
 8010db8:	f000 f832 	bl	8010e20 <fabsf>
 8010dbc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010dc0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8010dc4:	4647      	mov	r7, r8
 8010dc6:	d003      	beq.n	8010dd0 <__ieee754_powf+0x54c>
 8010dc8:	f1b8 0f00 	cmp.w	r8, #0
 8010dcc:	f47f addb 	bne.w	8010986 <__ieee754_powf+0x102>
 8010dd0:	2c00      	cmp	r4, #0
 8010dd2:	bfbc      	itt	lt
 8010dd4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8010dd8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010ddc:	2e00      	cmp	r6, #0
 8010dde:	f6bf ad69 	bge.w	80108b4 <__ieee754_powf+0x30>
 8010de2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8010de6:	ea58 0805 	orrs.w	r8, r8, r5
 8010dea:	f47f adc7 	bne.w	801097c <__ieee754_powf+0xf8>
 8010dee:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010df2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010df6:	e55d      	b.n	80108b4 <__ieee754_powf+0x30>
 8010df8:	ff800000 	.word	0xff800000
 8010dfc:	3f317218 	.word	0x3f317218
 8010e00:	3f317200 	.word	0x3f317200
 8010e04:	35bfbe8c 	.word	0x35bfbe8c
 8010e08:	b5ddea0e 	.word	0xb5ddea0e
 8010e0c:	3331bb4c 	.word	0x3331bb4c
 8010e10:	388ab355 	.word	0x388ab355
 8010e14:	bb360b61 	.word	0xbb360b61
 8010e18:	3e2aaaab 	.word	0x3e2aaaab
 8010e1c:	00000000 	.word	0x00000000

08010e20 <fabsf>:
 8010e20:	ee10 3a10 	vmov	r3, s0
 8010e24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e28:	ee00 3a10 	vmov	s0, r3
 8010e2c:	4770      	bx	lr
	...

08010e30 <scalbnf>:
 8010e30:	ee10 3a10 	vmov	r3, s0
 8010e34:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010e38:	d02b      	beq.n	8010e92 <scalbnf+0x62>
 8010e3a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010e3e:	d302      	bcc.n	8010e46 <scalbnf+0x16>
 8010e40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010e44:	4770      	bx	lr
 8010e46:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010e4a:	d123      	bne.n	8010e94 <scalbnf+0x64>
 8010e4c:	4b24      	ldr	r3, [pc, #144]	@ (8010ee0 <scalbnf+0xb0>)
 8010e4e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010ee4 <scalbnf+0xb4>
 8010e52:	4298      	cmp	r0, r3
 8010e54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010e58:	db17      	blt.n	8010e8a <scalbnf+0x5a>
 8010e5a:	ee10 3a10 	vmov	r3, s0
 8010e5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010e62:	3a19      	subs	r2, #25
 8010e64:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010e68:	4288      	cmp	r0, r1
 8010e6a:	dd15      	ble.n	8010e98 <scalbnf+0x68>
 8010e6c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010ee8 <scalbnf+0xb8>
 8010e70:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010eec <scalbnf+0xbc>
 8010e74:	ee10 3a10 	vmov	r3, s0
 8010e78:	eeb0 7a67 	vmov.f32	s14, s15
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	bfb8      	it	lt
 8010e80:	eef0 7a66 	vmovlt.f32	s15, s13
 8010e84:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010e88:	4770      	bx	lr
 8010e8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010ef0 <scalbnf+0xc0>
 8010e8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010e92:	4770      	bx	lr
 8010e94:	0dd2      	lsrs	r2, r2, #23
 8010e96:	e7e5      	b.n	8010e64 <scalbnf+0x34>
 8010e98:	4410      	add	r0, r2
 8010e9a:	28fe      	cmp	r0, #254	@ 0xfe
 8010e9c:	dce6      	bgt.n	8010e6c <scalbnf+0x3c>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	dd06      	ble.n	8010eb0 <scalbnf+0x80>
 8010ea2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010ea6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010eaa:	ee00 3a10 	vmov	s0, r3
 8010eae:	4770      	bx	lr
 8010eb0:	f110 0f16 	cmn.w	r0, #22
 8010eb4:	da09      	bge.n	8010eca <scalbnf+0x9a>
 8010eb6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010ef0 <scalbnf+0xc0>
 8010eba:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010ef4 <scalbnf+0xc4>
 8010ebe:	ee10 3a10 	vmov	r3, s0
 8010ec2:	eeb0 7a67 	vmov.f32	s14, s15
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	e7d9      	b.n	8010e7e <scalbnf+0x4e>
 8010eca:	3019      	adds	r0, #25
 8010ecc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010ed0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010ed4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010ef8 <scalbnf+0xc8>
 8010ed8:	ee07 3a90 	vmov	s15, r3
 8010edc:	e7d7      	b.n	8010e8e <scalbnf+0x5e>
 8010ede:	bf00      	nop
 8010ee0:	ffff3cb0 	.word	0xffff3cb0
 8010ee4:	4c000000 	.word	0x4c000000
 8010ee8:	7149f2ca 	.word	0x7149f2ca
 8010eec:	f149f2ca 	.word	0xf149f2ca
 8010ef0:	0da24260 	.word	0x0da24260
 8010ef4:	8da24260 	.word	0x8da24260
 8010ef8:	33000000 	.word	0x33000000

08010efc <with_errnof>:
 8010efc:	b510      	push	{r4, lr}
 8010efe:	ed2d 8b02 	vpush	{d8}
 8010f02:	eeb0 8a40 	vmov.f32	s16, s0
 8010f06:	4604      	mov	r4, r0
 8010f08:	f7fd fc72 	bl	800e7f0 <__errno>
 8010f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8010f10:	ecbd 8b02 	vpop	{d8}
 8010f14:	6004      	str	r4, [r0, #0]
 8010f16:	bd10      	pop	{r4, pc}

08010f18 <xflowf>:
 8010f18:	b130      	cbz	r0, 8010f28 <xflowf+0x10>
 8010f1a:	eef1 7a40 	vneg.f32	s15, s0
 8010f1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010f22:	2022      	movs	r0, #34	@ 0x22
 8010f24:	f7ff bfea 	b.w	8010efc <with_errnof>
 8010f28:	eef0 7a40 	vmov.f32	s15, s0
 8010f2c:	e7f7      	b.n	8010f1e <xflowf+0x6>
	...

08010f30 <__math_uflowf>:
 8010f30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010f38 <__math_uflowf+0x8>
 8010f34:	f7ff bff0 	b.w	8010f18 <xflowf>
 8010f38:	10000000 	.word	0x10000000

08010f3c <__math_oflowf>:
 8010f3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010f44 <__math_oflowf+0x8>
 8010f40:	f7ff bfea 	b.w	8010f18 <xflowf>
 8010f44:	70000000 	.word	0x70000000

08010f48 <__ieee754_sqrtf>:
 8010f48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010f4c:	4770      	bx	lr
	...

08010f50 <_init>:
 8010f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f52:	bf00      	nop
 8010f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f56:	bc08      	pop	{r3}
 8010f58:	469e      	mov	lr, r3
 8010f5a:	4770      	bx	lr

08010f5c <_fini>:
 8010f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f5e:	bf00      	nop
 8010f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f62:	bc08      	pop	{r3}
 8010f64:	469e      	mov	lr, r3
 8010f66:	4770      	bx	lr
