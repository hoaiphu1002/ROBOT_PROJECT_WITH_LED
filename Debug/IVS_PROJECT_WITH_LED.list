
IVS_PROJECT_WITH_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  08011020  08011020  00012020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f24  08011f24  000132fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011f24  08011f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f2c  08011f2c  000132fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f2c  08011f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011f30  08011f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002fc  20000000  08011f34  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132fc  2**0
                  CONTENTS
 10 .bss          0000163c  200002fc  200002fc  000132fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001938  20001938  000132fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021056  00000000  00000000  0001332c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a6d  00000000  00000000  00034382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac0  00000000  00000000  00038df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014cd  00000000  00000000  0003a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028010  00000000  00000000  0003bd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000255b9  00000000  00000000  00063d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e40bf  00000000  00000000  00089346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016d405  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083dc  00000000  00000000  0016d448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00175824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002fc 	.word	0x200002fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011008 	.word	0x08011008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000300 	.word	0x20000300
 80001cc:	08011008 	.word	0x08011008

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <BNO055_IT_Read>:
 *      WRAPPERS: Dùng IT mode thay cho blocking
 * ==================================================== */

// I2C Read (non-blocking với interrupt)
HAL_StatusTypeDef BNO055_IT_Read(uint8_t devAddr, uint8_t regAddr, uint8_t *pData, uint16_t len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	603a      	str	r2, [r7, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	460b      	mov	r3, r1
 8000f84:	71bb      	strb	r3, [r7, #6]
 8000f86:	4613      	mov	r3, r2
 8000f88:	80bb      	strh	r3, [r7, #4]
    BNO055_I2C_Done  = 0;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <BNO055_IT_Read+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
    BNO055_I2C_Error = 0;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <BNO055_IT_Read+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_IT(&bno_i2c,
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4818      	ldr	r0, [pc, #96]	@ (800100c <BNO055_IT_Read+0x98>)
 8000faa:	f007 f955 	bl	8008258 <HAL_I2C_Mem_Read_IT>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
                                                   regAddr,
                                                   I2C_MEMADD_SIZE_8BIT,
                                                   pData,
                                                   len);

    if (status != HAL_OK) return status;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <BNO055_IT_Read+0x48>
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	e01e      	b.n	8000ffa <BNO055_IT_Read+0x86>

    // chờ callback báo hiệu (timeout 100ms)
    uint32_t tickstart = HAL_GetTick();
 8000fbc:	f004 fa66 	bl	800548c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
    while (!BNO055_I2C_Done && !BNO055_I2C_Error)
 8000fc2:	e008      	b.n	8000fd6 <BNO055_IT_Read+0x62>
    {
        if ((HAL_GetTick() - tickstart) > 100) {
 8000fc4:	f004 fa62 	bl	800548c <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	@ 0x64
 8000fd0:	d901      	bls.n	8000fd6 <BNO055_IT_Read+0x62>
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e011      	b.n	8000ffa <BNO055_IT_Read+0x86>
    while (!BNO055_I2C_Done && !BNO055_I2C_Error)
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <BNO055_IT_Read+0x90>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d104      	bne.n	8000fea <BNO055_IT_Read+0x76>
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <BNO055_IT_Read+0x94>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0ec      	beq.n	8000fc4 <BNO055_IT_Read+0x50>
        }
    }

    return (BNO055_I2C_Error ? HAL_ERROR : HAL_OK);
 8000fea:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <BNO055_IT_Read+0x94>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000318 	.word	0x20000318
 8001008:	20000319 	.word	0x20000319
 800100c:	20000434 	.word	0x20000434

08001010 <BNO055_IT_Write>:

// I2C Write (non-blocking với interrupt)
HAL_StatusTypeDef BNO055_IT_Write(uint8_t devAddr, uint8_t regAddr, uint8_t *pData, uint16_t len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
 8001016:	603a      	str	r2, [r7, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	460b      	mov	r3, r1
 8001020:	71bb      	strb	r3, [r7, #6]
 8001022:	4613      	mov	r3, r2
 8001024:	80bb      	strh	r3, [r7, #4]
    BNO055_I2C_Done  = 0;
 8001026:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <BNO055_IT_Write+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
    BNO055_I2C_Error = 0;
 800102c:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <BNO055_IT_Write+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Write_IT(&bno_i2c,
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	b299      	uxth	r1, r3
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	b29a      	uxth	r2, r3
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	4818      	ldr	r0, [pc, #96]	@ (80010a8 <BNO055_IT_Write+0x98>)
 8001046:	f007 f859 	bl	80080fc <HAL_I2C_Mem_Write_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
                                                    regAddr,
                                                    I2C_MEMADD_SIZE_8BIT,
                                                    pData,
                                                    len);

    if (status != HAL_OK) return status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <BNO055_IT_Write+0x48>
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	e01e      	b.n	8001096 <BNO055_IT_Write+0x86>

    uint32_t tickstart = HAL_GetTick();
 8001058:	f004 fa18 	bl	800548c <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
    while (!BNO055_I2C_Done && !BNO055_I2C_Error)
 800105e:	e008      	b.n	8001072 <BNO055_IT_Write+0x62>
    {
        if ((HAL_GetTick() - tickstart) > 100) {
 8001060:	f004 fa14 	bl	800548c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	@ 0x64
 800106c:	d901      	bls.n	8001072 <BNO055_IT_Write+0x62>
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e011      	b.n	8001096 <BNO055_IT_Write+0x86>
    while (!BNO055_I2C_Done && !BNO055_I2C_Error)
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <BNO055_IT_Write+0x90>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d104      	bne.n	8001086 <BNO055_IT_Write+0x76>
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <BNO055_IT_Write+0x94>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0ec      	beq.n	8001060 <BNO055_IT_Write+0x50>
        }
    }

    return (BNO055_I2C_Error ? HAL_ERROR : HAL_OK);
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <BNO055_IT_Write+0x94>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2db      	uxtb	r3, r3
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000318 	.word	0x20000318
 80010a4:	20000319 	.word	0x20000319
 80010a8:	20000434 	.word	0x20000434

080010ac <HAL_I2C_MemRxCpltCallback>:
 *      I2C CALLBACKS
 * ==================================================== */

// Callback khi đọc xong
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == bno_i2c.Instance) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_I2C_MemRxCpltCallback+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d102      	bne.n	80010c6 <HAL_I2C_MemRxCpltCallback+0x1a>
        BNO055_I2C_Done = 1;
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <HAL_I2C_MemRxCpltCallback+0x2c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
    }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000434 	.word	0x20000434
 80010d8:	20000318 	.word	0x20000318

080010dc <HAL_I2C_MemTxCpltCallback>:

// Callback khi ghi xong
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == bno_i2c.Instance) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_I2C_MemTxCpltCallback+0x28>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d102      	bne.n	80010f6 <HAL_I2C_MemTxCpltCallback+0x1a>
        BNO055_I2C_Done = 1;
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_I2C_MemTxCpltCallback+0x2c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
    }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000434 	.word	0x20000434
 8001108:	20000318 	.word	0x20000318

0800110c <HAL_I2C_ErrorCallback>:
// Callback khi có lỗi I2C
// Thêm biến cờ toàn cục
volatile uint8_t bno055_need_reset = 0;

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == bno_i2c.Instance)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <HAL_I2C_ErrorCallback+0x2c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d105      	bne.n	800112c <HAL_I2C_ErrorCallback+0x20>
    {
        BNO055_I2C_Error = 1;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_I2C_ErrorCallback+0x30>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
        bno055_need_reset = 1;   // báo cho main loop biết
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_I2C_ErrorCallback+0x34>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
    }

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000434 	.word	0x20000434
 800113c:	20000319 	.word	0x20000319
 8001140:	2000031a 	.word	0x2000031a

08001144 <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){  //BNO055 có 2 page thanh ghi: PAGE 0 và PAGE 1 → Chuyển qua lại giữa chúng.
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]

	if(BNO055_IT_Write(P_BNO055, PAGE_ID_ADDR, &page, 1) != HAL_OK){
 800114e:	1dfa      	adds	r2, r7, #7
 8001150:	2301      	movs	r3, #1
 8001152:	2107      	movs	r1, #7
 8001154:	2050      	movs	r0, #80	@ 0x50
 8001156:	f7ff ff5b 	bl	8001010 <BNO055_IT_Write>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <SelectPage+0x22>
		printf("Register page replacement could not be set\n");
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <SelectPage+0x30>)
 8001162:	f00d fa05 	bl	800e570 <puts>
	}
	HAL_Delay(50);
 8001166:	2032      	movs	r0, #50	@ 0x32
 8001168:	f004 f99c 	bl	80054a4 <HAL_Delay>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08011080 	.word	0x08011080

08001178 <ReadData>:
 *			 SENSOR_GRAVITY
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData,BNO055_Sensor_Type sensors){ //Đọc dữ liệu cảm biến
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	//Dựa vào kiểu dữ liệu được chọn (SENSOR_ACCEL, SENSOR_EULER, v.v.), đọc đúng thanh ghi từ BNO055.
	//Dữ liệu đọc được scale đúng đơn vị(e.g.chia cho 100.0 hoặc 16.0).
	//Dữ liệu gán vào struct sensorData
	uint8_t buffer[8];

	if (sensors & SENSOR_GRAVITY) {
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d058      	beq.n	8001240 <ReadData+0xc8>
		BNO055_IT_Read(P_BNO055, BNO_GRAVITY, buffer, 6);
 800118e:	f107 0208 	add.w	r2, r7, #8
 8001192:	2306      	movs	r3, #6
 8001194:	212e      	movs	r1, #46	@ 0x2e
 8001196:	2050      	movs	r0, #80	@ 0x50
 8001198:	f7ff feec 	bl	8000f74 <BNO055_IT_Read>
		sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0); // chia cho 100 để quy đổi ra đơn vị chuẩn
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7a3b      	ldrb	r3, [r7, #8]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9b9 	bl	8000524 <__aeabi_i2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4bb6      	ldr	r3, [pc, #728]	@ (8001490 <ReadData+0x318>)
 80011b8:	f7ff fb48 	bl	800084c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fcf0 	bl	8000ba8 <__aeabi_d2f>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	63da      	str	r2, [r3, #60]	@ 0x3c
		sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	7abb      	ldrb	r3, [r7, #10]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a0 	bl	8000524 <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4ba9      	ldr	r3, [pc, #676]	@ (8001490 <ReadData+0x318>)
 80011ea:	f7ff fb2f 	bl	800084c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fcd7 	bl	8000ba8 <__aeabi_d2f>
 80011fa:	4602      	mov	r2, r0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	@ 0x40
		sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8001200:	7b7b      	ldrb	r3, [r7, #13]
 8001202:	b21b      	sxth	r3, r3
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7b3b      	ldrb	r3, [r7, #12]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f987 	bl	8000524 <__aeabi_i2d>
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b9d      	ldr	r3, [pc, #628]	@ (8001490 <ReadData+0x318>)
 800121c:	f7ff fb16 	bl	800084c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcbe 	bl	8000ba8 <__aeabi_d2f>
 800122c:	4602      	mov	r2, r0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	645a      	str	r2, [r3, #68]	@ 0x44
		memset(buffer, 0, sizeof(buffer));
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2208      	movs	r2, #8
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f00d fae0 	bl	800e800 <memset>
	}

	if (sensors & SENSOR_QUATERNION) {
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d065      	beq.n	8001316 <ReadData+0x19e>
		BNO055_IT_Read(P_BNO055, BNO_QUATERNION, buffer, 8);
 800124a:	f107 0208 	add.w	r2, r7, #8
 800124e:	2308      	movs	r3, #8
 8001250:	2120      	movs	r1, #32
 8001252:	2050      	movs	r0, #80	@ 0x50
 8001254:	f7ff fe8e 	bl	8000f74 <BNO055_IT_Read>
		sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(1<<14));
 8001258:	7a7b      	ldrb	r3, [r7, #9]
 800125a:	b21b      	sxth	r3, r3
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7a3b      	ldrb	r3, [r7, #8]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	da02      	bge.n	8001272 <ReadData+0xfa>
 800126c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001270:	333f      	adds	r3, #63	@ 0x3f
 8001272:	139b      	asrs	r3, r3, #14
 8001274:	b21b      	sxth	r3, r3
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(1<<14));
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	b21b      	sxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7abb      	ldrb	r3, [r7, #10]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	da02      	bge.n	800129e <ReadData+0x126>
 8001298:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800129c:	333f      	adds	r3, #63	@ 0x3f
 800129e:	139b      	asrs	r3, r3, #14
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(1<<14));
 80012b0:	7b7b      	ldrb	r3, [r7, #13]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	7b3b      	ldrb	r3, [r7, #12]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21b      	sxth	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da02      	bge.n	80012ca <ReadData+0x152>
 80012c4:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80012c8:	333f      	adds	r3, #63	@ 0x3f
 80012ca:	139b      	asrs	r3, r3, #14
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(1<<14));
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	7bbb      	ldrb	r3, [r7, #14]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da02      	bge.n	80012f6 <ReadData+0x17e>
 80012f0:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80012f4:	333f      	adds	r3, #63	@ 0x3f
 80012f6:	139b      	asrs	r3, r3, #14
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		memset(buffer, 0, sizeof(buffer));
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	2208      	movs	r2, #8
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00d fa75 	bl	800e800 <memset>
	}

	if (sensors & SENSOR_LINACC) {
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d058      	beq.n	80013d2 <ReadData+0x25a>
		BNO055_IT_Read(P_BNO055, BNO_LINACC, buffer, 6);
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	2306      	movs	r3, #6
 8001326:	2128      	movs	r1, #40	@ 0x28
 8001328:	2050      	movs	r0, #80	@ 0x50
 800132a:	f7ff fe23 	bl	8000f74 <BNO055_IT_Read>
		sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 800132e:	7a7b      	ldrb	r3, [r7, #9]
 8001330:	b21b      	sxth	r3, r3
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	7a3b      	ldrb	r3, [r7, #8]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f8f0 	bl	8000524 <__aeabi_i2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b51      	ldr	r3, [pc, #324]	@ (8001490 <ReadData+0x318>)
 800134a:	f7ff fa7f 	bl	800084c <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fc27 	bl	8000ba8 <__aeabi_d2f>
 800135a:	4602      	mov	r2, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30
		sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	b21b      	sxth	r3, r3
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	7abb      	ldrb	r3, [r7, #10]
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b21b      	sxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8d7 	bl	8000524 <__aeabi_i2d>
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b45      	ldr	r3, [pc, #276]	@ (8001490 <ReadData+0x318>)
 800137c:	f7ff fa66 	bl	800084c <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fc0e 	bl	8000ba8 <__aeabi_d2f>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	635a      	str	r2, [r3, #52]	@ 0x34
		sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	b21b      	sxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	7b3b      	ldrb	r3, [r7, #12]
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8be 	bl	8000524 <__aeabi_i2d>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <ReadData+0x318>)
 80013ae:	f7ff fa4d 	bl	800084c <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fbf5 	bl	8000ba8 <__aeabi_d2f>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	639a      	str	r2, [r3, #56]	@ 0x38
		memset(buffer, 0, sizeof(buffer));
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2208      	movs	r2, #8
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00d fa17 	bl	800e800 <memset>
	}

	if (sensors & SENSOR_GYRO) {
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d05d      	beq.n	8001498 <ReadData+0x320>
		BNO055_IT_Read(P_BNO055, BNO_GYRO, buffer, 6);
 80013dc:	f107 0208 	add.w	r2, r7, #8
 80013e0:	2306      	movs	r3, #6
 80013e2:	2114      	movs	r1, #20
 80013e4:	2050      	movs	r0, #80	@ 0x50
 80013e6:	f7ff fdc5 	bl	8000f74 <BNO055_IT_Read>
		sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 80013ea:	7a7b      	ldrb	r3, [r7, #9]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	7a3b      	ldrb	r3, [r7, #8]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f892 	bl	8000524 <__aeabi_i2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <ReadData+0x31c>)
 8001406:	f7ff fa21 	bl	800084c <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fbc9 	bl	8000ba8 <__aeabi_d2f>
 8001416:	4602      	mov	r2, r0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	60da      	str	r2, [r3, #12]
		sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	b21b      	sxth	r3, r3
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	7abb      	ldrb	r3, [r7, #10]
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b21b      	sxth	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f879 	bl	8000524 <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <ReadData+0x31c>)
 8001438:	f7ff fa08 	bl	800084c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fbb0 	bl	8000ba8 <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	611a      	str	r2, [r3, #16]
		sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	b21b      	sxth	r3, r3
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b21a      	sxth	r2, r3
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	b21b      	sxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b21b      	sxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f860 	bl	8000524 <__aeabi_i2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <ReadData+0x31c>)
 800146a:	f7ff f9ef 	bl	800084c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb97 	bl	8000ba8 <__aeabi_d2f>
 800147a:	4602      	mov	r2, r0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	615a      	str	r2, [r3, #20]
		memset(buffer, 0, sizeof(buffer));
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	2208      	movs	r2, #8
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f00d f9b9 	bl	800e800 <memset>
 800148e:	e003      	b.n	8001498 <ReadData+0x320>
 8001490:	40590000 	.word	0x40590000
 8001494:	40300000 	.word	0x40300000
	}
	if (sensors & SENSOR_ACCEL) {
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d058      	beq.n	8001554 <ReadData+0x3dc>
		BNO055_IT_Read(P_BNO055, BNO_ACCEL, buffer, 6);
 80014a2:	f107 0208 	add.w	r2, r7, #8
 80014a6:	2306      	movs	r3, #6
 80014a8:	2108      	movs	r1, #8
 80014aa:	2050      	movs	r0, #80	@ 0x50
 80014ac:	f7ff fd62 	bl	8000f74 <BNO055_IT_Read>
		sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 80014b0:	7a7b      	ldrb	r3, [r7, #9]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	7a3b      	ldrb	r3, [r7, #8]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f82f 	bl	8000524 <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b82      	ldr	r3, [pc, #520]	@ (80016d4 <ReadData+0x55c>)
 80014cc:	f7ff f9be 	bl	800084c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb66 	bl	8000ba8 <__aeabi_d2f>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
		sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 80014e2:	7afb      	ldrb	r3, [r7, #11]
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	7abb      	ldrb	r3, [r7, #10]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f816 	bl	8000524 <__aeabi_i2d>
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b75      	ldr	r3, [pc, #468]	@ (80016d4 <ReadData+0x55c>)
 80014fe:	f7ff f9a5 	bl	800084c <__aeabi_ddiv>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb4d 	bl	8000ba8 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]
		sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	b21b      	sxth	r3, r3
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21b      	sxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fffd 	bl	8000524 <__aeabi_i2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b69      	ldr	r3, [pc, #420]	@ (80016d4 <ReadData+0x55c>)
 8001530:	f7ff f98c 	bl	800084c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fb34 	bl	8000ba8 <__aeabi_d2f>
 8001540:	4602      	mov	r2, r0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	609a      	str	r2, [r3, #8]
		memset(buffer, 0, sizeof(buffer));
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	2208      	movs	r2, #8
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f00d f956 	bl	800e800 <memset>
	}
	if (sensors & SENSOR_MAG) {
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	2b00      	cmp	r3, #0
 800155c:	d058      	beq.n	8001610 <ReadData+0x498>
		BNO055_IT_Read(P_BNO055, BNO_MAG, buffer, 6);
 800155e:	f107 0208 	add.w	r2, r7, #8
 8001562:	2306      	movs	r3, #6
 8001564:	210e      	movs	r1, #14
 8001566:	2050      	movs	r0, #80	@ 0x50
 8001568:	f7ff fd04 	bl	8000f74 <BNO055_IT_Read>
		sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 800156c:	7a7b      	ldrb	r3, [r7, #9]
 800156e:	b21b      	sxth	r3, r3
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7a3b      	ldrb	r3, [r7, #8]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21b      	sxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffd1 	bl	8000524 <__aeabi_i2d>
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b54      	ldr	r3, [pc, #336]	@ (80016d8 <ReadData+0x560>)
 8001588:	f7ff f960 	bl	800084c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fb08 	bl	8000ba8 <__aeabi_d2f>
 8001598:	4602      	mov	r2, r0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
		sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	7abb      	ldrb	r3, [r7, #10]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffb8 	bl	8000524 <__aeabi_i2d>
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <ReadData+0x560>)
 80015ba:	f7ff f947 	bl	800084c <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff faef 	bl	8000ba8 <__aeabi_d2f>
 80015ca:	4602      	mov	r2, r0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	61da      	str	r2, [r3, #28]
		sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	7b3b      	ldrb	r3, [r7, #12]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff9f 	bl	8000524 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <ReadData+0x560>)
 80015ec:	f7ff f92e 	bl	800084c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fad6 	bl	8000ba8 <__aeabi_d2f>
 80015fc:	4602      	mov	r2, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	621a      	str	r2, [r3, #32]
		memset(buffer, 0, sizeof(buffer));
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2208      	movs	r2, #8
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f00d f8f8 	bl	800e800 <memset>
	}
	if (sensors & SENSOR_EULER) {
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d058      	beq.n	80016cc <ReadData+0x554>
		BNO055_IT_Read(P_BNO055, BNO_EULER, buffer, 6);
 800161a:	f107 0208 	add.w	r2, r7, #8
 800161e:	2306      	movs	r3, #6
 8001620:	211a      	movs	r1, #26
 8001622:	2050      	movs	r0, #80	@ 0x50
 8001624:	f7ff fca6 	bl	8000f74 <BNO055_IT_Read>
		sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001628:	7a7b      	ldrb	r3, [r7, #9]
 800162a:	b21b      	sxth	r3, r3
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	7a3b      	ldrb	r3, [r7, #8]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21b      	sxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff73 	bl	8000524 <__aeabi_i2d>
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <ReadData+0x560>)
 8001644:	f7ff f902 	bl	800084c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff faaa 	bl	8000ba8 <__aeabi_d2f>
 8001654:	4602      	mov	r2, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
		sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800165a:	7afb      	ldrb	r3, [r7, #11]
 800165c:	b21b      	sxth	r3, r3
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	7abb      	ldrb	r3, [r7, #10]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff5a 	bl	8000524 <__aeabi_i2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <ReadData+0x560>)
 8001676:	f7ff f8e9 	bl	800084c <__aeabi_ddiv>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fa91 	bl	8000ba8 <__aeabi_d2f>
 8001686:	4602      	mov	r2, r0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
		sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 800168c:	7b7b      	ldrb	r3, [r7, #13]
 800168e:	b21b      	sxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff41 	bl	8000524 <__aeabi_i2d>
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <ReadData+0x560>)
 80016a8:	f7ff f8d0 	bl	800084c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa78 	bl	8000ba8 <__aeabi_d2f>
 80016b8:	4602      	mov	r2, r0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c
		memset(buffer, 0, sizeof(buffer));
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	2208      	movs	r2, #8
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00d f89a 	bl	800e800 <memset>
	}
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40590000 	.word	0x40590000
 80016d8:	40300000 	.word	0x40300000

080016dc <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){ //Đặt chế độ hoạt động (e.g. NDOF, IMU, CONFIG_MODE...)
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fd2c 	bl	8001144 <SelectPage>
	if(BNO055_IT_Write(P_BNO055, OPR_MODE_ADDR, &Mode, 1) != HAL_OK){
 80016ec:	1dfa      	adds	r2, r7, #7
 80016ee:	2301      	movs	r3, #1
 80016f0:	213d      	movs	r1, #61	@ 0x3d
 80016f2:	2050      	movs	r0, #80	@ 0x50
 80016f4:	f7ff fc8c 	bl	8001010 <BNO055_IT_Write>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <Set_Operation_Mode+0x2a>
		printf("Operation mode could not be set!\n");
 80016fe:	480a      	ldr	r0, [pc, #40]	@ (8001728 <Set_Operation_Mode+0x4c>)
 8001700:	f00c ff36 	bl	800e570 <puts>
 8001704:	e002      	b.n	800170c <Set_Operation_Mode+0x30>
	}
	else printf("Operation mode switching succeeded.\n");
 8001706:	4809      	ldr	r0, [pc, #36]	@ (800172c <Set_Operation_Mode+0x50>)
 8001708:	f00c ff32 	bl	800e570 <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <Set_Operation_Mode+0x3e>
 8001712:	2013      	movs	r0, #19
 8001714:	f003 fec6 	bl	80054a4 <HAL_Delay>
	else HAL_Delay(9);
}
 8001718:	e002      	b.n	8001720 <Set_Operation_Mode+0x44>
	else HAL_Delay(9);
 800171a:	2009      	movs	r0, #9
 800171c:	f003 fec2 	bl	80054a4 <HAL_Delay>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	080110c8 	.word	0x080110c8
 800172c:	080110ec 	.word	0x080110ec

08001730 <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){ //Cấu hình power mode: Normal, Low-power, Suspend.
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]

	if(BNO055_IT_Write(P_BNO055, PWR_MODE_ADDR, &BNO055_, 1) != HAL_OK)
 800173a:	1dfa      	adds	r2, r7, #7
 800173c:	2301      	movs	r3, #1
 800173e:	213e      	movs	r1, #62	@ 0x3e
 8001740:	2050      	movs	r0, #80	@ 0x50
 8001742:	f7ff fc65 	bl	8001010 <BNO055_IT_Write>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <SetPowerMODE+0x24>
	{
		printf("Power mode could not be set!\n");
 800174c:	4806      	ldr	r0, [pc, #24]	@ (8001768 <SetPowerMODE+0x38>)
 800174e:	f00c ff0f 	bl	800e570 <puts>
 8001752:	e002      	b.n	800175a <SetPowerMODE+0x2a>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 8001754:	4805      	ldr	r0, [pc, #20]	@ (800176c <SetPowerMODE+0x3c>)
 8001756:	f00c ff0b 	bl	800e570 <puts>
	}
	HAL_Delay(50);
 800175a:	2032      	movs	r0, #50	@ 0x32
 800175c:	f003 fea2 	bl	80054a4 <HAL_Delay>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	08011110 	.word	0x08011110
 800176c:	08011130 	.word	0x08011130

08001770 <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) { //Chọn xung clock nội/ngoại.
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]

	//7th bit: External Crystal=1; Internal Crystal=0
	BNO055_IT_Write(P_BNO055, SYS_TRIGGER_ADDR, &source, 1);
 800177a:	1dfa      	adds	r2, r7, #7
 800177c:	2301      	movs	r3, #1
 800177e:	213f      	movs	r1, #63	@ 0x3f
 8001780:	2050      	movs	r0, #80	@ 0x50
 8001782:	f7ff fc45 	bl	8001010 <BNO055_IT_Write>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){ // Chuyển đổi trục (Axis remap)
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	460a      	mov	r2, r1
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4613      	mov	r3, r2
 800179c:	71bb      	strb	r3, [r7, #6]

	//Gán lại trục X–Y–Z hoặc đảo dấu (khi lắp cảm biến không đúng hướng).
	//Ví dụ : nếu gắn nghiêng 90°, có thể đổi trục để kết quả đúng.

	BNO055_IT_Write(P_BNO055, AXIS_MAP_CONFIG_ADDR, &remap, 1);
 800179e:	1dfa      	adds	r2, r7, #7
 80017a0:	2301      	movs	r3, #1
 80017a2:	2141      	movs	r1, #65	@ 0x41
 80017a4:	2050      	movs	r0, #80	@ 0x50
 80017a6:	f7ff fc33 	bl	8001010 <BNO055_IT_Write>
	HAL_Delay(20);
 80017aa:	2014      	movs	r0, #20
 80017ac:	f003 fe7a 	bl	80054a4 <HAL_Delay>
	BNO055_IT_Write(P_BNO055, AXIS_MAP_SIGN_ADDR, &sign, 1);
 80017b0:	1dba      	adds	r2, r7, #6
 80017b2:	2301      	movs	r3, #1
 80017b4:	2142      	movs	r1, #66	@ 0x42
 80017b6:	2050      	movs	r0, #80	@ 0x50
 80017b8:	f7ff fc2a 	bl	8001010 <BNO055_IT_Write>
	HAL_Delay(100);
 80017bc:	2064      	movs	r0, #100	@ 0x64
 80017be:	f003 fe71 	bl	80054a4 <HAL_Delay>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]

	BNO055_IT_Write(P_BNO055, ACC_CONFIG_ADDR, &range, 1);
 80017d4:	1dfa      	adds	r2, r7, #7
 80017d6:	2301      	movs	r3, #1
 80017d8:	2108      	movs	r1, #8
 80017da:	2050      	movs	r0, #80	@ 0x50
 80017dc:	f7ff fc18 	bl	8001010 <BNO055_IT_Write>
	HAL_Delay(100);
 80017e0:	2064      	movs	r0, #100	@ 0x64
 80017e2:	f003 fe5f 	bl	80054a4 <HAL_Delay>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(void){  //Khởi tạo toàn bộ cảm biến
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
	//Đặt page = 0, chọn clock, map trục, chọn đơn vị(m / s² hay g…)
	//Đặt chế độ nguồn
	//Đặt chế độ hoạt động chính(ví dụ NDOF)
    BNO055_Init_t Init;

    Init.Unit_Sel     = UNIT_ORI_WINDOWS | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2;
 80017f6:	2300      	movs	r3, #0
 80017f8:	723b      	strb	r3, [r7, #8]
    Init.Axis         = DEFAULT_AXIS_REMAP;
 80017fa:	2324      	movs	r3, #36	@ 0x24
 80017fc:	727b      	strb	r3, [r7, #9]
    Init.Axis_sign    = DEFAULT_AXIS_SIGN;
 80017fe:	2300      	movs	r3, #0
 8001800:	72bb      	strb	r3, [r7, #10]
    Init.Mode         = BNO055_NORMAL_MODE;
 8001802:	2300      	movs	r3, #0
 8001804:	72fb      	strb	r3, [r7, #11]
    Init.OP_Modes     = NDOF;
 8001806:	230c      	movs	r3, #12
 8001808:	733b      	strb	r3, [r7, #12]
    Init.Clock_Source = CLOCK_INTERNAL;
 800180a:	2300      	movs	r3, #0
 800180c:	737b      	strb	r3, [r7, #13]
    Init.ACC_Range    = Range_2G;
 800180e:	2300      	movs	r3, #0
 8001810:	73bb      	strb	r3, [r7, #14]

	//Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE); // cấu hình
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff ff62 	bl	80016dc <Set_Operation_Mode>
	HAL_Delay(50);
 8001818:	2032      	movs	r0, #50	@ 0x32
 800181a:	f003 fe43 	bl	80054a4 <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fc90 	bl	8001144 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 8001824:	7bbb      	ldrb	r3, [r7, #14]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ffcf 	bl	80017ca <SET_Accel_Range>
	HAL_Delay(50);
 800182c:	2032      	movs	r0, #50	@ 0x32
 800182e:	f003 fe39 	bl	80054a4 <HAL_Delay>

	//Set register page number to 0
	SelectPage(PAGE_0);
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fc86 	bl	8001144 <SelectPage>
	HAL_Delay(50);
 8001838:	2032      	movs	r0, #50	@ 0x32
 800183a:	f003 fe33 	bl	80054a4 <HAL_Delay>

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	BNO055_IT_Read(P_BNO055, SYS_CLK_STATUS_ADDR, &status, 1);
 800183e:	1dfa      	adds	r2, r7, #7
 8001840:	2301      	movs	r3, #1
 8001842:	2138      	movs	r1, #56	@ 0x38
 8001844:	2050      	movs	r0, #80	@ 0x50
 8001846:	f7ff fb95 	bl	8000f74 <BNO055_IT_Read>
	HAL_Delay(50);
 800184a:	2032      	movs	r0, #50	@ 0x32
 800184c:	f003 fe2a 	bl	80054a4 <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <BNO055_Init+0x74>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 8001856:	7b7b      	ldrb	r3, [r7, #13]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff89 	bl	8001770 <Clock_Source>
		HAL_Delay(100);
 800185e:	2064      	movs	r0, #100	@ 0x64
 8001860:	f003 fe20 	bl	80054a4 <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 8001864:	7a7b      	ldrb	r3, [r7, #9]
 8001866:	7aba      	ldrb	r2, [r7, #10]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff8f 	bl	800178e <BNO055_Axis>
	HAL_Delay(100);
 8001870:	2064      	movs	r0, #100	@ 0x64
 8001872:	f003 fe17 	bl	80054a4 <HAL_Delay>

	//Configure data output format and the measurement unit
	BNO055_IT_Write(P_BNO055, UNIT_SEL_ADDR, &Init.Unit_Sel, 1);
 8001876:	f107 0208 	add.w	r2, r7, #8
 800187a:	2301      	movs	r3, #1
 800187c:	213b      	movs	r1, #59	@ 0x3b
 800187e:	2050      	movs	r0, #80	@ 0x50
 8001880:	f7ff fbc6 	bl	8001010 <BNO055_IT_Write>
	HAL_Delay(100);
 8001884:	2064      	movs	r0, #100	@ 0x64
 8001886:	f003 fe0d 	bl	80054a4 <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff4f 	bl	8001730 <SetPowerMODE>
	HAL_Delay(100);
 8001892:	2064      	movs	r0, #100	@ 0x64
 8001894:	f003 fe06 	bl	80054a4 <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 8001898:	7b3b      	ldrb	r3, [r7, #12]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff1e 	bl	80016dc <Set_Operation_Mode>
	HAL_Delay(100);
 80018a0:	2064      	movs	r0, #100	@ 0x64
 80018a2:	f003 fdff 	bl	80054a4 <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 80018a6:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <BNO055_Init+0xc4>)
 80018a8:	f00c fe62 	bl	800e570 <puts>
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	08011150 	.word	0x08011150

080018b8 <BNO055_SendEulerCAN>:

    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void BNO055_SendEulerCAN(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b09a      	sub	sp, #104	@ 0x68
 80018bc:	af00      	add	r7, sp, #0
    BNO055_Sensors_t sensorData;
    ReadData(&sensorData, SENSOR_EULER);
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	2140      	movs	r1, #64	@ 0x40
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fc57 	bl	8001178 <ReadData>

    // Giữ 2 chữ số thập phân
    int16_t roll  = (int16_t)(sensorData.Euler.Z * 100);
 80018ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018ce:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800196c <BNO055_SendEulerCAN+0xb4>
 80018d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018da:	ee17 3a90 	vmov	r3, s15
 80018de:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    int16_t pitch = (int16_t)(sensorData.Euler.Y * 100);
 80018e2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80018e6:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800196c <BNO055_SendEulerCAN+0xb4>
 80018ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f2:	ee17 3a90 	vmov	r3, s15
 80018f6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    int16_t yaw   = (int16_t)(sensorData.Euler.X * 100);
 80018fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018fe:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800196c <BNO055_SendEulerCAN+0xb4>
 8001902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190a:	ee17 3a90 	vmov	r3, s15
 800190e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

    // Frame 8 byte: [rollH,rollL, pitchH,pitchL, yawH,yawL, 0x00,0x00]
    uint8_t data[8] = {
        (uint8_t)((roll  >> 8) & 0xFF),  (uint8_t)(roll  & 0xFF),
 8001912:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8001916:	121b      	asrs	r3, r3, #8
 8001918:	b21b      	sxth	r3, r3
 800191a:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 800191c:	703b      	strb	r3, [r7, #0]
        (uint8_t)((roll  >> 8) & 0xFF),  (uint8_t)(roll  & 0xFF),
 800191e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001922:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 8001924:	707b      	strb	r3, [r7, #1]
        (uint8_t)((pitch >> 8) & 0xFF),  (uint8_t)(pitch & 0xFF),
 8001926:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800192a:	121b      	asrs	r3, r3, #8
 800192c:	b21b      	sxth	r3, r3
 800192e:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 8001930:	70bb      	strb	r3, [r7, #2]
        (uint8_t)((pitch >> 8) & 0xFF),  (uint8_t)(pitch & 0xFF),
 8001932:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001936:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 8001938:	70fb      	strb	r3, [r7, #3]
        (uint8_t)((yaw   >> 8) & 0xFF),  (uint8_t)(yaw   & 0xFF),
 800193a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800193e:	121b      	asrs	r3, r3, #8
 8001940:	b21b      	sxth	r3, r3
 8001942:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 8001944:	713b      	strb	r3, [r7, #4]
        (uint8_t)((yaw   >> 8) & 0xFF),  (uint8_t)(yaw   & 0xFF),
 8001946:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800194a:	b2db      	uxtb	r3, r3
    uint8_t data[8] = {
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	2300      	movs	r3, #0
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]
        0x00, 0x00
    };
    CAN_SendTopicData(TOPIC_ID_IMU_EULER, data, 8);
 8001956:	463b      	mov	r3, r7
 8001958:	2208      	movs	r2, #8
 800195a:	4619      	mov	r1, r3
 800195c:	2012      	movs	r0, #18
 800195e:	f000 fcb7 	bl	80022d0 <CAN_SendTopicData>
}
 8001962:	bf00      	nop
 8001964:	3768      	adds	r7, #104	@ 0x68
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	42c80000 	.word	0x42c80000

08001970 <BNO055_PrintEulerDebug>:
            sensorData.Gyro.X, sensorData.Gyro.Y, sensorData.Gyro.Z);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void BNO055_PrintEulerDebug(void)
{
 8001970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001974:	b0be      	sub	sp, #248	@ 0xf8
 8001976:	af04      	add	r7, sp, #16
    BNO055_Sensors_t sensorData;
    ReadData(&sensorData, SENSOR_EULER);
 8001978:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800197c:	2140      	movs	r1, #64	@ 0x40
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fbfa 	bl	8001178 <ReadData>

    float roll  = sensorData.Euler.Z;
 8001984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001988:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    float pitch = sensorData.Euler.Y;
 800198c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    float yaw   = sensorData.Euler.X;
 8001994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001998:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
//        yaw -= 360.0f;
//    else if (yaw < -180.0f)
//        yaw += 360.0f;

    char msg[128];
    sprintf(msg, "DEBUG: Roll=%.2f°, Pitch=%.2f°, Yaw=%.2f°\r\n", roll, pitch, yaw);
 800199c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80019a0:	f7fe fdd2 	bl	8000548 <__aeabi_f2d>
 80019a4:	4680      	mov	r8, r0
 80019a6:	4689      	mov	r9, r1
 80019a8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80019ac:	f7fe fdcc 	bl	8000548 <__aeabi_f2d>
 80019b0:	4604      	mov	r4, r0
 80019b2:	460d      	mov	r5, r1
 80019b4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80019b8:	f7fe fdc6 	bl	8000548 <__aeabi_f2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	1d38      	adds	r0, r7, #4
 80019c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019c6:	e9cd 4500 	strd	r4, r5, [sp]
 80019ca:	4642      	mov	r2, r8
 80019cc:	464b      	mov	r3, r9
 80019ce:	490a      	ldr	r1, [pc, #40]	@ (80019f8 <BNO055_PrintEulerDebug+0x88>)
 80019d0:	f00c fe0c 	bl	800e5ec <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fc4a 	bl	8000270 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	b29a      	uxth	r2, r3
 80019e0:	1d39      	adds	r1, r7, #4
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <BNO055_PrintEulerDebug+0x8c>)
 80019e8:	f00b f88c 	bl	800cb04 <HAL_UART_Transmit>
}
 80019ec:	bf00      	nop
 80019ee:	37e8      	adds	r7, #232	@ 0xe8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019f6:	bf00      	nop
 80019f8:	080114d8 	.word	0x080114d8
 80019fc:	200006d8 	.word	0x200006d8

08001a00 <CAN_DebugStatus>:
#include "display.h"
#include "rfid.h"
extern UART_HandleTypeDef huart1;
extern CAN_HandleTypeDef hcan1;
void CAN_DebugStatus(void)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b0b2      	sub	sp, #200	@ 0xc8
 8001a04:	af04      	add	r7, sp, #16
    char msg[128];
    uint32_t msr = hcan1.Instance->MSR;
 8001a06:	4b49      	ldr	r3, [pc, #292]	@ (8001b2c <CAN_DebugStatus+0x12c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint32_t esr = hcan1.Instance->ESR;
 8001a10:	4b46      	ldr	r3, [pc, #280]	@ (8001b2c <CAN_DebugStatus+0x12c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // In trạng thái FIFO
    uint32_t fifo0_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4843      	ldr	r0, [pc, #268]	@ (8001b2c <CAN_DebugStatus+0x12c>)
 8001a1e:	f004 fecd 	bl	80067bc <HAL_CAN_GetRxFifoFillLevel>
 8001a22:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t fifo1_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1);
 8001a26:	2101      	movs	r1, #1
 8001a28:	4840      	ldr	r0, [pc, #256]	@ (8001b2c <CAN_DebugStatus+0x12c>)
 8001a2a:	f004 fec7 	bl	80067bc <HAL_CAN_GetRxFifoFillLevel>
 8001a2e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    snprintf(msg, sizeof(msg),
 8001a32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a4c:	4a38      	ldr	r2, [pc, #224]	@ (8001b30 <CAN_DebugStatus+0x130>)
 8001a4e:	2180      	movs	r1, #128	@ 0x80
 8001a50:	f00c fd96 	bl	800e580 <sniprintf>
             "\r\n[CAN DEBUG]\r\nMSR=0x%08lX\r\nESR=0x%08lX\r\nFIFO0=%lu, FIFO1=%lu\r\n",
             msr, esr, fifo0_level, fifo1_level);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fc09 	bl	8000270 <strlen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	4832      	ldr	r0, [pc, #200]	@ (8001b34 <CAN_DebugStatus+0x134>)
 8001a6c:	f00b f84a 	bl	800cb04 <HAL_UART_Transmit>

    // Giải thích các trạng thái nếu cần
    if (esr & CAN_ESR_BOFF) {
 8001a70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <CAN_DebugStatus+0x8a>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ CAN BUS-OFF\r\n", 17, HAL_MAX_DELAY);
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a80:	2211      	movs	r2, #17
 8001a82:	492d      	ldr	r1, [pc, #180]	@ (8001b38 <CAN_DebugStatus+0x138>)
 8001a84:	482b      	ldr	r0, [pc, #172]	@ (8001b34 <CAN_DebugStatus+0x134>)
 8001a86:	f00b f83d 	bl	800cb04 <HAL_UART_Transmit>
    }
    if (esr & CAN_ESR_EPVF) {
 8001a8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <CAN_DebugStatus+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ Error Passive\r\n", 19, HAL_MAX_DELAY);
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	2213      	movs	r2, #19
 8001a9c:	4927      	ldr	r1, [pc, #156]	@ (8001b3c <CAN_DebugStatus+0x13c>)
 8001a9e:	4825      	ldr	r0, [pc, #148]	@ (8001b34 <CAN_DebugStatus+0x134>)
 8001aa0:	f00b f830 	bl	800cb04 <HAL_UART_Transmit>
    }
    if (esr & CAN_ESR_EWGF) {
 8001aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <CAN_DebugStatus+0xbe>
        HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️ Error Warning\r\n", 19, HAL_MAX_DELAY);
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	2213      	movs	r2, #19
 8001ab6:	4922      	ldr	r1, [pc, #136]	@ (8001b40 <CAN_DebugStatus+0x140>)
 8001ab8:	481e      	ldr	r0, [pc, #120]	@ (8001b34 <CAN_DebugStatus+0x134>)
 8001aba:	f00b f823 	bl	800cb04 <HAL_UART_Transmit>
    }

    if ((esr & CAN_ESR_LEC_Msk) != 0) {
 8001abe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ac2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d02b      	beq.n	8001b22 <CAN_DebugStatus+0x122>
        const char* lec_msgs[] = {
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <CAN_DebugStatus+0x144>)
 8001acc:	1d3c      	adds	r4, r7, #4
 8001ace:	461d      	mov	r5, r3
 8001ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            "No Error", "Stuff Error", "Form Error", "Ack Error",
            "Bit recessive Error", "Bit dominant Error", "CRC Error", "Unknown"
        };
        uint8_t lec = (esr & CAN_ESR_LEC_Msk) >> CAN_ESR_LEC_Pos;
 8001adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        snprintf(msg, sizeof(msg), "❌ Last Error Code (LEC): %s\r\n", lec_msgs[lec]);
 8001aec:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	33b8      	adds	r3, #184	@ 0xb8
 8001af4:	443b      	add	r3, r7
 8001af6:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001afa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <CAN_DebugStatus+0x148>)
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	f00c fd3d 	bl	800e580 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fbb0 	bl	8000270 <strlen>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1c:	4805      	ldr	r0, [pc, #20]	@ (8001b34 <CAN_DebugStatus+0x134>)
 8001b1e:	f00a fff1 	bl	800cb04 <HAL_UART_Transmit>
    }
}
 8001b22:	bf00      	nop
 8001b24:	37b8      	adds	r7, #184	@ 0xb8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200003dc 	.word	0x200003dc
 8001b30:	08011508 	.word	0x08011508
 8001b34:	200006d8 	.word	0x200006d8
 8001b38:	08011548 	.word	0x08011548
 8001b3c:	08011560 	.word	0x08011560
 8001b40:	08011578 	.word	0x08011578
 8001b44:	0801161c 	.word	0x0801161c
 8001b48:	08011590 	.word	0x08011590

08001b4c <MQ135_Config>:
// Biến bên ngoài dùng cho lấy mẫu ADC qua ngắt
extern uint32_t ADC_SAMPLES[1000];
extern uint32_t NUM_SAMPLES;
extern volatile uint8_t mq135_done;

void MQ135_Config(MQ135_HandleTypeDef *mq, ADC_HandleTypeDef *hadc) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
    mq->hadc = hadc;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	601a      	str	r2, [r3, #0]
    mq->rl_value = 10.0f;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <MQ135_Config+0x44>)
 8001b60:	605a      	str	r2, [r3, #4]
    mq->ro_clean_air = 10.0f;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <MQ135_Config+0x44>)
 8001b66:	609a      	str	r2, [r3, #8]
    mq->a = 116.6020682f;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <MQ135_Config+0x48>)
 8001b6c:	60da      	str	r2, [r3, #12]
    mq->b = -2.769034857f;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <MQ135_Config+0x4c>)
 8001b72:	611a      	str	r2, [r3, #16]
    mq->vref = 3.3f;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <MQ135_Config+0x50>)
 8001b78:	615a      	str	r2, [r3, #20]
    mq->resolution = 4096.0f;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	41200000 	.word	0x41200000
 8001b94:	42e93442 	.word	0x42e93442
 8001b98:	c03137de 	.word	0xc03137de
 8001b9c:	40533333 	.word	0x40533333

08001ba0 <MQ135_CorrectionFactor>:

float MQ135_CorrectionFactor(float temp, float hum) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001baa:	edc7 0a00 	vstr	s1, [r7]
    return MQ135_CORA * temp * temp
 8001bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001c00 <MQ135_CorrectionFactor+0x60>
 8001bb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
         - MQ135_CORB * temp
 8001bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001c04 <MQ135_CorrectionFactor+0x64>
 8001bca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
         + MQ135_CORC
 8001bd2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001c08 <MQ135_CorrectionFactor+0x68>
 8001bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
         - (hum - 33.0f) * MQ135_CORD;
 8001bda:	edd7 7a00 	vldr	s15, [r7]
 8001bde:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001c0c <MQ135_CorrectionFactor+0x6c>
 8001be2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001be6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001c10 <MQ135_CorrectionFactor+0x70>
 8001bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bee:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	39b78034 	.word	0x39b78034
 8001c04:	3cdea897 	.word	0x3cdea897
 8001c08:	3fb29bd0 	.word	0x3fb29bd0
 8001c0c:	42040000 	.word	0x42040000
 8001c10:	3aebedfa 	.word	0x3aebedfa

08001c14 <MQ135_ReadRs>:

float MQ135_ReadRs(MQ135_HandleTypeDef *mq) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    float rs = 0.0f;
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
    mq135_done = 0;
 8001c22:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd0 <MQ135_ReadRs+0xbc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
    NUM_SAMPLES = MQ135_READ_SAMPLES;
 8001c28:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd4 <MQ135_ReadRs+0xc0>)
 8001c2a:	2264      	movs	r2, #100	@ 0x64
 8001c2c:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start_IT(mq->hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fc9e 	bl	8005574 <HAL_ADC_Start_IT>
    while (!mq135_done);  // đợi hoàn tất lấy mẫu
 8001c38:	bf00      	nop
 8001c3a:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <MQ135_ReadRs+0xbc>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0fa      	beq.n	8001c3a <MQ135_ReadRs+0x26>

    for (uint32_t j = 0; j < NUM_SAMPLES; j++) {
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	e02c      	b.n	8001ca4 <MQ135_ReadRs+0x90>
        float v = ADC_SAMPLES[j] * mq->vref / mq->resolution;
 8001c4a:	4a23      	ldr	r2, [pc, #140]	@ (8001cd8 <MQ135_ReadRs+0xc4>)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c6e:	edc7 7a03 	vstr	s15, [r7, #12]
        rs += ((mq->vref - v) * mq->rl_value) / v;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c86:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c92:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9a:	edc7 7a05 	vstr	s15, [r7, #20]
    for (uint32_t j = 0; j < NUM_SAMPLES; j++) {
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <MQ135_ReadRs+0xc0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3cd      	bcc.n	8001c4a <MQ135_ReadRs+0x36>
    }

    return rs / NUM_SAMPLES;
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <MQ135_ReadRs+0xc0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cba:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cc2:	eef0 7a66 	vmov.f32	s15, s13
}
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20001770 	.word	0x20001770
 8001cd4:	2000176c 	.word	0x2000176c
 8001cd8:	200007cc 	.word	0x200007cc

08001cdc <MQ135_ReadCorrectedPPM>:

float MQ135_ReadCorrectedPPM(MQ135_HandleTypeDef *mq, float temp, float hum) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	ed2d 8b02 	vpush	{d8}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cec:	edc7 0a01 	vstr	s1, [r7, #4]
    float rs = MQ135_ReadRs(mq);
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff ff8f 	bl	8001c14 <MQ135_ReadRs>
 8001cf6:	ed87 0a07 	vstr	s0, [r7, #28]
    float corr = MQ135_CorrectionFactor(temp, hum);
 8001cfa:	edd7 0a01 	vldr	s1, [r7, #4]
 8001cfe:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d02:	f7ff ff4d 	bl	8001ba0 <MQ135_CorrectionFactor>
 8001d06:	ed87 0a06 	vstr	s0, [r7, #24]
    float rsc = rs / corr;
 8001d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d0e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d16:	edc7 7a05 	vstr	s15, [r7, #20]
    return mq->a * powf(rsc / mq->ro_clean_air, mq->b);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	ed93 8a03 	vldr	s16, [r3, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d34:	eef0 0a67 	vmov.f32	s1, s15
 8001d38:	eeb0 0a66 	vmov.f32	s0, s13
 8001d3c:	f00e fd9c 	bl	8010878 <powf>
 8001d40:	eef0 7a40 	vmov.f32	s15, s0
 8001d44:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001d48:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	ecbd 8b02 	vpop	{d8}
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <MQ135_CalibrateRo>:

void MQ135_CalibrateRo(MQ135_HandleTypeDef *mq, float temp, float hum) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	ed2d 8b02 	vpush	{d8}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d68:	edc7 0a01 	vstr	s1, [r7, #4]
    mq->ro_clean_air = MQ135_ReadRs(mq) *
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff ff51 	bl	8001c14 <MQ135_ReadRs>
 8001d72:	eeb0 8a40 	vmov.f32	s16, s0
        powf((MQ135_ATMOCO2 / mq->a), (1.0f / mq->b));
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d7c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001db8 <MQ135_CalibrateRo+0x60>
 8001d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d8a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001d8e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001d92:	eef0 0a66 	vmov.f32	s1, s13
 8001d96:	eeb0 0a47 	vmov.f32	s0, s14
 8001d9a:	f00e fd6d 	bl	8010878 <powf>
 8001d9e:	eef0 7a40 	vmov.f32	s15, s0
    mq->ro_clean_air = MQ135_ReadRs(mq) *
 8001da2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	ecbd 8b02 	vpop	{d8}
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	43c80000 	.word	0x43c80000

08001dbc <MQ135_Send_CAN>:

void MQ135_Send_CAN(MQ135_HandleTypeDef *mq, float temp, float hum, UART_HandleTypeDef *huart, uint16_t topic) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b09e      	sub	sp, #120	@ 0x78
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6178      	str	r0, [r7, #20]
 8001dc4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001dc8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
    float ppm = MQ135_ReadCorrectedPPM(mq, temp, hum);
 8001dd2:	edd7 0a03 	vldr	s1, [r7, #12]
 8001dd6:	ed97 0a04 	vldr	s0, [r7, #16]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff7e 	bl	8001cdc <MQ135_ReadCorrectedPPM>
 8001de0:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
    uint16_t v = (uint16_t)ppm;
 8001de4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dec:	ee17 3a90 	vmov	r3, s15
 8001df0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    char buf[80];
    sprintf(buf, "PPM: %.1f\r\n", ppm);
 8001df4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001df6:	f7fe fba7 	bl	8000548 <__aeabi_f2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	f107 0020 	add.w	r0, r7, #32
 8001e02:	4913      	ldr	r1, [pc, #76]	@ (8001e50 <MQ135_Send_CAN+0x94>)
 8001e04:	f00c fbf2 	bl	800e5ec <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001e08:	f107 0320 	add.w	r3, r7, #32
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fa2f 	bl	8000270 <strlen>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	f107 0120 	add.w	r1, r7, #32
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f00a fe70 	bl	800cb04 <HAL_UART_Transmit>

    uint8_t payload[2] = { (v >> 8) & 0xFF, v & 0xFF };
 8001e24:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	773b      	strb	r3, [r7, #28]
 8001e30:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	777b      	strb	r3, [r7, #29]
    CAN_SendTopicData(topic, payload, 2);
 8001e38:	f107 011c 	add.w	r1, r7, #28
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fa45 	bl	80022d0 <CAN_SendTopicData>
}
 8001e46:	bf00      	nop
 8001e48:	3778      	adds	r7, #120	@ 0x78
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	0801163c 	.word	0x0801163c

08001e54 <RC522_SPI_Transfer>:
 * Des		cription: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b096      	sub	sp, #88	@ 0x58
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001e5e:	f107 024f 	add.w	r2, r7, #79	@ 0x4f
 8001e62:	1df9      	adds	r1, r7, #7
 8001e64:	2364      	movs	r3, #100	@ 0x64
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	4804      	ldr	r0, [pc, #16]	@ (8001e7c <RC522_SPI_Transfer+0x28>)
 8001e6c:	f008 ff03 	bl	800ac76 <HAL_SPI_TransmitReceive>
	 char debug[64];

	return rx_data;
 8001e70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3750      	adds	r7, #80	@ 0x50
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000488 	.word	0x20000488

08001e80 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2180      	movs	r1, #128	@ 0x80
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <Write_MFRC522+0x48>)
 8001e96:	f005 fe91 	bl	8007bbc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ffd4 	bl	8001e54 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001eac:	79bb      	ldrb	r3, [r7, #6]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ffd0 	bl	8001e54 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2180      	movs	r1, #128	@ 0x80
 8001eb8:	4803      	ldr	r0, [pc, #12]	@ (8001ec8 <Write_MFRC522+0x48>)
 8001eba:	f005 fe7f 	bl	8007bbc <HAL_GPIO_WritePin>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40020800 	.word	0x40020800

08001ecc <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	4810      	ldr	r0, [pc, #64]	@ (8001f1c <Read_MFRC522+0x50>)
 8001edc:	f005 fe6e 	bl	8007bbc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	b25b      	sxtb	r3, r3
 8001ee8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001eec:	b25b      	sxtb	r3, r3
 8001eee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffac 	bl	8001e54 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff ffa9 	bl	8001e54 <RC522_SPI_Transfer>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	4804      	ldr	r0, [pc, #16]	@ (8001f1c <Read_MFRC522+0x50>)
 8001f0c:	f005 fe56 	bl	8007bbc <HAL_GPIO_WritePin>
	
	return val;	
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40020800 	.word	0x40020800

08001f20 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	71fb      	strb	r3, [r7, #7]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ffca 	bl	8001ecc <Read_MFRC522>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	79bb      	ldrb	r3, [r7, #6]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff99 	bl	8001e80 <Write_MFRC522>
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	460a      	mov	r2, r1
 8001f60:	71fb      	strb	r3, [r7, #7]
 8001f62:	4613      	mov	r3, r2
 8001f64:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ffaf 	bl	8001ecc <Read_MFRC522>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001f72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	b25a      	sxtb	r2, r3
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff79 	bl	8001e80 <Write_MFRC522>
} 
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001f9a:	2014      	movs	r0, #20
 8001f9c:	f7ff ff96 	bl	8001ecc <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001fa0:	2103      	movs	r1, #3
 8001fa2:	2014      	movs	r0, #20
 8001fa4:	f7ff ffbc 	bl	8001f20 <SetBitMask>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001fb0:	210f      	movs	r1, #15
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7ff ff64 	bl	8001e80 <Write_MFRC522>
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2180      	movs	r1, #128	@ 0x80
 8001fc4:	4812      	ldr	r0, [pc, #72]	@ (8002010 <MFRC522_Init+0x54>)
 8001fc6:	f005 fdf9 	bl	8007bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4811      	ldr	r0, [pc, #68]	@ (8002014 <MFRC522_Init+0x58>)
 8001fd0:	f005 fdf4 	bl	8007bbc <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001fd4:	f7ff ffea 	bl	8001fac <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001fd8:	218d      	movs	r1, #141	@ 0x8d
 8001fda:	202a      	movs	r0, #42	@ 0x2a
 8001fdc:	f7ff ff50 	bl	8001e80 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001fe0:	213e      	movs	r1, #62	@ 0x3e
 8001fe2:	202b      	movs	r0, #43	@ 0x2b
 8001fe4:	f7ff ff4c 	bl	8001e80 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8001fe8:	211e      	movs	r1, #30
 8001fea:	202d      	movs	r0, #45	@ 0x2d
 8001fec:	f7ff ff48 	bl	8001e80 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	202c      	movs	r0, #44	@ 0x2c
 8001ff4:	f7ff ff44 	bl	8001e80 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001ff8:	2140      	movs	r1, #64	@ 0x40
 8001ffa:	2015      	movs	r0, #21
 8001ffc:	f7ff ff40 	bl	8001e80 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8002000:	213d      	movs	r1, #61	@ 0x3d
 8002002:	2011      	movs	r0, #17
 8002004:	f7ff ff3c 	bl	8001e80 <Write_MFRC522>

	AntennaOn();
 8002008:	f7ff ffc5 	bl	8001f96 <AntennaOn>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40020800 	.word	0x40020800
 8002014:	40020400 	.word	0x40020400

08002018 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b089      	sub	sp, #36	@ 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	4613      	mov	r3, r2
 8002028:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800202a:	2302      	movs	r3, #2
 800202c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800202e:	2300      	movs	r3, #0
 8002030:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d006      	beq.n	800204a <MFRC522_ToCard+0x32>
 800203c:	2b0e      	cmp	r3, #14
 800203e:	d109      	bne.n	8002054 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8002040:	2312      	movs	r3, #18
 8002042:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8002044:	2310      	movs	r3, #16
 8002046:	777b      	strb	r3, [r7, #29]
			break;
 8002048:	e005      	b.n	8002056 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800204a:	2377      	movs	r3, #119	@ 0x77
 800204c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800204e:	2330      	movs	r3, #48	@ 0x30
 8002050:	777b      	strb	r3, [r7, #29]
			break;
 8002052:	e000      	b.n	8002056 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8002054:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8002056:	7fbb      	ldrb	r3, [r7, #30]
 8002058:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4619      	mov	r1, r3
 8002060:	2002      	movs	r0, #2
 8002062:	f7ff ff0d 	bl	8001e80 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8002066:	2180      	movs	r1, #128	@ 0x80
 8002068:	2004      	movs	r0, #4
 800206a:	f7ff ff74 	bl	8001f56 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800206e:	2180      	movs	r1, #128	@ 0x80
 8002070:	200a      	movs	r0, #10
 8002072:	f7ff ff55 	bl	8001f20 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8002076:	2100      	movs	r1, #0
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff ff01 	bl	8001e80 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	e00a      	b.n	800209a <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	2009      	movs	r0, #9
 8002090:	f7ff fef6 	bl	8001e80 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	3301      	adds	r3, #1
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	7bbb      	ldrb	r3, [r7, #14]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3f0      	bcc.n	8002084 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	4619      	mov	r1, r3
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff feea 	bl	8001e80 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d103      	bne.n	80020ba <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80020b2:	2180      	movs	r1, #128	@ 0x80
 80020b4:	200d      	movs	r0, #13
 80020b6:	f7ff ff33 	bl	8001f20 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80020ba:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80020be:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80020c0:	2004      	movs	r0, #4
 80020c2:	f7ff ff03 	bl	8001ecc <Read_MFRC522>
 80020c6:	4603      	mov	r3, r0
 80020c8:	773b      	strb	r3, [r7, #28]
        i--;
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <MFRC522_ToCard+0xd4>
 80020d6:	7f3b      	ldrb	r3, [r7, #28]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <MFRC522_ToCard+0xd4>
 80020e0:	7f3a      	ldrb	r2, [r7, #28]
 80020e2:	7f7b      	ldrb	r3, [r7, #29]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0e9      	beq.n	80020c0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	200d      	movs	r0, #13
 80020f0:	f7ff ff31 	bl	8001f56 <ClearBitMask>
	
    if (i != 0)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d052      	beq.n	80021a0 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80020fa:	2006      	movs	r0, #6
 80020fc:	f7ff fee6 	bl	8001ecc <Read_MFRC522>
 8002100:	4603      	mov	r3, r0
 8002102:	f003 031b 	and.w	r3, r3, #27
 8002106:	2b00      	cmp	r3, #0
 8002108:	d148      	bne.n	800219c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800210e:	7f3a      	ldrb	r2, [r7, #28]
 8002110:	7fbb      	ldrb	r3, [r7, #30]
 8002112:	4013      	ands	r3, r2
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 800211e:	2301      	movs	r3, #1
 8002120:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d13b      	bne.n	80021a0 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002128:	200a      	movs	r0, #10
 800212a:	f7ff fecf 	bl	8001ecc <Read_MFRC522>
 800212e:	4603      	mov	r3, r0
 8002130:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002132:	200c      	movs	r0, #12
 8002134:	f7ff feca 	bl	8001ecc <Read_MFRC522>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8002146:	7f3b      	ldrb	r3, [r7, #28]
 8002148:	3b01      	subs	r3, #1
 800214a:	00da      	lsls	r2, r3, #3
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	4413      	add	r3, r2
 8002150:	461a      	mov	r2, r3
 8002152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e004      	b.n	8002162 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8002158:	7f3b      	ldrb	r3, [r7, #28]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	461a      	mov	r2, r3
 800215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002160:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002162:	7f3b      	ldrb	r3, [r7, #28]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8002168:	2301      	movs	r3, #1
 800216a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800216c:	7f3b      	ldrb	r3, [r7, #28]
 800216e:	2b10      	cmp	r3, #16
 8002170:	d901      	bls.n	8002176 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8002172:	2310      	movs	r3, #16
 8002174:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	e00a      	b.n	8002192 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	18d4      	adds	r4, r2, r3
 8002182:	2009      	movs	r0, #9
 8002184:	f7ff fea2 	bl	8001ecc <Read_MFRC522>
 8002188:	4603      	mov	r3, r0
 800218a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	3301      	adds	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	7f3b      	ldrb	r3, [r7, #28]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	429a      	cmp	r2, r3
 8002198:	d3f0      	bcc.n	800217c <MFRC522_ToCard+0x164>
 800219a:	e001      	b.n	80021a0 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 800219c:	2302      	movs	r3, #2
 800219e:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	@ 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}

080021aa <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af02      	add	r7, sp, #8
 80021b0:	4603      	mov	r3, r0
 80021b2:	6039      	str	r1, [r7, #0]
 80021b4:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80021b6:	2107      	movs	r1, #7
 80021b8:	200d      	movs	r0, #13
 80021ba:	f7ff fe61 	bl	8001e80 <Write_MFRC522>
	
	TagType[0] = reqMode;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	79fa      	ldrb	r2, [r7, #7]
 80021c2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	6839      	ldr	r1, [r7, #0]
 80021d0:	200c      	movs	r0, #12
 80021d2:	f7ff ff21 	bl	8002018 <MFRC522_ToCard>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <MFRC522_Request+0x3c>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d001      	beq.n	80021ea <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 80021e6:	2302      	movs	r3, #2
 80021e8:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002200:	2100      	movs	r1, #0
 8002202:	200d      	movs	r0, #13
 8002204:	f7ff fe3c 	bl	8001e80 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2293      	movs	r2, #147	@ 0x93
 800220c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3301      	adds	r3, #1
 8002212:	2220      	movs	r2, #32
 8002214:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	200c      	movs	r0, #12
 8002224:	f7ff fef8 	bl	8002018 <MFRC522_ToCard>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002232:	2300      	movs	r3, #0
 8002234:	73bb      	strb	r3, [r7, #14]
 8002236:	e009      	b.n	800224c <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	7b7b      	ldrb	r3, [r7, #13]
 8002242:	4053      	eors	r3, r2
 8002244:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8002246:	7bbb      	ldrb	r3, [r7, #14]
 8002248:	3301      	adds	r3, #1
 800224a:	73bb      	strb	r3, [r7, #14]
 800224c:	7bbb      	ldrb	r3, [r7, #14]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d9f2      	bls.n	8002238 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	7b7a      	ldrb	r2, [r7, #13]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8002260:	2302      	movs	r3, #2
 8002262:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
} 
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern volatile uint8_t can_rx_flag;
extern volatile uint32_t can_rx_count ;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
//    HAL_UART_Transmit(&huart1, (uint8_t*)"INTERRUPT OK\r\n", 15, HAL_MAX_DELAY);
        HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rxData) ;
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800227a:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800227c:	2100      	movs	r1, #0
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f004 f97a 	bl	8006578 <HAL_CAN_GetRxMessage>
                  can_rx_flag = 1;  // báo về main xử lý
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
                  can_rx_count++;  // tăng biến đếm khi nhận
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200007ac 	.word	0x200007ac
 80022a0:	20000790 	.word	0x20000790
 80022a4:	200007b4 	.word	0x200007b4
 80022a8:	200007c0 	.word	0x200007c0

080022ac <BNO055_IsStable>:
}



bool BNO055_IsStable(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
    return (HAL_GetTick() - imu_reset_time > 600);  // chờ 1 giây
 80022b0:	f003 f8ec 	bl	800548c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <BNO055_IsStable+0x20>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80022c0:	bf8c      	ite	hi
 80022c2:	2301      	movhi	r3, #1
 80022c4:	2300      	movls	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2000031c 	.word	0x2000031c

080022d0 <CAN_SendTopicData>:
    }

    return status;
}
HAL_StatusTypeDef CAN_SendTopicData(uint16_t topic_id, uint8_t *data, uint8_t len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	80fb      	strh	r3, [r7, #6]
 80022dc:	4613      	mov	r3, r2
 80022de:	717b      	strb	r3, [r7, #5]
    uint32_t TxMailbox;
    HAL_StatusTypeDef status;
    uint32_t start = HAL_GetTick();
 80022e0:	f003 f8d4 	bl	800548c <HAL_GetTick>
 80022e4:	6178      	str	r0, [r7, #20]
    const uint32_t timeout_ms = 3;   // thời gian retry tối đa (5ms)
 80022e6:	2303      	movs	r3, #3
 80022e8:	613b      	str	r3, [r7, #16]

    if (len > 8) len = 8;
 80022ea:	797b      	ldrb	r3, [r7, #5]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d901      	bls.n	80022f4 <CAN_SendTopicData+0x24>
 80022f0:	2308      	movs	r3, #8
 80022f2:	717b      	strb	r3, [r7, #5]

    TxHeader.StdId = topic_id;
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <CAN_SendTopicData+0x90>)
 80022f8:	6013      	str	r3, [r2, #0]
    TxHeader.IDE = CAN_ID_STD;
 80022fa:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <CAN_SendTopicData+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <CAN_SendTopicData+0x90>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = len;
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	4a15      	ldr	r2, [pc, #84]	@ (8002360 <CAN_SendTopicData+0x90>)
 800230a:	6113      	str	r3, [r2, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <CAN_SendTopicData+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	751a      	strb	r2, [r3, #20]
    }
    snprintf(log + offset, sizeof(log) - offset, "\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t*)log, strlen(log), 1);
#endif

    can_tx_count++;
 8002312:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <CAN_SendTopicData+0x94>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <CAN_SendTopicData+0x94>)
 800231a:	6013      	str	r3, [r2, #0]

    // --- Retry loop ---
    do {
        if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0) {
 800231c:	4812      	ldr	r0, [pc, #72]	@ (8002368 <CAN_SendTopicData+0x98>)
 800231e:	f004 f8f6 	bl	800650e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <CAN_SendTopicData+0x74>
            status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox);
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	490c      	ldr	r1, [pc, #48]	@ (8002360 <CAN_SendTopicData+0x90>)
 8002330:	480d      	ldr	r0, [pc, #52]	@ (8002368 <CAN_SendTopicData+0x98>)
 8002332:	f004 f81c 	bl	800636e <HAL_CAN_AddTxMessage>
 8002336:	4603      	mov	r3, r0
 8002338:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) {
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <CAN_SendTopicData+0x74>
                return HAL_OK;  // gửi thành công
 8002340:	2300      	movs	r3, #0
 8002342:	e008      	b.n	8002356 <CAN_SendTopicData+0x86>
            }
        }
        // Nếu mailbox vẫn bận, chờ 1 tick rồi thử lại
    } while ((HAL_GetTick() - start) < timeout_ms);
 8002344:	f003 f8a2 	bl	800548c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8e3      	bhi.n	800231c <CAN_SendTopicData+0x4c>

    // Nếu hết thời gian vẫn không gửi được
    return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
//            CAN_IT_LAST_ERROR_CODE |
//            CAN_IT_ERROR);
        NVIC_SystemReset();

    }
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000778 	.word	0x20000778
 8002364:	200007bc 	.word	0x200007bc
 8002368:	200003dc 	.word	0x200003dc

0800236c <Send_All_SensorData_CAN>:
extern uint32_t imu_timer;
extern volatile uint8_t timer10ms_flag ;


void Send_All_SensorData_CAN(void)
{
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b08c      	sub	sp, #48	@ 0x30
 8002370:	af00      	add	r7, sp, #0
	static uint32_t last_us_trigger_time ;

    if (timer10ms_flag) {
 8002372:	4b58      	ldr	r3, [pc, #352]	@ (80024d4 <Send_All_SensorData_CAN+0x168>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <Send_All_SensorData_CAN+0x38>
        timer10ms_flag = 0;
 800237c:	4b55      	ldr	r3, [pc, #340]	@ (80024d4 <Send_All_SensorData_CAN+0x168>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
//        BNO055_SendEulerCAN();
        if (BNO055_IsStable()) {
 8002382:	f7ff ff93 	bl	80022ac <BNO055_IsStable>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <Send_All_SensorData_CAN+0x26>
              BNO055_SendEulerCAN();
 800238c:	f7ff fa94 	bl	80018b8 <BNO055_SendEulerCAN>
 8002390:	e008      	b.n	80023a4 <Send_All_SensorData_CAN+0x38>
          } else {
              // bỏ qua dữ liệu trong lúc IMU đang ổn định lại
              HAL_I2C_DeInit(&bno_i2c);
 8002392:	4851      	ldr	r0, [pc, #324]	@ (80024d8 <Send_All_SensorData_CAN+0x16c>)
 8002394:	f005 fd70 	bl	8007e78 <HAL_I2C_DeInit>
              HAL_Delay(5);
 8002398:	2005      	movs	r0, #5
 800239a:	f003 f883 	bl	80054a4 <HAL_Delay>
              HAL_I2C_Init(&bno_i2c);
 800239e:	484e      	ldr	r0, [pc, #312]	@ (80024d8 <Send_All_SensorData_CAN+0x16c>)
 80023a0:	f005 fc26 	bl	8007bf0 <HAL_I2C_Init>

          }
    }

    if (HAL_GetTick() - debug_timer >= 20) {
 80023a4:	f003 f872 	bl	800548c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b4c      	ldr	r3, [pc, #304]	@ (80024dc <Send_All_SensorData_CAN+0x170>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b13      	cmp	r3, #19
 80023b2:	d906      	bls.n	80023c2 <Send_All_SensorData_CAN+0x56>
        BNO055_PrintEulerDebug();
 80023b4:	f7ff fadc 	bl	8001970 <BNO055_PrintEulerDebug>
        debug_timer = HAL_GetTick();
 80023b8:	f003 f868 	bl	800548c <HAL_GetTick>
 80023bc:	4603      	mov	r3, r0
 80023be:	4a47      	ldr	r2, [pc, #284]	@ (80024dc <Send_All_SensorData_CAN+0x170>)
 80023c0:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - last_us_trigger_time >= 400) {
 80023c2:	f003 f863 	bl	800548c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b45      	ldr	r3, [pc, #276]	@ (80024e0 <Send_All_SensorData_CAN+0x174>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80023d2:	d30a      	bcc.n	80023ea <Send_All_SensorData_CAN+0x7e>
            US01_TriggerAll_Sequential();      // Blocking đo 4 cảm biến
 80023d4:	f002 ff91 	bl	80052fa <US01_TriggerAll_Sequential>
            PrintAllDistances();               // UART in khoảng cách
 80023d8:	f002 ffa8 	bl	800532c <PrintAllDistances>
            US01_SendAllDistances_CAN();       // Gửi qua CAN
 80023dc:	f002 ff54 	bl	8005288 <US01_SendAllDistances_CAN>
            last_us_trigger_time = HAL_GetTick();
 80023e0:	f003 f854 	bl	800548c <HAL_GetTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4a3e      	ldr	r2, [pc, #248]	@ (80024e0 <Send_All_SensorData_CAN+0x174>)
 80023e8:	6013      	str	r3, [r2, #0]
        }



    static uint32_t last_mq135_time = 0;
    if (HAL_GetTick() - last_mq135_time >= 1000) {
 80023ea:	f003 f84f 	bl	800548c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b3c      	ldr	r3, [pc, #240]	@ (80024e4 <Send_All_SensorData_CAN+0x178>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023fa:	d30d      	bcc.n	8002418 <Send_All_SensorData_CAN+0xac>
        MQ135_Send_CAN(&mq135, 25.0f, 50.0f, &huart1, TOPIC_ID_MQ135);  // Dùng hàm DMA mới
 80023fc:	2211      	movs	r2, #17
 80023fe:	493a      	ldr	r1, [pc, #232]	@ (80024e8 <Send_All_SensorData_CAN+0x17c>)
 8002400:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 80024ec <Send_All_SensorData_CAN+0x180>
 8002404:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002408:	4839      	ldr	r0, [pc, #228]	@ (80024f0 <Send_All_SensorData_CAN+0x184>)
 800240a:	f7ff fcd7 	bl	8001dbc <MQ135_Send_CAN>
        last_mq135_time = HAL_GetTick();
 800240e:	f003 f83d 	bl	800548c <HAL_GetTick>
 8002412:	4603      	mov	r3, r0
 8002414:	4a33      	ldr	r2, [pc, #204]	@ (80024e4 <Send_All_SensorData_CAN+0x178>)
 8002416:	6013      	str	r3, [r2, #0]
    }
    checkRFIDAndControlRelay();
 8002418:	f001 fc94 	bl	8003d44 <checkRFIDAndControlRelay>
    static uint32_t last_can_tx = 0;
    static uint8_t can_fail_count = 0;

    if (HAL_GetTick() - last_can_tx >= 300) { // kiểm tra mỗi giây
 800241c:	f003 f836 	bl	800548c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <Send_All_SensorData_CAN+0x188>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800242c:	d34e      	bcc.n	80024cc <Send_All_SensorData_CAN+0x160>
        if (can_tx_count == 0 && can_rx_count == 0) {
 800242e:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <Send_All_SensorData_CAN+0x18c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <Send_All_SensorData_CAN+0xe0>
 8002436:	4b31      	ldr	r3, [pc, #196]	@ (80024fc <Send_All_SensorData_CAN+0x190>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <Send_All_SensorData_CAN+0xe0>
            can_fail_count++;
 800243e:	4b30      	ldr	r3, [pc, #192]	@ (8002500 <Send_All_SensorData_CAN+0x194>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b2e      	ldr	r3, [pc, #184]	@ (8002500 <Send_All_SensorData_CAN+0x194>)
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e002      	b.n	8002452 <Send_All_SensorData_CAN+0xe6>
        } else {
            can_fail_count = 0;
 800244c:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <Send_All_SensorData_CAN+0x194>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
        }

        if (can_fail_count >= 3) { // 3 giây không có hoạt động
 8002452:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <Send_All_SensorData_CAN+0x194>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d92d      	bls.n	80024b6 <Send_All_SensorData_CAN+0x14a>
            char msg[] = "⚠️ CAN watchdog triggered, reinit...\r\n";
 800245a:	4b2a      	ldr	r3, [pc, #168]	@ (8002504 <Send_All_SensorData_CAN+0x198>)
 800245c:	1d3c      	adds	r4, r7, #4
 800245e:	461d      	mov	r5, r3
 8002460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002468:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800246c:	c403      	stmia	r4!, {r0, r1}
 800246e:	8022      	strh	r2, [r4, #0]
 8002470:	3402      	adds	r4, #2
 8002472:	0c13      	lsrs	r3, r2, #16
 8002474:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd fef9 	bl	8000270 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	b29a      	uxth	r2, r3
 8002482:	1d39      	adds	r1, r7, #4
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	4817      	ldr	r0, [pc, #92]	@ (80024e8 <Send_All_SensorData_CAN+0x17c>)
 800248a:	f00a fb3b 	bl	800cb04 <HAL_UART_Transmit>

            // Reset lại CAN1 hoàn chỉnh
            HAL_CAN_Stop(&hcan1);
 800248e:	481e      	ldr	r0, [pc, #120]	@ (8002508 <Send_All_SensorData_CAN+0x19c>)
 8002490:	f003 ff24 	bl	80062dc <HAL_CAN_Stop>
            HAL_CAN_DeInit(&hcan1);
 8002494:	481c      	ldr	r0, [pc, #112]	@ (8002508 <Send_All_SensorData_CAN+0x19c>)
 8002496:	f003 fddc 	bl	8006052 <HAL_CAN_DeInit>
            HAL_CAN_Init(&hcan1);
 800249a:	481b      	ldr	r0, [pc, #108]	@ (8002508 <Send_All_SensorData_CAN+0x19c>)
 800249c:	f003 fcde 	bl	8005e5c <HAL_CAN_Init>
            HAL_CAN_Start(&hcan1);
 80024a0:	4819      	ldr	r0, [pc, #100]	@ (8002508 <Send_All_SensorData_CAN+0x19c>)
 80024a2:	f003 fed7 	bl	8006254 <HAL_CAN_Start>


            // Bật lại interrupt
            HAL_CAN_ActivateNotification(&hcan1,
 80024a6:	f44f 410f 	mov.w	r1, #36608	@ 0x8f00
 80024aa:	4817      	ldr	r0, [pc, #92]	@ (8002508 <Send_All_SensorData_CAN+0x19c>)
 80024ac:	f004 f9ae 	bl	800680c <HAL_CAN_ActivateNotification>
                CAN_IT_BUSOFF |
                CAN_IT_LAST_ERROR_CODE |
                CAN_IT_ERROR);


            can_fail_count = 0;
 80024b0:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <Send_All_SensorData_CAN+0x194>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
        }

        can_tx_count = 0;
 80024b6:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <Send_All_SensorData_CAN+0x18c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
        can_rx_count = 0;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <Send_All_SensorData_CAN+0x190>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
        last_can_tx = HAL_GetTick();
 80024c2:	f002 ffe3 	bl	800548c <HAL_GetTick>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <Send_All_SensorData_CAN+0x188>)
 80024ca:	6013      	str	r3, [r2, #0]
    }

}
 80024cc:	bf00      	nop
 80024ce:	3730      	adds	r7, #48	@ 0x30
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bdb0      	pop	{r4, r5, r7, pc}
 80024d4:	200007c8 	.word	0x200007c8
 80024d8:	20000434 	.word	0x20000434
 80024dc:	200007b8 	.word	0x200007b8
 80024e0:	20000320 	.word	0x20000320
 80024e4:	20000324 	.word	0x20000324
 80024e8:	200006d8 	.word	0x200006d8
 80024ec:	42480000 	.word	0x42480000
 80024f0:	2000075c 	.word	0x2000075c
 80024f4:	20000328 	.word	0x20000328
 80024f8:	200007bc 	.word	0x200007bc
 80024fc:	200007c0 	.word	0x200007c0
 8002500:	2000032c 	.word	0x2000032c
 8002504:	08011750 	.word	0x08011750
 8002508:	200003dc 	.word	0x200003dc

0800250c <check_it>:
    char adc[32];
    sprintf(adc, "ADC VALUE: %d\r\n", adc_value);
    HAL_UART_Transmit(&huart1, (uint8_t*)adc, strlen(adc), HAL_MAX_DELAY);
}

void check_it(TIM_HandleTypeDef *htimx) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b094      	sub	sp, #80	@ 0x50
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    char *timer_name = "UNKNOWN";
 8002514:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <check_it+0x7c>)
 8002516:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (htimx->Instance == TIM1) timer_name = "TIM1";
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1b      	ldr	r2, [pc, #108]	@ (800258c <check_it+0x80>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d102      	bne.n	8002528 <check_it+0x1c>
 8002522:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <check_it+0x84>)
 8002524:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002526:	e016      	b.n	8002556 <check_it+0x4a>
    else if (htimx->Instance == TIM2) timer_name = "TIM2";
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002530:	d102      	bne.n	8002538 <check_it+0x2c>
 8002532:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <check_it+0x88>)
 8002534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002536:	e00e      	b.n	8002556 <check_it+0x4a>
    else if (htimx->Instance == TIM4) timer_name = "TIM4";
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a16      	ldr	r2, [pc, #88]	@ (8002598 <check_it+0x8c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d102      	bne.n	8002548 <check_it+0x3c>
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <check_it+0x90>)
 8002544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002546:	e006      	b.n	8002556 <check_it+0x4a>
    else if (htimx->Instance == TIM8) timer_name = "TIM8";
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a14      	ldr	r2, [pc, #80]	@ (80025a0 <check_it+0x94>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <check_it+0x4a>
 8002552:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <check_it+0x98>)
 8002554:	64fb      	str	r3, [r7, #76]	@ 0x4c

    char msg[64];
    snprintf(msg, sizeof(msg), ">> [INTERRUPT] Callback from %s\r\n", timer_name);
 8002556:	f107 000c 	add.w	r0, r7, #12
 800255a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800255c:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <check_it+0x9c>)
 800255e:	2140      	movs	r1, #64	@ 0x40
 8002560:	f00c f80e 	bl	800e580 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd fe81 	bl	8000270 <strlen>
 800256e:	4603      	mov	r3, r0
 8002570:	b29a      	uxth	r2, r3
 8002572:	f107 010c 	add.w	r1, r7, #12
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	480c      	ldr	r0, [pc, #48]	@ (80025ac <check_it+0xa0>)
 800257c:	f00a fac2 	bl	800cb04 <HAL_UART_Transmit>
}
 8002580:	bf00      	nop
 8002582:	3750      	adds	r7, #80	@ 0x50
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	080117d8 	.word	0x080117d8
 800258c:	40010000 	.word	0x40010000
 8002590:	080117e0 	.word	0x080117e0
 8002594:	080117e8 	.word	0x080117e8
 8002598:	40000800 	.word	0x40000800
 800259c:	080117f0 	.word	0x080117f0
 80025a0:	40010400 	.word	0x40010400
 80025a4:	080117f8 	.word	0x080117f8
 80025a8:	08011800 	.word	0x08011800
 80025ac:	200006d8 	.word	0x200006d8

080025b0 <Process_Ultrasonic_And_Control_Relay>:
#include "led_control.h"

extern CAN_HandleTypeDef hcan1;

void Process_Ultrasonic_And_Control_Relay(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
    static uint8_t initialized = 0;

    uint32_t Truoc2 = US01_GetDistance(0);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f002 fe3a 	bl	8005230 <US01_GetDistance>
 80025bc:	61b8      	str	r0, [r7, #24]
    uint32_t Truoc1 = US01_GetDistance(2);
 80025be:	2002      	movs	r0, #2
 80025c0:	f002 fe36 	bl	8005230 <US01_GetDistance>
 80025c4:	6178      	str	r0, [r7, #20]
    uint32_t Trai   = US01_GetDistance(1);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f002 fe32 	bl	8005230 <US01_GetDistance>
 80025cc:	6138      	str	r0, [r7, #16]
    uint32_t Phai   = US01_GetDistance(3);
 80025ce:	2003      	movs	r0, #3
 80025d0:	f002 fe2e 	bl	8005230 <US01_GetDistance>
 80025d4:	60f8      	str	r0, [r7, #12]

    if (!initialized) {
 80025d6:	4b5d      	ldr	r3, [pc, #372]	@ (800274c <Process_Ultrasonic_And_Control_Relay+0x19c>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <Process_Ultrasonic_And_Control_Relay+0x4a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // Đỏ OFF
 80025de:	2200      	movs	r2, #0
 80025e0:	2104      	movs	r1, #4
 80025e2:	485b      	ldr	r0, [pc, #364]	@ (8002750 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80025e4:	f005 faea 	bl	8007bbc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Xanh ON
 80025e8:	2201      	movs	r2, #1
 80025ea:	2108      	movs	r1, #8
 80025ec:	4858      	ldr	r0, [pc, #352]	@ (8002750 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80025ee:	f005 fae5 	bl	8007bbc <HAL_GPIO_WritePin>
        initialized = 1;
 80025f2:	4b56      	ldr	r3, [pc, #344]	@ (800274c <Process_Ultrasonic_And_Control_Relay+0x19c>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e0a4      	b.n	8002744 <Process_Ultrasonic_And_Control_Relay+0x194>
        return;
    }

    // Kiểm tra các vùng
    bool Truoc_OK  = (Truoc1 < 30 && Truoc1 != 0) || (Truoc2 < 30 && Truoc2 != 0);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b1d      	cmp	r3, #29
 80025fe:	d802      	bhi.n	8002606 <Process_Ultrasonic_And_Control_Relay+0x56>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <Process_Ultrasonic_And_Control_Relay+0x62>
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b1d      	cmp	r3, #29
 800260a:	d804      	bhi.n	8002616 <Process_Ultrasonic_And_Control_Relay+0x66>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <Process_Ultrasonic_And_Control_Relay+0x66>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <Process_Ultrasonic_And_Control_Relay+0x68>
 8002616:	2300      	movs	r3, #0
 8002618:	72fb      	strb	r3, [r7, #11]
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	72fb      	strb	r3, [r7, #11]
    bool HaiBen_OK = (Trai   < 25 && Trai   != 0) || (Phai   < 25 && Phai   != 0);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b18      	cmp	r3, #24
 8002626:	d802      	bhi.n	800262e <Process_Ultrasonic_And_Control_Relay+0x7e>
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <Process_Ultrasonic_And_Control_Relay+0x8a>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b18      	cmp	r3, #24
 8002632:	d804      	bhi.n	800263e <Process_Ultrasonic_And_Control_Relay+0x8e>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <Process_Ultrasonic_And_Control_Relay+0x8e>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <Process_Ultrasonic_And_Control_Relay+0x90>
 800263e:	2300      	movs	r3, #0
 8002640:	72bb      	strb	r3, [r7, #10]
 8002642:	7abb      	ldrb	r3, [r7, #10]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	72bb      	strb	r3, [r7, #10]
    bool BaBen_OK  = Truoc_OK && HaiBen_OK;
 800264a:	7afb      	ldrb	r3, [r7, #11]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <Process_Ultrasonic_And_Control_Relay+0xaa>
 8002650:	7abb      	ldrb	r3, [r7, #10]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <Process_Ultrasonic_And_Control_Relay+0xaa>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <Process_Ultrasonic_And_Control_Relay+0xac>
 800265a:	2300      	movs	r3, #0
 800265c:	727b      	strb	r3, [r7, #9]
 800265e:	7a7b      	ldrb	r3, [r7, #9]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	727b      	strb	r3, [r7, #9]
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
                     (Truoc2 < 25 && Truoc2 != 0) &&
                     (Trai   < 20 && Trai   != 0) &&
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b18      	cmp	r3, #24
 800266a:	d816      	bhi.n	800269a <Process_Ultrasonic_And_Control_Relay+0xea>
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d013      	beq.n	800269a <Process_Ultrasonic_And_Control_Relay+0xea>
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b18      	cmp	r3, #24
 8002676:	d810      	bhi.n	800269a <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Truoc2 < 25 && Truoc2 != 0) &&
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <Process_Ultrasonic_And_Control_Relay+0xea>
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b13      	cmp	r3, #19
 8002682:	d80a      	bhi.n	800269a <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Trai   < 20 && Trai   != 0) &&
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <Process_Ultrasonic_And_Control_Relay+0xea>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b13      	cmp	r3, #19
 800268e:	d804      	bhi.n	800269a <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Phai   < 20 && Phai   != 0);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <Process_Ultrasonic_And_Control_Relay+0xea>
                     (Trai   < 20 && Trai   != 0) &&
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <Process_Ultrasonic_And_Control_Relay+0xec>
 800269a:	2300      	movs	r3, #0
    bool TatCa_OK  = (Truoc1 < 25 && Truoc1 != 0) &&
 800269c:	723b      	strb	r3, [r7, #8]
 800269e:	7a3b      	ldrb	r3, [r7, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	723b      	strb	r3, [r7, #8]

    uint8_t signal = 0x00;
 80026a6:	2300      	movs	r3, #0
 80026a8:	77fb      	strb	r3, [r7, #31]

    // Xác định giá trị gửi
    if (TatCa_OK) {
 80026aa:	7a3b      	ldrb	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <Process_Ultrasonic_And_Control_Relay+0x106>
        signal = 0x03;
 80026b0:	2303      	movs	r3, #3
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	e00d      	b.n	80026d2 <Process_Ultrasonic_And_Control_Relay+0x122>
    } else if (BaBen_OK) {
 80026b6:	7a7b      	ldrb	r3, [r7, #9]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <Process_Ultrasonic_And_Control_Relay+0x112>
        signal = 0x02;
 80026bc:	2302      	movs	r3, #2
 80026be:	77fb      	strb	r3, [r7, #31]
 80026c0:	e007      	b.n	80026d2 <Process_Ultrasonic_And_Control_Relay+0x122>
    } else if (Truoc_OK) {
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <Process_Ultrasonic_And_Control_Relay+0x11e>
        signal = 0x01;
 80026c8:	2301      	movs	r3, #1
 80026ca:	77fb      	strb	r3, [r7, #31]
 80026cc:	e001      	b.n	80026d2 <Process_Ultrasonic_And_Control_Relay+0x122>
    } else {
        signal = 0x00; // Ra khỏi 3 trường hợp trên
 80026ce:	2300      	movs	r3, #0
 80026d0:	77fb      	strb	r3, [r7, #31]
    }

    // Điều khiển đèn
    if (TatCa_OK || BaBen_OK || Truoc_OK || HaiBen_OK) {
 80026d2:	7a3b      	ldrb	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d108      	bne.n	80026ea <Process_Ultrasonic_And_Control_Relay+0x13a>
 80026d8:	7a7b      	ldrb	r3, [r7, #9]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <Process_Ultrasonic_And_Control_Relay+0x13a>
 80026de:	7afb      	ldrb	r3, [r7, #11]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <Process_Ultrasonic_And_Control_Relay+0x13a>
 80026e4:	7abb      	ldrb	r3, [r7, #10]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <Process_Ultrasonic_And_Control_Relay+0x150>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Đỏ ON
 80026ea:	2201      	movs	r2, #1
 80026ec:	2104      	movs	r1, #4
 80026ee:	4818      	ldr	r0, [pc, #96]	@ (8002750 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80026f0:	f005 fa64 	bl	8007bbc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // Xanh OFF
 80026f4:	2200      	movs	r2, #0
 80026f6:	2108      	movs	r1, #8
 80026f8:	4815      	ldr	r0, [pc, #84]	@ (8002750 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 80026fa:	f005 fa5f 	bl	8007bbc <HAL_GPIO_WritePin>
 80026fe:	e009      	b.n	8002714 <Process_Ultrasonic_And_Control_Relay+0x164>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // Đỏ OFF
 8002700:	2200      	movs	r2, #0
 8002702:	2104      	movs	r1, #4
 8002704:	4812      	ldr	r0, [pc, #72]	@ (8002750 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 8002706:	f005 fa59 	bl	8007bbc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Xanh ON
 800270a:	2201      	movs	r2, #1
 800270c:	2108      	movs	r1, #8
 800270e:	4810      	ldr	r0, [pc, #64]	@ (8002750 <Process_Ultrasonic_And_Control_Relay+0x1a0>)
 8002710:	f005 fa54 	bl	8007bbc <HAL_GPIO_WritePin>
    }

    // Luôn gửi giá trị hiện tại nhưng không để LED bị treo nếu CAN lỗi
    uint8_t data[8] = {0};
 8002714:	463b      	mov	r3, r7
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
    data[0] = signal;
 800271c:	7ffb      	ldrb	r3, [r7, #31]
 800271e:	703b      	strb	r3, [r7, #0]
    if (HAL_CAN_GetState(&hcan1) == HAL_CAN_STATE_READY ||
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <Process_Ultrasonic_And_Control_Relay+0x1a4>)
 8002722:	f004 faa0 	bl	8006c66 <HAL_CAN_GetState>
 8002726:	4603      	mov	r3, r0
 8002728:	2b01      	cmp	r3, #1
 800272a:	d005      	beq.n	8002738 <Process_Ultrasonic_And_Control_Relay+0x188>
        HAL_CAN_GetState(&hcan1) == HAL_CAN_STATE_LISTENING)
 800272c:	4809      	ldr	r0, [pc, #36]	@ (8002754 <Process_Ultrasonic_And_Control_Relay+0x1a4>)
 800272e:	f004 fa9a 	bl	8006c66 <HAL_CAN_GetState>
 8002732:	4603      	mov	r3, r0
    if (HAL_CAN_GetState(&hcan1) == HAL_CAN_STATE_READY ||
 8002734:	2b02      	cmp	r3, #2
 8002736:	d105      	bne.n	8002744 <Process_Ultrasonic_And_Control_Relay+0x194>
    {
        if (CAN_SendTopicData(TOPIC_ID_SENSOR, data, 8) != HAL_OK) {
 8002738:	463b      	mov	r3, r7
 800273a:	2208      	movs	r2, #8
 800273c:	4619      	mov	r1, r3
 800273e:	2024      	movs	r0, #36	@ 0x24
 8002740:	f7ff fdc6 	bl	80022d0 <CAN_SendTopicData>
            // Bỏ qua lỗi CAN, LED vẫn hoạt động
        }
    }

}
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000032d 	.word	0x2000032d
 8002750:	40020000 	.word	0x40020000
 8002754:	200003dc 	.word	0x200003dc

08002758 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8002762:	4a38      	ldr	r2, [pc, #224]	@ (8002844 <HD44780_Init+0xec>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002768:	4b37      	ldr	r3, [pc, #220]	@ (8002848 <HD44780_Init+0xf0>)
 800276a:	2208      	movs	r2, #8
 800276c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800276e:	4b37      	ldr	r3, [pc, #220]	@ (800284c <HD44780_Init+0xf4>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8002774:	4b33      	ldr	r3, [pc, #204]	@ (8002844 <HD44780_Init+0xec>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d907      	bls.n	800278c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800277c:	4b33      	ldr	r3, [pc, #204]	@ (800284c <HD44780_Init+0xf4>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b31      	ldr	r3, [pc, #196]	@ (800284c <HD44780_Init+0xf4>)
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e006      	b.n	800279a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800278c:	4b2f      	ldr	r3, [pc, #188]	@ (800284c <HD44780_Init+0xf4>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b2d      	ldr	r3, [pc, #180]	@ (800284c <HD44780_Init+0xf4>)
 8002798:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800279a:	f000 f94b 	bl	8002a34 <DelayInit>
  HAL_Delay(50);
 800279e:	2032      	movs	r0, #50	@ 0x32
 80027a0:	f002 fe80 	bl	80054a4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80027a4:	4b28      	ldr	r3, [pc, #160]	@ (8002848 <HD44780_Init+0xf0>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f909 	bl	80029c0 <ExpanderWrite>
  HAL_Delay(1000);
 80027ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027b2:	f002 fe77 	bl	80054a4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80027b6:	2030      	movs	r0, #48	@ 0x30
 80027b8:	f000 f8f1 	bl	800299e <Write4Bits>
  DelayUS(4500);
 80027bc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80027c0:	f000 f962 	bl	8002a88 <DelayUS>

  Write4Bits(0x03 << 4);
 80027c4:	2030      	movs	r0, #48	@ 0x30
 80027c6:	f000 f8ea 	bl	800299e <Write4Bits>
  DelayUS(4500);
 80027ca:	f241 1094 	movw	r0, #4500	@ 0x1194
 80027ce:	f000 f95b 	bl	8002a88 <DelayUS>

  Write4Bits(0x03 << 4);
 80027d2:	2030      	movs	r0, #48	@ 0x30
 80027d4:	f000 f8e3 	bl	800299e <Write4Bits>
  DelayUS(4500);
 80027d8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80027dc:	f000 f954 	bl	8002a88 <DelayUS>

  Write4Bits(0x02 << 4);
 80027e0:	2020      	movs	r0, #32
 80027e2:	f000 f8dc 	bl	800299e <Write4Bits>
  DelayUS(100);
 80027e6:	2064      	movs	r0, #100	@ 0x64
 80027e8:	f000 f94e 	bl	8002a88 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80027ec:	4b17      	ldr	r3, [pc, #92]	@ (800284c <HD44780_Init+0xf4>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	f043 0320 	orr.w	r3, r3, #32
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f894 	bl	8002924 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80027fc:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <HD44780_Init+0xf8>)
 80027fe:	2204      	movs	r2, #4
 8002800:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8002802:	f000 f843 	bl	800288c <HD44780_Display>
  HD44780_Clear();
 8002806:	f000 f82b 	bl	8002860 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HD44780_Init+0xfc>)
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002810:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <HD44780_Init+0xfc>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f882 	bl	8002924 <SendCommand>
  DelayUS(4500);
 8002820:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002824:	f000 f930 	bl	8002a88 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8002828:	490b      	ldr	r1, [pc, #44]	@ (8002858 <HD44780_Init+0x100>)
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f844 	bl	80028b8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8002830:	490a      	ldr	r1, [pc, #40]	@ (800285c <HD44780_Init+0x104>)
 8002832:	2001      	movs	r0, #1
 8002834:	f000 f840 	bl	80028b8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8002838:	f000 f81d 	bl	8002876 <HD44780_Home>
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000331 	.word	0x20000331
 8002848:	20000332 	.word	0x20000332
 800284c:	2000032e 	.word	0x2000032e
 8002850:	2000032f 	.word	0x2000032f
 8002854:	20000330 	.word	0x20000330
 8002858:	20000000 	.word	0x20000000
 800285c:	20000008 	.word	0x20000008

08002860 <HD44780_Clear>:

void HD44780_Clear()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8002864:	2001      	movs	r0, #1
 8002866:	f000 f85d 	bl	8002924 <SendCommand>
  DelayUS(2000);
 800286a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800286e:	f000 f90b 	bl	8002a88 <DelayUS>
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}

08002876 <HD44780_Home>:

void HD44780_Home()
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800287a:	2002      	movs	r0, #2
 800287c:	f000 f852 	bl	8002924 <SendCommand>
  DelayUS(2000);
 8002880:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002884:	f000 f900 	bl	8002a88 <DelayUS>
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002890:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <HD44780_Display+0x28>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HD44780_Display+0x28>)
 800289c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800289e:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HD44780_Display+0x28>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f83b 	bl	8002924 <SendCommand>
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000032f 	.word	0x2000032f

080028b8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f821 	bl	8002924 <SendCommand>
  for (int i=0; i<8; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e009      	b.n	80028fc <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f825 	bl	8002940 <SendChar>
  for (int i=0; i<8; i++)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3301      	adds	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b07      	cmp	r3, #7
 8002900:	ddf2      	ble.n	80028e8 <HD44780_CreateSpecialChar+0x30>
  }
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <HD44780_Backlight+0x14>)
 8002912:	2208      	movs	r2, #8
 8002914:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8002916:	2000      	movs	r0, #0
 8002918:	f000 f852 	bl	80029c0 <ExpanderWrite>
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000332 	.word	0x20000332

08002924 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f812 	bl	800295c <Send>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <SendChar>:

static void SendChar(uint8_t ch)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f804 	bl	800295c <Send>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	460a      	mov	r2, r1
 8002966:	71fb      	strb	r3, [r7, #7]
 8002968:	4613      	mov	r3, r2
 800296a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f023 030f 	bic.w	r3, r3, #15
 8002972:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	4313      	orrs	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f80b 	bl	800299e <Write4Bits>
  Write4Bits((lownib)|mode);
 8002988:	7bba      	ldrb	r2, [r7, #14]
 800298a:	79bb      	ldrb	r3, [r7, #6]
 800298c:	4313      	orrs	r3, r2
 800298e:	b2db      	uxtb	r3, r3
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f804 	bl	800299e <Write4Bits>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f808 	bl	80029c0 <ExpanderWrite>
  PulseEnable(value);
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f820 	bl	80029f8 <PulseEnable>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <ExpanderWrite+0x30>)
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80029d6:	f107 020f 	add.w	r2, r7, #15
 80029da:	230a      	movs	r3, #10
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2301      	movs	r3, #1
 80029e0:	214e      	movs	r1, #78	@ 0x4e
 80029e2:	4804      	ldr	r0, [pc, #16]	@ (80029f4 <ExpanderWrite+0x34>)
 80029e4:	f005 fa8c 	bl	8007f00 <HAL_I2C_Master_Transmit>
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000332 	.word	0x20000332
 80029f4:	20000434 	.word	0x20000434

080029f8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ffd8 	bl	80029c0 <ExpanderWrite>
  DelayUS(20);
 8002a10:	2014      	movs	r0, #20
 8002a12:	f000 f839 	bl	8002a88 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ffce 	bl	80029c0 <ExpanderWrite>
  DelayUS(20);
 8002a24:	2014      	movs	r0, #20
 8002a26:	f000 f82f 	bl	8002a88 <DelayUS>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <DelayInit>:

static void DelayInit(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <DelayInit+0x4c>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <DelayInit+0x4c>)
 8002a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <DelayInit+0x4c>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <DelayInit+0x4c>)
 8002a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a4e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <DelayInit+0x50>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0b      	ldr	r2, [pc, #44]	@ (8002a84 <DelayInit+0x50>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <DelayInit+0x50>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <DelayInit+0x50>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <DelayInit+0x50>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002a6e:	bf00      	nop
  __ASM volatile ("NOP");
 8002a70:	bf00      	nop
  __ASM volatile ("NOP");
 8002a72:	bf00      	nop
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000edf0 	.word	0xe000edf0
 8002a84:	e0001000 	.word	0xe0001000

08002a88 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002a90:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <DelayUS+0x44>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad0 <DelayUS+0x48>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0c9a      	lsrs	r2, r3, #18
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <DelayUS+0x4c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <DelayUS+0x4c>)
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d8f6      	bhi.n	8002aaa <DelayUS+0x22>
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	200000f0 	.word	0x200000f0
 8002ad0:	431bde83 	.word	0x431bde83
 8002ad4:	e0001000 	.word	0xe0001000

08002ad8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002adc:	f3bf 8f4f 	dsb	sy
}
 8002ae0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ae2:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <__NVIC_SystemReset+0x24>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002aea:	4904      	ldr	r1, [pc, #16]	@ (8002afc <__NVIC_SystemReset+0x24>)
 8002aec:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <__NVIC_SystemReset+0x28>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002af2:	f3bf 8f4f 	dsb	sy
}
 8002af6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <__NVIC_SystemReset+0x20>
 8002afc:	e000ed00 	.word	0xe000ed00
 8002b00:	05fa0004 	.word	0x05fa0004

08002b04 <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t can1_rx_success = 0;   // số gói nhận thành công



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d102      	bne.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x18>
        timer10ms_flag = 1;
 8002b16:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
    }
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40001400 	.word	0x40001400
 8002b2c:	200007c8 	.word	0x200007c8

08002b30 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    static uint32_t idx = 0;
    ADC_SAMPLES[idx++] = HAL_ADC_GetValue(hadc);
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b3a:	681c      	ldr	r4, [r3, #0]
 8002b3c:	1c63      	adds	r3, r4, #1
 8002b3e:	4a10      	ldr	r2, [pc, #64]	@ (8002b80 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f002 ff41 	bl	80059ca <HAL_ADC_GetValue>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b84 <HAL_ADC_ConvCpltCallback+0x54>)
 8002b4c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

    if (idx < NUM_SAMPLES) {
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <HAL_ADC_ConvCpltCallback+0x58>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d203      	bcs.n	8002b64 <HAL_ADC_ConvCpltCallback+0x34>
        HAL_ADC_Start_IT(hadc);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f002 fd09 	bl	8005574 <HAL_ADC_Start_IT>
    } else {
        HAL_ADC_Stop_IT(hadc);
        mq135_done = 1;
        idx = 0;
    }
}
 8002b62:	e008      	b.n	8002b76 <HAL_ADC_ConvCpltCallback+0x46>
        HAL_ADC_Stop_IT(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f002 fde3 	bl	8005730 <HAL_ADC_Stop_IT>
        mq135_done = 1;
 8002b6a:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <HAL_ADC_ConvCpltCallback+0x5c>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
        idx = 0;
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd90      	pop	{r4, r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000177c 	.word	0x2000177c
 8002b84:	200007cc 	.word	0x200007cc
 8002b88:	2000176c 	.word	0x2000176c
 8002b8c:	20001770 	.word	0x20001770

08002b90 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a06      	ldr	r2, [pc, #24]	@ (8002bb8 <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d104      	bne.n	8002bac <HAL_CAN_TxMailbox0CompleteCallback+0x1c>
        can1_tx_success++;
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8002baa:	6013      	str	r3, [r2, #0]
    }
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40006400 	.word	0x40006400
 8002bbc:	20001774 	.word	0x20001774

08002bc0 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a06      	ldr	r2, [pc, #24]	@ (8002be8 <HAL_CAN_TxMailbox1CompleteCallback+0x28>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d104      	bne.n	8002bdc <HAL_CAN_TxMailbox1CompleteCallback+0x1c>
        can1_tx_success++;
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 8002bda:	6013      	str	r3, [r2, #0]
    }
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40006400 	.word	0x40006400
 8002bec:	20001774 	.word	0x20001774

08002bf0 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a06      	ldr	r2, [pc, #24]	@ (8002c18 <HAL_CAN_TxMailbox2CompleteCallback+0x28>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d104      	bne.n	8002c0c <HAL_CAN_TxMailbox2CompleteCallback+0x1c>
        can1_tx_success++;
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 8002c0a:	6013      	str	r3, [r2, #0]
    }
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40006400 	.word	0x40006400
 8002c1c:	20001774 	.word	0x20001774

08002c20 <HAL_CAN_ErrorCallback>:

static uint8_t can_recover_attempts = 0;

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b0ac      	sub	sp, #176	@ 0xb0
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
    uint32_t err = hcan->ErrorCode;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    if (err == HAL_CAN_ERROR_NONE) return;
 8002c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80d9 	beq.w	8002dec <HAL_CAN_ErrorCallback+0x1cc>

    char msg[128];
    sprintf(msg, "⚠️ CAN Error: 0x%08lX\r\n", err);
 8002c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c42:	496c      	ldr	r1, [pc, #432]	@ (8002df4 <HAL_CAN_ErrorCallback+0x1d4>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f00b fcd1 	bl	800e5ec <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fb0e 	bl	8000270 <strlen>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c60:	4865      	ldr	r0, [pc, #404]	@ (8002df8 <HAL_CAN_ErrorCallback+0x1d8>)
 8002c62:	f009 ff4f 	bl	800cb04 <HAL_UART_Transmit>

    // --- Nhóm lỗi nghiêm trọng cần reset CAN ---
    if (err & (HAL_CAN_ERROR_BOF |
 8002c66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c6a:	4b64      	ldr	r3, [pc, #400]	@ (8002dfc <HAL_CAN_ErrorCallback+0x1dc>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d04f      	beq.n	8002d12 <HAL_CAN_ErrorCallback+0xf2>
               HAL_CAN_ERROR_ACK |
               HAL_CAN_ERROR_TX_TERR0 | HAL_CAN_ERROR_TX_TERR1 | HAL_CAN_ERROR_TX_TERR2 |
               HAL_CAN_ERROR_RX_FOV0 | HAL_CAN_ERROR_RX_FOV1))
    {
        can_recover_attempts++;
 8002c72:	4b63      	ldr	r3, [pc, #396]	@ (8002e00 <HAL_CAN_ErrorCallback+0x1e0>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b61      	ldr	r3, [pc, #388]	@ (8002e00 <HAL_CAN_ErrorCallback+0x1e0>)
 8002c7c:	701a      	strb	r2, [r3, #0]

        HAL_CAN_Stop(hcan);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f003 fb2c 	bl	80062dc <HAL_CAN_Stop>
        HAL_CAN_DeInit(hcan);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f003 f9e4 	bl	8006052 <HAL_CAN_DeInit>
        HAL_CAN_Init(hcan);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f003 f8e6 	bl	8005e5c <HAL_CAN_Init>
        HAL_CAN_Start(hcan);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f003 fadf 	bl	8006254 <HAL_CAN_Start>

        HAL_CAN_ConfigFilter(hcan, &canfilterconfig);
 8002c96:	495b      	ldr	r1, [pc, #364]	@ (8002e04 <HAL_CAN_ErrorCallback+0x1e4>)
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f003 f9fd 	bl	8006098 <HAL_CAN_ConfigFilter>
        HAL_CAN_ActivateNotification(hcan,
 8002c9e:	f44f 410f 	mov.w	r1, #36608	@ 0x8f00
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f003 fdb2 	bl	800680c <HAL_CAN_ActivateNotification>
            CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE |
            CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR);

        sprintf(msg, "🔄 CAN recovered, attempt %d\r\n", can_recover_attempts);
 8002ca8:	4b55      	ldr	r3, [pc, #340]	@ (8002e00 <HAL_CAN_ErrorCallback+0x1e0>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb2:	4955      	ldr	r1, [pc, #340]	@ (8002e08 <HAL_CAN_ErrorCallback+0x1e8>)
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f00b fc99 	bl	800e5ec <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fad6 	bl	8000270 <strlen>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	4849      	ldr	r0, [pc, #292]	@ (8002df8 <HAL_CAN_ErrorCallback+0x1d8>)
 8002cd2:	f009 ff17 	bl	800cb04 <HAL_UART_Transmit>

        if (can_recover_attempts >= 5) {
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e00 <HAL_CAN_ErrorCallback+0x1e0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d919      	bls.n	8002d12 <HAL_CAN_ErrorCallback+0xf2>
            char resetmsg[] = "❌ CAN stuck, resetting MCU...\r\n";
 8002cde:	4b4b      	ldr	r3, [pc, #300]	@ (8002e0c <HAL_CAN_ErrorCallback+0x1ec>)
 8002ce0:	f107 0408 	add.w	r4, r7, #8
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cee:	682b      	ldr	r3, [r5, #0]
 8002cf0:	8023      	strh	r3, [r4, #0]
            HAL_UART_Transmit(&huart1, (uint8_t*)resetmsg, strlen(resetmsg), HAL_MAX_DELAY);
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd faba 	bl	8000270 <strlen>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	f107 0108 	add.w	r1, r7, #8
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295
 8002d08:	483b      	ldr	r0, [pc, #236]	@ (8002df8 <HAL_CAN_ErrorCallback+0x1d8>)
 8002d0a:	f009 fefb 	bl	800cb04 <HAL_UART_Transmit>
            NVIC_SystemReset();
 8002d0e:	f7ff fee3 	bl	8002ad8 <__NVIC_SystemReset>
        }
    }

    // --- Các lỗi nhẹ: chỉ log ---
    if (err & HAL_CAN_ERROR_EWG)  printf("CAN Warning Error\r\n");
 8002d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_CAN_ErrorCallback+0x104>
 8002d1e:	483c      	ldr	r0, [pc, #240]	@ (8002e10 <HAL_CAN_ErrorCallback+0x1f0>)
 8002d20:	f00b fc26 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_EPV)  printf("CAN Passive Error\r\n");
 8002d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_CAN_ErrorCallback+0x116>
 8002d30:	4838      	ldr	r0, [pc, #224]	@ (8002e14 <HAL_CAN_ErrorCallback+0x1f4>)
 8002d32:	f00b fc1d 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_STF)  printf("CAN Stuff Error\r\n");
 8002d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_CAN_ErrorCallback+0x128>
 8002d42:	4835      	ldr	r0, [pc, #212]	@ (8002e18 <HAL_CAN_ErrorCallback+0x1f8>)
 8002d44:	f00b fc14 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_FOR)  printf("CAN Form Error\r\n");
 8002d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_CAN_ErrorCallback+0x13a>
 8002d54:	4831      	ldr	r0, [pc, #196]	@ (8002e1c <HAL_CAN_ErrorCallback+0x1fc>)
 8002d56:	f00b fc0b 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_BR)   printf("CAN Bit Recessive Error\r\n");
 8002d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_CAN_ErrorCallback+0x14c>
 8002d66:	482e      	ldr	r0, [pc, #184]	@ (8002e20 <HAL_CAN_ErrorCallback+0x200>)
 8002d68:	f00b fc02 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_BD)   printf("CAN Bit Dominant Error\r\n");
 8002d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_CAN_ErrorCallback+0x15e>
 8002d78:	482a      	ldr	r0, [pc, #168]	@ (8002e24 <HAL_CAN_ErrorCallback+0x204>)
 8002d7a:	f00b fbf9 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_CRC)  printf("CAN CRC Error\r\n");
 8002d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_CAN_ErrorCallback+0x170>
 8002d8a:	4827      	ldr	r0, [pc, #156]	@ (8002e28 <HAL_CAN_ErrorCallback+0x208>)
 8002d8c:	f00b fbf0 	bl	800e570 <puts>

    // --- Timeout & init errors ---
    if (err & HAL_CAN_ERROR_TIMEOUT)        printf("CAN Timeout Error\r\n");
 8002d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_CAN_ErrorCallback+0x182>
 8002d9c:	4823      	ldr	r0, [pc, #140]	@ (8002e2c <HAL_CAN_ErrorCallback+0x20c>)
 8002d9e:	f00b fbe7 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_NOT_INITIALIZED)printf("CAN Not Init Error\r\n");
 8002da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_CAN_ErrorCallback+0x194>
 8002dae:	4820      	ldr	r0, [pc, #128]	@ (8002e30 <HAL_CAN_ErrorCallback+0x210>)
 8002db0:	f00b fbde 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_NOT_READY)      printf("CAN Not Ready Error\r\n");
 8002db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002db8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_CAN_ErrorCallback+0x1a6>
 8002dc0:	481c      	ldr	r0, [pc, #112]	@ (8002e34 <HAL_CAN_ErrorCallback+0x214>)
 8002dc2:	f00b fbd5 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_NOT_STARTED)    printf("CAN Not Started Error\r\n");
 8002dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_CAN_ErrorCallback+0x1b8>
 8002dd2:	4819      	ldr	r0, [pc, #100]	@ (8002e38 <HAL_CAN_ErrorCallback+0x218>)
 8002dd4:	f00b fbcc 	bl	800e570 <puts>
    if (err & HAL_CAN_ERROR_PARAM)          printf("CAN Parameter Error\r\n");
 8002dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_CAN_ErrorCallback+0x1ce>
 8002de4:	4815      	ldr	r0, [pc, #84]	@ (8002e3c <HAL_CAN_ErrorCallback+0x21c>)
 8002de6:	f00b fbc3 	bl	800e570 <puts>
 8002dea:	e000      	b.n	8002dee <HAL_CAN_ErrorCallback+0x1ce>
    if (err == HAL_CAN_ERROR_NONE) return;
 8002dec:	bf00      	nop
}
 8002dee:	37b0      	adds	r7, #176	@ 0xb0
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bdb0      	pop	{r4, r5, r7, pc}
 8002df4:	08011824 	.word	0x08011824
 8002df8:	200006d8 	.word	0x200006d8
 8002dfc:	00015624 	.word	0x00015624
 8002e00:	20001778 	.word	0x20001778
 8002e04:	20000720 	.word	0x20000720
 8002e08:	08011840 	.word	0x08011840
 8002e0c:	08011964 	.word	0x08011964
 8002e10:	08011864 	.word	0x08011864
 8002e14:	08011878 	.word	0x08011878
 8002e18:	0801188c 	.word	0x0801188c
 8002e1c:	080118a0 	.word	0x080118a0
 8002e20:	080118b0 	.word	0x080118b0
 8002e24:	080118cc 	.word	0x080118cc
 8002e28:	080118e4 	.word	0x080118e4
 8002e2c:	080118f4 	.word	0x080118f4
 8002e30:	08011908 	.word	0x08011908
 8002e34:	0801191c 	.word	0x0801191c
 8002e38:	08011934 	.word	0x08011934
 8002e3c:	0801194c 	.word	0x0801194c

08002e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b092      	sub	sp, #72	@ 0x48
 8002e44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e46:	f002 fabb 	bl	80053c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e4a:	f000 f89f 	bl	8002f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e4e:	f000 fd99 	bl	8003984 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e52:	f000 fd77 	bl	8003944 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002e56:	f000 fd4b 	bl	80038f0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002e5a:	f000 fa1f 	bl	800329c <MX_SPI2_Init>
  MX_ADC1_Init();
 8002e5e:	f000 f8ff 	bl	8003060 <MX_ADC1_Init>
  MX_CAN1_Init();
 8002e62:	f000 f94f 	bl	8003104 <MX_CAN1_Init>
  MX_CRC_Init();
 8002e66:	f000 f9d9 	bl	800321c <MX_CRC_Init>
  MX_TIM8_Init();
 8002e6a:	f000 fccd 	bl	8003808 <MX_TIM8_Init>
  MX_CAN2_Init();
 8002e6e:	f000 f99f 	bl	80031b0 <MX_CAN2_Init>
  MX_I2C3_Init();
 8002e72:	f000 f9e7 	bl	8003244 <MX_I2C3_Init>
  MX_TIM1_Init();
 8002e76:	f000 fa47 	bl	8003308 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e7a:	f000 fb09 	bl	8003490 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002e7e:	f000 fbe7 	bl	8003650 <MX_TIM4_Init>
  MX_TIM6_Init();
 8002e82:	f000 fc55 	bl	8003730 <MX_TIM6_Init>
  MX_TIM3_Init();
 8002e86:	f000 fb73 	bl	8003570 <MX_TIM3_Init>
  MX_TIM7_Init();
 8002e8a:	f000 fc87 	bl	800379c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8002e8e:	f7ff f895 	bl	8001fbc <MFRC522_Init>
  BNO055_Init();
 8002e92:	f7fe fcad 	bl	80017f0 <BNO055_Init>
  HD44780_Init(2);       // LCD 2 dòng
 8002e96:	2002      	movs	r0, #2
 8002e98:	f7ff fc5e 	bl	8002758 <HD44780_Init>
  HD44780_Backlight();   // Bật đèn nền
 8002e9c:	f7ff fd36 	bl	800290c <HD44780_Backlight>
  MQ135_Config(&mq135, &hadc1);
 8002ea0:	492e      	ldr	r1, [pc, #184]	@ (8002f5c <main+0x11c>)
 8002ea2:	482f      	ldr	r0, [pc, #188]	@ (8002f60 <main+0x120>)
 8002ea4:	f7fe fe52 	bl	8001b4c <MQ135_Config>
  HAL_CAN_Start(&hcan1);
 8002ea8:	482e      	ldr	r0, [pc, #184]	@ (8002f64 <main+0x124>)
 8002eaa:	f003 f9d3 	bl	8006254 <HAL_CAN_Start>
//  HAL_CAN_Start(&hcan2);
  CAN_DebugStatus();
 8002eae:	f7fe fda7 	bl	8001a00 <CAN_DebugStatus>
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002eb2:	492d      	ldr	r1, [pc, #180]	@ (8002f68 <main+0x128>)
 8002eb4:	482b      	ldr	r0, [pc, #172]	@ (8002f64 <main+0x124>)
 8002eb6:	f003 f8ef 	bl	8006098 <HAL_CAN_ConfigFilter>
//  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
	    // Cấu hình và hiệu chuẩn MQ135
	    MQ135_Config(&mq135, &hadc1);
 8002eba:	4928      	ldr	r1, [pc, #160]	@ (8002f5c <main+0x11c>)
 8002ebc:	4828      	ldr	r0, [pc, #160]	@ (8002f60 <main+0x120>)
 8002ebe:	f7fe fe45 	bl	8001b4c <MQ135_Config>
	    MQ135_CalibrateRo(&mq135, 25.0f, 50.0f);  // không khí sạch giả lập
 8002ec2:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8002f6c <main+0x12c>
 8002ec6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002eca:	4825      	ldr	r0, [pc, #148]	@ (8002f60 <main+0x120>)
 8002ecc:	f7fe ff44 	bl	8001d58 <MQ135_CalibrateRo>
// // Activate the notification
//  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
	    HAL_CAN_ActivateNotification(&hcan1,
 8002ed0:	f44f 410f 	mov.w	r1, #36608	@ 0x8f00
 8002ed4:	4823      	ldr	r0, [pc, #140]	@ (8002f64 <main+0x124>)
 8002ed6:	f003 fc99 	bl	800680c <HAL_CAN_ActivateNotification>
	        CAN_IT_BUSOFF |
	        CAN_IT_LAST_ERROR_CODE |
	        CAN_IT_ERROR);
//  DisplayTopicMenuUART();
//  Send_All_SensorData_CAN();//  checkRFIDAndControlRelay();
	    HAL_TIM_Base_Start_IT(&htim7);
 8002eda:	4825      	ldr	r0, [pc, #148]	@ (8002f70 <main+0x130>)
 8002edc:	f008 fa30 	bl	800b340 <HAL_TIM_Base_Start_IT>
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // PA2 = 0 → Relay đỏ kích → NC ngắt → Đèn đỏ tắt
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	4823      	ldr	r0, [pc, #140]	@ (8002f74 <main+0x134>)
 8002ee6:	f004 fe69 	bl	8007bbc <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // PA3 = 1 → Relay xanh không kích → Đèn xanh sáng
 8002eea:	2201      	movs	r2, #1
 8002eec:	2108      	movs	r1, #8
 8002eee:	4821      	ldr	r0, [pc, #132]	@ (8002f74 <main+0x134>)
 8002ef0:	f004 fe64 	bl	8007bbc <HAL_GPIO_WritePin>
         Send_All_SensorData_CAN();
 8002ef4:	f7ff fa3a 	bl	800236c <Send_All_SensorData_CAN>
         Process_Ultrasonic_And_Control_Relay();
 8002ef8:	f7ff fb5a 	bl	80025b0 <Process_Ultrasonic_And_Control_Relay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
//	  HandleUARTChoice();
	  	Send_All_SensorData_CAN();
 8002efc:	f7ff fa36 	bl	800236c <Send_All_SensorData_CAN>
	    Process_Ultrasonic_And_Control_Relay();
 8002f00:	f7ff fb56 	bl	80025b0 <Process_Ultrasonic_And_Control_Relay>
//	  }

//	        BNO055_SendEulerCAN();


	    if (HAL_GetTick() - last_tick_can_stat >= 1000) {
 8002f04:	f002 fac2 	bl	800548c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <main+0x138>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f14:	d3f2      	bcc.n	8002efc <main+0xbc>
	           char msg[64];
	           snprintf(msg, sizeof(msg), "\r\nCAN TX/s: %lu | RX/s: %lu\r\n", can_tx_count, can_rx_count);
 8002f16:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <main+0x13c>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <main+0x140>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4638      	mov	r0, r7
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	4a17      	ldr	r2, [pc, #92]	@ (8002f84 <main+0x144>)
 8002f26:	2140      	movs	r1, #64	@ 0x40
 8002f28:	f00b fb2a 	bl	800e580 <sniprintf>
	           HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd f99e 	bl	8000270 <strlen>
 8002f34:	4603      	mov	r3, r0
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4639      	mov	r1, r7
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3e:	4812      	ldr	r0, [pc, #72]	@ (8002f88 <main+0x148>)
 8002f40:	f009 fde0 	bl	800cb04 <HAL_UART_Transmit>

	           can_tx_count = 0;
 8002f44:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <main+0x13c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
	           can_rx_count = 0;
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <main+0x140>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
	           last_tick_can_stat = HAL_GetTick();
 8002f50:	f002 fa9c 	bl	800548c <HAL_GetTick>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4a08      	ldr	r2, [pc, #32]	@ (8002f78 <main+0x138>)
 8002f58:	6013      	str	r3, [r2, #0]
	  	Send_All_SensorData_CAN();
 8002f5a:	e7cf      	b.n	8002efc <main+0xbc>
 8002f5c:	20000334 	.word	0x20000334
 8002f60:	2000075c 	.word	0x2000075c
 8002f64:	200003dc 	.word	0x200003dc
 8002f68:	20000720 	.word	0x20000720
 8002f6c:	42480000 	.word	0x42480000
 8002f70:	20000648 	.word	0x20000648
 8002f74:	40020000 	.word	0x40020000
 8002f78:	200007c4 	.word	0x200007c4
 8002f7c:	200007bc 	.word	0x200007bc
 8002f80:	200007c0 	.word	0x200007c0
 8002f84:	08011988 	.word	0x08011988
 8002f88:	200006d8 	.word	0x200006d8

08002f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b094      	sub	sp, #80	@ 0x50
 8002f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f92:	f107 0320 	add.w	r3, r7, #32
 8002f96:	2230      	movs	r2, #48	@ 0x30
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00b fc30 	bl	800e800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	4b28      	ldr	r3, [pc, #160]	@ (8003058 <SystemClock_Config+0xcc>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	4a27      	ldr	r2, [pc, #156]	@ (8003058 <SystemClock_Config+0xcc>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc0:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <SystemClock_Config+0xcc>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	4b22      	ldr	r3, [pc, #136]	@ (800305c <SystemClock_Config+0xd0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a21      	ldr	r2, [pc, #132]	@ (800305c <SystemClock_Config+0xd0>)
 8002fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <SystemClock_Config+0xd0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003000:	23a8      	movs	r3, #168	@ 0xa8
 8003002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003004:	2302      	movs	r3, #2
 8003006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003008:	2304      	movs	r3, #4
 800300a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800300c:	f107 0320 	add.w	r3, r7, #32
 8003010:	4618      	mov	r0, r3
 8003012:	f007 f90f 	bl	800a234 <HAL_RCC_OscConfig>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800301c:	f000 fda2 	bl	8003b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003020:	230f      	movs	r3, #15
 8003022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003024:	2302      	movs	r3, #2
 8003026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800302c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003032:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	2105      	movs	r1, #5
 800303e:	4618      	mov	r0, r3
 8003040:	f007 fb70 	bl	800a724 <HAL_RCC_ClockConfig>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800304a:	f000 fd8b 	bl	8003b64 <Error_Handler>
  }
}
 800304e:	bf00      	nop
 8003050:	3750      	adds	r7, #80	@ 0x50
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000

08003060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003066:	463b      	mov	r3, r7
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003072:	4b21      	ldr	r3, [pc, #132]	@ (80030f8 <MX_ADC1_Init+0x98>)
 8003074:	4a21      	ldr	r2, [pc, #132]	@ (80030fc <MX_ADC1_Init+0x9c>)
 8003076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003078:	4b1f      	ldr	r3, [pc, #124]	@ (80030f8 <MX_ADC1_Init+0x98>)
 800307a:	2200      	movs	r2, #0
 800307c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800307e:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <MX_ADC1_Init+0x98>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003084:	4b1c      	ldr	r3, [pc, #112]	@ (80030f8 <MX_ADC1_Init+0x98>)
 8003086:	2204      	movs	r2, #4
 8003088:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <MX_ADC1_Init+0x98>)
 800308c:	2200      	movs	r2, #0
 800308e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003090:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <MX_ADC1_Init+0x98>)
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003098:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <MX_ADC1_Init+0x98>)
 800309a:	2200      	movs	r2, #0
 800309c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <MX_ADC1_Init+0x98>)
 80030a0:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <MX_ADC1_Init+0xa0>)
 80030a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <MX_ADC1_Init+0x98>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80030aa:	4b13      	ldr	r3, [pc, #76]	@ (80030f8 <MX_ADC1_Init+0x98>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <MX_ADC1_Init+0x98>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <MX_ADC1_Init+0x98>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030be:	480e      	ldr	r0, [pc, #56]	@ (80030f8 <MX_ADC1_Init+0x98>)
 80030c0:	f002 fa14 	bl	80054ec <HAL_ADC_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80030ca:	f000 fd4b 	bl	8003b64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80030d6:	2301      	movs	r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030da:	463b      	mov	r3, r7
 80030dc:	4619      	mov	r1, r3
 80030de:	4806      	ldr	r0, [pc, #24]	@ (80030f8 <MX_ADC1_Init+0x98>)
 80030e0:	f002 fc94 	bl	8005a0c <HAL_ADC_ConfigChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80030ea:	f000 fd3b 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000334 	.word	0x20000334
 80030fc:	40012000 	.word	0x40012000
 8003100:	0f000001 	.word	0x0f000001

08003104 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003108:	4b26      	ldr	r3, [pc, #152]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 800310a:	4a27      	ldr	r2, [pc, #156]	@ (80031a8 <MX_CAN1_Init+0xa4>)
 800310c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800310e:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 8003110:	2203      	movs	r2, #3
 8003112:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003114:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800311a:	4b22      	ldr	r3, [pc, #136]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 800311c:	2200      	movs	r2, #0
 800311e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8003120:	4b20      	ldr	r3, [pc, #128]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 8003122:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8003126:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003128:	4b1e      	ldr	r3, [pc, #120]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 800312a:	2200      	movs	r2, #0
 800312c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800312e:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 8003130:	2200      	movs	r2, #0
 8003132:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003134:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 8003136:	2204      	movs	r2, #4
 8003138:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 800313a:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 800313c:	2204      	movs	r2, #4
 800313e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003140:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 8003142:	2204      	movs	r2, #4
 8003144:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003146:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800314c:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 800314e:	2200      	movs	r2, #0
 8003150:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003152:	4814      	ldr	r0, [pc, #80]	@ (80031a4 <MX_CAN1_Init+0xa0>)
 8003154:	f002 fe82 	bl	8005e5c <HAL_CAN_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800315e:	f000 fd01 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8003162:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <MX_CAN1_Init+0xa8>)
 8003164:	2201      	movs	r2, #1
 8003166:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 14;  // hoặc bank khác chưa dùng
 8003168:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <MX_CAN1_Init+0xa8>)
 800316a:	220e      	movs	r2, #14
 800316c:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800316e:	4b0f      	ldr	r3, [pc, #60]	@ (80031ac <MX_CAN1_Init+0xa8>)
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x0000;       // 0x100 << 5 = 0x0800
 8003174:	4b0d      	ldr	r3, [pc, #52]	@ (80031ac <MX_CAN1_Init+0xa8>)
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;            // Không cần dùng
 800317a:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <MX_CAN1_Init+0xa8>)
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;   // 0x7FF << 5 = 0xFFE0
 8003180:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <MX_CAN1_Init+0xa8>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8003186:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <MX_CAN1_Init+0xa8>)
 8003188:	2200      	movs	r2, #0
 800318a:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800318c:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <MX_CAN1_Init+0xa8>)
 800318e:	2200      	movs	r2, #0
 8003190:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <MX_CAN1_Init+0xa8>)
 8003194:	2201      	movs	r2, #1
 8003196:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank =0;
 8003198:	4b04      	ldr	r3, [pc, #16]	@ (80031ac <MX_CAN1_Init+0xa8>)
 800319a:	2200      	movs	r2, #0
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END CAN1_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200003dc 	.word	0x200003dc
 80031a8:	40006400 	.word	0x40006400
 80031ac:	20000720 	.word	0x20000720

080031b0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80031b4:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031b6:	4a18      	ldr	r2, [pc, #96]	@ (8003218 <MX_CAN2_Init+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80031ba:	4b16      	ldr	r3, [pc, #88]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031bc:	2203      	movs	r2, #3
 80031be:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80031c0:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80031c6:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031ce:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80031d2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = ENABLE;
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031dc:	2204      	movs	r2, #4
 80031de:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031e2:	2204      	movs	r2, #4
 80031e4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031e8:	2204      	movs	r2, #4
 80031ea:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031ee:	2204      	movs	r2, #4
 80031f0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80031f2:	4b08      	ldr	r3, [pc, #32]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <MX_CAN2_Init+0x64>)
 80031fa:	2204      	movs	r2, #4
 80031fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80031fe:	4805      	ldr	r0, [pc, #20]	@ (8003214 <MX_CAN2_Init+0x64>)
 8003200:	f002 fe2c 	bl	8005e5c <HAL_CAN_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800320a:	f000 fcab 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000404 	.word	0x20000404
 8003218:	40006800 	.word	0x40006800

0800321c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <MX_CRC_Init+0x20>)
 8003222:	4a07      	ldr	r2, [pc, #28]	@ (8003240 <MX_CRC_Init+0x24>)
 8003224:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003226:	4805      	ldr	r0, [pc, #20]	@ (800323c <MX_CRC_Init+0x20>)
 8003228:	f003 fe89 	bl	8006f3e <HAL_CRC_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003232:	f000 fc97 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	2000042c 	.word	0x2000042c
 8003240:	40023000 	.word	0x40023000

08003244 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003248:	4b12      	ldr	r3, [pc, #72]	@ (8003294 <MX_I2C3_Init+0x50>)
 800324a:	4a13      	ldr	r2, [pc, #76]	@ (8003298 <MX_I2C3_Init+0x54>)
 800324c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 150;
 800324e:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <MX_I2C3_Init+0x50>)
 8003250:	2296      	movs	r2, #150	@ 0x96
 8003252:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003254:	4b0f      	ldr	r3, [pc, #60]	@ (8003294 <MX_I2C3_Init+0x50>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800325a:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <MX_I2C3_Init+0x50>)
 800325c:	2200      	movs	r2, #0
 800325e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <MX_I2C3_Init+0x50>)
 8003262:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003266:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003268:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <MX_I2C3_Init+0x50>)
 800326a:	2200      	movs	r2, #0
 800326c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <MX_I2C3_Init+0x50>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003274:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <MX_I2C3_Init+0x50>)
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <MX_I2C3_Init+0x50>)
 800327c:	2200      	movs	r2, #0
 800327e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003280:	4804      	ldr	r0, [pc, #16]	@ (8003294 <MX_I2C3_Init+0x50>)
 8003282:	f004 fcb5 	bl	8007bf0 <HAL_I2C_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800328c:	f000 fc6a 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000434 	.word	0x20000434
 8003298:	40005c00 	.word	0x40005c00

0800329c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80032a0:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032a2:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <MX_SPI2_Init+0x68>)
 80032a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032a6:	4b16      	ldr	r3, [pc, #88]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032ae:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032b4:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032ba:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80032ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032d0:	2238      	movs	r2, #56	@ 0x38
 80032d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032dc:	2200      	movs	r2, #0
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e0:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032e8:	220a      	movs	r2, #10
 80032ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032ec:	4804      	ldr	r0, [pc, #16]	@ (8003300 <MX_SPI2_Init+0x64>)
 80032ee:	f007 fc39 	bl	800ab64 <HAL_SPI_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80032f8:	f000 fc34 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000488 	.word	0x20000488
 8003304:	40003800 	.word	0x40003800

08003308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b09a      	sub	sp, #104	@ 0x68
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800330e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003326:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
 8003344:	615a      	str	r2, [r3, #20]
 8003346:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	2220      	movs	r2, #32
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f00b fa56 	bl	800e800 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003354:	4b4c      	ldr	r3, [pc, #304]	@ (8003488 <MX_TIM1_Init+0x180>)
 8003356:	4a4d      	ldr	r2, [pc, #308]	@ (800348c <MX_TIM1_Init+0x184>)
 8003358:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800335a:	4b4b      	ldr	r3, [pc, #300]	@ (8003488 <MX_TIM1_Init+0x180>)
 800335c:	2253      	movs	r2, #83	@ 0x53
 800335e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003360:	4b49      	ldr	r3, [pc, #292]	@ (8003488 <MX_TIM1_Init+0x180>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8003366:	4b48      	ldr	r3, [pc, #288]	@ (8003488 <MX_TIM1_Init+0x180>)
 8003368:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800336c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800336e:	4b46      	ldr	r3, [pc, #280]	@ (8003488 <MX_TIM1_Init+0x180>)
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003374:	4b44      	ldr	r3, [pc, #272]	@ (8003488 <MX_TIM1_Init+0x180>)
 8003376:	2200      	movs	r2, #0
 8003378:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337a:	4b43      	ldr	r3, [pc, #268]	@ (8003488 <MX_TIM1_Init+0x180>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003380:	4841      	ldr	r0, [pc, #260]	@ (8003488 <MX_TIM1_Init+0x180>)
 8003382:	f007 fefd 	bl	800b180 <HAL_TIM_Base_Init>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800338c:	f000 fbea 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003394:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003396:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800339a:	4619      	mov	r1, r3
 800339c:	483a      	ldr	r0, [pc, #232]	@ (8003488 <MX_TIM1_Init+0x180>)
 800339e:	f008 fd15 	bl	800bdcc <HAL_TIM_ConfigClockSource>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80033a8:	f000 fbdc 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80033ac:	4836      	ldr	r0, [pc, #216]	@ (8003488 <MX_TIM1_Init+0x180>)
 80033ae:	f008 f890 	bl	800b4d2 <HAL_TIM_IC_Init>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80033b8:	f000 fbd4 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033bc:	4832      	ldr	r0, [pc, #200]	@ (8003488 <MX_TIM1_Init+0x180>)
 80033be:	f008 f82f 	bl	800b420 <HAL_TIM_PWM_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80033c8:	f000 fbcc 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80033d8:	4619      	mov	r1, r3
 80033da:	482b      	ldr	r0, [pc, #172]	@ (8003488 <MX_TIM1_Init+0x180>)
 80033dc:	f009 fa60 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80033e6:	f000 fbbd 	bl	8003b64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033ea:	2300      	movs	r3, #0
 80033ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80033ee:	2301      	movs	r3, #1
 80033f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigIC.ICFilter = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033fe:	2200      	movs	r2, #0
 8003400:	4619      	mov	r1, r3
 8003402:	4821      	ldr	r0, [pc, #132]	@ (8003488 <MX_TIM1_Init+0x180>)
 8003404:	f008 fb84 	bl	800bb10 <HAL_TIM_IC_ConfigChannel>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800340e:	f000 fba9 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003412:	2360      	movs	r3, #96	@ 0x60
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800341e:	2300      	movs	r3, #0
 8003420:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800342e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003432:	2204      	movs	r2, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4814      	ldr	r0, [pc, #80]	@ (8003488 <MX_TIM1_Init+0x180>)
 8003438:	f008 fc06 	bl	800bc48 <HAL_TIM_PWM_ConfigChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8003442:	f000 fb8f 	bl	8003b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800345a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800345e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	4619      	mov	r1, r3
 8003468:	4807      	ldr	r0, [pc, #28]	@ (8003488 <MX_TIM1_Init+0x180>)
 800346a:	f009 fa95 	bl	800c998 <HAL_TIMEx_ConfigBreakDeadTime>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003474:	f000 fb76 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003478:	4803      	ldr	r0, [pc, #12]	@ (8003488 <MX_TIM1_Init+0x180>)
 800347a:	f001 fa07 	bl	800488c <HAL_TIM_MspPostInit>

}
 800347e:	bf00      	nop
 8003480:	3768      	adds	r7, #104	@ 0x68
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200004e0 	.word	0x200004e0
 800348c:	40010000 	.word	0x40010000

08003490 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	@ 0x28
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003496:	f107 0318 	add.w	r3, r7, #24
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a4:	f107 0310 	add.w	r3, r7, #16
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80034ae:	463b      	mov	r3, r7
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034ba:	4b2c      	ldr	r3, [pc, #176]	@ (800356c <MX_TIM2_Init+0xdc>)
 80034bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80034c2:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <MX_TIM2_Init+0xdc>)
 80034c4:	2253      	movs	r2, #83	@ 0x53
 80034c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c8:	4b28      	ldr	r3, [pc, #160]	@ (800356c <MX_TIM2_Init+0xdc>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 80034ce:	4b27      	ldr	r3, [pc, #156]	@ (800356c <MX_TIM2_Init+0xdc>)
 80034d0:	f06f 0201 	mvn.w	r2, #1
 80034d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d6:	4b25      	ldr	r3, [pc, #148]	@ (800356c <MX_TIM2_Init+0xdc>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034dc:	4b23      	ldr	r3, [pc, #140]	@ (800356c <MX_TIM2_Init+0xdc>)
 80034de:	2200      	movs	r2, #0
 80034e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034e2:	4822      	ldr	r0, [pc, #136]	@ (800356c <MX_TIM2_Init+0xdc>)
 80034e4:	f007 fe4c 	bl	800b180 <HAL_TIM_Base_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80034ee:	f000 fb39 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034f6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034f8:	f107 0318 	add.w	r3, r7, #24
 80034fc:	4619      	mov	r1, r3
 80034fe:	481b      	ldr	r0, [pc, #108]	@ (800356c <MX_TIM2_Init+0xdc>)
 8003500:	f008 fc64 	bl	800bdcc <HAL_TIM_ConfigClockSource>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800350a:	f000 fb2b 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800350e:	4817      	ldr	r0, [pc, #92]	@ (800356c <MX_TIM2_Init+0xdc>)
 8003510:	f007 ffdf 	bl	800b4d2 <HAL_TIM_IC_Init>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800351a:	f000 fb23 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4619      	mov	r1, r3
 800352c:	480f      	ldr	r0, [pc, #60]	@ (800356c <MX_TIM2_Init+0xdc>)
 800352e:	f009 f9b7 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8003538:	f000 fb14 	bl	8003b64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800353c:	2302      	movs	r3, #2
 800353e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003540:	2301      	movs	r3, #1
 8003542:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800354c:	463b      	mov	r3, r7
 800354e:	2200      	movs	r2, #0
 8003550:	4619      	mov	r1, r3
 8003552:	4806      	ldr	r0, [pc, #24]	@ (800356c <MX_TIM2_Init+0xdc>)
 8003554:	f008 fadc 	bl	800bb10 <HAL_TIM_IC_ConfigChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800355e:	f000 fb01 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003562:	bf00      	nop
 8003564:	3728      	adds	r7, #40	@ 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000528 	.word	0x20000528

08003570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	@ 0x28
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003576:	f107 0318 	add.w	r3, r7, #24
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800358e:	463b      	mov	r3, r7
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800359a:	4b2b      	ldr	r3, [pc, #172]	@ (8003648 <MX_TIM3_Init+0xd8>)
 800359c:	4a2b      	ldr	r2, [pc, #172]	@ (800364c <MX_TIM3_Init+0xdc>)
 800359e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80035a0:	4b29      	ldr	r3, [pc, #164]	@ (8003648 <MX_TIM3_Init+0xd8>)
 80035a2:	2253      	movs	r2, #83	@ 0x53
 80035a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a6:	4b28      	ldr	r3, [pc, #160]	@ (8003648 <MX_TIM3_Init+0xd8>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80035ac:	4b26      	ldr	r3, [pc, #152]	@ (8003648 <MX_TIM3_Init+0xd8>)
 80035ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80035b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b4:	4b24      	ldr	r3, [pc, #144]	@ (8003648 <MX_TIM3_Init+0xd8>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ba:	4b23      	ldr	r3, [pc, #140]	@ (8003648 <MX_TIM3_Init+0xd8>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035c0:	4821      	ldr	r0, [pc, #132]	@ (8003648 <MX_TIM3_Init+0xd8>)
 80035c2:	f007 fddd 	bl	800b180 <HAL_TIM_Base_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80035cc:	f000 faca 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035d4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035d6:	f107 0318 	add.w	r3, r7, #24
 80035da:	4619      	mov	r1, r3
 80035dc:	481a      	ldr	r0, [pc, #104]	@ (8003648 <MX_TIM3_Init+0xd8>)
 80035de:	f008 fbf5 	bl	800bdcc <HAL_TIM_ConfigClockSource>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80035e8:	f000 fabc 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80035ec:	4816      	ldr	r0, [pc, #88]	@ (8003648 <MX_TIM3_Init+0xd8>)
 80035ee:	f007 ff70 	bl	800b4d2 <HAL_TIM_IC_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80035f8:	f000 fab4 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	4619      	mov	r1, r3
 800360a:	480f      	ldr	r0, [pc, #60]	@ (8003648 <MX_TIM3_Init+0xd8>)
 800360c:	f009 f948 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003616:	f000 faa5 	bl	8003b64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800361e:	2301      	movs	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800362a:	463b      	mov	r3, r7
 800362c:	2200      	movs	r2, #0
 800362e:	4619      	mov	r1, r3
 8003630:	4805      	ldr	r0, [pc, #20]	@ (8003648 <MX_TIM3_Init+0xd8>)
 8003632:	f008 fa6d 	bl	800bb10 <HAL_TIM_IC_ConfigChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800363c:	f000 fa92 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	@ 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000570 	.word	0x20000570
 800364c:	40000400 	.word	0x40000400

08003650 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	@ 0x28
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003656:	f107 0318 	add.w	r3, r7, #24
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003664:	f107 0310 	add.w	r3, r7, #16
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800366e:	463b      	mov	r3, r7
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800367a:	4b2b      	ldr	r3, [pc, #172]	@ (8003728 <MX_TIM4_Init+0xd8>)
 800367c:	4a2b      	ldr	r2, [pc, #172]	@ (800372c <MX_TIM4_Init+0xdc>)
 800367e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8003680:	4b29      	ldr	r3, [pc, #164]	@ (8003728 <MX_TIM4_Init+0xd8>)
 8003682:	2253      	movs	r2, #83	@ 0x53
 8003684:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003686:	4b28      	ldr	r3, [pc, #160]	@ (8003728 <MX_TIM4_Init+0xd8>)
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 800368c:	4b26      	ldr	r3, [pc, #152]	@ (8003728 <MX_TIM4_Init+0xd8>)
 800368e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003692:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003694:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <MX_TIM4_Init+0xd8>)
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369a:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <MX_TIM4_Init+0xd8>)
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80036a0:	4821      	ldr	r0, [pc, #132]	@ (8003728 <MX_TIM4_Init+0xd8>)
 80036a2:	f007 fd6d 	bl	800b180 <HAL_TIM_Base_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80036ac:	f000 fa5a 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036b6:	f107 0318 	add.w	r3, r7, #24
 80036ba:	4619      	mov	r1, r3
 80036bc:	481a      	ldr	r0, [pc, #104]	@ (8003728 <MX_TIM4_Init+0xd8>)
 80036be:	f008 fb85 	bl	800bdcc <HAL_TIM_ConfigClockSource>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80036c8:	f000 fa4c 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80036cc:	4816      	ldr	r0, [pc, #88]	@ (8003728 <MX_TIM4_Init+0xd8>)
 80036ce:	f007 ff00 	bl	800b4d2 <HAL_TIM_IC_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80036d8:	f000 fa44 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	4619      	mov	r1, r3
 80036ea:	480f      	ldr	r0, [pc, #60]	@ (8003728 <MX_TIM4_Init+0xd8>)
 80036ec:	f009 f8d8 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80036f6:	f000 fa35 	bl	8003b64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036fa:	2300      	movs	r3, #0
 80036fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036fe:	2301      	movs	r3, #1
 8003700:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800370a:	463b      	mov	r3, r7
 800370c:	2200      	movs	r2, #0
 800370e:	4619      	mov	r1, r3
 8003710:	4805      	ldr	r0, [pc, #20]	@ (8003728 <MX_TIM4_Init+0xd8>)
 8003712:	f008 f9fd 	bl	800bb10 <HAL_TIM_IC_ConfigChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800371c:	f000 fa22 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003720:	bf00      	nop
 8003722:	3728      	adds	r7, #40	@ 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200005b8 	.word	0x200005b8
 800372c:	40000800 	.word	0x40000800

08003730 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003736:	463b      	mov	r3, r7
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800373e:	4b15      	ldr	r3, [pc, #84]	@ (8003794 <MX_TIM6_Init+0x64>)
 8003740:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <MX_TIM6_Init+0x68>)
 8003742:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8003744:	4b13      	ldr	r3, [pc, #76]	@ (8003794 <MX_TIM6_Init+0x64>)
 8003746:	2253      	movs	r2, #83	@ 0x53
 8003748:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374a:	4b12      	ldr	r3, [pc, #72]	@ (8003794 <MX_TIM6_Init+0x64>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 8003750:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <MX_TIM6_Init+0x64>)
 8003752:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003756:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003758:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <MX_TIM6_Init+0x64>)
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800375e:	480d      	ldr	r0, [pc, #52]	@ (8003794 <MX_TIM6_Init+0x64>)
 8003760:	f007 fd0e 	bl	800b180 <HAL_TIM_Base_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800376a:	f000 f9fb 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003776:	463b      	mov	r3, r7
 8003778:	4619      	mov	r1, r3
 800377a:	4806      	ldr	r0, [pc, #24]	@ (8003794 <MX_TIM6_Init+0x64>)
 800377c:	f009 f890 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003786:	f000 f9ed 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000600 	.word	0x20000600
 8003798:	40001000 	.word	0x40001000

0800379c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a2:	463b      	mov	r3, r7
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <MX_TIM7_Init+0x64>)
 80037ac:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <MX_TIM7_Init+0x68>)
 80037ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80037b0:	4b13      	ldr	r3, [pc, #76]	@ (8003800 <MX_TIM7_Init+0x64>)
 80037b2:	2253      	movs	r2, #83	@ 0x53
 80037b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b6:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <MX_TIM7_Init+0x64>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80037bc:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <MX_TIM7_Init+0x64>)
 80037be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80037c2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <MX_TIM7_Init+0x64>)
 80037c6:	2280      	movs	r2, #128	@ 0x80
 80037c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037ca:	480d      	ldr	r0, [pc, #52]	@ (8003800 <MX_TIM7_Init+0x64>)
 80037cc:	f007 fcd8 	bl	800b180 <HAL_TIM_Base_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80037d6:	f000 f9c5 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037e2:	463b      	mov	r3, r7
 80037e4:	4619      	mov	r1, r3
 80037e6:	4806      	ldr	r0, [pc, #24]	@ (8003800 <MX_TIM7_Init+0x64>)
 80037e8:	f009 f85a 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80037f2:	f000 f9b7 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000648 	.word	0x20000648
 8003804:	40001400 	.word	0x40001400

08003808 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	@ 0x28
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800380e:	f107 0318 	add.w	r3, r7, #24
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381c:	f107 0310 	add.w	r3, r7, #16
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003826:	463b      	mov	r3, r7
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003832:	4b2d      	ldr	r3, [pc, #180]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 8003834:	4a2d      	ldr	r2, [pc, #180]	@ (80038ec <MX_TIM8_Init+0xe4>)
 8003836:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84-1;
 8003838:	4b2b      	ldr	r3, [pc, #172]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 800383a:	2253      	movs	r2, #83	@ 0x53
 800383c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800383e:	4b2a      	ldr	r3, [pc, #168]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 8003844:	4b28      	ldr	r3, [pc, #160]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 8003846:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800384a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800384c:	4b26      	ldr	r3, [pc, #152]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003852:	4b25      	ldr	r3, [pc, #148]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 8003854:	2200      	movs	r2, #0
 8003856:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003858:	4b23      	ldr	r3, [pc, #140]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800385e:	4822      	ldr	r0, [pc, #136]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 8003860:	f007 fc8e 	bl	800b180 <HAL_TIM_Base_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800386a:	f000 f97b 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800386e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003872:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003874:	f107 0318 	add.w	r3, r7, #24
 8003878:	4619      	mov	r1, r3
 800387a:	481b      	ldr	r0, [pc, #108]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 800387c:	f008 faa6 	bl	800bdcc <HAL_TIM_ConfigClockSource>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003886:	f000 f96d 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800388a:	4817      	ldr	r0, [pc, #92]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 800388c:	f007 fe21 	bl	800b4d2 <HAL_TIM_IC_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8003896:	f000 f965 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038a2:	f107 0310 	add.w	r3, r7, #16
 80038a6:	4619      	mov	r1, r3
 80038a8:	480f      	ldr	r0, [pc, #60]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 80038aa:	f008 fff9 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80038b4:	f000 f956 	bl	8003b64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038b8:	2300      	movs	r3, #0
 80038ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038bc:	2301      	movs	r3, #1
 80038be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038c8:	463b      	mov	r3, r7
 80038ca:	2200      	movs	r2, #0
 80038cc:	4619      	mov	r1, r3
 80038ce:	4806      	ldr	r0, [pc, #24]	@ (80038e8 <MX_TIM8_Init+0xe0>)
 80038d0:	f008 f91e 	bl	800bb10 <HAL_TIM_IC_ConfigChannel>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80038da:	f000 f943 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	@ 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000690 	.word	0x20000690
 80038ec:	40010400 	.word	0x40010400

080038f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 80038f6:	4a12      	ldr	r2, [pc, #72]	@ (8003940 <MX_USART1_UART_Init+0x50>)
 80038f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038fa:	4b10      	ldr	r3, [pc, #64]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 80038fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003914:	4b09      	ldr	r3, [pc, #36]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 8003916:	220c      	movs	r2, #12
 8003918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800391a:	4b08      	ldr	r3, [pc, #32]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003926:	4805      	ldr	r0, [pc, #20]	@ (800393c <MX_USART1_UART_Init+0x4c>)
 8003928:	f009 f89c 	bl	800ca64 <HAL_UART_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003932:	f000 f917 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200006d8 	.word	0x200006d8
 8003940:	40011000 	.word	0x40011000

08003944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <MX_DMA_Init+0x3c>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	4a0b      	ldr	r2, [pc, #44]	@ (8003980 <MX_DMA_Init+0x3c>)
 8003954:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003958:	6313      	str	r3, [r2, #48]	@ 0x30
 800395a:	4b09      	ldr	r3, [pc, #36]	@ (8003980 <MX_DMA_Init+0x3c>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003966:	2200      	movs	r2, #0
 8003968:	2100      	movs	r1, #0
 800396a:	2038      	movs	r0, #56	@ 0x38
 800396c:	f003 faa3 	bl	8006eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003970:	2038      	movs	r0, #56	@ 0x38
 8003972:	f003 fabc 	bl	8006eee <HAL_NVIC_EnableIRQ>

}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800

08003984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08c      	sub	sp, #48	@ 0x30
 8003988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398a:	f107 031c 	add.w	r3, r7, #28
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	4b6b      	ldr	r3, [pc, #428]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	4a6a      	ldr	r2, [pc, #424]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039aa:	4b68      	ldr	r3, [pc, #416]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	4b64      	ldr	r3, [pc, #400]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	4a63      	ldr	r2, [pc, #396]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c6:	4b61      	ldr	r3, [pc, #388]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	4a5c      	ldr	r2, [pc, #368]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b56      	ldr	r3, [pc, #344]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	4a55      	ldr	r2, [pc, #340]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fe:	4b53      	ldr	r3, [pc, #332]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	4a4e      	ldr	r2, [pc, #312]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a14:	f043 0310 	orr.w	r3, r3, #16
 8003a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	4b48      	ldr	r3, [pc, #288]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	4a47      	ldr	r2, [pc, #284]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a30:	f043 0308 	orr.w	r3, r3, #8
 8003a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a36:	4b45      	ldr	r3, [pc, #276]	@ (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8003a42:	2200      	movs	r2, #0
 8003a44:	215c      	movs	r1, #92	@ 0x5c
 8003a46:	4842      	ldr	r0, [pc, #264]	@ (8003b50 <MX_GPIO_Init+0x1cc>)
 8003a48:	f004 f8b8 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4840      	ldr	r0, [pc, #256]	@ (8003b54 <MX_GPIO_Init+0x1d0>)
 8003a52:	f004 f8b3 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8003a56:	2200      	movs	r2, #0
 8003a58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a5c:	483e      	ldr	r0, [pc, #248]	@ (8003b58 <MX_GPIO_Init+0x1d4>)
 8003a5e:	f004 f8ad 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8003a62:	2200      	movs	r2, #0
 8003a64:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8003a68:	483c      	ldr	r0, [pc, #240]	@ (8003b5c <MX_GPIO_Init+0x1d8>)
 8003a6a:	f004 f8a7 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8003a74:	483a      	ldr	r0, [pc, #232]	@ (8003b60 <MX_GPIO_Init+0x1dc>)
 8003a76:	f004 f8a1 	bl	8007bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a88:	f107 031c 	add.w	r3, r7, #28
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4830      	ldr	r0, [pc, #192]	@ (8003b50 <MX_GPIO_Init+0x1cc>)
 8003a90:	f003 fdfc 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8003a94:	2354      	movs	r3, #84	@ 0x54
 8003a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4829      	ldr	r0, [pc, #164]	@ (8003b50 <MX_GPIO_Init+0x1cc>)
 8003aac:	f003 fdee 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac0:	f107 031c 	add.w	r3, r7, #28
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4822      	ldr	r0, [pc, #136]	@ (8003b50 <MX_GPIO_Init+0x1cc>)
 8003ac8:	f003 fde0 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003acc:	2301      	movs	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	481c      	ldr	r0, [pc, #112]	@ (8003b54 <MX_GPIO_Init+0x1d0>)
 8003ae4:	f003 fdd2 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aee:	2301      	movs	r3, #1
 8003af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003af2:	2302      	movs	r3, #2
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003afa:	f107 031c 	add.w	r3, r7, #28
 8003afe:	4619      	mov	r1, r3
 8003b00:	4815      	ldr	r0, [pc, #84]	@ (8003b58 <MX_GPIO_Init+0x1d4>)
 8003b02:	f003 fdc3 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8003b06:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8003b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b10:	2302      	movs	r3, #2
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	2300      	movs	r3, #0
 8003b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	480f      	ldr	r0, [pc, #60]	@ (8003b5c <MX_GPIO_Init+0x1d8>)
 8003b20:	f003 fdb4 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11;
 8003b24:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8003b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b32:	2300      	movs	r3, #0
 8003b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b36:	f107 031c 	add.w	r3, r7, #28
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4808      	ldr	r0, [pc, #32]	@ (8003b60 <MX_GPIO_Init+0x1dc>)
 8003b3e:	f003 fda5 	bl	800768c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003b42:	bf00      	nop
 8003b44:	3730      	adds	r7, #48	@ 0x30
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40020c00 	.word	0x40020c00
 8003b60:	40020800 	.word	0x40020800

08003b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b68:	b672      	cpsid	i
}
 8003b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <Error_Handler+0x8>

08003b70 <printUserName>:
	    }
}


void printUserName(uint8_t *uid)
{
 8003b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b72:	b099      	sub	sp, #100	@ 0x64
 8003b74:	af04      	add	r7, sp, #16
 8003b76:	6078      	str	r0, [r7, #4]
	   // Không có thẻ
	    if (uid == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d111      	bne.n	8003ba2 <printUserName+0x32>
	    {
	        if (uidcheck)
 8003b7e:	4b56      	ldr	r3, [pc, #344]	@ (8003cd8 <printUserName+0x168>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a2 	beq.w	8003ccc <printUserName+0x15c>
	        {
	            HAL_UART_Transmit(&huart1, (uint8_t*)"Please charge your ID CARD \r\n", 31, HAL_MAX_DELAY);
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	221f      	movs	r2, #31
 8003b8e:	4953      	ldr	r1, [pc, #332]	@ (8003cdc <printUserName+0x16c>)
 8003b90:	4853      	ldr	r0, [pc, #332]	@ (8003ce0 <printUserName+0x170>)
 8003b92:	f008 ffb7 	bl	800cb04 <HAL_UART_Transmit>
	            memset(lastUID, 0, UID_LEN); //Gán toàn bộ giá trị trong mảng lastUID về 0 (zero)
 8003b96:	2205      	movs	r2, #5
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4852      	ldr	r0, [pc, #328]	@ (8003ce4 <printUserName+0x174>)
 8003b9c:	f00a fe30 	bl	800e800 <memset>
	        }
	        return;
 8003ba0:	e094      	b.n	8003ccc <printUserName+0x15c>
	    }

	    //  Nếu là UID giống lần trước thì không in lại
	    if (uidcheck && memcmp(uid, lastUID, UID_LEN) == 0)
 8003ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd8 <printUserName+0x168>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <printUserName+0x4c>
 8003baa:	2205      	movs	r2, #5
 8003bac:	494d      	ldr	r1, [pc, #308]	@ (8003ce4 <printUserName+0x174>)
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f00a fe16 	bl	800e7e0 <memcmp>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 808a 	beq.w	8003cd0 <printUserName+0x160>
	        return;
	    if (uid!=NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8087 	beq.w	8003cd2 <printUserName+0x162>
	    {
	    //  UID mới thì cập nhật và xử lý
	    memcpy(lastUID, uid, UID_LEN);
 8003bc4:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <printUserName+0x174>)
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6810      	ldr	r0, [r2, #0]
 8003bca:	6018      	str	r0, [r3, #0]
 8003bcc:	7912      	ldrb	r2, [r2, #4]
 8003bce:	711a      	strb	r2, [r3, #4]
	    uidcheck = 1;
 8003bd0:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <printUserName+0x168>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < userCount; i++)
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bda:	e048      	b.n	8003c6e <printUserName+0xfe>
    {
        if (memcmp(uid, userList[i].uid, UID_LEN) == 0)
 8003bdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce8 <printUserName+0x178>)
 8003bea:	4413      	add	r3, r2
 8003bec:	2205      	movs	r2, #5
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f00a fdf5 	bl	800e7e0 <memcmp>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d135      	bne.n	8003c68 <printUserName+0xf8>
        {
            char msg[64];
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003c00:	461e      	mov	r6, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3301      	adds	r3, #1
 8003c06:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003c08:	469c      	mov	ip, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003c10:	4619      	mov	r1, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3303      	adds	r3, #3
 8003c16:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003c18:	461c      	mov	r4, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003c20:	461d      	mov	r5, r3
                    userList[i].name);
 8003c22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce8 <printUserName+0x178>)
 8003c30:	4413      	add	r3, r2
 8003c32:	3305      	adds	r3, #5
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003c34:	f107 000c 	add.w	r0, r7, #12
 8003c38:	9303      	str	r3, [sp, #12]
 8003c3a:	9502      	str	r5, [sp, #8]
 8003c3c:	9401      	str	r4, [sp, #4]
 8003c3e:	9100      	str	r1, [sp, #0]
 8003c40:	4663      	mov	r3, ip
 8003c42:	4632      	mov	r2, r6
 8003c44:	4929      	ldr	r1, [pc, #164]	@ (8003cec <printUserName+0x17c>)
 8003c46:	f00a fcd1 	bl	800e5ec <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fb0e 	bl	8000270 <strlen>
 8003c54:	4603      	mov	r3, r0
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	f107 010c 	add.w	r1, r7, #12
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c60:	481f      	ldr	r0, [pc, #124]	@ (8003ce0 <printUserName+0x170>)
 8003c62:	f008 ff4f 	bl	800cb04 <HAL_UART_Transmit>
 8003c66:	e034      	b.n	8003cd2 <printUserName+0x162>
    for (int i = 0; i < userCount; i++)
 8003c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c6e:	2206      	movs	r2, #6
 8003c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c72:	4293      	cmp	r3, r2
 8003c74:	dbb2      	blt.n	8003bdc <printUserName+0x6c>
        }
    }
    // Không tìm thấy trong danh sách
    char unknown[64];
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003c7a:	461c      	mov	r4, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003c82:	461d      	mov	r5, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3302      	adds	r3, #2
 8003c88:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003c8a:	461a      	mov	r2, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3303      	adds	r3, #3
 8003c90:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003c92:	4619      	mov	r1, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 8003c9a:	f107 000c 	add.w	r0, r7, #12
 8003c9e:	9302      	str	r3, [sp, #8]
 8003ca0:	9101      	str	r1, [sp, #4]
 8003ca2:	9200      	str	r2, [sp, #0]
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	4911      	ldr	r1, [pc, #68]	@ (8003cf0 <printUserName+0x180>)
 8003caa:	f00a fc9f 	bl	800e5ec <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)unknown, strlen(unknown), HAL_MAX_DELAY);
 8003cae:	f107 030c 	add.w	r3, r7, #12
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fc fadc 	bl	8000270 <strlen>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	f107 010c 	add.w	r1, r7, #12
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	4806      	ldr	r0, [pc, #24]	@ (8003ce0 <printUserName+0x170>)
 8003cc6:	f008 ff1d 	bl	800cb04 <HAL_UART_Transmit>
 8003cca:	e002      	b.n	8003cd2 <printUserName+0x162>
	        return;
 8003ccc:	bf00      	nop
 8003cce:	e000      	b.n	8003cd2 <printUserName+0x162>
	        return;
 8003cd0:	bf00      	nop
}
}
 8003cd2:	3754      	adds	r7, #84	@ 0x54
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd8:	20001798 	.word	0x20001798
 8003cdc:	08011a38 	.word	0x08011a38
 8003ce0:	200006d8 	.word	0x200006d8
 8003ce4:	20001788 	.word	0x20001788
 8003ce8:	20000010 	.word	0x20000010
 8003cec:	08011a58 	.word	0x08011a58
 8003cf0:	08011a84 	.word	0x08011a84

08003cf4 <isAuthorizedUID>:


bool isAuthorizedUID(uint8_t *uid)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < userCount; i++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e014      	b.n	8003d2c <isAuthorizedUID+0x38>
    {
        if (memcmp(uid, userList[i].uid, 5) == 0)
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d40 <isAuthorizedUID+0x4c>)
 8003d10:	4413      	add	r3, r2
 8003d12:	2205      	movs	r2, #5
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f00a fd62 	bl	800e7e0 <memcmp>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <isAuthorizedUID+0x32>
            return true;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e007      	b.n	8003d36 <isAuthorizedUID+0x42>
    for (int i = 0; i < userCount; i++)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	2206      	movs	r2, #6
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	dbe6      	blt.n	8003d02 <isAuthorizedUID+0xe>
    }
    return false;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000010 	.word	0x20000010

08003d44 <checkRFIDAndControlRelay>:


void checkRFIDAndControlRelay(void)
{
 8003d44:	b5b0      	push	{r4, r5, r7, lr}
 8003d46:	b094      	sub	sp, #80	@ 0x50
 8003d48:	af04      	add	r7, sp, #16
    status = MFRC522_Request(PICC_REQIDL, str);
 8003d4a:	4959      	ldr	r1, [pc, #356]	@ (8003eb0 <checkRFIDAndControlRelay+0x16c>)
 8003d4c:	2026      	movs	r0, #38	@ 0x26
 8003d4e:	f7fe fa2c 	bl	80021aa <MFRC522_Request>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b57      	ldr	r3, [pc, #348]	@ (8003eb4 <checkRFIDAndControlRelay+0x170>)
 8003d58:	701a      	strb	r2, [r3, #0]

    if (status == MI_OK && MFRC522_Anticoll(str) == MI_OK)
 8003d5a:	4b56      	ldr	r3, [pc, #344]	@ (8003eb4 <checkRFIDAndControlRelay+0x170>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d175      	bne.n	8003e4e <checkRFIDAndControlRelay+0x10a>
 8003d62:	4853      	ldr	r0, [pc, #332]	@ (8003eb0 <checkRFIDAndControlRelay+0x16c>)
 8003d64:	f7fe fa46 	bl	80021f4 <MFRC522_Anticoll>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d16f      	bne.n	8003e4e <checkRFIDAndControlRelay+0x10a>
    {
        memcpy(currentUID, str, UID_LEN);
 8003d6e:	4b52      	ldr	r3, [pc, #328]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003d70:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb0 <checkRFIDAndControlRelay+0x16c>)
 8003d72:	6810      	ldr	r0, [r2, #0]
 8003d74:	6018      	str	r0, [r3, #0]
 8003d76:	7912      	ldrb	r2, [r2, #4]
 8003d78:	711a      	strb	r2, [r3, #4]
        rfidDetected = 1;
 8003d7a:	4b50      	ldr	r3, [pc, #320]	@ (8003ebc <checkRFIDAndControlRelay+0x178>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
        rfidLostCounter = 0;
 8003d80:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec0 <checkRFIDAndControlRelay+0x17c>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

        // UART Debug
        char dbg[64];
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
                currentUID[0], currentUID[1], currentUID[2],
 8003d86:	4b4c      	ldr	r3, [pc, #304]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003d8a:	461c      	mov	r4, r3
                currentUID[0], currentUID[1], currentUID[2],
 8003d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003d8e:	785b      	ldrb	r3, [r3, #1]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003d90:	461d      	mov	r5, r3
                currentUID[0], currentUID[1], currentUID[2],
 8003d92:	4b49      	ldr	r3, [pc, #292]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003d94:	789b      	ldrb	r3, [r3, #2]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003d96:	461a      	mov	r2, r3
                currentUID[3], currentUID[4]);
 8003d98:	4b47      	ldr	r3, [pc, #284]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003d9a:	78db      	ldrb	r3, [r3, #3]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003d9c:	4619      	mov	r1, r3
                currentUID[3], currentUID[4]);
 8003d9e:	4b46      	ldr	r3, [pc, #280]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003da0:	791b      	ldrb	r3, [r3, #4]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 8003da2:	4638      	mov	r0, r7
 8003da4:	9302      	str	r3, [sp, #8]
 8003da6:	9101      	str	r1, [sp, #4]
 8003da8:	9200      	str	r2, [sp, #0]
 8003daa:	462b      	mov	r3, r5
 8003dac:	4622      	mov	r2, r4
 8003dae:	4945      	ldr	r1, [pc, #276]	@ (8003ec4 <checkRFIDAndControlRelay+0x180>)
 8003db0:	f00a fc1c 	bl	800e5ec <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8003db4:	463b      	mov	r3, r7
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fa5a 	bl	8000270 <strlen>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	4840      	ldr	r0, [pc, #256]	@ (8003ec8 <checkRFIDAndControlRelay+0x184>)
 8003dc8:	f008 fe9c 	bl	800cb04 <HAL_UART_Transmit>

//        // ✅ Chỉ gửi CAN nếu là UID mới
        if (!uidcheck || memcmp(currentUID, lastUID, UID_LEN) != 0)
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <checkRFIDAndControlRelay+0x188>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <checkRFIDAndControlRelay+0xa0>
 8003dd4:	2205      	movs	r2, #5
 8003dd6:	493e      	ldr	r1, [pc, #248]	@ (8003ed0 <checkRFIDAndControlRelay+0x18c>)
 8003dd8:	4837      	ldr	r0, [pc, #220]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003dda:	f00a fd01 	bl	800e7e0 <memcmp>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d011      	beq.n	8003e08 <checkRFIDAndControlRelay+0xc4>
        {
            printUserName(currentUID);
 8003de4:	4834      	ldr	r0, [pc, #208]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003de6:	f7ff fec3 	bl	8003b70 <printUserName>
            memcpy(lastUID, currentUID, UID_LEN);
 8003dea:	4b39      	ldr	r3, [pc, #228]	@ (8003ed0 <checkRFIDAndControlRelay+0x18c>)
 8003dec:	4a32      	ldr	r2, [pc, #200]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003df2:	6018      	str	r0, [r3, #0]
 8003df4:	3304      	adds	r3, #4
 8003df6:	7019      	strb	r1, [r3, #0]
            uidcheck = 1;
 8003df8:	4b34      	ldr	r3, [pc, #208]	@ (8003ecc <checkRFIDAndControlRelay+0x188>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

            // Gửi CAN
            CAN_SendTopicData(TOPIC_ID_RFID, currentUID, UID_LEN);
 8003dfe:	2205      	movs	r2, #5
 8003e00:	492d      	ldr	r1, [pc, #180]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003e02:	2010      	movs	r0, #16
 8003e04:	f7fe fa64 	bl	80022d0 <CAN_SendTopicData>
        }

        // ✅ Điều khiển Relay
        if (isAuthorizedUID(currentUID))
 8003e08:	482b      	ldr	r0, [pc, #172]	@ (8003eb8 <checkRFIDAndControlRelay+0x174>)
 8003e0a:	f7ff ff73 	bl	8003cf4 <isAuthorizedUID>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00f      	beq.n	8003e34 <checkRFIDAndControlRelay+0xf0>
        {
            if (!relayOn)
 8003e14:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed4 <checkRFIDAndControlRelay+0x190>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	f083 0301 	eor.w	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d042      	beq.n	8003ea8 <checkRFIDAndControlRelay+0x164>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003e22:	2201      	movs	r2, #1
 8003e24:	2110      	movs	r1, #16
 8003e26:	482c      	ldr	r0, [pc, #176]	@ (8003ed8 <checkRFIDAndControlRelay+0x194>)
 8003e28:	f003 fec8 	bl	8007bbc <HAL_GPIO_WritePin>
                relayOn = true;
 8003e2c:	4b29      	ldr	r3, [pc, #164]	@ (8003ed4 <checkRFIDAndControlRelay+0x190>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e039      	b.n	8003ea8 <checkRFIDAndControlRelay+0x164>
            }
        }
        else
        {
            if (relayOn)
 8003e34:	4b27      	ldr	r3, [pc, #156]	@ (8003ed4 <checkRFIDAndControlRelay+0x190>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d035      	beq.n	8003ea8 <checkRFIDAndControlRelay+0x164>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2110      	movs	r1, #16
 8003e40:	4825      	ldr	r0, [pc, #148]	@ (8003ed8 <checkRFIDAndControlRelay+0x194>)
 8003e42:	f003 febb 	bl	8007bbc <HAL_GPIO_WritePin>
                relayOn = false;
 8003e46:	4b23      	ldr	r3, [pc, #140]	@ (8003ed4 <checkRFIDAndControlRelay+0x190>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e02c      	b.n	8003ea8 <checkRFIDAndControlRelay+0x164>

        return;
    }

    //  Không đọc được thẻ
    rfidLostCounter++;
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec0 <checkRFIDAndControlRelay+0x17c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec0 <checkRFIDAndControlRelay+0x17c>)
 8003e56:	6013      	str	r3, [r2, #0]
//    if (rfidLostCounter >= RFID_LOST_THRESHOLD)
//    {
        // Chỉ thực hiện reset khi thực sự không còn thẻ
        if (uidcheck)
 8003e58:	4b1c      	ldr	r3, [pc, #112]	@ (8003ecc <checkRFIDAndControlRelay+0x188>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <checkRFIDAndControlRelay+0x15e>
        {
            printUserName(NULL);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7ff fe85 	bl	8003b70 <printUserName>
            uidcheck = 0;
 8003e66:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <checkRFIDAndControlRelay+0x188>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
            memset(lastUID, 0, UID_LEN);
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4817      	ldr	r0, [pc, #92]	@ (8003ed0 <checkRFIDAndControlRelay+0x18c>)
 8003e72:	f00a fcc5 	bl	800e800 <memset>
            rfidDetected = 0;
 8003e76:	4b11      	ldr	r3, [pc, #68]	@ (8003ebc <checkRFIDAndControlRelay+0x178>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

            HAL_UART_Transmit(&huart1,
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	2222      	movs	r2, #34	@ 0x22
 8003e82:	4916      	ldr	r1, [pc, #88]	@ (8003edc <checkRFIDAndControlRelay+0x198>)
 8003e84:	4810      	ldr	r0, [pc, #64]	@ (8003ec8 <checkRFIDAndControlRelay+0x184>)
 8003e86:	f008 fe3d 	bl	800cb04 <HAL_UART_Transmit>
                              (uint8_t*)"[RFID] Không phát hiện thẻ\r\n",
                              strlen("[RFID] Không phát hiện thẻ\r\n"),
                              HAL_MAX_DELAY);

            if (relayOn)
 8003e8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <checkRFIDAndControlRelay+0x190>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <checkRFIDAndControlRelay+0x15e>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003e92:	2200      	movs	r2, #0
 8003e94:	2110      	movs	r1, #16
 8003e96:	4810      	ldr	r0, [pc, #64]	@ (8003ed8 <checkRFIDAndControlRelay+0x194>)
 8003e98:	f003 fe90 	bl	8007bbc <HAL_GPIO_WritePin>
                relayOn = false;
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <checkRFIDAndControlRelay+0x190>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
            }
        }

        rfidLostCounter = 0;
 8003ea2:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <checkRFIDAndControlRelay+0x17c>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
    }
 8003ea8:	3740      	adds	r7, #64	@ 0x40
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bdb0      	pop	{r4, r5, r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	2000074c 	.word	0x2000074c
 8003eb4:	20000748 	.word	0x20000748
 8003eb8:	20001780 	.word	0x20001780
 8003ebc:	20001794 	.word	0x20001794
 8003ec0:	20001790 	.word	0x20001790
 8003ec4:	08011ab8 	.word	0x08011ab8
 8003ec8:	200006d8 	.word	0x200006d8
 8003ecc:	20001798 	.word	0x20001798
 8003ed0:	20001788 	.word	0x20001788
 8003ed4:	2000178d 	.word	0x2000178d
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	08011ae0 	.word	0x08011ae0

08003ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	4b14      	ldr	r3, [pc, #80]	@ (8003f3c <HAL_MspInit+0x5c>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	4a13      	ldr	r2, [pc, #76]	@ (8003f3c <HAL_MspInit+0x5c>)
 8003ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ef6:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <HAL_MspInit+0x5c>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <HAL_MspInit+0x5c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f3c <HAL_MspInit+0x5c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f12:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <HAL_MspInit+0x5c>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003f1e:	2005      	movs	r0, #5
 8003f20:	f002 ffbe 	bl	8006ea0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f24:	2200      	movs	r2, #0
 8003f26:	2100      	movs	r1, #0
 8003f28:	2005      	movs	r0, #5
 8003f2a:	f002 ffc4 	bl	8006eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f2e:	2005      	movs	r0, #5
 8003f30:	f002 ffdd 	bl	8006eee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a32      	ldr	r2, [pc, #200]	@ (8004028 <HAL_ADC_MspInit+0xe8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d15e      	bne.n	8004020 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	4b31      	ldr	r3, [pc, #196]	@ (800402c <HAL_ADC_MspInit+0xec>)
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	4a30      	ldr	r2, [pc, #192]	@ (800402c <HAL_ADC_MspInit+0xec>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f72:	4b2e      	ldr	r3, [pc, #184]	@ (800402c <HAL_ADC_MspInit+0xec>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	4b2a      	ldr	r3, [pc, #168]	@ (800402c <HAL_ADC_MspInit+0xec>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	4a29      	ldr	r2, [pc, #164]	@ (800402c <HAL_ADC_MspInit+0xec>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f8e:	4b27      	ldr	r3, [pc, #156]	@ (800402c <HAL_ADC_MspInit+0xec>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa6:	f107 0314 	add.w	r3, r7, #20
 8003faa:	4619      	mov	r1, r3
 8003fac:	4820      	ldr	r0, [pc, #128]	@ (8004030 <HAL_ADC_MspInit+0xf0>)
 8003fae:	f003 fb6d 	bl	800768c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003fb2:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fb4:	4a20      	ldr	r2, [pc, #128]	@ (8004038 <HAL_ADC_MspInit+0xf8>)
 8003fb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fca:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fd2:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fda:	4b16      	ldr	r3, [pc, #88]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fe0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003fe2:	4b14      	ldr	r3, [pc, #80]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fe8:	4b12      	ldr	r3, [pc, #72]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fee:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ff4:	480f      	ldr	r0, [pc, #60]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8003ff6:	f002 ffbf 	bl	8006f78 <HAL_DMA_Init>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8004000:	f7ff fdb0 	bl	8003b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a0b      	ldr	r2, [pc, #44]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 8004008:	639a      	str	r2, [r3, #56]	@ 0x38
 800400a:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <HAL_ADC_MspInit+0xf4>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004010:	2200      	movs	r2, #0
 8004012:	2100      	movs	r1, #0
 8004014:	2012      	movs	r0, #18
 8004016:	f002 ff4e 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800401a:	2012      	movs	r0, #18
 800401c:	f002 ff67 	bl	8006eee <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004020:	bf00      	nop
 8004022:	3728      	adds	r7, #40	@ 0x28
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40012000 	.word	0x40012000
 800402c:	40023800 	.word	0x40023800
 8004030:	40020000 	.word	0x40020000
 8004034:	2000037c 	.word	0x2000037c
 8004038:	40026410 	.word	0x40026410

0800403c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	@ 0x30
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004044:	f107 031c 	add.w	r3, r7, #28
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a66      	ldr	r2, [pc, #408]	@ (80041f4 <HAL_CAN_MspInit+0x1b8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d165      	bne.n	800412a <HAL_CAN_MspInit+0xee>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800405e:	4b66      	ldr	r3, [pc, #408]	@ (80041f8 <HAL_CAN_MspInit+0x1bc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	4a64      	ldr	r2, [pc, #400]	@ (80041f8 <HAL_CAN_MspInit+0x1bc>)
 8004066:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004068:	4b63      	ldr	r3, [pc, #396]	@ (80041f8 <HAL_CAN_MspInit+0x1bc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10d      	bne.n	800408c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	4b61      	ldr	r3, [pc, #388]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	4a60      	ldr	r2, [pc, #384]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 800407a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800407e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004080:	4b5e      	ldr	r3, [pc, #376]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	4b5a      	ldr	r3, [pc, #360]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	4a59      	ldr	r2, [pc, #356]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004096:	f043 0308 	orr.w	r3, r3, #8
 800409a:	6313      	str	r3, [r2, #48]	@ 0x30
 800409c:	4b57      	ldr	r3, [pc, #348]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040a8:	2301      	movs	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040b0:	2301      	movs	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b4:	2303      	movs	r3, #3
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80040b8:	2309      	movs	r3, #9
 80040ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040bc:	f107 031c 	add.w	r3, r7, #28
 80040c0:	4619      	mov	r1, r3
 80040c2:	484f      	ldr	r0, [pc, #316]	@ (8004200 <HAL_CAN_MspInit+0x1c4>)
 80040c4:	f003 fae2 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80040c8:	2302      	movs	r3, #2
 80040ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	2302      	movs	r3, #2
 80040ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d4:	2303      	movs	r3, #3
 80040d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80040d8:	2309      	movs	r3, #9
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040dc:	f107 031c 	add.w	r3, r7, #28
 80040e0:	4619      	mov	r1, r3
 80040e2:	4847      	ldr	r0, [pc, #284]	@ (8004200 <HAL_CAN_MspInit+0x1c4>)
 80040e4:	f003 fad2 	bl	800768c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80040e8:	2200      	movs	r2, #0
 80040ea:	2100      	movs	r1, #0
 80040ec:	2013      	movs	r0, #19
 80040ee:	f002 fee2 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80040f2:	2013      	movs	r0, #19
 80040f4:	f002 fefb 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	2100      	movs	r1, #0
 80040fc:	2014      	movs	r0, #20
 80040fe:	f002 feda 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004102:	2014      	movs	r0, #20
 8004104:	f002 fef3 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004108:	2200      	movs	r2, #0
 800410a:	2100      	movs	r1, #0
 800410c:	2015      	movs	r0, #21
 800410e:	f002 fed2 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004112:	2015      	movs	r0, #21
 8004114:	f002 feeb 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8004118:	2200      	movs	r2, #0
 800411a:	2100      	movs	r1, #0
 800411c:	2016      	movs	r0, #22
 800411e:	f002 feca 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8004122:	2016      	movs	r0, #22
 8004124:	f002 fee3 	bl	8006eee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004128:	e060      	b.n	80041ec <HAL_CAN_MspInit+0x1b0>
  else if(hcan->Instance==CAN2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a35      	ldr	r2, [pc, #212]	@ (8004204 <HAL_CAN_MspInit+0x1c8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d15b      	bne.n	80041ec <HAL_CAN_MspInit+0x1b0>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	4b30      	ldr	r3, [pc, #192]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	4a2f      	ldr	r2, [pc, #188]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 800413e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004142:	6413      	str	r3, [r2, #64]	@ 0x40
 8004144:	4b2d      	ldr	r3, [pc, #180]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004150:	4b29      	ldr	r3, [pc, #164]	@ (80041f8 <HAL_CAN_MspInit+0x1bc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	4a28      	ldr	r2, [pc, #160]	@ (80041f8 <HAL_CAN_MspInit+0x1bc>)
 8004158:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800415a:	4b27      	ldr	r3, [pc, #156]	@ (80041f8 <HAL_CAN_MspInit+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d10d      	bne.n	800417e <HAL_CAN_MspInit+0x142>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	4b25      	ldr	r3, [pc, #148]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	4a24      	ldr	r2, [pc, #144]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 800416c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004170:	6413      	str	r3, [r2, #64]	@ 0x40
 8004172:	4b22      	ldr	r3, [pc, #136]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b1e      	ldr	r3, [pc, #120]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004186:	4a1d      	ldr	r2, [pc, #116]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004188:	f043 0302 	orr.w	r3, r3, #2
 800418c:	6313      	str	r3, [r2, #48]	@ 0x30
 800418e:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_CAN_MspInit+0x1c0>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800419a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800419e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a0:	2302      	movs	r3, #2
 80041a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a8:	2303      	movs	r3, #3
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80041ac:	2309      	movs	r3, #9
 80041ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	4619      	mov	r1, r3
 80041b6:	4814      	ldr	r0, [pc, #80]	@ (8004208 <HAL_CAN_MspInit+0x1cc>)
 80041b8:	f003 fa68 	bl	800768c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80041bc:	2200      	movs	r2, #0
 80041be:	2100      	movs	r1, #0
 80041c0:	203f      	movs	r0, #63	@ 0x3f
 80041c2:	f002 fe78 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80041c6:	203f      	movs	r0, #63	@ 0x3f
 80041c8:	f002 fe91 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80041cc:	2200      	movs	r2, #0
 80041ce:	2100      	movs	r1, #0
 80041d0:	2040      	movs	r0, #64	@ 0x40
 80041d2:	f002 fe70 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80041d6:	2040      	movs	r0, #64	@ 0x40
 80041d8:	f002 fe89 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	2100      	movs	r1, #0
 80041e0:	2041      	movs	r0, #65	@ 0x41
 80041e2:	f002 fe68 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80041e6:	2041      	movs	r0, #65	@ 0x41
 80041e8:	f002 fe81 	bl	8006eee <HAL_NVIC_EnableIRQ>
}
 80041ec:	bf00      	nop
 80041ee:	3730      	adds	r7, #48	@ 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40006400 	.word	0x40006400
 80041f8:	2000179c 	.word	0x2000179c
 80041fc:	40023800 	.word	0x40023800
 8004200:	40020c00 	.word	0x40020c00
 8004204:	40006800 	.word	0x40006800
 8004208:	40020400 	.word	0x40020400

0800420c <HAL_CAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a27      	ldr	r2, [pc, #156]	@ (80042b8 <HAL_CAN_MspDeInit+0xac>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d11f      	bne.n	800425e <HAL_CAN_MspDeInit+0x52>
  {
    /* USER CODE BEGIN CAN1_MspDeInit 0 */

    /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_CAN1_CLK_ENABLED--;
 800421e:	4b27      	ldr	r3, [pc, #156]	@ (80042bc <HAL_CAN_MspDeInit+0xb0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3b01      	subs	r3, #1
 8004224:	4a25      	ldr	r2, [pc, #148]	@ (80042bc <HAL_CAN_MspDeInit+0xb0>)
 8004226:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 8004228:	4b24      	ldr	r3, [pc, #144]	@ (80042bc <HAL_CAN_MspDeInit+0xb0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <HAL_CAN_MspDeInit+0x30>
      __HAL_RCC_CAN1_CLK_DISABLE();
 8004230:	4b23      	ldr	r3, [pc, #140]	@ (80042c0 <HAL_CAN_MspDeInit+0xb4>)
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	4a22      	ldr	r2, [pc, #136]	@ (80042c0 <HAL_CAN_MspDeInit+0xb4>)
 8004236:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800423a:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 800423c:	2103      	movs	r1, #3
 800423e:	4821      	ldr	r0, [pc, #132]	@ (80042c4 <HAL_CAN_MspDeInit+0xb8>)
 8004240:	f003 fbc0 	bl	80079c4 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8004244:	2013      	movs	r0, #19
 8004246:	f002 fe60 	bl	8006f0a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 800424a:	2014      	movs	r0, #20
 800424c:	f002 fe5d 	bl	8006f0a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8004250:	2015      	movs	r0, #21
 8004252:	f002 fe5a 	bl	8006f0a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8004256:	2016      	movs	r0, #22
 8004258:	f002 fe57 	bl	8006f0a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN CAN2_MspDeInit 1 */

    /* USER CODE END CAN2_MspDeInit 1 */
  }

}
 800425c:	e027      	b.n	80042ae <HAL_CAN_MspDeInit+0xa2>
  else if(hcan->Instance==CAN2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a19      	ldr	r2, [pc, #100]	@ (80042c8 <HAL_CAN_MspDeInit+0xbc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d122      	bne.n	80042ae <HAL_CAN_MspDeInit+0xa2>
    __HAL_RCC_CAN2_CLK_DISABLE();
 8004268:	4b15      	ldr	r3, [pc, #84]	@ (80042c0 <HAL_CAN_MspDeInit+0xb4>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	4a14      	ldr	r2, [pc, #80]	@ (80042c0 <HAL_CAN_MspDeInit+0xb4>)
 800426e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004272:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_RCC_CAN1_CLK_ENABLED--;
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <HAL_CAN_MspDeInit+0xb0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3b01      	subs	r3, #1
 800427a:	4a10      	ldr	r2, [pc, #64]	@ (80042bc <HAL_CAN_MspDeInit+0xb0>)
 800427c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 800427e:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <HAL_CAN_MspDeInit+0xb0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <HAL_CAN_MspDeInit+0x86>
      __HAL_RCC_CAN1_CLK_DISABLE();
 8004286:	4b0e      	ldr	r3, [pc, #56]	@ (80042c0 <HAL_CAN_MspDeInit+0xb4>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	4a0d      	ldr	r2, [pc, #52]	@ (80042c0 <HAL_CAN_MspDeInit+0xb4>)
 800428c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004290:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 8004292:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8004296:	480d      	ldr	r0, [pc, #52]	@ (80042cc <HAL_CAN_MspDeInit+0xc0>)
 8004298:	f003 fb94 	bl	80079c4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(CAN2_TX_IRQn);
 800429c:	203f      	movs	r0, #63	@ 0x3f
 800429e:	f002 fe34 	bl	8006f0a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX0_IRQn);
 80042a2:	2040      	movs	r0, #64	@ 0x40
 80042a4:	f002 fe31 	bl	8006f0a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX1_IRQn);
 80042a8:	2041      	movs	r0, #65	@ 0x41
 80042aa:	f002 fe2e 	bl	8006f0a <HAL_NVIC_DisableIRQ>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40006400 	.word	0x40006400
 80042bc:	2000179c 	.word	0x2000179c
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40020c00 	.word	0x40020c00
 80042c8:	40006800 	.word	0x40006800
 80042cc:	40020400 	.word	0x40020400

080042d0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0b      	ldr	r2, [pc, #44]	@ (800430c <HAL_CRC_MspInit+0x3c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10d      	bne.n	80042fe <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <HAL_CRC_MspInit+0x40>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	4a09      	ldr	r2, [pc, #36]	@ (8004310 <HAL_CRC_MspInit+0x40>)
 80042ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f2:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <HAL_CRC_MspInit+0x40>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40023000 	.word	0x40023000
 8004310:	40023800 	.word	0x40023800

08004314 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	@ 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	f107 0314 	add.w	r3, r7, #20
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a31      	ldr	r2, [pc, #196]	@ (80043f8 <HAL_I2C_MspInit+0xe4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d15b      	bne.n	80043ee <HAL_I2C_MspInit+0xda>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	4b30      	ldr	r3, [pc, #192]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	4a2f      	ldr	r2, [pc, #188]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	6313      	str	r3, [r2, #48]	@ 0x30
 8004346:	4b2d      	ldr	r3, [pc, #180]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	4b29      	ldr	r3, [pc, #164]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	4a28      	ldr	r2, [pc, #160]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6313      	str	r3, [r2, #48]	@ 0x30
 8004362:	4b26      	ldr	r3, [pc, #152]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800436e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004374:	2312      	movs	r3, #18
 8004376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004378:	2301      	movs	r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437c:	2303      	movs	r3, #3
 800437e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004380:	2304      	movs	r3, #4
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004384:	f107 0314 	add.w	r3, r7, #20
 8004388:	4619      	mov	r1, r3
 800438a:	481d      	ldr	r0, [pc, #116]	@ (8004400 <HAL_I2C_MspInit+0xec>)
 800438c:	f003 f97e 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004396:	2312      	movs	r3, #18
 8004398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800439a:	2301      	movs	r3, #1
 800439c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439e:	2303      	movs	r3, #3
 80043a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80043a2:	2304      	movs	r3, #4
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a6:	f107 0314 	add.w	r3, r7, #20
 80043aa:	4619      	mov	r1, r3
 80043ac:	4815      	ldr	r0, [pc, #84]	@ (8004404 <HAL_I2C_MspInit+0xf0>)
 80043ae:	f003 f96d 	bl	800768c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b11      	ldr	r3, [pc, #68]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	4a10      	ldr	r2, [pc, #64]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 80043bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c2:	4b0e      	ldr	r3, [pc, #56]	@ (80043fc <HAL_I2C_MspInit+0xe8>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2102      	movs	r1, #2
 80043d2:	2048      	movs	r0, #72	@ 0x48
 80043d4:	f002 fd6f 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80043d8:	2048      	movs	r0, #72	@ 0x48
 80043da:	f002 fd88 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 2, 1);
 80043de:	2201      	movs	r2, #1
 80043e0:	2102      	movs	r1, #2
 80043e2:	2049      	movs	r0, #73	@ 0x49
 80043e4:	f002 fd67 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80043e8:	2049      	movs	r0, #73	@ 0x49
 80043ea:	f002 fd80 	bl	8006eee <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80043ee:	bf00      	nop
 80043f0:	3728      	adds	r7, #40	@ 0x28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40005c00 	.word	0x40005c00
 80043fc:	40023800 	.word	0x40023800
 8004400:	40020800 	.word	0x40020800
 8004404:	40020000 	.word	0x40020000

08004408 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a0e      	ldr	r2, [pc, #56]	@ (8004450 <HAL_I2C_MspDeInit+0x48>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d115      	bne.n	8004446 <HAL_I2C_MspDeInit+0x3e>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800441a:	4b0e      	ldr	r3, [pc, #56]	@ (8004454 <HAL_I2C_MspDeInit+0x4c>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	4a0d      	ldr	r2, [pc, #52]	@ (8004454 <HAL_I2C_MspDeInit+0x4c>)
 8004420:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004424:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8004426:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800442a:	480b      	ldr	r0, [pc, #44]	@ (8004458 <HAL_I2C_MspDeInit+0x50>)
 800442c:	f003 faca 	bl	80079c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8004430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004434:	4809      	ldr	r0, [pc, #36]	@ (800445c <HAL_I2C_MspDeInit+0x54>)
 8004436:	f003 fac5 	bl	80079c4 <HAL_GPIO_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800443a:	2048      	movs	r0, #72	@ 0x48
 800443c:	f002 fd65 	bl	8006f0a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8004440:	2049      	movs	r0, #73	@ 0x49
 8004442:	f002 fd62 	bl	8006f0a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40005c00 	.word	0x40005c00
 8004454:	40023800 	.word	0x40023800
 8004458:	40020800 	.word	0x40020800
 800445c:	40020000 	.word	0x40020000

08004460 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	@ 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 0314 	add.w	r3, r7, #20
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a28      	ldr	r2, [pc, #160]	@ (8004520 <HAL_SPI_MspInit+0xc0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d14a      	bne.n	8004518 <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	4a26      	ldr	r2, [pc, #152]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 800448c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004490:	6413      	str	r3, [r2, #64]	@ 0x40
 8004492:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ca:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <HAL_SPI_MspInit+0xc4>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80044d6:	230c      	movs	r3, #12
 80044d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e2:	2303      	movs	r3, #3
 80044e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044e6:	2305      	movs	r3, #5
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	4619      	mov	r1, r3
 80044f0:	480d      	ldr	r0, [pc, #52]	@ (8004528 <HAL_SPI_MspInit+0xc8>)
 80044f2:	f003 f8cb 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	2302      	movs	r3, #2
 80044fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004504:	2303      	movs	r3, #3
 8004506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004508:	2305      	movs	r3, #5
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	4619      	mov	r1, r3
 8004512:	4806      	ldr	r0, [pc, #24]	@ (800452c <HAL_SPI_MspInit+0xcc>)
 8004514:	f003 f8ba 	bl	800768c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004518:	bf00      	nop
 800451a:	3728      	adds	r7, #40	@ 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40003800 	.word	0x40003800
 8004524:	40023800 	.word	0x40023800
 8004528:	40020800 	.word	0x40020800
 800452c:	40020400 	.word	0x40020400

08004530 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b094      	sub	sp, #80	@ 0x50
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004538:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a97      	ldr	r2, [pc, #604]	@ (80047ac <HAL_TIM_Base_MspInit+0x27c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d14d      	bne.n	80045ee <HAL_TIM_Base_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004556:	4b96      	ldr	r3, [pc, #600]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	4a95      	ldr	r2, [pc, #596]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6453      	str	r3, [r2, #68]	@ 0x44
 8004562:	4b93      	ldr	r3, [pc, #588]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	637b      	str	r3, [r7, #52]	@ 0x34
 8004572:	4b8f      	ldr	r3, [pc, #572]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	4a8e      	ldr	r2, [pc, #568]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004578:	f043 0310 	orr.w	r3, r3, #16
 800457c:	6313      	str	r3, [r2, #48]	@ 0x30
 800457e:	4b8c      	ldr	r3, [pc, #560]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	637b      	str	r3, [r7, #52]	@ 0x34
 8004588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800458a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800458e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	2302      	movs	r3, #2
 8004592:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004598:	2300      	movs	r3, #0
 800459a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800459c:	2301      	movs	r3, #1
 800459e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80045a4:	4619      	mov	r1, r3
 80045a6:	4883      	ldr	r0, [pc, #524]	@ (80047b4 <HAL_TIM_Base_MspInit+0x284>)
 80045a8:	f003 f870 	bl	800768c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2100      	movs	r1, #0
 80045b0:	2018      	movs	r0, #24
 80045b2:	f002 fc80 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80045b6:	2018      	movs	r0, #24
 80045b8:	f002 fc99 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80045bc:	2200      	movs	r2, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	2019      	movs	r0, #25
 80045c2:	f002 fc78 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045c6:	2019      	movs	r0, #25
 80045c8:	f002 fc91 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80045cc:	2200      	movs	r2, #0
 80045ce:	2100      	movs	r1, #0
 80045d0:	201a      	movs	r0, #26
 80045d2:	f002 fc70 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80045d6:	201a      	movs	r0, #26
 80045d8:	f002 fc89 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80045dc:	2200      	movs	r2, #0
 80045de:	2101      	movs	r1, #1
 80045e0:	201b      	movs	r0, #27
 80045e2:	f002 fc68 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80045e6:	201b      	movs	r0, #27
 80045e8:	f002 fc81 	bl	8006eee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80045ec:	e143      	b.n	8004876 <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM2)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f6:	d134      	bne.n	8004662 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045f8:	2300      	movs	r3, #0
 80045fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80045fc:	4b6c      	ldr	r3, [pc, #432]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	4a6b      	ldr	r2, [pc, #428]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6413      	str	r3, [r2, #64]	@ 0x40
 8004608:	4b69      	ldr	r3, [pc, #420]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	633b      	str	r3, [r7, #48]	@ 0x30
 8004612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004614:	2300      	movs	r3, #0
 8004616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004618:	4b65      	ldr	r3, [pc, #404]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461c:	4a64      	ldr	r2, [pc, #400]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6313      	str	r3, [r2, #48]	@ 0x30
 8004624:	4b62      	ldr	r3, [pc, #392]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004630:	2320      	movs	r3, #32
 8004632:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004634:	2302      	movs	r3, #2
 8004636:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	2300      	movs	r3, #0
 800463a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463c:	2300      	movs	r3, #0
 800463e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004640:	2301      	movs	r3, #1
 8004642:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004644:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004648:	4619      	mov	r1, r3
 800464a:	485b      	ldr	r0, [pc, #364]	@ (80047b8 <HAL_TIM_Base_MspInit+0x288>)
 800464c:	f003 f81e 	bl	800768c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004650:	2200      	movs	r2, #0
 8004652:	2101      	movs	r1, #1
 8004654:	201c      	movs	r0, #28
 8004656:	f002 fc2e 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800465a:	201c      	movs	r0, #28
 800465c:	f002 fc47 	bl	8006eee <HAL_NVIC_EnableIRQ>
}
 8004660:	e109      	b.n	8004876 <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM3)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a55      	ldr	r2, [pc, #340]	@ (80047bc <HAL_TIM_Base_MspInit+0x28c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d134      	bne.n	80046d6 <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800466c:	2300      	movs	r3, #0
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004670:	4b4f      	ldr	r3, [pc, #316]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	4a4e      	ldr	r2, [pc, #312]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	6413      	str	r3, [r2, #64]	@ 0x40
 800467c:	4b4c      	ldr	r3, [pc, #304]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
 800468c:	4b48      	ldr	r3, [pc, #288]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	4a47      	ldr	r2, [pc, #284]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004692:	f043 0302 	orr.w	r3, r3, #2
 8004696:	6313      	str	r3, [r2, #48]	@ 0x30
 8004698:	4b45      	ldr	r3, [pc, #276]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80046a4:	2310      	movs	r3, #16
 80046a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a8:	2302      	movs	r3, #2
 80046aa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b0:	2300      	movs	r3, #0
 80046b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046b4:	2302      	movs	r3, #2
 80046b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80046bc:	4619      	mov	r1, r3
 80046be:	4840      	ldr	r0, [pc, #256]	@ (80047c0 <HAL_TIM_Base_MspInit+0x290>)
 80046c0:	f002 ffe4 	bl	800768c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2100      	movs	r1, #0
 80046c8:	201d      	movs	r0, #29
 80046ca:	f002 fbf4 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046ce:	201d      	movs	r0, #29
 80046d0:	f002 fc0d 	bl	8006eee <HAL_NVIC_EnableIRQ>
}
 80046d4:	e0cf      	b.n	8004876 <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM4)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3a      	ldr	r2, [pc, #232]	@ (80047c4 <HAL_TIM_Base_MspInit+0x294>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d135      	bne.n	800474c <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046e0:	2300      	movs	r3, #0
 80046e2:	623b      	str	r3, [r7, #32]
 80046e4:	4b32      	ldr	r3, [pc, #200]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 80046e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e8:	4a31      	ldr	r2, [pc, #196]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 80046ea:	f043 0304 	orr.w	r3, r3, #4
 80046ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80046f0:	4b2f      	ldr	r3, [pc, #188]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	4b2b      	ldr	r3, [pc, #172]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004704:	4a2a      	ldr	r2, [pc, #168]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004706:	f043 0308 	orr.w	r3, r3, #8
 800470a:	6313      	str	r3, [r2, #48]	@ 0x30
 800470c:	4b28      	ldr	r3, [pc, #160]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004726:	2300      	movs	r3, #0
 8004728:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800472a:	2302      	movs	r3, #2
 800472c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800472e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004732:	4619      	mov	r1, r3
 8004734:	4824      	ldr	r0, [pc, #144]	@ (80047c8 <HAL_TIM_Base_MspInit+0x298>)
 8004736:	f002 ffa9 	bl	800768c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	2101      	movs	r1, #1
 800473e:	201e      	movs	r0, #30
 8004740:	f002 fbb9 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004744:	201e      	movs	r0, #30
 8004746:	f002 fbd2 	bl	8006eee <HAL_NVIC_EnableIRQ>
}
 800474a:	e094      	b.n	8004876 <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM6)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <HAL_TIM_Base_MspInit+0x29c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10e      	bne.n	8004774 <HAL_TIM_Base_MspInit+0x244>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	4a14      	ldr	r2, [pc, #80]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004760:	f043 0310 	orr.w	r3, r3, #16
 8004764:	6413      	str	r3, [r2, #64]	@ 0x40
 8004766:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	69bb      	ldr	r3, [r7, #24]
}
 8004772:	e080      	b.n	8004876 <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM7)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <HAL_TIM_Base_MspInit+0x2a0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d12a      	bne.n	80047d4 <HAL_TIM_Base_MspInit+0x2a4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004788:	f043 0320 	orr.w	r3, r3, #32
 800478c:	6413      	str	r3, [r2, #64]	@ 0x40
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <HAL_TIM_Base_MspInit+0x280>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	2037      	movs	r0, #55	@ 0x37
 80047a0:	f002 fb89 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80047a4:	2037      	movs	r0, #55	@ 0x37
 80047a6:	f002 fba2 	bl	8006eee <HAL_NVIC_EnableIRQ>
}
 80047aa:	e064      	b.n	8004876 <HAL_TIM_Base_MspInit+0x346>
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40020000 	.word	0x40020000
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40020400 	.word	0x40020400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40020c00 	.word	0x40020c00
 80047cc:	40001000 	.word	0x40001000
 80047d0:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a29      	ldr	r2, [pc, #164]	@ (8004880 <HAL_TIM_Base_MspInit+0x350>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d14b      	bne.n	8004876 <HAL_TIM_Base_MspInit+0x346>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	4b28      	ldr	r3, [pc, #160]	@ (8004884 <HAL_TIM_Base_MspInit+0x354>)
 80047e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e6:	4a27      	ldr	r2, [pc, #156]	@ (8004884 <HAL_TIM_Base_MspInit+0x354>)
 80047e8:	f043 0302 	orr.w	r3, r3, #2
 80047ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ee:	4b25      	ldr	r3, [pc, #148]	@ (8004884 <HAL_TIM_Base_MspInit+0x354>)
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	4b21      	ldr	r3, [pc, #132]	@ (8004884 <HAL_TIM_Base_MspInit+0x354>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004802:	4a20      	ldr	r2, [pc, #128]	@ (8004884 <HAL_TIM_Base_MspInit+0x354>)
 8004804:	f043 0304 	orr.w	r3, r3, #4
 8004808:	6313      	str	r3, [r2, #48]	@ 0x30
 800480a:	4b1e      	ldr	r3, [pc, #120]	@ (8004884 <HAL_TIM_Base_MspInit+0x354>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004816:	2340      	movs	r3, #64	@ 0x40
 8004818:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481a:	2302      	movs	r3, #2
 800481c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481e:	2300      	movs	r3, #0
 8004820:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004822:	2300      	movs	r3, #0
 8004824:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004826:	2303      	movs	r3, #3
 8004828:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800482a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800482e:	4619      	mov	r1, r3
 8004830:	4815      	ldr	r0, [pc, #84]	@ (8004888 <HAL_TIM_Base_MspInit+0x358>)
 8004832:	f002 ff2b 	bl	800768c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004836:	2200      	movs	r2, #0
 8004838:	2100      	movs	r1, #0
 800483a:	202b      	movs	r0, #43	@ 0x2b
 800483c:	f002 fb3b 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004840:	202b      	movs	r0, #43	@ 0x2b
 8004842:	f002 fb54 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004846:	2200      	movs	r2, #0
 8004848:	2100      	movs	r1, #0
 800484a:	202c      	movs	r0, #44	@ 0x2c
 800484c:	f002 fb33 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004850:	202c      	movs	r0, #44	@ 0x2c
 8004852:	f002 fb4c 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004856:	2200      	movs	r2, #0
 8004858:	2100      	movs	r1, #0
 800485a:	202d      	movs	r0, #45	@ 0x2d
 800485c:	f002 fb2b 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004860:	202d      	movs	r0, #45	@ 0x2d
 8004862:	f002 fb44 	bl	8006eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8004866:	2200      	movs	r2, #0
 8004868:	2101      	movs	r1, #1
 800486a:	202e      	movs	r0, #46	@ 0x2e
 800486c:	f002 fb23 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004870:	202e      	movs	r0, #46	@ 0x2e
 8004872:	f002 fb3c 	bl	8006eee <HAL_NVIC_EnableIRQ>
}
 8004876:	bf00      	nop
 8004878:	3750      	adds	r7, #80	@ 0x50
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40010400 	.word	0x40010400
 8004884:	40023800 	.word	0x40023800
 8004888:	40020800 	.word	0x40020800

0800488c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a12      	ldr	r2, [pc, #72]	@ (80048f4 <HAL_TIM_MspPostInit+0x68>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d11e      	bne.n	80048ec <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	4b11      	ldr	r3, [pc, #68]	@ (80048f8 <HAL_TIM_MspPostInit+0x6c>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	4a10      	ldr	r2, [pc, #64]	@ (80048f8 <HAL_TIM_MspPostInit+0x6c>)
 80048b8:	f043 0310 	orr.w	r3, r3, #16
 80048bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80048be:	4b0e      	ldr	r3, [pc, #56]	@ (80048f8 <HAL_TIM_MspPostInit+0x6c>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80048ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d8:	2300      	movs	r3, #0
 80048da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80048dc:	2301      	movs	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048e0:	f107 030c 	add.w	r3, r7, #12
 80048e4:	4619      	mov	r1, r3
 80048e6:	4805      	ldr	r0, [pc, #20]	@ (80048fc <HAL_TIM_MspPostInit+0x70>)
 80048e8:	f002 fed0 	bl	800768c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80048ec:	bf00      	nop
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40021000 	.word	0x40021000

08004900 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1d      	ldr	r2, [pc, #116]	@ (8004994 <HAL_UART_MspInit+0x94>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d134      	bne.n	800498c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	4b1c      	ldr	r3, [pc, #112]	@ (8004998 <HAL_UART_MspInit+0x98>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	4a1b      	ldr	r2, [pc, #108]	@ (8004998 <HAL_UART_MspInit+0x98>)
 800492c:	f043 0310 	orr.w	r3, r3, #16
 8004930:	6453      	str	r3, [r2, #68]	@ 0x44
 8004932:	4b19      	ldr	r3, [pc, #100]	@ (8004998 <HAL_UART_MspInit+0x98>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	4b15      	ldr	r3, [pc, #84]	@ (8004998 <HAL_UART_MspInit+0x98>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004946:	4a14      	ldr	r2, [pc, #80]	@ (8004998 <HAL_UART_MspInit+0x98>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6313      	str	r3, [r2, #48]	@ 0x30
 800494e:	4b12      	ldr	r3, [pc, #72]	@ (8004998 <HAL_UART_MspInit+0x98>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800495a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800495e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004960:	2302      	movs	r3, #2
 8004962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004968:	2303      	movs	r3, #3
 800496a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800496c:	2307      	movs	r3, #7
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004970:	f107 0314 	add.w	r3, r7, #20
 8004974:	4619      	mov	r1, r3
 8004976:	4809      	ldr	r0, [pc, #36]	@ (800499c <HAL_UART_MspInit+0x9c>)
 8004978:	f002 fe88 	bl	800768c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800497c:	2200      	movs	r2, #0
 800497e:	2100      	movs	r1, #0
 8004980:	2025      	movs	r0, #37	@ 0x25
 8004982:	f002 fa98 	bl	8006eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004986:	2025      	movs	r0, #37	@ 0x25
 8004988:	f002 fab1 	bl	8006eee <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800498c:	bf00      	nop
 800498e:	3728      	adds	r7, #40	@ 0x28
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40011000 	.word	0x40011000
 8004998:	40023800 	.word	0x40023800
 800499c:	40020000 	.word	0x40020000

080049a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <NMI_Handler+0x4>

080049a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <HardFault_Handler+0x4>

080049b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <MemManage_Handler+0x4>

080049b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <BusFault_Handler+0x4>

080049c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <UsageFault_Handler+0x4>

080049c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049f6:	f000 fd35 	bl	8005464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}

080049fe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004a10:	4802      	ldr	r0, [pc, #8]	@ (8004a1c <ADC_IRQHandler+0x10>)
 8004a12:	f000 feca 	bl	80057aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000334 	.word	0x20000334

08004a20 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a24:	4802      	ldr	r0, [pc, #8]	@ (8004a30 <CAN1_TX_IRQHandler+0x10>)
 8004a26:	f001 ff17 	bl	8006858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	200003dc 	.word	0x200003dc

08004a34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a38:	4802      	ldr	r0, [pc, #8]	@ (8004a44 <CAN1_RX0_IRQHandler+0x10>)
 8004a3a:	f001 ff0d 	bl	8006858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200003dc 	.word	0x200003dc

08004a48 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a4c:	4802      	ldr	r0, [pc, #8]	@ (8004a58 <CAN1_RX1_IRQHandler+0x10>)
 8004a4e:	f001 ff03 	bl	8006858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200003dc 	.word	0x200003dc

08004a5c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a60:	4802      	ldr	r0, [pc, #8]	@ (8004a6c <CAN1_SCE_IRQHandler+0x10>)
 8004a62:	f001 fef9 	bl	8006858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200003dc 	.word	0x200003dc

08004a70 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a74:	4802      	ldr	r0, [pc, #8]	@ (8004a80 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004a76:	f006 ff5b 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200004e0 	.word	0x200004e0

08004a84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a88:	4802      	ldr	r0, [pc, #8]	@ (8004a94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a8a:	f006 ff51 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200004e0 	.word	0x200004e0

08004a98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a9c:	4802      	ldr	r0, [pc, #8]	@ (8004aa8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004a9e:	f006 ff47 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200004e0 	.word	0x200004e0

08004aac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ab0:	4802      	ldr	r0, [pc, #8]	@ (8004abc <TIM1_CC_IRQHandler+0x10>)
 8004ab2:	f006 ff3d 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200004e0 	.word	0x200004e0

08004ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ac4:	4802      	ldr	r0, [pc, #8]	@ (8004ad0 <TIM2_IRQHandler+0x10>)
 8004ac6:	f006 ff33 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000528 	.word	0x20000528

08004ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ad8:	4802      	ldr	r0, [pc, #8]	@ (8004ae4 <TIM3_IRQHandler+0x10>)
 8004ada:	f006 ff29 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000570 	.word	0x20000570

08004ae8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004aec:	4802      	ldr	r0, [pc, #8]	@ (8004af8 <TIM4_IRQHandler+0x10>)
 8004aee:	f006 ff1f 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	200005b8 	.word	0x200005b8

08004afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b00:	4802      	ldr	r0, [pc, #8]	@ (8004b0c <USART1_IRQHandler+0x10>)
 8004b02:	f008 f88b 	bl	800cc1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200006d8 	.word	0x200006d8

08004b10 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004b14:	4802      	ldr	r0, [pc, #8]	@ (8004b20 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004b16:	f006 ff0b 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000690 	.word	0x20000690

08004b24 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004b28:	4802      	ldr	r0, [pc, #8]	@ (8004b34 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004b2a:	f006 ff01 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000690 	.word	0x20000690

08004b38 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004b3c:	4802      	ldr	r0, [pc, #8]	@ (8004b48 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004b3e:	f006 fef7 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000690 	.word	0x20000690

08004b4c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004b50:	4802      	ldr	r0, [pc, #8]	@ (8004b5c <TIM8_CC_IRQHandler+0x10>)
 8004b52:	f006 feed 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004b56:	bf00      	nop
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000690 	.word	0x20000690

08004b60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004b64:	4802      	ldr	r0, [pc, #8]	@ (8004b70 <TIM7_IRQHandler+0x10>)
 8004b66:	f006 fee3 	bl	800b930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000648 	.word	0x20000648

08004b74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004b78:	4802      	ldr	r0, [pc, #8]	@ (8004b84 <DMA2_Stream0_IRQHandler+0x10>)
 8004b7a:	f002 fb3d 	bl	80071f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	2000037c 	.word	0x2000037c

08004b88 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004b8c:	4802      	ldr	r0, [pc, #8]	@ (8004b98 <CAN2_TX_IRQHandler+0x10>)
 8004b8e:	f001 fe63 	bl	8006858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000404 	.word	0x20000404

08004b9c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004ba0:	4802      	ldr	r0, [pc, #8]	@ (8004bac <CAN2_RX0_IRQHandler+0x10>)
 8004ba2:	f001 fe59 	bl	8006858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000404 	.word	0x20000404

08004bb0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004bb4:	4802      	ldr	r0, [pc, #8]	@ (8004bc0 <CAN2_RX1_IRQHandler+0x10>)
 8004bb6:	f001 fe4f 	bl	8006858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000404 	.word	0x20000404

08004bc4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004bc8:	4802      	ldr	r0, [pc, #8]	@ (8004bd4 <I2C3_EV_IRQHandler+0x10>)
 8004bca:	f003 fbff 	bl	80083cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000434 	.word	0x20000434

08004bd8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004bdc:	4802      	ldr	r0, [pc, #8]	@ (8004be8 <I2C3_ER_IRQHandler+0x10>)
 8004bde:	f003 fd66 	bl	80086ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000434 	.word	0x20000434

08004bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return 1;
 8004bf0:	2301      	movs	r3, #1
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <_kill>:

int _kill(int pid, int sig)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c06:	f009 fe4d 	bl	800e8a4 <__errno>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2216      	movs	r2, #22
 8004c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <_exit>:

void _exit (int status)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c24:	f04f 31ff 	mov.w	r1, #4294967295
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ffe7 	bl	8004bfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <_exit+0x12>

08004c32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e00a      	b.n	8004c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c44:	f3af 8000 	nop.w
 8004c48:	4601      	mov	r1, r0
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	60ba      	str	r2, [r7, #8]
 8004c50:	b2ca      	uxtb	r2, r1
 8004c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	3301      	adds	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	dbf0      	blt.n	8004c44 <_read+0x12>
  }

  return len;
 8004c62:	687b      	ldr	r3, [r7, #4]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e009      	b.n	8004c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	60ba      	str	r2, [r7, #8]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	dbf1      	blt.n	8004c7e <_write+0x12>
  }
  return len;
 8004c9a:	687b      	ldr	r3, [r7, #4]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_close>:

int _close(int file)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <_isatty>:

int _isatty(int file)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ce4:	2301      	movs	r3, #1
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d14:	4a14      	ldr	r2, [pc, #80]	@ (8004d68 <_sbrk+0x5c>)
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <_sbrk+0x60>)
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d20:	4b13      	ldr	r3, [pc, #76]	@ (8004d70 <_sbrk+0x64>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d28:	4b11      	ldr	r3, [pc, #68]	@ (8004d70 <_sbrk+0x64>)
 8004d2a:	4a12      	ldr	r2, [pc, #72]	@ (8004d74 <_sbrk+0x68>)
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d2e:	4b10      	ldr	r3, [pc, #64]	@ (8004d70 <_sbrk+0x64>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4413      	add	r3, r2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d207      	bcs.n	8004d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d3c:	f009 fdb2 	bl	800e8a4 <__errno>
 8004d40:	4603      	mov	r3, r0
 8004d42:	220c      	movs	r2, #12
 8004d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4a:	e009      	b.n	8004d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <_sbrk+0x64>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d52:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <_sbrk+0x64>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	4a05      	ldr	r2, [pc, #20]	@ (8004d70 <_sbrk+0x64>)
 8004d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20020000 	.word	0x20020000
 8004d6c:	00000400 	.word	0x00000400
 8004d70:	200017a0 	.word	0x200017a0
 8004d74:	20001938 	.word	0x20001938

08004d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d7c:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <SystemInit+0x20>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d82:	4a05      	ldr	r2, [pc, #20]	@ (8004d98 <SystemInit+0x20>)
 8004d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	e000ed00 	.word	0xe000ed00

08004d9c <delay_us>:

    return temp[FILTER_WINDOW_SIZE / 2];
}

// ==== DELAY MICRO GIÂY ====
void delay_us(uint16_t us) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6, 0);
 8004da6:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <delay_us+0x34>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim6);
 8004dae:	4808      	ldr	r0, [pc, #32]	@ (8004dd0 <delay_us+0x34>)
 8004db0:	f006 fa36 	bl	800b220 <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 8004db4:	bf00      	nop
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <delay_us+0x34>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3f9      	bcc.n	8004db6 <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim6);
 8004dc2:	4803      	ldr	r0, [pc, #12]	@ (8004dd0 <delay_us+0x34>)
 8004dc4:	f006 fa94 	bl	800b2f0 <HAL_TIM_Base_Stop>
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000600 	.word	0x20000600

08004dd4 <US01_TriggerOne>:

// ==== TRIGGER MỘT CẢM BIẾN ====
void US01_TriggerOne(uint8_t id) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b092      	sub	sp, #72	@ 0x48
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TRIG_PORT[id], TRIG_PIN[id], GPIO_PIN_SET);
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	4a29      	ldr	r2, [pc, #164]	@ (8004e88 <US01_TriggerOne+0xb4>)
 8004de2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	4a28      	ldr	r2, [pc, #160]	@ (8004e8c <US01_TriggerOne+0xb8>)
 8004dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dee:	2201      	movs	r2, #1
 8004df0:	4619      	mov	r1, r3
 8004df2:	f002 fee3 	bl	8007bbc <HAL_GPIO_WritePin>
    delay_us(10);
 8004df6:	200a      	movs	r0, #10
 8004df8:	f7ff ffd0 	bl	8004d9c <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT[id], TRIG_PIN[id], GPIO_PIN_RESET);
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	4a22      	ldr	r2, [pc, #136]	@ (8004e88 <US01_TriggerOne+0xb4>)
 8004e00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	4a21      	ldr	r2, [pc, #132]	@ (8004e8c <US01_TriggerOne+0xb8>)
 8004e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f002 fed4 	bl	8007bbc <HAL_GPIO_WritePin>

    Is_First_Captured[id] = 0;
 8004e14:	79fb      	ldrb	r3, [r7, #7]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <US01_TriggerOne+0xbc>)
 8004e18:	2100      	movs	r1, #0
 8004e1a:	54d1      	strb	r1, [r2, r3]
    HAL_TIM_IC_Start_IT(htim[id], TIM_CHANNEL[id]);
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004e94 <US01_TriggerOne+0xc0>)
 8004e20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	491c      	ldr	r1, [pc, #112]	@ (8004e98 <US01_TriggerOne+0xc4>)
 8004e28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f006 fba8 	bl	800b584 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_ENABLE_IT(htim[id], TIM_IT_CC[id]);
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	4a17      	ldr	r2, [pc, #92]	@ (8004e94 <US01_TriggerOne+0xc0>)
 8004e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68d9      	ldr	r1, [r3, #12]
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	4a16      	ldr	r2, [pc, #88]	@ (8004e9c <US01_TriggerOne+0xc8>)
 8004e44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	4812      	ldr	r0, [pc, #72]	@ (8004e94 <US01_TriggerOne+0xc0>)
 8004e4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	60da      	str	r2, [r3, #12]

    char msg[64];
    snprintf(msg, sizeof(msg), "TRIG sensor %d\r\n", id);
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	f107 0008 	add.w	r0, r7, #8
 8004e5c:	4a10      	ldr	r2, [pc, #64]	@ (8004ea0 <US01_TriggerOne+0xcc>)
 8004e5e:	2140      	movs	r1, #64	@ 0x40
 8004e60:	f009 fb8e 	bl	800e580 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004e64:	f107 0308 	add.w	r3, r7, #8
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fb fa01 	bl	8000270 <strlen>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	f107 0108 	add.w	r1, r7, #8
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7a:	480a      	ldr	r0, [pc, #40]	@ (8004ea4 <US01_TriggerOne+0xd0>)
 8004e7c:	f007 fe42 	bl	800cb04 <HAL_UART_Transmit>
}
 8004e80:	bf00      	nop
 8004e82:	3748      	adds	r7, #72	@ 0x48
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200000f4 	.word	0x200000f4
 8004e8c:	20000104 	.word	0x20000104
 8004e90:	200017d4 	.word	0x200017d4
 8004e94:	2000010c 	.word	0x2000010c
 8004e98:	200017a4 	.word	0x200017a4
 8004e9c:	2000011c 	.word	0x2000011c
 8004ea0:	08011b04 	.word	0x08011b04
 8004ea4:	200006d8 	.word	0x200006d8

08004ea8 <HAL_TIM_IC_CaptureCallback>:

// ==== NGẮT INPUT CAPTURE ====
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htimx) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b0a8      	sub	sp, #160	@ 0xa0
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
    check_it(htimx);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fd fb2b 	bl	800250c <check_it>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ebc:	e1a9      	b.n	8005212 <HAL_TIM_IC_CaptureCallback+0x36a>
        if (htimx->Instance == htim[i]->Instance) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	49ac      	ldr	r1, [pc, #688]	@ (8005174 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8004ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	f040 819a 	bne.w	8005208 <HAL_TIM_IC_CaptureCallback+0x360>
            if (Is_First_Captured[i] == 0) {
 8004ed4:	4aa8      	ldr	r2, [pc, #672]	@ (8005178 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004eda:	4413      	add	r3, r2
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f040 8086 	bne.w	8004ff2 <HAL_TIM_IC_CaptureCallback+0x14a>
                IC_Val1[i] = HAL_TIM_ReadCapturedValue(htimx, TIM_CHANNEL[i]);
 8004ee6:	4aa5      	ldr	r2, [pc, #660]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f007 f832 	bl	800bf5c <HAL_TIM_ReadCapturedValue>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	49a1      	ldr	r1, [pc, #644]	@ (8005180 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8004efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                Is_First_Captured[i] = 1;
 8004f04:	4a9c      	ldr	r2, [pc, #624]	@ (8005178 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8004f06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f0a:	4413      	add	r3, r2
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_FALLING);
 8004f10:	4a9a      	ldr	r2, [pc, #616]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d108      	bne.n	8004f30 <HAL_TIM_IC_CaptureCallback+0x88>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a1a      	ldr	r2, [r3, #32]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 020a 	bic.w	r2, r2, #10
 8004f2c:	621a      	str	r2, [r3, #32]
 8004f2e:	e027      	b.n	8004f80 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004f30:	4a92      	ldr	r2, [pc, #584]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d108      	bne.n	8004f50 <HAL_TIM_IC_CaptureCallback+0xa8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f4c:	6213      	str	r3, [r2, #32]
 8004f4e:	e017      	b.n	8004f80 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004f50:	4a8a      	ldr	r2, [pc, #552]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004f52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d108      	bne.n	8004f70 <HAL_TIM_IC_CaptureCallback+0xc8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004f6c:	6213      	str	r3, [r2, #32]
 8004f6e:	e007      	b.n	8004f80 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004f7e:	6213      	str	r3, [r2, #32]
 8004f80:	4a7e      	ldr	r2, [pc, #504]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d108      	bne.n	8004fa0 <HAL_TIM_IC_CaptureCallback+0xf8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a1a      	ldr	r2, [r3, #32]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0202 	orr.w	r2, r2, #2
 8004f9c:	621a      	str	r2, [r3, #32]

                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_RISING);
                __HAL_TIM_DISABLE_IT(htimx, TIM_IT_CC[i]);
                HAL_TIM_IC_Stop_IT(htimx, TIM_CHANNEL[i]);
            }
            break;
 8004f9e:	e13e      	b.n	800521e <HAL_TIM_IC_CaptureCallback+0x376>
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_FALLING);
 8004fa0:	4a76      	ldr	r2, [pc, #472]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d108      	bne.n	8004fc0 <HAL_TIM_IC_CaptureCallback+0x118>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	f043 0320 	orr.w	r3, r3, #32
 8004fbc:	6213      	str	r3, [r2, #32]
 8004fbe:	e122      	b.n	8005206 <HAL_TIM_IC_CaptureCallback+0x35e>
 8004fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004fc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d108      	bne.n	8004fe0 <HAL_TIM_IC_CaptureCallback+0x138>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fdc:	6213      	str	r3, [r2, #32]
 8004fde:	e112      	b.n	8005206 <HAL_TIM_IC_CaptureCallback+0x35e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fee:	6213      	str	r3, [r2, #32]
            break;
 8004ff0:	e115      	b.n	800521e <HAL_TIM_IC_CaptureCallback+0x376>
                IC_Val2[i] = HAL_TIM_ReadCapturedValue(htimx, TIM_CHANNEL[i]);
 8004ff2:	4a62      	ldr	r2, [pc, #392]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8004ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f006 ffac 	bl	800bf5c <HAL_TIM_ReadCapturedValue>
 8005004:	4602      	mov	r2, r0
 8005006:	495f      	ldr	r1, [pc, #380]	@ (8005184 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8005008:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800500c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                __HAL_TIM_SET_COUNTER(htimx, 0);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	625a      	str	r2, [r3, #36]	@ 0x24
                uint32_t max_timer = __HAL_TIM_GET_AUTORELOAD(htim[i]);
 8005018:	4a56      	ldr	r2, [pc, #344]	@ (8005174 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 800501a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800501e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                uint32_t diff = (IC_Val2[i] > IC_Val1[i]) ?
 800502a:	4a56      	ldr	r2, [pc, #344]	@ (8005184 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800502c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005030:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005034:	4952      	ldr	r1, [pc, #328]	@ (8005180 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8005036:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800503a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (IC_Val2[i] - IC_Val1[i]) :
 800503e:	429a      	cmp	r2, r3
 8005040:	d90b      	bls.n	800505a <HAL_TIM_IC_CaptureCallback+0x1b2>
 8005042:	4a50      	ldr	r2, [pc, #320]	@ (8005184 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8005044:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005048:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800504c:	494c      	ldr	r1, [pc, #304]	@ (8005180 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800504e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005052:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	e00d      	b.n	8005076 <HAL_TIM_IC_CaptureCallback+0x1ce>
                                ((max_timer - IC_Val1[i]) + IC_Val2[i]);
 800505a:	4a49      	ldr	r2, [pc, #292]	@ (8005180 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800505c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005064:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005068:	1ad2      	subs	r2, r2, r3
 800506a:	4946      	ldr	r1, [pc, #280]	@ (8005184 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800506c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (IC_Val2[i] - IC_Val1[i]) :
 8005074:	4413      	add	r3, r2
                uint32_t diff = (IC_Val2[i] > IC_Val1[i]) ?
 8005076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                uint32_t raw = (diff * 0.034f) / 2.0f;
 800507a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005086:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8005188 <HAL_TIM_IC_CaptureCallback+0x2e0>
 800508a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800508e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800509a:	ee17 3a90 	vmov	r3, s15
 800509e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                Distances[i]=raw;
 80050a2:	493a      	ldr	r1, [pc, #232]	@ (800518c <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80050a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80050ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                Is_First_Captured[i] = 0;
 80050b0:	4a31      	ldr	r2, [pc, #196]	@ (8005178 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80050b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050b6:	4413      	add	r3, r2
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
                         i, raw, Distances[i]);
 80050bc:	4a33      	ldr	r2, [pc, #204]	@ (800518c <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80050be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                snprintf(msg, sizeof(msg),
 80050c6:	f107 0008 	add.w	r0, r7, #8
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005190 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80050d8:	2180      	movs	r1, #128	@ 0x80
 80050da:	f009 fa51 	bl	800e580 <sniprintf>
                UART_SendString(msg);
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f8ba 	bl	800525c <UART_SendString>
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_RISING);
 80050e8:	4a24      	ldr	r2, [pc, #144]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80050ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d108      	bne.n	8005108 <HAL_TIM_IC_CaptureCallback+0x260>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 020a 	bic.w	r2, r2, #10
 8005104:	621a      	str	r2, [r3, #32]
 8005106:	e027      	b.n	8005158 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8005108:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 800510a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d108      	bne.n	8005128 <HAL_TIM_IC_CaptureCallback+0x280>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005124:	6213      	str	r3, [r2, #32]
 8005126:	e017      	b.n	8005158 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8005128:	4a14      	ldr	r2, [pc, #80]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 800512a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	2b08      	cmp	r3, #8
 8005134:	d108      	bne.n	8005148 <HAL_TIM_IC_CaptureCallback+0x2a0>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005144:	6213      	str	r3, [r2, #32]
 8005146:	e007      	b.n	8005158 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005156:	6213      	str	r3, [r2, #32]
 8005158:	4a08      	ldr	r2, [pc, #32]	@ (800517c <HAL_TIM_IC_CaptureCallback+0x2d4>)
 800515a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800515e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d116      	bne.n	8005194 <HAL_TIM_IC_CaptureCallback+0x2ec>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a12      	ldr	r2, [r2, #32]
 8005170:	621a      	str	r2, [r3, #32]
 8005172:	e031      	b.n	80051d8 <HAL_TIM_IC_CaptureCallback+0x330>
 8005174:	2000010c 	.word	0x2000010c
 8005178:	200017d4 	.word	0x200017d4
 800517c:	200017a4 	.word	0x200017a4
 8005180:	200017b4 	.word	0x200017b4
 8005184:	200017c4 	.word	0x200017c4
 8005188:	3d0b4396 	.word	0x3d0b4396
 800518c:	200017d8 	.word	0x200017d8
 8005190:	08011b18 	.word	0x08011b18
 8005194:	4a24      	ldr	r2, [pc, #144]	@ (8005228 <HAL_TIM_IC_CaptureCallback+0x380>)
 8005196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800519a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d106      	bne.n	80051b0 <HAL_TIM_IC_CaptureCallback+0x308>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	6213      	str	r3, [r2, #32]
 80051ae:	e013      	b.n	80051d8 <HAL_TIM_IC_CaptureCallback+0x330>
 80051b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005228 <HAL_TIM_IC_CaptureCallback+0x380>)
 80051b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d106      	bne.n	80051cc <HAL_TIM_IC_CaptureCallback+0x324>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	6213      	str	r3, [r2, #32]
 80051ca:	e005      	b.n	80051d8 <HAL_TIM_IC_CaptureCallback+0x330>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	6213      	str	r3, [r2, #32]
                __HAL_TIM_DISABLE_IT(htimx, TIM_IT_CC[i]);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	4a13      	ldr	r2, [pc, #76]	@ (800522c <HAL_TIM_IC_CaptureCallback+0x384>)
 80051e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e8:	43da      	mvns	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	400a      	ands	r2, r1
 80051f0:	60da      	str	r2, [r3, #12]
                HAL_TIM_IC_Stop_IT(htimx, TIM_CHANNEL[i]);
 80051f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005228 <HAL_TIM_IC_CaptureCallback+0x380>)
 80051f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f006 fae8 	bl	800b7d4 <HAL_TIM_IC_Stop_IT>
            break;
 8005204:	e00b      	b.n	800521e <HAL_TIM_IC_CaptureCallback+0x376>
 8005206:	e00a      	b.n	800521e <HAL_TIM_IC_CaptureCallback+0x376>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8005208:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800520c:	3301      	adds	r3, #1
 800520e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005212:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005216:	2b03      	cmp	r3, #3
 8005218:	f77f ae51 	ble.w	8004ebe <HAL_TIM_IC_CaptureCallback+0x16>
        }
    }
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	3798      	adds	r7, #152	@ 0x98
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	200017a4 	.word	0x200017a4
 800522c:	2000011c 	.word	0x2000011c

08005230 <US01_GetDistance>:

// ==== TRUY XUẤT GIÁ TRỊ ====
uint32_t US01_GetDistance(uint8_t id) {
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
    return (id < NUM_SENSORS) ? Distances[id] : 0;
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d804      	bhi.n	800524a <US01_GetDistance+0x1a>
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	4a05      	ldr	r2, [pc, #20]	@ (8005258 <US01_GetDistance+0x28>)
 8005244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005248:	e000      	b.n	800524c <US01_GetDistance+0x1c>
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	200017d8 	.word	0x200017d8

0800525c <UART_SendString>:

void UART_SendString(char *str) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fb f803 	bl	8000270 <strlen>
 800526a:	4603      	mov	r3, r0
 800526c:	b29a      	uxth	r2, r3
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4803      	ldr	r0, [pc, #12]	@ (8005284 <UART_SendString+0x28>)
 8005276:	f007 fc45 	bl	800cb04 <HAL_UART_Transmit>
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200006d8 	.word	0x200006d8

08005288 <US01_SendAllDistances_CAN>:

// ==== GỬI DỮ LIỆU CAN ====
void US01_SendAllDistances_CAN(void) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
    uint8_t data[8];

    for (int i = 0; i < NUM_SENSORS; i++) {
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e025      	b.n	80052e0 <US01_SendAllDistances_CAN+0x58>
        uint16_t dist = (uint16_t)US01_GetDistance(i);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff ffc9 	bl	8005230 <US01_GetDistance>
 800529e:	4603      	mov	r3, r0
 80052a0:	817b      	strh	r3, [r7, #10]

        if (dist > 500 || dist <= 1) {
 80052a2:	897b      	ldrh	r3, [r7, #10]
 80052a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80052a8:	d802      	bhi.n	80052b0 <US01_SendAllDistances_CAN+0x28>
 80052aa:	897b      	ldrh	r3, [r7, #10]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d801      	bhi.n	80052b4 <US01_SendAllDistances_CAN+0x2c>
            dist = 0x0033;
 80052b0:	2333      	movs	r3, #51	@ 0x33
 80052b2:	817b      	strh	r3, [r7, #10]
        }

        data[2 * i]     = (dist >> 8) & 0xFF;
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	3310      	adds	r3, #16
 80052c2:	443b      	add	r3, r7
 80052c4:	f803 2c10 	strb.w	r2, [r3, #-16]
        data[2 * i + 1] = dist & 0xFF;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	3301      	adds	r3, #1
 80052ce:	897a      	ldrh	r2, [r7, #10]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	3310      	adds	r3, #16
 80052d4:	443b      	add	r3, r7
 80052d6:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < NUM_SENSORS; i++) {
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	ddd6      	ble.n	8005294 <US01_SendAllDistances_CAN+0xc>
    }

    CAN_SendTopicData(TOPIC_ID_US01, data, 8);
 80052e6:	463b      	mov	r3, r7
 80052e8:	2208      	movs	r2, #8
 80052ea:	4619      	mov	r1, r3
 80052ec:	2016      	movs	r0, #22
 80052ee:	f7fc ffef 	bl	80022d0 <CAN_SendTopicData>
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <US01_TriggerAll_Sequential>:

void US01_TriggerAll_Sequential(void) {
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
    // KHÔNG DÙNG nếu bạn đã dùng trigger từng sensor trong vòng lặp
    for (int i = 0; i < NUM_SENSORS; i++) {
 8005300:	2300      	movs	r3, #0
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	e00a      	b.n	800531c <US01_TriggerAll_Sequential+0x22>
        US01_TriggerOne(i);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fd62 	bl	8004dd4 <US01_TriggerOne>
        delay_us(10);
 8005310:	200a      	movs	r0, #10
 8005312:	f7ff fd43 	bl	8004d9c <delay_us>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3301      	adds	r3, #1
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b03      	cmp	r3, #3
 8005320:	ddf1      	ble.n	8005306 <US01_TriggerAll_Sequential+0xc>
    }
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <PrintAllDistances>:

// ==== IN KẾT QUẢ ====
void PrintAllDistances(void) {
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b0a5      	sub	sp, #148	@ 0x94
 8005330:	af04      	add	r7, sp, #16
    char buf[128];
    snprintf(buf, sizeof(buf),
             "Truoc2: %lucm | Trai: %lucm | Truoc1: %lucm | Phai: %lucm\r\n",
             Distances[0], Distances[1], Distances[2], Distances[3]);
 8005332:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <PrintAllDistances+0x38>)
 8005334:	681c      	ldr	r4, [r3, #0]
 8005336:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <PrintAllDistances+0x38>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4a0a      	ldr	r2, [pc, #40]	@ (8005364 <PrintAllDistances+0x38>)
 800533c:	6892      	ldr	r2, [r2, #8]
 800533e:	4909      	ldr	r1, [pc, #36]	@ (8005364 <PrintAllDistances+0x38>)
 8005340:	68c9      	ldr	r1, [r1, #12]
    snprintf(buf, sizeof(buf),
 8005342:	4638      	mov	r0, r7
 8005344:	9102      	str	r1, [sp, #8]
 8005346:	9201      	str	r2, [sp, #4]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4623      	mov	r3, r4
 800534c:	4a06      	ldr	r2, [pc, #24]	@ (8005368 <PrintAllDistances+0x3c>)
 800534e:	2180      	movs	r1, #128	@ 0x80
 8005350:	f009 f916 	bl	800e580 <sniprintf>
    UART_SendString(buf);
 8005354:	463b      	mov	r3, r7
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff ff80 	bl	800525c <UART_SendString>
	}
 800535c:	bf00      	nop
 800535e:	3784      	adds	r7, #132	@ 0x84
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}
 8005364:	200017d8 	.word	0x200017d8
 8005368:	08011b3c 	.word	0x08011b3c

0800536c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800536c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80053a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005370:	f7ff fd02 	bl	8004d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005374:	480c      	ldr	r0, [pc, #48]	@ (80053a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005376:	490d      	ldr	r1, [pc, #52]	@ (80053ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005378:	4a0d      	ldr	r2, [pc, #52]	@ (80053b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800537a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800537c:	e002      	b.n	8005384 <LoopCopyDataInit>

0800537e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800537e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005382:	3304      	adds	r3, #4

08005384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005388:	d3f9      	bcc.n	800537e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800538a:	4a0a      	ldr	r2, [pc, #40]	@ (80053b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800538c:	4c0a      	ldr	r4, [pc, #40]	@ (80053b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800538e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005390:	e001      	b.n	8005396 <LoopFillZerobss>

08005392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005394:	3204      	adds	r2, #4

08005396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005398:	d3fb      	bcc.n	8005392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800539a:	f009 fa89 	bl	800e8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800539e:	f7fd fd4f 	bl	8002e40 <main>
  bx  lr    
 80053a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053ac:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 80053b0:	08011f34 	.word	0x08011f34
  ldr r2, =_sbss
 80053b4:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 80053b8:	20001938 	.word	0x20001938

080053bc <CAN2_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053bc:	e7fe      	b.n	80053bc <CAN2_SCE_IRQHandler>
	...

080053c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <HAL_Init+0x40>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005400 <HAL_Init+0x40>)
 80053ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <HAL_Init+0x40>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005400 <HAL_Init+0x40>)
 80053d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053dc:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <HAL_Init+0x40>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a07      	ldr	r2, [pc, #28]	@ (8005400 <HAL_Init+0x40>)
 80053e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053e8:	2003      	movs	r0, #3
 80053ea:	f001 fd59 	bl	8006ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053ee:	2003      	movs	r0, #3
 80053f0:	f000 f808 	bl	8005404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053f4:	f7fe fd74 	bl	8003ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40023c00 	.word	0x40023c00

08005404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800540c:	4b12      	ldr	r3, [pc, #72]	@ (8005458 <HAL_InitTick+0x54>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b12      	ldr	r3, [pc, #72]	@ (800545c <HAL_InitTick+0x58>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	4619      	mov	r1, r3
 8005416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800541a:	fbb3 f3f1 	udiv	r3, r3, r1
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	4618      	mov	r0, r3
 8005424:	f001 fd7f 	bl	8006f26 <HAL_SYSTICK_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e00e      	b.n	8005450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b0f      	cmp	r3, #15
 8005436:	d80a      	bhi.n	800544e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005438:	2200      	movs	r2, #0
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	f001 fd39 	bl	8006eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005444:	4a06      	ldr	r2, [pc, #24]	@ (8005460 <HAL_InitTick+0x5c>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	e000      	b.n	8005450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	200000f0 	.word	0x200000f0
 800545c:	20000130 	.word	0x20000130
 8005460:	2000012c 	.word	0x2000012c

08005464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005468:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_IncTick+0x20>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <HAL_IncTick+0x24>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4413      	add	r3, r2
 8005474:	4a04      	ldr	r2, [pc, #16]	@ (8005488 <HAL_IncTick+0x24>)
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000130 	.word	0x20000130
 8005488:	200017e8 	.word	0x200017e8

0800548c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return uwTick;
 8005490:	4b03      	ldr	r3, [pc, #12]	@ (80054a0 <HAL_GetTick+0x14>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	200017e8 	.word	0x200017e8

080054a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054ac:	f7ff ffee 	bl	800548c <HAL_GetTick>
 80054b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d005      	beq.n	80054ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054be:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <HAL_Delay+0x44>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054ca:	bf00      	nop
 80054cc:	f7ff ffde 	bl	800548c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d8f7      	bhi.n	80054cc <HAL_Delay+0x28>
  {
  }
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000130 	.word	0x20000130

080054ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e033      	b.n	800556a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fe fd18 	bl	8003f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	d118      	bne.n	800555c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005532:	f023 0302 	bic.w	r3, r3, #2
 8005536:	f043 0202 	orr.w	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fb86 	bl	8005c50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	f023 0303 	bic.w	r3, r3, #3
 8005552:	f043 0201 	orr.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	641a      	str	r2, [r3, #64]	@ 0x40
 800555a:	e001      	b.n	8005560 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_ADC_Start_IT+0x1a>
 800558a:	2302      	movs	r3, #2
 800558c:	e0bd      	b.n	800570a <HAL_ADC_Start_IT+0x196>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d018      	beq.n	80055d6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80055b4:	4b58      	ldr	r3, [pc, #352]	@ (8005718 <HAL_ADC_Start_IT+0x1a4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a58      	ldr	r2, [pc, #352]	@ (800571c <HAL_ADC_Start_IT+0x1a8>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	0c9a      	lsrs	r2, r3, #18
 80055c0:	4613      	mov	r3, r2
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4413      	add	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80055c8:	e002      	b.n	80055d0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f9      	bne.n	80055ca <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f040 8085 	bne.w	80056f0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005610:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005624:	d106      	bne.n	8005634 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562a:	f023 0206 	bic.w	r2, r3, #6
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44
 8005632:	e002      	b.n	800563a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005642:	4b37      	ldr	r3, [pc, #220]	@ (8005720 <HAL_ADC_Start_IT+0x1ac>)
 8005644:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800564e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800565e:	f043 0320 	orr.w	r3, r3, #32
 8005662:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	2b00      	cmp	r3, #0
 800566e:	d12a      	bne.n	80056c6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2b      	ldr	r2, [pc, #172]	@ (8005724 <HAL_ADC_Start_IT+0x1b0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d015      	beq.n	80056a6 <HAL_ADC_Start_IT+0x132>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2a      	ldr	r2, [pc, #168]	@ (8005728 <HAL_ADC_Start_IT+0x1b4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d105      	bne.n	8005690 <HAL_ADC_Start_IT+0x11c>
 8005684:	4b26      	ldr	r3, [pc, #152]	@ (8005720 <HAL_ADC_Start_IT+0x1ac>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a25      	ldr	r2, [pc, #148]	@ (800572c <HAL_ADC_Start_IT+0x1b8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d136      	bne.n	8005708 <HAL_ADC_Start_IT+0x194>
 800569a:	4b21      	ldr	r3, [pc, #132]	@ (8005720 <HAL_ADC_Start_IT+0x1ac>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d130      	bne.n	8005708 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d129      	bne.n	8005708 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80056c2:	609a      	str	r2, [r3, #8]
 80056c4:	e020      	b.n	8005708 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a16      	ldr	r2, [pc, #88]	@ (8005724 <HAL_ADC_Start_IT+0x1b0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d11b      	bne.n	8005708 <HAL_ADC_Start_IT+0x194>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d114      	bne.n	8005708 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80056ec:	609a      	str	r2, [r3, #8]
 80056ee:	e00b      	b.n	8005708 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f4:	f043 0210 	orr.w	r2, r3, #16
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005700:	f043 0201 	orr.w	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	200000f0 	.word	0x200000f0
 800571c:	431bde83 	.word	0x431bde83
 8005720:	40012300 	.word	0x40012300
 8005724:	40012000 	.word	0x40012000
 8005728:	40012100 	.word	0x40012100
 800572c:	40012200 	.word	0x40012200

08005730 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_ADC_Stop_IT+0x16>
 8005742:	2302      	movs	r3, #2
 8005744:	e02b      	b.n	800579e <HAL_ADC_Stop_IT+0x6e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d113      	bne.n	8005794 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800577a:	f023 0320 	bic.w	r3, r3, #32
 800577e:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005784:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d049      	beq.n	8005874 <HAL_ADC_IRQHandler+0xca>
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d046      	beq.n	8005874 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d105      	bne.n	80057fe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d12b      	bne.n	8005864 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005810:	2b00      	cmp	r3, #0
 8005812:	d127      	bne.n	8005864 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800581e:	2b00      	cmp	r3, #0
 8005820:	d006      	beq.n	8005830 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800582c:	2b00      	cmp	r3, #0
 800582e:	d119      	bne.n	8005864 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0220 	bic.w	r2, r2, #32
 800583e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	f043 0201 	orr.w	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fd f963 	bl	8002b30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0212 	mvn.w	r2, #18
 8005872:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005882:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d057      	beq.n	800593a <HAL_ADC_IRQHandler+0x190>
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d054      	beq.n	800593a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d139      	bne.n	800592a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d006      	beq.n	80058d2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d12b      	bne.n	800592a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d124      	bne.n	800592a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d11d      	bne.n	800592a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d119      	bne.n	800592a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005904:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d105      	bne.n	800592a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa8c 	bl	8005e48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 020c 	mvn.w	r2, #12
 8005938:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d017      	beq.n	8005980 <HAL_ADC_IRQHandler+0x1d6>
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d014      	beq.n	8005980 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d10d      	bne.n	8005980 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f837 	bl	80059e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f06f 0201 	mvn.w	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800598e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d015      	beq.n	80059c2 <HAL_ADC_IRQHandler+0x218>
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a0:	f043 0202 	orr.w	r2, r3, #2
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0220 	mvn.w	r2, #32
 80059b0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f820 	bl	80059f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0220 	mvn.w	r2, #32
 80059c0:	601a      	str	r2, [r3, #0]
  }
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e105      	b.n	8005c34 <HAL_ADC_ConfigChannel+0x228>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b09      	cmp	r3, #9
 8005a36:	d925      	bls.n	8005a84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	4613      	mov	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3b1e      	subs	r3, #30
 8005a4e:	2207      	movs	r2, #7
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	43da      	mvns	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	400a      	ands	r2, r1
 8005a5c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68d9      	ldr	r1, [r3, #12]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4618      	mov	r0, r3
 8005a70:	4603      	mov	r3, r0
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4403      	add	r3, r0
 8005a76:	3b1e      	subs	r3, #30
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	e022      	b.n	8005aca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6919      	ldr	r1, [r3, #16]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	2207      	movs	r2, #7
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43da      	mvns	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	400a      	ands	r2, r1
 8005aa6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6919      	ldr	r1, [r3, #16]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	4618      	mov	r0, r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	4403      	add	r3, r0
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b06      	cmp	r3, #6
 8005ad0:	d824      	bhi.n	8005b1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3b05      	subs	r3, #5
 8005ae4:	221f      	movs	r2, #31
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43da      	mvns	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	400a      	ands	r2, r1
 8005af2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	4618      	mov	r0, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3b05      	subs	r3, #5
 8005b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b1a:	e04c      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d824      	bhi.n	8005b6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	3b23      	subs	r3, #35	@ 0x23
 8005b36:	221f      	movs	r2, #31
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43da      	mvns	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	400a      	ands	r2, r1
 8005b44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	4618      	mov	r0, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	3b23      	subs	r3, #35	@ 0x23
 8005b60:	fa00 f203 	lsl.w	r2, r0, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b6c:	e023      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3b41      	subs	r3, #65	@ 0x41
 8005b80:	221f      	movs	r2, #31
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43da      	mvns	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3b41      	subs	r3, #65	@ 0x41
 8005baa:	fa00 f203 	lsl.w	r2, r0, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bb6:	4b22      	ldr	r3, [pc, #136]	@ (8005c40 <HAL_ADC_ConfigChannel+0x234>)
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a21      	ldr	r2, [pc, #132]	@ (8005c44 <HAL_ADC_ConfigChannel+0x238>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d109      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x1cc>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b12      	cmp	r3, #18
 8005bca:	d105      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a19      	ldr	r2, [pc, #100]	@ (8005c44 <HAL_ADC_ConfigChannel+0x238>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d123      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x21e>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d003      	beq.n	8005bf2 <HAL_ADC_ConfigChannel+0x1e6>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b11      	cmp	r3, #17
 8005bf0:	d11b      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d111      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c06:	4b10      	ldr	r3, [pc, #64]	@ (8005c48 <HAL_ADC_ConfigChannel+0x23c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a10      	ldr	r2, [pc, #64]	@ (8005c4c <HAL_ADC_ConfigChannel+0x240>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	0c9a      	lsrs	r2, r3, #18
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005c1c:	e002      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f9      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40012300 	.word	0x40012300
 8005c44:	40012000 	.word	0x40012000
 8005c48:	200000f0 	.word	0x200000f0
 8005c4c:	431bde83 	.word	0x431bde83

08005c50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c58:	4b79      	ldr	r3, [pc, #484]	@ (8005e40 <ADC_Init+0x1f0>)
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6859      	ldr	r1, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	021a      	lsls	r2, r3, #8
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6859      	ldr	r1, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6899      	ldr	r1, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	4a58      	ldr	r2, [pc, #352]	@ (8005e44 <ADC_Init+0x1f4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6899      	ldr	r1, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	e00f      	b.n	8005d4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005d4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0202 	bic.w	r2, r2, #2
 8005d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6899      	ldr	r1, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	7e1b      	ldrb	r3, [r3, #24]
 8005d68:	005a      	lsls	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01b      	beq.n	8005db4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d8a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005d9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da6:	3b01      	subs	r3, #1
 8005da8:	035a      	lsls	r2, r3, #13
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	e007      	b.n	8005dc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	051a      	lsls	r2, r3, #20
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6899      	ldr	r1, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e06:	025a      	lsls	r2, r3, #9
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	029a      	lsls	r2, r3, #10
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	40012300 	.word	0x40012300
 8005e44:	0f000001 	.word	0x0f000001

08005e48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0ed      	b.n	800604a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fe f8de 	bl	800403c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e90:	f7ff fafc 	bl	800548c <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005e96:	e012      	b.n	8005ebe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e98:	f7ff faf8 	bl	800548c <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b0a      	cmp	r3, #10
 8005ea4:	d90b      	bls.n	8005ebe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2205      	movs	r2, #5
 8005eb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e0c5      	b.n	800604a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0e5      	beq.n	8005e98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0202 	bic.w	r2, r2, #2
 8005eda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005edc:	f7ff fad6 	bl	800548c <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005ee2:	e012      	b.n	8005f0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005ee4:	f7ff fad2 	bl	800548c <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b0a      	cmp	r3, #10
 8005ef0:	d90b      	bls.n	8005f0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2205      	movs	r2, #5
 8005f02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e09f      	b.n	800604a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e5      	bne.n	8005ee4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7e1b      	ldrb	r3, [r3, #24]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d108      	bne.n	8005f32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e007      	b.n	8005f42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	7e5b      	ldrb	r3, [r3, #25]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d108      	bne.n	8005f5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e007      	b.n	8005f6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	7e9b      	ldrb	r3, [r3, #26]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d108      	bne.n	8005f86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0220 	orr.w	r2, r2, #32
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e007      	b.n	8005f96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0220 	bic.w	r2, r2, #32
 8005f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7edb      	ldrb	r3, [r3, #27]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d108      	bne.n	8005fb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0210 	bic.w	r2, r2, #16
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	e007      	b.n	8005fc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0210 	orr.w	r2, r2, #16
 8005fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7f1b      	ldrb	r3, [r3, #28]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d108      	bne.n	8005fda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0208 	orr.w	r2, r2, #8
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e007      	b.n	8005fea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0208 	bic.w	r2, r2, #8
 8005fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	7f5b      	ldrb	r3, [r3, #29]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d108      	bne.n	8006004 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0204 	orr.w	r2, r2, #4
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e007      	b.n	8006014 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0204 	bic.w	r2, r2, #4
 8006012:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	ea42 0103 	orr.w	r1, r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	1e5a      	subs	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e015      	b.n	8006090 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f939 	bl	80062dc <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fe f8ce 	bl	800420c <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800607e:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d003      	beq.n	80060b8 <HAL_CAN_ConfigFilter+0x20>
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	f040 80be 	bne.w	8006234 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80060b8:	4b65      	ldr	r3, [pc, #404]	@ (8006250 <HAL_CAN_ConfigFilter+0x1b8>)
 80060ba:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80060c2:	f043 0201 	orr.w	r2, r3, #1
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80060d2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	431a      	orrs	r2, r3
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	2201      	movs	r2, #1
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	43db      	mvns	r3, r3
 800610a:	401a      	ands	r2, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d123      	bne.n	8006162 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	43db      	mvns	r3, r3
 8006124:	401a      	ands	r2, r3
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800613c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3248      	adds	r2, #72	@ 0x48
 8006142:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006156:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006158:	6939      	ldr	r1, [r7, #16]
 800615a:	3348      	adds	r3, #72	@ 0x48
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d122      	bne.n	80061b0 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	431a      	orrs	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800618a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	3248      	adds	r2, #72	@ 0x48
 8006190:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80061a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80061a6:	6939      	ldr	r1, [r7, #16]
 80061a8:	3348      	adds	r3, #72	@ 0x48
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	440b      	add	r3, r1
 80061ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	401a      	ands	r2, r3
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80061ca:	e007      	b.n	80061dc <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	43db      	mvns	r3, r3
 80061ee:	401a      	ands	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80061f6:	e007      	b.n	8006208 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	431a      	orrs	r2, r3
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d107      	bne.n	8006220 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	431a      	orrs	r2, r3
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006226:	f023 0201 	bic.w	r2, r3, #1
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e006      	b.n	8006242 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006238:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40006400 	.word	0x40006400

08006254 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d12e      	bne.n	80062c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0201 	bic.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006280:	f7ff f904 	bl	800548c <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006286:	e012      	b.n	80062ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006288:	f7ff f900 	bl	800548c <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b0a      	cmp	r3, #10
 8006294:	d90b      	bls.n	80062ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2205      	movs	r2, #5
 80062a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e012      	b.n	80062d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e5      	bne.n	8006288 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e006      	b.n	80062d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
  }
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d133      	bne.n	8006358 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006300:	f7ff f8c4 	bl	800548c <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006306:	e012      	b.n	800632e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006308:	f7ff f8c0 	bl	800548c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b0a      	cmp	r3, #10
 8006314:	d90b      	bls.n	800632e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2205      	movs	r2, #5
 8006326:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e01b      	b.n	8006366 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0e5      	beq.n	8006308 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0202 	bic.w	r2, r2, #2
 800634a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e006      	b.n	8006366 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800636e:	b480      	push	{r7}
 8006370:	b089      	sub	sp, #36	@ 0x24
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006382:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800638c:	7ffb      	ldrb	r3, [r7, #31]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d003      	beq.n	800639a <HAL_CAN_AddTxMessage+0x2c>
 8006392:	7ffb      	ldrb	r3, [r7, #31]
 8006394:	2b02      	cmp	r3, #2
 8006396:	f040 80ad 	bne.w	80064f4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8095 	beq.w	80064e4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	0e1b      	lsrs	r3, r3, #24
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80063c4:	2201      	movs	r2, #1
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	409a      	lsls	r2, r3
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10d      	bne.n	80063f2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80063e0:	68f9      	ldr	r1, [r7, #12]
 80063e2:	6809      	ldr	r1, [r1, #0]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	3318      	adds	r3, #24
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	440b      	add	r3, r1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e00f      	b.n	8006412 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80063fc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006406:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3318      	adds	r3, #24
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	440b      	add	r3, r1
 8006410:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6819      	ldr	r1, [r3, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	3318      	adds	r3, #24
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	440b      	add	r3, r1
 8006422:	3304      	adds	r3, #4
 8006424:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	7d1b      	ldrb	r3, [r3, #20]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d111      	bne.n	8006452 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	3318      	adds	r3, #24
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	4413      	add	r3, r2
 800643a:	3304      	adds	r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	6811      	ldr	r1, [r2, #0]
 8006442:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	3318      	adds	r3, #24
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	440b      	add	r3, r1
 800644e:	3304      	adds	r3, #4
 8006450:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3307      	adds	r3, #7
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	061a      	lsls	r2, r3, #24
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3306      	adds	r3, #6
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	041b      	lsls	r3, r3, #16
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3305      	adds	r3, #5
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	4313      	orrs	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	3204      	adds	r2, #4
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	4610      	mov	r0, r2
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	6811      	ldr	r1, [r2, #0]
 800647a:	ea43 0200 	orr.w	r2, r3, r0
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	440b      	add	r3, r1
 8006484:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006488:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3303      	adds	r3, #3
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	061a      	lsls	r2, r3, #24
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3302      	adds	r3, #2
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	041b      	lsls	r3, r3, #16
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3301      	adds	r3, #1
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	4313      	orrs	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	4610      	mov	r0, r2
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	6811      	ldr	r1, [r2, #0]
 80064b0:	ea43 0200 	orr.w	r2, r3, r0
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	440b      	add	r3, r1
 80064ba:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80064be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	3318      	adds	r3, #24
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	4413      	add	r3, r2
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	6811      	ldr	r1, [r2, #0]
 80064d2:	f043 0201 	orr.w	r2, r3, #1
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	3318      	adds	r3, #24
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	440b      	add	r3, r1
 80064de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e00e      	b.n	8006502 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e006      	b.n	8006502 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3724      	adds	r7, #36	@ 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006520:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d002      	beq.n	800652e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006528:	7afb      	ldrb	r3, [r7, #11]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d11d      	bne.n	800656a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800656a:	68fb      	ldr	r3, [r7, #12]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800658c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d003      	beq.n	800659c <HAL_CAN_GetRxMessage+0x24>
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b02      	cmp	r3, #2
 8006598:	f040 8103 	bne.w	80067a2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10e      	bne.n	80065c0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d116      	bne.n	80065de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0f7      	b.n	80067b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d107      	bne.n	80065de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e0e8      	b.n	80067b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	331b      	adds	r3, #27
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	4413      	add	r3, r2
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0204 	and.w	r2, r3, #4
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10c      	bne.n	8006616 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	331b      	adds	r3, #27
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	4413      	add	r3, r2
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	0d5b      	lsrs	r3, r3, #21
 800660c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e00b      	b.n	800662e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	331b      	adds	r3, #27
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	4413      	add	r3, r2
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	08db      	lsrs	r3, r3, #3
 8006626:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	331b      	adds	r3, #27
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	4413      	add	r3, r2
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0202 	and.w	r2, r3, #2
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	331b      	adds	r3, #27
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	4413      	add	r3, r2
 8006650:	3304      	adds	r3, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2208      	movs	r2, #8
 8006660:	611a      	str	r2, [r3, #16]
 8006662:	e00b      	b.n	800667c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	331b      	adds	r3, #27
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	4413      	add	r3, r2
 8006670:	3304      	adds	r3, #4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	331b      	adds	r3, #27
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	4413      	add	r3, r2
 8006688:	3304      	adds	r3, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	b2da      	uxtb	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	331b      	adds	r3, #27
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	4413      	add	r3, r2
 80066a0:	3304      	adds	r3, #4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	0a1a      	lsrs	r2, r3, #8
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	0c1a      	lsrs	r2, r3, #16
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	3302      	adds	r3, #2
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	4413      	add	r3, r2
 8006700:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	0e1a      	lsrs	r2, r3, #24
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	3303      	adds	r3, #3
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	4413      	add	r3, r2
 800671a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	3304      	adds	r3, #4
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4413      	add	r3, r2
 8006732:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	0a1a      	lsrs	r2, r3, #8
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	3305      	adds	r3, #5
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	4413      	add	r3, r2
 800674c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	0c1a      	lsrs	r2, r3, #16
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	3306      	adds	r3, #6
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	4413      	add	r3, r2
 8006766:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	0e1a      	lsrs	r2, r3, #24
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	3307      	adds	r3, #7
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d108      	bne.n	800678e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0220 	orr.w	r2, r2, #32
 800678a:	60da      	str	r2, [r3, #12]
 800678c:	e007      	b.n	800679e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0220 	orr.w	r2, r2, #32
 800679c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e006      	b.n	80067b0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
  }
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067d0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d002      	beq.n	80067de <HAL_CAN_GetRxFifoFillLevel+0x22>
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d10f      	bne.n	80067fe <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	e005      	b.n	80067fe <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80067fe:	68fb      	ldr	r3, [r7, #12]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800681c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d002      	beq.n	800682a <HAL_CAN_ActivateNotification+0x1e>
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d109      	bne.n	800683e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6959      	ldr	r1, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e006      	b.n	800684c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
  }
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08a      	sub	sp, #40	@ 0x28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006860:	2300      	movs	r3, #0
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d07c      	beq.n	8006998 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d023      	beq.n	80068f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2201      	movs	r2, #1
 80068ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fc f968 	bl	8002b90 <HAL_CAN_TxMailbox0CompleteCallback>
 80068c0:	e016      	b.n	80068f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d4:	e00c      	b.n	80068f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e8:	e002      	b.n	80068f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f96b 	bl	8006bc6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d024      	beq.n	8006944 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006902:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fc f956 	bl	8002bc0 <HAL_CAN_TxMailbox1CompleteCallback>
 8006914:	e016      	b.n	8006944 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006926:	627b      	str	r3, [r7, #36]	@ 0x24
 8006928:	e00c      	b.n	8006944 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800693a:	627b      	str	r3, [r7, #36]	@ 0x24
 800693c:	e002      	b.n	8006944 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f94b 	bl	8006bda <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d024      	beq.n	8006998 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006956:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fc f944 	bl	8002bf0 <HAL_CAN_TxMailbox2CompleteCallback>
 8006968:	e016      	b.n	8006998 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697a:	627b      	str	r3, [r7, #36]	@ 0x24
 800697c:	e00c      	b.n	8006998 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006990:	e002      	b.n	8006998 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f92b 	bl	8006bee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2210      	movs	r2, #16
 80069ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d006      	beq.n	80069de <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2208      	movs	r2, #8
 80069d6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f912 	bl	8006c02 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fb fc3a 	bl	8002270 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00c      	beq.n	8006a20 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2210      	movs	r2, #16
 8006a1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00b      	beq.n	8006a42 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d006      	beq.n	8006a42 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2208      	movs	r2, #8
 8006a3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8f4 	bl	8006c2a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8db 	bl	8006c16 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2210      	movs	r2, #16
 8006a7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8de 	bl	8006c3e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d006      	beq.n	8006aa4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f8d7 	bl	8006c52 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d07b      	beq.n	8006ba6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d072      	beq.n	8006b9e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d008      	beq.n	8006ad4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	f043 0302 	orr.w	r3, r3, #2
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	f043 0304 	orr.w	r3, r3, #4
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d043      	beq.n	8006b9e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d03e      	beq.n	8006b9e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b26:	2b60      	cmp	r3, #96	@ 0x60
 8006b28:	d02b      	beq.n	8006b82 <HAL_CAN_IRQHandler+0x32a>
 8006b2a:	2b60      	cmp	r3, #96	@ 0x60
 8006b2c:	d82e      	bhi.n	8006b8c <HAL_CAN_IRQHandler+0x334>
 8006b2e:	2b50      	cmp	r3, #80	@ 0x50
 8006b30:	d022      	beq.n	8006b78 <HAL_CAN_IRQHandler+0x320>
 8006b32:	2b50      	cmp	r3, #80	@ 0x50
 8006b34:	d82a      	bhi.n	8006b8c <HAL_CAN_IRQHandler+0x334>
 8006b36:	2b40      	cmp	r3, #64	@ 0x40
 8006b38:	d019      	beq.n	8006b6e <HAL_CAN_IRQHandler+0x316>
 8006b3a:	2b40      	cmp	r3, #64	@ 0x40
 8006b3c:	d826      	bhi.n	8006b8c <HAL_CAN_IRQHandler+0x334>
 8006b3e:	2b30      	cmp	r3, #48	@ 0x30
 8006b40:	d010      	beq.n	8006b64 <HAL_CAN_IRQHandler+0x30c>
 8006b42:	2b30      	cmp	r3, #48	@ 0x30
 8006b44:	d822      	bhi.n	8006b8c <HAL_CAN_IRQHandler+0x334>
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d002      	beq.n	8006b50 <HAL_CAN_IRQHandler+0x2f8>
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d005      	beq.n	8006b5a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006b4e:	e01d      	b.n	8006b8c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	f043 0308 	orr.w	r3, r3, #8
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b58:	e019      	b.n	8006b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	f043 0310 	orr.w	r3, r3, #16
 8006b60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b62:	e014      	b.n	8006b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	f043 0320 	orr.w	r3, r3, #32
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b6c:	e00f      	b.n	8006b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b76:	e00a      	b.n	8006b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b80:	e005      	b.n	8006b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b8a:	e000      	b.n	8006b8e <HAL_CAN_IRQHandler+0x336>
            break;
 8006b8c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	699a      	ldr	r2, [r3, #24]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b9c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fc f831 	bl	8002c20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	3728      	adds	r7, #40	@ 0x28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c74:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d002      	beq.n	8006c82 <HAL_CAN_GetState+0x1c>
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d112      	bne.n	8006ca8 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8006c90:	2304      	movs	r3, #4
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e008      	b.n	8006ca8 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <__NVIC_SetPriorityGrouping>:
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006cfc <__NVIC_SetPriorityGrouping+0x44>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cea:	4a04      	ldr	r2, [pc, #16]	@ (8006cfc <__NVIC_SetPriorityGrouping+0x44>)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	60d3      	str	r3, [r2, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	e000ed00 	.word	0xe000ed00

08006d00 <__NVIC_GetPriorityGrouping>:
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <__NVIC_GetPriorityGrouping+0x18>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	0a1b      	lsrs	r3, r3, #8
 8006d0a:	f003 0307 	and.w	r3, r3, #7
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	e000ed00 	.word	0xe000ed00

08006d1c <__NVIC_EnableIRQ>:
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	db0b      	blt.n	8006d46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	f003 021f 	and.w	r2, r3, #31
 8006d34:	4907      	ldr	r1, [pc, #28]	@ (8006d54 <__NVIC_EnableIRQ+0x38>)
 8006d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8006d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	e000e100 	.word	0xe000e100

08006d58 <__NVIC_DisableIRQ>:
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	db12      	blt.n	8006d90 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	f003 021f 	and.w	r2, r3, #31
 8006d70:	490a      	ldr	r1, [pc, #40]	@ (8006d9c <__NVIC_DisableIRQ+0x44>)
 8006d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	2001      	movs	r0, #1
 8006d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d7e:	3320      	adds	r3, #32
 8006d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d84:	f3bf 8f4f 	dsb	sy
}
 8006d88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006d8a:	f3bf 8f6f 	isb	sy
}
 8006d8e:	bf00      	nop
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	e000e100 	.word	0xe000e100

08006da0 <__NVIC_SetPriority>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	db0a      	blt.n	8006dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	490c      	ldr	r1, [pc, #48]	@ (8006dec <__NVIC_SetPriority+0x4c>)
 8006dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dbe:	0112      	lsls	r2, r2, #4
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006dc8:	e00a      	b.n	8006de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	4908      	ldr	r1, [pc, #32]	@ (8006df0 <__NVIC_SetPriority+0x50>)
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	3b04      	subs	r3, #4
 8006dd8:	0112      	lsls	r2, r2, #4
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	440b      	add	r3, r1
 8006dde:	761a      	strb	r2, [r3, #24]
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	e000e100 	.word	0xe000e100
 8006df0:	e000ed00 	.word	0xe000ed00

08006df4 <NVIC_EncodePriority>:
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	@ 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f1c3 0307 	rsb	r3, r3, #7
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	bf28      	it	cs
 8006e12:	2304      	movcs	r3, #4
 8006e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	2b06      	cmp	r3, #6
 8006e1c:	d902      	bls.n	8006e24 <NVIC_EncodePriority+0x30>
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3b03      	subs	r3, #3
 8006e22:	e000      	b.n	8006e26 <NVIC_EncodePriority+0x32>
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e28:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43da      	mvns	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	401a      	ands	r2, r3
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	43d9      	mvns	r1, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e4c:	4313      	orrs	r3, r2
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3724      	adds	r7, #36	@ 0x24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
	...

08006e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e6c:	d301      	bcc.n	8006e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e00f      	b.n	8006e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e72:	4a0a      	ldr	r2, [pc, #40]	@ (8006e9c <SysTick_Config+0x40>)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e7a:	210f      	movs	r1, #15
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	f7ff ff8e 	bl	8006da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e84:	4b05      	ldr	r3, [pc, #20]	@ (8006e9c <SysTick_Config+0x40>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e8a:	4b04      	ldr	r3, [pc, #16]	@ (8006e9c <SysTick_Config+0x40>)
 8006e8c:	2207      	movs	r2, #7
 8006e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	e000e010 	.word	0xe000e010

08006ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ff05 	bl	8006cb8 <__NVIC_SetPriorityGrouping>
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b086      	sub	sp, #24
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
 8006ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ec8:	f7ff ff1a 	bl	8006d00 <__NVIC_GetPriorityGrouping>
 8006ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	6978      	ldr	r0, [r7, #20]
 8006ed4:	f7ff ff8e 	bl	8006df4 <NVIC_EncodePriority>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff ff5d 	bl	8006da0 <__NVIC_SetPriority>
}
 8006ee6:	bf00      	nop
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff ff0d 	bl	8006d1c <__NVIC_EnableIRQ>
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	4603      	mov	r3, r0
 8006f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff ff1d 	bl	8006d58 <__NVIC_DisableIRQ>
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff ff94 	bl	8006e5c <SysTick_Config>
 8006f34:	4603      	mov	r3, r0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e00e      	b.n	8006f6e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	795b      	ldrb	r3, [r3, #5]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7fd f9b5 	bl	80042d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f84:	f7fe fa82 	bl	800548c <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e099      	b.n	80070c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0201 	bic.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fb4:	e00f      	b.n	8006fd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fb6:	f7fe fa69 	bl	800548c <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b05      	cmp	r3, #5
 8006fc2:	d908      	bls.n	8006fd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2203      	movs	r2, #3
 8006fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e078      	b.n	80070c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e8      	bne.n	8006fb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4b38      	ldr	r3, [pc, #224]	@ (80070d0 <HAL_DMA_Init+0x158>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007002:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800700e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800701a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702c:	2b04      	cmp	r3, #4
 800702e:	d107      	bne.n	8007040 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007038:	4313      	orrs	r3, r2
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	2b04      	cmp	r3, #4
 8007068:	d117      	bne.n	800709a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00e      	beq.n	800709a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa89 	bl	8007594 <DMA_CheckFifoParam>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2240      	movs	r2, #64	@ 0x40
 800708c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007096:	2301      	movs	r3, #1
 8007098:	e016      	b.n	80070c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa40 	bl	8007528 <DMA_CalcBaseAndBitshift>
 80070a8:	4603      	mov	r3, r0
 80070aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b0:	223f      	movs	r2, #63	@ 0x3f
 80070b2:	409a      	lsls	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	f010803f 	.word	0xf010803f

080070d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80070e2:	f7fe f9d3 	bl	800548c <HAL_GetTick>
 80070e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d008      	beq.n	8007106 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2280      	movs	r2, #128	@ 0x80
 80070f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e052      	b.n	80071ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0216 	bic.w	r2, r2, #22
 8007114:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695a      	ldr	r2, [r3, #20]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007124:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	d103      	bne.n	8007136 <HAL_DMA_Abort+0x62>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007132:	2b00      	cmp	r3, #0
 8007134:	d007      	beq.n	8007146 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0208 	bic.w	r2, r2, #8
 8007144:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007156:	e013      	b.n	8007180 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007158:	f7fe f998 	bl	800548c <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b05      	cmp	r3, #5
 8007164:	d90c      	bls.n	8007180 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2203      	movs	r2, #3
 8007170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e015      	b.n	80071ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e4      	bne.n	8007158 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007192:	223f      	movs	r2, #63	@ 0x3f
 8007194:	409a      	lsls	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d004      	beq.n	80071d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2280      	movs	r2, #128	@ 0x80
 80071cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e00c      	b.n	80071ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2205      	movs	r2, #5
 80071d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007204:	4b8e      	ldr	r3, [pc, #568]	@ (8007440 <HAL_DMA_IRQHandler+0x248>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a8e      	ldr	r2, [pc, #568]	@ (8007444 <HAL_DMA_IRQHandler+0x24c>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	0a9b      	lsrs	r3, r3, #10
 8007210:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007216:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007222:	2208      	movs	r2, #8
 8007224:	409a      	lsls	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4013      	ands	r3, r2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01a      	beq.n	8007264 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d013      	beq.n	8007264 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0204 	bic.w	r2, r2, #4
 800724a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007250:	2208      	movs	r2, #8
 8007252:	409a      	lsls	r2, r3
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725c:	f043 0201 	orr.w	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007268:	2201      	movs	r2, #1
 800726a:	409a      	lsls	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4013      	ands	r3, r2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d012      	beq.n	800729a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007286:	2201      	movs	r2, #1
 8007288:	409a      	lsls	r2, r3
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007292:	f043 0202 	orr.w	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800729e:	2204      	movs	r2, #4
 80072a0:	409a      	lsls	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4013      	ands	r3, r2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d012      	beq.n	80072d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072bc:	2204      	movs	r2, #4
 80072be:	409a      	lsls	r2, r3
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c8:	f043 0204 	orr.w	r2, r3, #4
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d4:	2210      	movs	r2, #16
 80072d6:	409a      	lsls	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4013      	ands	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d043      	beq.n	8007368 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0308 	and.w	r3, r3, #8
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d03c      	beq.n	8007368 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f2:	2210      	movs	r2, #16
 80072f4:	409a      	lsls	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d018      	beq.n	800733a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d108      	bne.n	8007328 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d024      	beq.n	8007368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
 8007326:	e01f      	b.n	8007368 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01b      	beq.n	8007368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
 8007338:	e016      	b.n	8007368 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0208 	bic.w	r2, r2, #8
 8007356:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800736c:	2220      	movs	r2, #32
 800736e:	409a      	lsls	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4013      	ands	r3, r2
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 808f 	beq.w	8007498 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8087 	beq.w	8007498 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738e:	2220      	movs	r2, #32
 8007390:	409a      	lsls	r2, r3
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b05      	cmp	r3, #5
 80073a0:	d136      	bne.n	8007410 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0216 	bic.w	r2, r2, #22
 80073b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <HAL_DMA_IRQHandler+0x1da>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0208 	bic.w	r2, r2, #8
 80073e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e6:	223f      	movs	r2, #63	@ 0x3f
 80073e8:	409a      	lsls	r2, r3
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007402:	2b00      	cmp	r3, #0
 8007404:	d07e      	beq.n	8007504 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
        }
        return;
 800740e:	e079      	b.n	8007504 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01d      	beq.n	800745a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10d      	bne.n	8007448 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007430:	2b00      	cmp	r3, #0
 8007432:	d031      	beq.n	8007498 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
 800743c:	e02c      	b.n	8007498 <HAL_DMA_IRQHandler+0x2a0>
 800743e:	bf00      	nop
 8007440:	200000f0 	.word	0x200000f0
 8007444:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d023      	beq.n	8007498 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
 8007458:	e01e      	b.n	8007498 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10f      	bne.n	8007488 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0210 	bic.w	r2, r2, #16
 8007476:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749c:	2b00      	cmp	r3, #0
 800749e:	d032      	beq.n	8007506 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d022      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2205      	movs	r2, #5
 80074b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0201 	bic.w	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d307      	bcc.n	80074e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f2      	bne.n	80074c4 <HAL_DMA_IRQHandler+0x2cc>
 80074de:	e000      	b.n	80074e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80074e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
 8007502:	e000      	b.n	8007506 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007504:	bf00      	nop
    }
  }
}
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800751a:	b2db      	uxtb	r3, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	3b10      	subs	r3, #16
 8007538:	4a14      	ldr	r2, [pc, #80]	@ (800758c <DMA_CalcBaseAndBitshift+0x64>)
 800753a:	fba2 2303 	umull	r2, r3, r2, r3
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007542:	4a13      	ldr	r2, [pc, #76]	@ (8007590 <DMA_CalcBaseAndBitshift+0x68>)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d909      	bls.n	800756a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800755e:	f023 0303 	bic.w	r3, r3, #3
 8007562:	1d1a      	adds	r2, r3, #4
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	659a      	str	r2, [r3, #88]	@ 0x58
 8007568:	e007      	b.n	800757a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007572:	f023 0303 	bic.w	r3, r3, #3
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	aaaaaaab 	.word	0xaaaaaaab
 8007590:	08011b90 	.word	0x08011b90

08007594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d11f      	bne.n	80075ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d856      	bhi.n	8007662 <DMA_CheckFifoParam+0xce>
 80075b4:	a201      	add	r2, pc, #4	@ (adr r2, 80075bc <DMA_CheckFifoParam+0x28>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075df 	.word	0x080075df
 80075c4:	080075cd 	.word	0x080075cd
 80075c8:	08007663 	.word	0x08007663
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d046      	beq.n	8007666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075dc:	e043      	b.n	8007666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075e6:	d140      	bne.n	800766a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ec:	e03d      	b.n	800766a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f6:	d121      	bne.n	800763c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d837      	bhi.n	800766e <DMA_CheckFifoParam+0xda>
 80075fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <DMA_CheckFifoParam+0x70>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007615 	.word	0x08007615
 8007608:	0800761b 	.word	0x0800761b
 800760c:	08007615 	.word	0x08007615
 8007610:	0800762d 	.word	0x0800762d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	73fb      	strb	r3, [r7, #15]
      break;
 8007618:	e030      	b.n	800767c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d025      	beq.n	8007672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800762a:	e022      	b.n	8007672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007634:	d11f      	bne.n	8007676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800763a:	e01c      	b.n	8007676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d903      	bls.n	800764a <DMA_CheckFifoParam+0xb6>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d003      	beq.n	8007650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007648:	e018      	b.n	800767c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	73fb      	strb	r3, [r7, #15]
      break;
 800764e:	e015      	b.n	800767c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00e      	beq.n	800767a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
      break;
 8007660:	e00b      	b.n	800767a <DMA_CheckFifoParam+0xe6>
      break;
 8007662:	bf00      	nop
 8007664:	e00a      	b.n	800767c <DMA_CheckFifoParam+0xe8>
      break;
 8007666:	bf00      	nop
 8007668:	e008      	b.n	800767c <DMA_CheckFifoParam+0xe8>
      break;
 800766a:	bf00      	nop
 800766c:	e006      	b.n	800767c <DMA_CheckFifoParam+0xe8>
      break;
 800766e:	bf00      	nop
 8007670:	e004      	b.n	800767c <DMA_CheckFifoParam+0xe8>
      break;
 8007672:	bf00      	nop
 8007674:	e002      	b.n	800767c <DMA_CheckFifoParam+0xe8>
      break;   
 8007676:	bf00      	nop
 8007678:	e000      	b.n	800767c <DMA_CheckFifoParam+0xe8>
      break;
 800767a:	bf00      	nop
    }
  } 
  
  return status; 
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop

0800768c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	@ 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800769e:	2300      	movs	r3, #0
 80076a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076a2:	2300      	movs	r3, #0
 80076a4:	61fb      	str	r3, [r7, #28]
 80076a6:	e16b      	b.n	8007980 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80076a8:	2201      	movs	r2, #1
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	fa02 f303 	lsl.w	r3, r2, r3
 80076b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4013      	ands	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	f040 815a 	bne.w	800797a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d005      	beq.n	80076de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d130      	bne.n	8007740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	2203      	movs	r2, #3
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	43db      	mvns	r3, r3
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	4013      	ands	r3, r2
 80076f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	4313      	orrs	r3, r2
 8007706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007714:	2201      	movs	r2, #1
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	fa02 f303 	lsl.w	r3, r2, r3
 800771c:	43db      	mvns	r3, r3
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	4013      	ands	r3, r2
 8007722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	f003 0201 	and.w	r2, r3, #1
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	4313      	orrs	r3, r2
 8007738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f003 0303 	and.w	r3, r3, #3
 8007748:	2b03      	cmp	r3, #3
 800774a:	d017      	beq.n	800777c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	2203      	movs	r2, #3
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	43db      	mvns	r3, r3
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4013      	ands	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	4313      	orrs	r3, r2
 8007774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d123      	bne.n	80077d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	08da      	lsrs	r2, r3, #3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3208      	adds	r2, #8
 8007790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	220f      	movs	r2, #15
 80077a0:	fa02 f303 	lsl.w	r3, r2, r3
 80077a4:	43db      	mvns	r3, r3
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	4013      	ands	r3, r2
 80077aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	4313      	orrs	r3, r2
 80077c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	08da      	lsrs	r2, r3, #3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3208      	adds	r2, #8
 80077ca:	69b9      	ldr	r1, [r7, #24]
 80077cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	2203      	movs	r2, #3
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	43db      	mvns	r3, r3
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	4013      	ands	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f003 0203 	and.w	r2, r3, #3
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80b4 	beq.w	800797a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	4b60      	ldr	r3, [pc, #384]	@ (8007998 <HAL_GPIO_Init+0x30c>)
 8007818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781a:	4a5f      	ldr	r2, [pc, #380]	@ (8007998 <HAL_GPIO_Init+0x30c>)
 800781c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007820:	6453      	str	r3, [r2, #68]	@ 0x44
 8007822:	4b5d      	ldr	r3, [pc, #372]	@ (8007998 <HAL_GPIO_Init+0x30c>)
 8007824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800782e:	4a5b      	ldr	r2, [pc, #364]	@ (800799c <HAL_GPIO_Init+0x310>)
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	089b      	lsrs	r3, r3, #2
 8007834:	3302      	adds	r3, #2
 8007836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800783a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	220f      	movs	r2, #15
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43db      	mvns	r3, r3
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	4013      	ands	r3, r2
 8007850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a52      	ldr	r2, [pc, #328]	@ (80079a0 <HAL_GPIO_Init+0x314>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d02b      	beq.n	80078b2 <HAL_GPIO_Init+0x226>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a51      	ldr	r2, [pc, #324]	@ (80079a4 <HAL_GPIO_Init+0x318>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d025      	beq.n	80078ae <HAL_GPIO_Init+0x222>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a50      	ldr	r2, [pc, #320]	@ (80079a8 <HAL_GPIO_Init+0x31c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d01f      	beq.n	80078aa <HAL_GPIO_Init+0x21e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a4f      	ldr	r2, [pc, #316]	@ (80079ac <HAL_GPIO_Init+0x320>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d019      	beq.n	80078a6 <HAL_GPIO_Init+0x21a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a4e      	ldr	r2, [pc, #312]	@ (80079b0 <HAL_GPIO_Init+0x324>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d013      	beq.n	80078a2 <HAL_GPIO_Init+0x216>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a4d      	ldr	r2, [pc, #308]	@ (80079b4 <HAL_GPIO_Init+0x328>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00d      	beq.n	800789e <HAL_GPIO_Init+0x212>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a4c      	ldr	r2, [pc, #304]	@ (80079b8 <HAL_GPIO_Init+0x32c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d007      	beq.n	800789a <HAL_GPIO_Init+0x20e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a4b      	ldr	r2, [pc, #300]	@ (80079bc <HAL_GPIO_Init+0x330>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d101      	bne.n	8007896 <HAL_GPIO_Init+0x20a>
 8007892:	2307      	movs	r3, #7
 8007894:	e00e      	b.n	80078b4 <HAL_GPIO_Init+0x228>
 8007896:	2308      	movs	r3, #8
 8007898:	e00c      	b.n	80078b4 <HAL_GPIO_Init+0x228>
 800789a:	2306      	movs	r3, #6
 800789c:	e00a      	b.n	80078b4 <HAL_GPIO_Init+0x228>
 800789e:	2305      	movs	r3, #5
 80078a0:	e008      	b.n	80078b4 <HAL_GPIO_Init+0x228>
 80078a2:	2304      	movs	r3, #4
 80078a4:	e006      	b.n	80078b4 <HAL_GPIO_Init+0x228>
 80078a6:	2303      	movs	r3, #3
 80078a8:	e004      	b.n	80078b4 <HAL_GPIO_Init+0x228>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e002      	b.n	80078b4 <HAL_GPIO_Init+0x228>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <HAL_GPIO_Init+0x228>
 80078b2:	2300      	movs	r3, #0
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	f002 0203 	and.w	r2, r2, #3
 80078ba:	0092      	lsls	r2, r2, #2
 80078bc:	4093      	lsls	r3, r2
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078c4:	4935      	ldr	r1, [pc, #212]	@ (800799c <HAL_GPIO_Init+0x310>)
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	089b      	lsrs	r3, r3, #2
 80078ca:	3302      	adds	r3, #2
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078d2:	4b3b      	ldr	r3, [pc, #236]	@ (80079c0 <HAL_GPIO_Init+0x334>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	43db      	mvns	r3, r3
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	4013      	ands	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80078f6:	4a32      	ldr	r2, [pc, #200]	@ (80079c0 <HAL_GPIO_Init+0x334>)
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80078fc:	4b30      	ldr	r3, [pc, #192]	@ (80079c0 <HAL_GPIO_Init+0x334>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	43db      	mvns	r3, r3
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	4013      	ands	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007920:	4a27      	ldr	r2, [pc, #156]	@ (80079c0 <HAL_GPIO_Init+0x334>)
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007926:	4b26      	ldr	r3, [pc, #152]	@ (80079c0 <HAL_GPIO_Init+0x334>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	43db      	mvns	r3, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4013      	ands	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	4313      	orrs	r3, r2
 8007948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800794a:	4a1d      	ldr	r2, [pc, #116]	@ (80079c0 <HAL_GPIO_Init+0x334>)
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007950:	4b1b      	ldr	r3, [pc, #108]	@ (80079c0 <HAL_GPIO_Init+0x334>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	43db      	mvns	r3, r3
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	4013      	ands	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007974:	4a12      	ldr	r2, [pc, #72]	@ (80079c0 <HAL_GPIO_Init+0x334>)
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3301      	adds	r3, #1
 800797e:	61fb      	str	r3, [r7, #28]
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b0f      	cmp	r3, #15
 8007984:	f67f ae90 	bls.w	80076a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	3724      	adds	r7, #36	@ 0x24
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	40023800 	.word	0x40023800
 800799c:	40013800 	.word	0x40013800
 80079a0:	40020000 	.word	0x40020000
 80079a4:	40020400 	.word	0x40020400
 80079a8:	40020800 	.word	0x40020800
 80079ac:	40020c00 	.word	0x40020c00
 80079b0:	40021000 	.word	0x40021000
 80079b4:	40021400 	.word	0x40021400
 80079b8:	40021800 	.word	0x40021800
 80079bc:	40021c00 	.word	0x40021c00
 80079c0:	40013c00 	.word	0x40013c00

080079c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079da:	2300      	movs	r3, #0
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	e0cd      	b.n	8007b7c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80079e0:	2201      	movs	r2, #1
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	fa02 f303 	lsl.w	r3, r2, r3
 80079e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4013      	ands	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	f040 80bd 	bne.w	8007b76 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80079fc:	4a65      	ldr	r2, [pc, #404]	@ (8007b94 <HAL_GPIO_DeInit+0x1d0>)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	089b      	lsrs	r3, r3, #2
 8007a02:	3302      	adds	r3, #2
 8007a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a08:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f003 0303 	and.w	r3, r3, #3
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	220f      	movs	r2, #15
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a5d      	ldr	r2, [pc, #372]	@ (8007b98 <HAL_GPIO_DeInit+0x1d4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d02b      	beq.n	8007a7e <HAL_GPIO_DeInit+0xba>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a5c      	ldr	r2, [pc, #368]	@ (8007b9c <HAL_GPIO_DeInit+0x1d8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d025      	beq.n	8007a7a <HAL_GPIO_DeInit+0xb6>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a5b      	ldr	r2, [pc, #364]	@ (8007ba0 <HAL_GPIO_DeInit+0x1dc>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01f      	beq.n	8007a76 <HAL_GPIO_DeInit+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a5a      	ldr	r2, [pc, #360]	@ (8007ba4 <HAL_GPIO_DeInit+0x1e0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d019      	beq.n	8007a72 <HAL_GPIO_DeInit+0xae>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a59      	ldr	r2, [pc, #356]	@ (8007ba8 <HAL_GPIO_DeInit+0x1e4>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <HAL_GPIO_DeInit+0xaa>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a58      	ldr	r2, [pc, #352]	@ (8007bac <HAL_GPIO_DeInit+0x1e8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00d      	beq.n	8007a6a <HAL_GPIO_DeInit+0xa6>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a57      	ldr	r2, [pc, #348]	@ (8007bb0 <HAL_GPIO_DeInit+0x1ec>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d007      	beq.n	8007a66 <HAL_GPIO_DeInit+0xa2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a56      	ldr	r2, [pc, #344]	@ (8007bb4 <HAL_GPIO_DeInit+0x1f0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d101      	bne.n	8007a62 <HAL_GPIO_DeInit+0x9e>
 8007a5e:	2307      	movs	r3, #7
 8007a60:	e00e      	b.n	8007a80 <HAL_GPIO_DeInit+0xbc>
 8007a62:	2308      	movs	r3, #8
 8007a64:	e00c      	b.n	8007a80 <HAL_GPIO_DeInit+0xbc>
 8007a66:	2306      	movs	r3, #6
 8007a68:	e00a      	b.n	8007a80 <HAL_GPIO_DeInit+0xbc>
 8007a6a:	2305      	movs	r3, #5
 8007a6c:	e008      	b.n	8007a80 <HAL_GPIO_DeInit+0xbc>
 8007a6e:	2304      	movs	r3, #4
 8007a70:	e006      	b.n	8007a80 <HAL_GPIO_DeInit+0xbc>
 8007a72:	2303      	movs	r3, #3
 8007a74:	e004      	b.n	8007a80 <HAL_GPIO_DeInit+0xbc>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e002      	b.n	8007a80 <HAL_GPIO_DeInit+0xbc>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <HAL_GPIO_DeInit+0xbc>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	f002 0203 	and.w	r2, r2, #3
 8007a86:	0092      	lsls	r2, r2, #2
 8007a88:	4093      	lsls	r3, r2
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d132      	bne.n	8007af6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007a90:	4b49      	ldr	r3, [pc, #292]	@ (8007bb8 <HAL_GPIO_DeInit+0x1f4>)
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	43db      	mvns	r3, r3
 8007a98:	4947      	ldr	r1, [pc, #284]	@ (8007bb8 <HAL_GPIO_DeInit+0x1f4>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007a9e:	4b46      	ldr	r3, [pc, #280]	@ (8007bb8 <HAL_GPIO_DeInit+0x1f4>)
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	4944      	ldr	r1, [pc, #272]	@ (8007bb8 <HAL_GPIO_DeInit+0x1f4>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007aac:	4b42      	ldr	r3, [pc, #264]	@ (8007bb8 <HAL_GPIO_DeInit+0x1f4>)
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	4940      	ldr	r1, [pc, #256]	@ (8007bb8 <HAL_GPIO_DeInit+0x1f4>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007aba:	4b3f      	ldr	r3, [pc, #252]	@ (8007bb8 <HAL_GPIO_DeInit+0x1f4>)
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	493d      	ldr	r1, [pc, #244]	@ (8007bb8 <HAL_GPIO_DeInit+0x1f4>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	220f      	movs	r2, #15
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8007b94 <HAL_GPIO_DeInit+0x1d0>)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	089b      	lsrs	r3, r3, #2
 8007ade:	3302      	adds	r3, #2
 8007ae0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	43da      	mvns	r2, r3
 8007ae8:	482a      	ldr	r0, [pc, #168]	@ (8007b94 <HAL_GPIO_DeInit+0x1d0>)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	089b      	lsrs	r3, r3, #2
 8007aee:	400a      	ands	r2, r1
 8007af0:	3302      	adds	r3, #2
 8007af2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	2103      	movs	r1, #3
 8007b00:	fa01 f303 	lsl.w	r3, r1, r3
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	08da      	lsrs	r2, r3, #3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3208      	adds	r2, #8
 8007b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	220f      	movs	r2, #15
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	43db      	mvns	r3, r3
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	08d2      	lsrs	r2, r2, #3
 8007b2c:	4019      	ands	r1, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3208      	adds	r2, #8
 8007b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	2103      	movs	r1, #3
 8007b40:	fa01 f303 	lsl.w	r3, r1, r3
 8007b44:	43db      	mvns	r3, r3
 8007b46:	401a      	ands	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	2101      	movs	r1, #1
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	fa01 f303 	lsl.w	r3, r1, r3
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	401a      	ands	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	2103      	movs	r1, #3
 8007b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6e:	43db      	mvns	r3, r3
 8007b70:	401a      	ands	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2b0f      	cmp	r3, #15
 8007b80:	f67f af2e 	bls.w	80079e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40013800 	.word	0x40013800
 8007b98:	40020000 	.word	0x40020000
 8007b9c:	40020400 	.word	0x40020400
 8007ba0:	40020800 	.word	0x40020800
 8007ba4:	40020c00 	.word	0x40020c00
 8007ba8:	40021000 	.word	0x40021000
 8007bac:	40021400 	.word	0x40021400
 8007bb0:	40021800 	.word	0x40021800
 8007bb4:	40021c00 	.word	0x40021c00
 8007bb8:	40013c00 	.word	0x40013c00

08007bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	807b      	strh	r3, [r7, #2]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007bcc:	787b      	ldrb	r3, [r7, #1]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bd2:	887a      	ldrh	r2, [r7, #2]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bd8:	e003      	b.n	8007be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bda:	887b      	ldrh	r3, [r7, #2]
 8007bdc:	041a      	lsls	r2, r3, #16
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	619a      	str	r2, [r3, #24]
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
	...

08007bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e12b      	b.n	8007e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d106      	bne.n	8007c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fc fb7c 	bl	8004314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2224      	movs	r2, #36	@ 0x24
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c54:	f002 ff5e 	bl	800ab14 <HAL_RCC_GetPCLK1Freq>
 8007c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	4a81      	ldr	r2, [pc, #516]	@ (8007e64 <HAL_I2C_Init+0x274>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d807      	bhi.n	8007c74 <HAL_I2C_Init+0x84>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4a80      	ldr	r2, [pc, #512]	@ (8007e68 <HAL_I2C_Init+0x278>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	bf94      	ite	ls
 8007c6c:	2301      	movls	r3, #1
 8007c6e:	2300      	movhi	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e006      	b.n	8007c82 <HAL_I2C_Init+0x92>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4a7d      	ldr	r2, [pc, #500]	@ (8007e6c <HAL_I2C_Init+0x27c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	bf94      	ite	ls
 8007c7c:	2301      	movls	r3, #1
 8007c7e:	2300      	movhi	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e0e7      	b.n	8007e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4a78      	ldr	r2, [pc, #480]	@ (8007e70 <HAL_I2C_Init+0x280>)
 8007c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c92:	0c9b      	lsrs	r3, r3, #18
 8007c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8007e64 <HAL_I2C_Init+0x274>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d802      	bhi.n	8007cc4 <HAL_I2C_Init+0xd4>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	e009      	b.n	8007cd8 <HAL_I2C_Init+0xe8>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	4a69      	ldr	r2, [pc, #420]	@ (8007e74 <HAL_I2C_Init+0x284>)
 8007cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd4:	099b      	lsrs	r3, r3, #6
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	430b      	orrs	r3, r1
 8007cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007cea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	495c      	ldr	r1, [pc, #368]	@ (8007e64 <HAL_I2C_Init+0x274>)
 8007cf4:	428b      	cmp	r3, r1
 8007cf6:	d819      	bhi.n	8007d2c <HAL_I2C_Init+0x13c>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	1e59      	subs	r1, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d06:	1c59      	adds	r1, r3, #1
 8007d08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007d0c:	400b      	ands	r3, r1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <HAL_I2C_Init+0x138>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	1e59      	subs	r1, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d20:	3301      	adds	r3, #1
 8007d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d26:	e051      	b.n	8007dcc <HAL_I2C_Init+0x1dc>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	e04f      	b.n	8007dcc <HAL_I2C_Init+0x1dc>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d111      	bne.n	8007d58 <HAL_I2C_Init+0x168>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	1e58      	subs	r0, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6859      	ldr	r1, [r3, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	440b      	add	r3, r1
 8007d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d46:	3301      	adds	r3, #1
 8007d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	bf0c      	ite	eq
 8007d50:	2301      	moveq	r3, #1
 8007d52:	2300      	movne	r3, #0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	e012      	b.n	8007d7e <HAL_I2C_Init+0x18e>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	1e58      	subs	r0, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6859      	ldr	r1, [r3, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	0099      	lsls	r1, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d6e:	3301      	adds	r3, #1
 8007d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bf0c      	ite	eq
 8007d78:	2301      	moveq	r3, #1
 8007d7a:	2300      	movne	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <HAL_I2C_Init+0x196>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e022      	b.n	8007dcc <HAL_I2C_Init+0x1dc>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10e      	bne.n	8007dac <HAL_I2C_Init+0x1bc>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1e58      	subs	r0, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6859      	ldr	r1, [r3, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	440b      	add	r3, r1
 8007d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007da0:	3301      	adds	r3, #1
 8007da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007daa:	e00f      	b.n	8007dcc <HAL_I2C_Init+0x1dc>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	1e58      	subs	r0, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6859      	ldr	r1, [r3, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	0099      	lsls	r1, r3, #2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	6809      	ldr	r1, [r1, #0]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	69da      	ldr	r2, [r3, #28]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007dfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6911      	ldr	r1, [r2, #16]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	68d2      	ldr	r2, [r2, #12]
 8007e06:	4311      	orrs	r1, r2
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0201 	orr.w	r2, r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2220      	movs	r2, #32
 8007e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	000186a0 	.word	0x000186a0
 8007e68:	001e847f 	.word	0x001e847f
 8007e6c:	003d08ff 	.word	0x003d08ff
 8007e70:	431bde83 	.word	0x431bde83
 8007e74:	10624dd3 	.word	0x10624dd3

08007e78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e021      	b.n	8007ece <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2224      	movs	r2, #36	@ 0x24
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0201 	bic.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fc fab0 	bl	8004408 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ee8:	2b80      	cmp	r3, #128	@ 0x80
 8007eea:	d103      	bne.n	8007ef4 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	611a      	str	r2, [r3, #16]
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	817b      	strh	r3, [r7, #10]
 8007f10:	4613      	mov	r3, r2
 8007f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f14:	f7fd faba 	bl	800548c <HAL_GetTick>
 8007f18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b20      	cmp	r3, #32
 8007f24:	f040 80e0 	bne.w	80080e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	2319      	movs	r3, #25
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4970      	ldr	r1, [pc, #448]	@ (80080f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f001 ff58 	bl	8009de8 <I2C_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e0d3      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_I2C_Master_Transmit+0x50>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e0cc      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d007      	beq.n	8007f76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2221      	movs	r2, #33	@ 0x21
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2210      	movs	r2, #16
 8007f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	893a      	ldrh	r2, [r7, #8]
 8007fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4a50      	ldr	r2, [pc, #320]	@ (80080f8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007fb8:	8979      	ldrh	r1, [r7, #10]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	6a3a      	ldr	r2, [r7, #32]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f001 fde8 	bl	8009b94 <I2C_MasterRequestWrite>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e08d      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fce:	2300      	movs	r3, #0
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007fe4:	e066      	b.n	80080b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	6a39      	ldr	r1, [r7, #32]
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f002 f816 	bl	800a01c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00d      	beq.n	8008012 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d107      	bne.n	800800e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800800c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e06b      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b04      	cmp	r3, #4
 800804e:	d11b      	bne.n	8008088 <HAL_I2C_Master_Transmit+0x188>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008054:	2b00      	cmp	r3, #0
 8008056:	d017      	beq.n	8008088 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	6a39      	ldr	r1, [r7, #32]
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f002 f80d 	bl	800a0ac <I2C_WaitOnBTFFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00d      	beq.n	80080b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	2b04      	cmp	r3, #4
 800809e:	d107      	bne.n	80080b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e01a      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d194      	bne.n	8007fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e000      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	00100002 	.word	0x00100002
 80080f8:	ffff0000 	.word	0xffff0000

080080fc <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	4608      	mov	r0, r1
 8008106:	4611      	mov	r1, r2
 8008108:	461a      	mov	r2, r3
 800810a:	4603      	mov	r3, r0
 800810c:	817b      	strh	r3, [r7, #10]
 800810e:	460b      	mov	r3, r1
 8008110:	813b      	strh	r3, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b20      	cmp	r3, #32
 8008124:	f040 808a 	bne.w	800823c <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008128:	4b48      	ldr	r3, [pc, #288]	@ (800824c <HAL_I2C_Mem_Write_IT+0x150>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	08db      	lsrs	r3, r3, #3
 800812e:	4a48      	ldr	r2, [pc, #288]	@ (8008250 <HAL_I2C_Mem_Write_IT+0x154>)
 8008130:	fba2 2303 	umull	r2, r3, r2, r3
 8008134:	0a1a      	lsrs	r2, r3, #8
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009a      	lsls	r2, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	3b01      	subs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d112      	bne.n	8008174 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008168:	f043 0220 	orr.w	r2, r3, #32
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8008170:	2302      	movs	r3, #2
 8008172:	e064      	b.n	800823e <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d0df      	beq.n	8008142 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_I2C_Mem_Write_IT+0x94>
 800818c:	2302      	movs	r3, #2
 800818e:	e056      	b.n	800823e <HAL_I2C_Mem_Write_IT+0x142>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d007      	beq.n	80081b6 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0201 	orr.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2221      	movs	r2, #33	@ 0x21
 80081ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2240      	movs	r2, #64	@ 0x40
 80081d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a3a      	ldr	r2, [r7, #32]
 80081e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80081e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4a17      	ldr	r2, [pc, #92]	@ (8008254 <HAL_I2C_Mem_Write_IT+0x158>)
 80081f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80081f8:	897a      	ldrh	r2, [r7, #10]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80081fe:	893a      	ldrh	r2, [r7, #8]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008204:	88fa      	ldrh	r2, [r7, #6]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800821e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8008236:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	e000      	b.n	800823e <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800823c:	2302      	movs	r3, #2
  }
}
 800823e:	4618      	mov	r0, r3
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	200000f0 	.word	0x200000f0
 8008250:	14f8b589 	.word	0x14f8b589
 8008254:	ffff0000 	.word	0xffff0000

08008258 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	4608      	mov	r0, r1
 8008262:	4611      	mov	r1, r2
 8008264:	461a      	mov	r2, r3
 8008266:	4603      	mov	r3, r0
 8008268:	817b      	strh	r3, [r7, #10]
 800826a:	460b      	mov	r3, r1
 800826c:	813b      	strh	r3, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b20      	cmp	r3, #32
 8008280:	f040 8096 	bne.w	80083b0 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008284:	4b4e      	ldr	r3, [pc, #312]	@ (80083c0 <HAL_I2C_Mem_Read_IT+0x168>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	08db      	lsrs	r3, r3, #3
 800828a:	4a4e      	ldr	r2, [pc, #312]	@ (80083c4 <HAL_I2C_Mem_Read_IT+0x16c>)
 800828c:	fba2 2303 	umull	r2, r3, r2, r3
 8008290:	0a1a      	lsrs	r2, r3, #8
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009a      	lsls	r2, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d112      	bne.n	80082d0 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c4:	f043 0220 	orr.w	r2, r3, #32
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80082cc:	2302      	movs	r3, #2
 80082ce:	e070      	b.n	80083b2 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d0df      	beq.n	800829e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_I2C_Mem_Read_IT+0x94>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e062      	b.n	80083b2 <HAL_I2C_Mem_Read_IT+0x15a>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d007      	beq.n	8008312 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008320:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2222      	movs	r2, #34	@ 0x22
 8008326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2240      	movs	r2, #64	@ 0x40
 800832e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a3a      	ldr	r2, [r7, #32]
 800833c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4a1d      	ldr	r2, [pc, #116]	@ (80083c8 <HAL_I2C_Mem_Read_IT+0x170>)
 8008352:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008354:	897a      	ldrh	r2, [r7, #10]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800835a:	893a      	ldrh	r2, [r7, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008360:	88fa      	ldrh	r2, [r7, #6]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800837a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800838a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008398:	2b00      	cmp	r3, #0
 800839a:	d007      	beq.n	80083ac <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80083aa:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e000      	b.n	80083b2 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 80083b0:	2302      	movs	r3, #2
  }
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	200000f0 	.word	0x200000f0
 80083c4:	14f8b589 	.word	0x14f8b589
 80083c8:	ffff0000 	.word	0xffff0000

080083cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083f4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d003      	beq.n	8008404 <HAL_I2C_EV_IRQHandler+0x38>
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	2b40      	cmp	r3, #64	@ 0x40
 8008400:	f040 80c1 	bne.w	8008586 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10d      	bne.n	800843a <HAL_I2C_EV_IRQHandler+0x6e>
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008424:	d003      	beq.n	800842e <HAL_I2C_EV_IRQHandler+0x62>
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800842c:	d101      	bne.n	8008432 <HAL_I2C_EV_IRQHandler+0x66>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <HAL_I2C_EV_IRQHandler+0x68>
 8008432:	2300      	movs	r3, #0
 8008434:	2b01      	cmp	r3, #1
 8008436:	f000 8132 	beq.w	800869e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00c      	beq.n	800845e <HAL_I2C_EV_IRQHandler+0x92>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	0a5b      	lsrs	r3, r3, #9
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	d006      	beq.n	800845e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 fed4 	bl	800a1fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fd7d 	bl	8008f56 <I2C_Master_SB>
 800845c:	e092      	b.n	8008584 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	08db      	lsrs	r3, r3, #3
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d009      	beq.n	800847e <HAL_I2C_EV_IRQHandler+0xb2>
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	0a5b      	lsrs	r3, r3, #9
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fdf3 	bl	8009062 <I2C_Master_ADD10>
 800847c:	e082      	b.n	8008584 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	085b      	lsrs	r3, r3, #1
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d009      	beq.n	800849e <HAL_I2C_EV_IRQHandler+0xd2>
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	0a5b      	lsrs	r3, r3, #9
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fe0d 	bl	80090b6 <I2C_Master_ADDR>
 800849c:	e072      	b.n	8008584 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	089b      	lsrs	r3, r3, #2
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d03b      	beq.n	8008522 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084b8:	f000 80f3 	beq.w	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	09db      	lsrs	r3, r3, #7
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00f      	beq.n	80084e8 <HAL_I2C_EV_IRQHandler+0x11c>
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	0a9b      	lsrs	r3, r3, #10
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d009      	beq.n	80084e8 <HAL_I2C_EV_IRQHandler+0x11c>
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	089b      	lsrs	r3, r3, #2
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9d5 	bl	8008890 <I2C_MasterTransmit_TXE>
 80084e6:	e04d      	b.n	8008584 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	089b      	lsrs	r3, r3, #2
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 80d6 	beq.w	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	0a5b      	lsrs	r3, r3, #9
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 80cf 	beq.w	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b21      	cmp	r3, #33	@ 0x21
 8008508:	d103      	bne.n	8008512 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa5c 	bl	80089c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008510:	e0c7      	b.n	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b40      	cmp	r3, #64	@ 0x40
 8008516:	f040 80c4 	bne.w	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 faca 	bl	8008ab4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008520:	e0bf      	b.n	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800852c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008530:	f000 80b7 	beq.w	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	099b      	lsrs	r3, r3, #6
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00f      	beq.n	8008560 <HAL_I2C_EV_IRQHandler+0x194>
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	0a9b      	lsrs	r3, r3, #10
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d009      	beq.n	8008560 <HAL_I2C_EV_IRQHandler+0x194>
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	089b      	lsrs	r3, r3, #2
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb43 	bl	8008be4 <I2C_MasterReceive_RXNE>
 800855e:	e011      	b.n	8008584 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	089b      	lsrs	r3, r3, #2
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 809a 	beq.w	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	0a5b      	lsrs	r3, r3, #9
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 8093 	beq.w	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fbf9 	bl	8008d74 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008582:	e08e      	b.n	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008584:	e08d      	b.n	80086a2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	d004      	beq.n	8008598 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	e007      	b.n	80085a8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	085b      	lsrs	r3, r3, #1
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d012      	beq.n	80085da <HAL_I2C_EV_IRQHandler+0x20e>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	0a5b      	lsrs	r3, r3, #9
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00c      	beq.n	80085da <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80085d0:	69b9      	ldr	r1, [r7, #24]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 ffbe 	bl	8009554 <I2C_Slave_ADDR>
 80085d8:	e066      	b.n	80086a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	091b      	lsrs	r3, r3, #4
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <HAL_I2C_EV_IRQHandler+0x22e>
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	0a5b      	lsrs	r3, r3, #9
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fff8 	bl	80095e8 <I2C_Slave_STOPF>
 80085f8:	e056      	b.n	80086a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b21      	cmp	r3, #33	@ 0x21
 80085fe:	d002      	beq.n	8008606 <HAL_I2C_EV_IRQHandler+0x23a>
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b29      	cmp	r3, #41	@ 0x29
 8008604:	d125      	bne.n	8008652 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	09db      	lsrs	r3, r3, #7
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00f      	beq.n	8008632 <HAL_I2C_EV_IRQHandler+0x266>
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	0a9b      	lsrs	r3, r3, #10
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <HAL_I2C_EV_IRQHandler+0x266>
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	089b      	lsrs	r3, r3, #2
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d103      	bne.n	8008632 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fed4 	bl	80093d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008630:	e039      	b.n	80086a6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	089b      	lsrs	r3, r3, #2
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d033      	beq.n	80086a6 <HAL_I2C_EV_IRQHandler+0x2da>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	0a5b      	lsrs	r3, r3, #9
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d02d      	beq.n	80086a6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 ff01 	bl	8009452 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008650:	e029      	b.n	80086a6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	099b      	lsrs	r3, r3, #6
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00f      	beq.n	800867e <HAL_I2C_EV_IRQHandler+0x2b2>
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	0a9b      	lsrs	r3, r3, #10
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <HAL_I2C_EV_IRQHandler+0x2b2>
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	089b      	lsrs	r3, r3, #2
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d103      	bne.n	800867e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 ff0c 	bl	8009494 <I2C_SlaveReceive_RXNE>
 800867c:	e014      	b.n	80086a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	089b      	lsrs	r3, r3, #2
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00e      	beq.n	80086a8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	0a5b      	lsrs	r3, r3, #9
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d008      	beq.n	80086a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 ff3a 	bl	8009510 <I2C_SlaveReceive_BTF>
 800869c:	e004      	b.n	80086a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800869e:	bf00      	nop
 80086a0:	e002      	b.n	80086a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80086a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b08a      	sub	sp, #40	@ 0x28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	0a1b      	lsrs	r3, r3, #8
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00e      	beq.n	80086fc <HAL_I2C_ER_IRQHandler+0x4e>
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	0a1b      	lsrs	r3, r3, #8
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086fa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	0a5b      	lsrs	r3, r3, #9
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00e      	beq.n	8008726 <HAL_I2C_ER_IRQHandler+0x78>
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	0a1b      	lsrs	r3, r3, #8
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d008      	beq.n	8008726 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	f043 0302 	orr.w	r3, r3, #2
 800871a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8008724:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	0a9b      	lsrs	r3, r3, #10
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d03f      	beq.n	80087b2 <HAL_I2C_ER_IRQHandler+0x104>
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	0a1b      	lsrs	r3, r3, #8
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d039      	beq.n	80087b2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800873e:	7efb      	ldrb	r3, [r7, #27]
 8008740:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008746:	b29b      	uxth	r3, r3
 8008748:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008750:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008756:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008758:	7ebb      	ldrb	r3, [r7, #26]
 800875a:	2b20      	cmp	r3, #32
 800875c:	d112      	bne.n	8008784 <HAL_I2C_ER_IRQHandler+0xd6>
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10f      	bne.n	8008784 <HAL_I2C_ER_IRQHandler+0xd6>
 8008764:	7cfb      	ldrb	r3, [r7, #19]
 8008766:	2b21      	cmp	r3, #33	@ 0x21
 8008768:	d008      	beq.n	800877c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800876a:	7cfb      	ldrb	r3, [r7, #19]
 800876c:	2b29      	cmp	r3, #41	@ 0x29
 800876e:	d005      	beq.n	800877c <HAL_I2C_ER_IRQHandler+0xce>
 8008770:	7cfb      	ldrb	r3, [r7, #19]
 8008772:	2b28      	cmp	r3, #40	@ 0x28
 8008774:	d106      	bne.n	8008784 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b21      	cmp	r3, #33	@ 0x21
 800877a:	d103      	bne.n	8008784 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f863 	bl	8009848 <I2C_Slave_AF>
 8008782:	e016      	b.n	80087b2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800878c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	f043 0304 	orr.w	r3, r3, #4
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008796:	7efb      	ldrb	r3, [r7, #27]
 8008798:	2b10      	cmp	r3, #16
 800879a:	d002      	beq.n	80087a2 <HAL_I2C_ER_IRQHandler+0xf4>
 800879c:	7efb      	ldrb	r3, [r7, #27]
 800879e:	2b40      	cmp	r3, #64	@ 0x40
 80087a0:	d107      	bne.n	80087b2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	0adb      	lsrs	r3, r3, #11
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <HAL_I2C_ER_IRQHandler+0x12e>
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	0a1b      	lsrs	r3, r3, #8
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d008      	beq.n	80087dc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	f043 0308 	orr.w	r3, r3, #8
 80087d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80087da:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d008      	beq.n	80087f4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	431a      	orrs	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 f89e 	bl	8009930 <I2C_ITError>
  }
}
 80087f4:	bf00      	nop
 80087f6:	3728      	adds	r7, #40	@ 0x28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
 8008858:	4613      	mov	r3, r2
 800885a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800889e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d150      	bne.n	8008958 <I2C_MasterTransmit_TXE+0xc8>
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	2b21      	cmp	r3, #33	@ 0x21
 80088ba:	d14d      	bne.n	8008958 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d01d      	beq.n	80088fe <I2C_MasterTransmit_TXE+0x6e>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d01a      	beq.n	80088fe <I2C_MasterTransmit_TXE+0x6e>
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80088ce:	d016      	beq.n	80088fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80088de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2211      	movs	r2, #17
 80088e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff ff80 	bl	80087fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80088fc:	e060      	b.n	80089c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800890c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800891c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b40      	cmp	r3, #64	@ 0x40
 8008936:	d107      	bne.n	8008948 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7f8 fbcb 	bl	80010dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008946:	e03b      	b.n	80089c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff ff53 	bl	80087fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008956:	e033      	b.n	80089c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b21      	cmp	r3, #33	@ 0x21
 800895c:	d005      	beq.n	800896a <I2C_MasterTransmit_TXE+0xda>
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	2b40      	cmp	r3, #64	@ 0x40
 8008962:	d12d      	bne.n	80089c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	2b22      	cmp	r3, #34	@ 0x22
 8008968:	d12a      	bne.n	80089c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800896e:	b29b      	uxth	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d108      	bne.n	8008986 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008982:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008984:	e01c      	b.n	80089c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b40      	cmp	r3, #64	@ 0x40
 8008990:	d103      	bne.n	800899a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f88e 	bl	8008ab4 <I2C_MemoryTransmit_TXE_BTF>
}
 8008998:	e012      	b.n	80089c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80089be:	e7ff      	b.n	80089c0 <I2C_MasterTransmit_TXE+0x130>
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b21      	cmp	r3, #33	@ 0x21
 80089e0:	d164      	bne.n	8008aac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d012      	beq.n	8008a12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f0:	781a      	ldrb	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008a10:	e04c      	b.n	8008aac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	d01d      	beq.n	8008a54 <I2C_MasterTransmit_BTF+0x8c>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	d01a      	beq.n	8008a54 <I2C_MasterTransmit_BTF+0x8c>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a24:	d016      	beq.n	8008a54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008a34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2211      	movs	r2, #17
 8008a3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff fed5 	bl	80087fc <HAL_I2C_MasterTxCpltCallback>
}
 8008a52:	e02b      	b.n	8008aac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008a62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b40      	cmp	r3, #64	@ 0x40
 8008a8c:	d107      	bne.n	8008a9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7f8 fb20 	bl	80010dc <HAL_I2C_MemTxCpltCallback>
}
 8008a9c:	e006      	b.n	8008aac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff fea8 	bl	80087fc <HAL_I2C_MasterTxCpltCallback>
}
 8008aac:	bf00      	nop
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ac2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d11d      	bne.n	8008b08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d10b      	bne.n	8008aec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae4:	1c9a      	adds	r2, r3, #2
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8008aea:	e077      	b.n	8008bdc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	121b      	asrs	r3, r3, #8
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008b06:	e069      	b.n	8008bdc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d10b      	bne.n	8008b28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008b26:	e059      	b.n	8008bdc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d152      	bne.n	8008bd6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b22      	cmp	r3, #34	@ 0x22
 8008b34:	d10d      	bne.n	8008b52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008b50:	e044      	b.n	8008bdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d015      	beq.n	8008b88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b21      	cmp	r3, #33	@ 0x21
 8008b60:	d112      	bne.n	8008b88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008b86:	e029      	b.n	8008bdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d124      	bne.n	8008bdc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	2b21      	cmp	r3, #33	@ 0x21
 8008b96:	d121      	bne.n	8008bdc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ba6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7f8 fa84 	bl	80010dc <HAL_I2C_MemTxCpltCallback>
}
 8008bd4:	e002      	b.n	8008bdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7ff f97d 	bl	8007ed6 <I2C_Flush_DR>
}
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b22      	cmp	r3, #34	@ 0x22
 8008bf6:	f040 80b9 	bne.w	8008d6c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d921      	bls.n	8008c52 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	691a      	ldr	r2, [r3, #16]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	b2d2      	uxtb	r2, r2
 8008c1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	f040 8096 	bne.w	8008d6c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c4e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008c50:	e08c      	b.n	8008d6c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d07f      	beq.n	8008d5a <I2C_MasterReceive_RXNE+0x176>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d002      	beq.n	8008c66 <I2C_MasterReceive_RXNE+0x82>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d179      	bne.n	8008d5a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fa68 	bl	800a13c <I2C_WaitOnSTOPRequestThroughIT>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d14c      	bne.n	8008d0c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c80:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008c90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	691a      	ldr	r2, [r3, #16]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	b2d2      	uxtb	r2, r2
 8008c9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b40      	cmp	r3, #64	@ 0x40
 8008cca:	d10a      	bne.n	8008ce2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7f8 f9e6 	bl	80010ac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008ce0:	e044      	b.n	8008d6c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d002      	beq.n	8008cf6 <I2C_MasterReceive_RXNE+0x112>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	d103      	bne.n	8008cfe <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cfc:	e002      	b.n	8008d04 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2212      	movs	r2, #18
 8008d02:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fd83 	bl	8008810 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008d0a:	e02f      	b.n	8008d6c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008d1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d26:	b2d2      	uxtb	r2, r2
 8008d28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7f8 f9da 	bl	800110c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008d58:	e008      	b.n	8008d6c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d68:	605a      	str	r2, [r3, #4]
}
 8008d6a:	e7ff      	b.n	8008d6c <I2C_MasterReceive_RXNE+0x188>
 8008d6c:	bf00      	nop
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d80:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d11b      	bne.n	8008dc4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d9a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691a      	ldr	r2, [r3, #16]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008dc2:	e0c4      	b.n	8008f4e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d129      	bne.n	8008e22 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ddc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d00a      	beq.n	8008dfa <I2C_MasterReceive_BTF+0x86>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d007      	beq.n	8008dfa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008df8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e04:	b2d2      	uxtb	r2, r2
 8008e06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008e20:	e095      	b.n	8008f4e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d17d      	bne.n	8008f28 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d002      	beq.n	8008e38 <I2C_MasterReceive_BTF+0xc4>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b10      	cmp	r3, #16
 8008e36:	d108      	bne.n	8008e4a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	e016      	b.n	8008e78 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d002      	beq.n	8008e56 <I2C_MasterReceive_BTF+0xe2>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d108      	bne.n	8008e68 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	e007      	b.n	8008e78 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea8:	b2d2      	uxtb	r2, r2
 8008eaa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008ed2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b40      	cmp	r3, #64	@ 0x40
 8008ee6:	d10a      	bne.n	8008efe <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7f8 f8d8 	bl	80010ac <HAL_I2C_MemRxCpltCallback>
}
 8008efc:	e027      	b.n	8008f4e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d002      	beq.n	8008f12 <I2C_MasterReceive_BTF+0x19e>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d103      	bne.n	8008f1a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f18:	e002      	b.n	8008f20 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2212      	movs	r2, #18
 8008f1e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff fc75 	bl	8008810 <HAL_I2C_MasterRxCpltCallback>
}
 8008f26:	e012      	b.n	8008f4e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f32:	b2d2      	uxtb	r2, r2
 8008f34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	3b01      	subs	r3, #1
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b40      	cmp	r3, #64	@ 0x40
 8008f68:	d117      	bne.n	8008f9a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d109      	bne.n	8008f86 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	461a      	mov	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008f82:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008f84:	e067      	b.n	8009056 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f043 0301 	orr.w	r3, r3, #1
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	611a      	str	r2, [r3, #16]
}
 8008f98:	e05d      	b.n	8009056 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fa2:	d133      	bne.n	800900c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b21      	cmp	r3, #33	@ 0x21
 8008fae:	d109      	bne.n	8008fc4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008fc0:	611a      	str	r2, [r3, #16]
 8008fc2:	e008      	b.n	8008fd6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	f043 0301 	orr.w	r3, r3, #1
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d004      	beq.n	8008fe8 <I2C_Master_SB+0x92>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d108      	bne.n	8008ffa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d032      	beq.n	8009056 <I2C_Master_SB+0x100>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d02d      	beq.n	8009056 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009008:	605a      	str	r2, [r3, #4]
}
 800900a:	e024      	b.n	8009056 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10e      	bne.n	8009032 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009018:	b29b      	uxth	r3, r3
 800901a:	11db      	asrs	r3, r3, #7
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 0306 	and.w	r3, r3, #6
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f063 030f 	orn	r3, r3, #15
 8009028:	b2da      	uxtb	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	611a      	str	r2, [r3, #16]
}
 8009030:	e011      	b.n	8009056 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009036:	2b01      	cmp	r3, #1
 8009038:	d10d      	bne.n	8009056 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903e:	b29b      	uxth	r3, r3
 8009040:	11db      	asrs	r3, r3, #7
 8009042:	b2db      	uxtb	r3, r3
 8009044:	f003 0306 	and.w	r3, r3, #6
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f063 030e 	orn	r3, r3, #14
 800904e:	b2da      	uxtb	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	611a      	str	r2, [r3, #16]
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906e:	b2da      	uxtb	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800907a:	2b00      	cmp	r3, #0
 800907c:	d004      	beq.n	8009088 <I2C_Master_ADD10+0x26>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009084:	2b00      	cmp	r3, #0
 8009086:	d108      	bne.n	800909a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00c      	beq.n	80090aa <I2C_Master_ADD10+0x48>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090a8:	605a      	str	r2, [r3, #4]
  }
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b091      	sub	sp, #68	@ 0x44
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80090c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b22      	cmp	r3, #34	@ 0x22
 80090de:	f040 8169 	bne.w	80093b4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10f      	bne.n	800910a <I2C_Master_ADDR+0x54>
 80090ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80090ee:	2b40      	cmp	r3, #64	@ 0x40
 80090f0:	d10b      	bne.n	800910a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090f2:	2300      	movs	r3, #0
 80090f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	633b      	str	r3, [r7, #48]	@ 0x30
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	e160      	b.n	80093cc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800910e:	2b00      	cmp	r3, #0
 8009110:	d11d      	bne.n	800914e <I2C_Master_ADDR+0x98>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800911a:	d118      	bne.n	800914e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800911c:	2300      	movs	r3, #0
 800911e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009140:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	651a      	str	r2, [r3, #80]	@ 0x50
 800914c:	e13e      	b.n	80093cc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009152:	b29b      	uxth	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d113      	bne.n	8009180 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009158:	2300      	movs	r3, #0
 800915a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	e115      	b.n	80093ac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009184:	b29b      	uxth	r3, r3
 8009186:	2b01      	cmp	r3, #1
 8009188:	f040 808a 	bne.w	80092a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009192:	d137      	bne.n	8009204 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091b2:	d113      	bne.n	80091dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091c4:	2300      	movs	r3, #0
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	e0e7      	b.n	80093ac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091dc:	2300      	movs	r3, #0
 80091de:	623b      	str	r3, [r7, #32]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	623b      	str	r3, [r7, #32]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	623b      	str	r3, [r7, #32]
 80091f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	e0d3      	b.n	80093ac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009206:	2b08      	cmp	r3, #8
 8009208:	d02e      	beq.n	8009268 <I2C_Master_ADDR+0x1b2>
 800920a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920c:	2b20      	cmp	r3, #32
 800920e:	d02b      	beq.n	8009268 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009212:	2b12      	cmp	r3, #18
 8009214:	d102      	bne.n	800921c <I2C_Master_ADDR+0x166>
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	2b01      	cmp	r3, #1
 800921a:	d125      	bne.n	8009268 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	2b04      	cmp	r3, #4
 8009220:	d00e      	beq.n	8009240 <I2C_Master_ADDR+0x18a>
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	2b02      	cmp	r3, #2
 8009226:	d00b      	beq.n	8009240 <I2C_Master_ADDR+0x18a>
 8009228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922a:	2b10      	cmp	r3, #16
 800922c:	d008      	beq.n	8009240 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	e007      	b.n	8009250 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800924e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	61fb      	str	r3, [r7, #28]
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	e0a1      	b.n	80093ac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009276:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009278:	2300      	movs	r3, #0
 800927a:	61bb      	str	r3, [r7, #24]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	61bb      	str	r3, [r7, #24]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	61bb      	str	r3, [r7, #24]
 800928c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e085      	b.n	80093ac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d14d      	bne.n	8009346 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d016      	beq.n	80092de <I2C_Master_ADDR+0x228>
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d013      	beq.n	80092de <I2C_Master_ADDR+0x228>
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	2b10      	cmp	r3, #16
 80092ba:	d010      	beq.n	80092de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	e007      	b.n	80092ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80092ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092fc:	d117      	bne.n	800932e <I2C_Master_ADDR+0x278>
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009304:	d00b      	beq.n	800931e <I2C_Master_ADDR+0x268>
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	2b01      	cmp	r3, #1
 800930a:	d008      	beq.n	800931e <I2C_Master_ADDR+0x268>
 800930c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930e:	2b08      	cmp	r3, #8
 8009310:	d005      	beq.n	800931e <I2C_Master_ADDR+0x268>
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	2b10      	cmp	r3, #16
 8009316:	d002      	beq.n	800931e <I2C_Master_ADDR+0x268>
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	2b20      	cmp	r3, #32
 800931c:	d107      	bne.n	800932e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800932c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800932e:	2300      	movs	r3, #0
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	617b      	str	r3, [r7, #20]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	e032      	b.n	80093ac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009354:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009364:	d117      	bne.n	8009396 <I2C_Master_ADDR+0x2e0>
 8009366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009368:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800936c:	d00b      	beq.n	8009386 <I2C_Master_ADDR+0x2d0>
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	2b01      	cmp	r3, #1
 8009372:	d008      	beq.n	8009386 <I2C_Master_ADDR+0x2d0>
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	2b08      	cmp	r3, #8
 8009378:	d005      	beq.n	8009386 <I2C_Master_ADDR+0x2d0>
 800937a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937c:	2b10      	cmp	r3, #16
 800937e:	d002      	beq.n	8009386 <I2C_Master_ADDR+0x2d0>
 8009380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009382:	2b20      	cmp	r3, #32
 8009384:	d107      	bne.n	8009396 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009394:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009396:	2300      	movs	r3, #0
 8009398:	613b      	str	r3, [r7, #16]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	613b      	str	r3, [r7, #16]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	613b      	str	r3, [r7, #16]
 80093aa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80093b2:	e00b      	b.n	80093cc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	68fb      	ldr	r3, [r7, #12]
}
 80093ca:	e7ff      	b.n	80093cc <I2C_Master_ADDR+0x316>
 80093cc:	bf00      	nop
 80093ce:	3744      	adds	r7, #68	@ 0x44
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d02b      	beq.n	800944a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f6:	781a      	ldrb	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800940c:	b29b      	uxth	r3, r3
 800940e:	3b01      	subs	r3, #1
 8009410:	b29a      	uxth	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800941a:	b29b      	uxth	r3, r3
 800941c:	2b00      	cmp	r3, #0
 800941e:	d114      	bne.n	800944a <I2C_SlaveTransmit_TXE+0x72>
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b29      	cmp	r3, #41	@ 0x29
 8009424:	d111      	bne.n	800944a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009434:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2221      	movs	r2, #33	@ 0x21
 800943a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2228      	movs	r2, #40	@ 0x28
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff f9ed 	bl	8008824 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800945e:	b29b      	uxth	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d011      	beq.n	8009488 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009468:	781a      	ldrb	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d02c      	beq.n	8009508 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b8:	b2d2      	uxtb	r2, r2
 80094ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d114      	bne.n	8009508 <I2C_SlaveReceive_RXNE+0x74>
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80094e2:	d111      	bne.n	8009508 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2222      	movs	r2, #34	@ 0x22
 80094f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2228      	movs	r2, #40	@ 0x28
 80094fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff f998 	bl	8008838 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009508:	bf00      	nop
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d012      	beq.n	8009548 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009568:	b2db      	uxtb	r3, r3
 800956a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800956e:	2b28      	cmp	r3, #40	@ 0x28
 8009570:	d127      	bne.n	80095c2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009580:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	089b      	lsrs	r3, r3, #2
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800958e:	2301      	movs	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	09db      	lsrs	r3, r3, #7
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d103      	bne.n	80095a6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	81bb      	strh	r3, [r7, #12]
 80095a4:	e002      	b.n	80095ac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80095b4:	89ba      	ldrh	r2, [r7, #12]
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff f946 	bl	800884c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80095c0:	e00e      	b.n	80095e0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095c2:	2300      	movs	r3, #0
 80095c4:	60bb      	str	r3, [r7, #8]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	60bb      	str	r3, [r7, #8]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	60bb      	str	r3, [r7, #8]
 80095d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009606:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009608:	2300      	movs	r3, #0
 800960a:	60bb      	str	r3, [r7, #8]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	60bb      	str	r3, [r7, #8]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009634:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009644:	d172      	bne.n	800972c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	2b22      	cmp	r3, #34	@ 0x22
 800964a:	d002      	beq.n	8009652 <I2C_Slave_STOPF+0x6a>
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009650:	d135      	bne.n	80096be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	b29a      	uxth	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	f043 0204 	orr.w	r2, r3, #4
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009684:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968a:	4618      	mov	r0, r3
 800968c:	f7fd ff3e 	bl	800750c <HAL_DMA_GetState>
 8009690:	4603      	mov	r3, r0
 8009692:	2b01      	cmp	r3, #1
 8009694:	d049      	beq.n	800972a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800969a:	4a69      	ldr	r2, [pc, #420]	@ (8009840 <I2C_Slave_STOPF+0x258>)
 800969c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fd fd86 	bl	80071b4 <HAL_DMA_Abort_IT>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d03d      	beq.n	800972a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80096b8:	4610      	mov	r0, r2
 80096ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096bc:	e035      	b.n	800972a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096da:	f043 0204 	orr.w	r2, r3, #4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80096f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fd ff08 	bl	800750c <HAL_DMA_GetState>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d014      	beq.n	800972c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009706:	4a4e      	ldr	r2, [pc, #312]	@ (8009840 <I2C_Slave_STOPF+0x258>)
 8009708:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800970e:	4618      	mov	r0, r3
 8009710:	f7fd fd50 	bl	80071b4 <HAL_DMA_Abort_IT>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d008      	beq.n	800972c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800971e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009724:	4610      	mov	r0, r2
 8009726:	4798      	blx	r3
 8009728:	e000      	b.n	800972c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800972a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009730:	b29b      	uxth	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d03e      	beq.n	80097b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b04      	cmp	r3, #4
 8009742:	d112      	bne.n	800976a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009774:	2b40      	cmp	r3, #64	@ 0x40
 8009776:	d112      	bne.n	800979e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691a      	ldr	r2, [r3, #16]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009794:	b29b      	uxth	r3, r3
 8009796:	3b01      	subs	r3, #1
 8009798:	b29a      	uxth	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d005      	beq.n	80097b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ac:	f043 0204 	orr.w	r2, r3, #4
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f8b7 	bl	8009930 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80097c2:	e039      	b.n	8009838 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c8:	d109      	bne.n	80097de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2228      	movs	r2, #40	@ 0x28
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff f82d 	bl	8008838 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b28      	cmp	r3, #40	@ 0x28
 80097e8:	d111      	bne.n	800980e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a15      	ldr	r2, [pc, #84]	@ (8009844 <I2C_Slave_STOPF+0x25c>)
 80097ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff f82e 	bl	8008868 <HAL_I2C_ListenCpltCallback>
}
 800980c:	e014      	b.n	8009838 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009812:	2b22      	cmp	r3, #34	@ 0x22
 8009814:	d002      	beq.n	800981c <I2C_Slave_STOPF+0x234>
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	2b22      	cmp	r3, #34	@ 0x22
 800981a:	d10d      	bne.n	8009838 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2220      	movs	r2, #32
 8009826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff f800 	bl	8008838 <HAL_I2C_SlaveRxCpltCallback>
}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	08009c99 	.word	0x08009c99
 8009844:	ffff0000 	.word	0xffff0000

08009848 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009856:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b08      	cmp	r3, #8
 8009862:	d002      	beq.n	800986a <I2C_Slave_AF+0x22>
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2b20      	cmp	r3, #32
 8009868:	d129      	bne.n	80098be <I2C_Slave_AF+0x76>
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b28      	cmp	r3, #40	@ 0x28
 800986e:	d126      	bne.n	80098be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a2e      	ldr	r2, [pc, #184]	@ (800992c <I2C_Slave_AF+0xe4>)
 8009874:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009884:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800988e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800989e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2220      	movs	r2, #32
 80098aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7fe ffd6 	bl	8008868 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80098bc:	e031      	b.n	8009922 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	2b21      	cmp	r3, #33	@ 0x21
 80098c2:	d129      	bne.n	8009918 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a19      	ldr	r2, [pc, #100]	@ (800992c <I2C_Slave_AF+0xe4>)
 80098c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2221      	movs	r2, #33	@ 0x21
 80098ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80098ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80098f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009908:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7fe fae3 	bl	8007ed6 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7fe ff87 	bl	8008824 <HAL_I2C_SlaveTxCpltCallback>
}
 8009916:	e004      	b.n	8009922 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009920:	615a      	str	r2, [r3, #20]
}
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	ffff0000 	.word	0xffff0000

08009930 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800993e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009946:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b10      	cmp	r3, #16
 800994c:	d002      	beq.n	8009954 <I2C_ITError+0x24>
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b40      	cmp	r3, #64	@ 0x40
 8009952:	d10a      	bne.n	800996a <I2C_ITError+0x3a>
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	2b22      	cmp	r3, #34	@ 0x22
 8009958:	d107      	bne.n	800996a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009968:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009970:	2b28      	cmp	r3, #40	@ 0x28
 8009972:	d107      	bne.n	8009984 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2228      	movs	r2, #40	@ 0x28
 800997e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009982:	e015      	b.n	80099b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800998e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009992:	d00a      	beq.n	80099aa <I2C_ITError+0x7a>
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	2b60      	cmp	r3, #96	@ 0x60
 8009998:	d007      	beq.n	80099aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099be:	d162      	bne.n	8009a86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80099ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d020      	beq.n	8009a20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e2:	4a6a      	ldr	r2, [pc, #424]	@ (8009b8c <I2C_ITError+0x25c>)
 80099e4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fd fbe2 	bl	80071b4 <HAL_DMA_Abort_IT>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 8089 	beq.w	8009b0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0201 	bic.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	4798      	blx	r3
 8009a1e:	e074      	b.n	8009b0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a24:	4a59      	ldr	r2, [pc, #356]	@ (8009b8c <I2C_ITError+0x25c>)
 8009a26:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fd fbc1 	bl	80071b4 <HAL_DMA_Abort_IT>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d068      	beq.n	8009b0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a42:	2b40      	cmp	r3, #64	@ 0x40
 8009a44:	d10b      	bne.n	8009a5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a50:	b2d2      	uxtb	r2, r2
 8009a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f022 0201 	bic.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
 8009a84:	e041      	b.n	8009b0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b60      	cmp	r3, #96	@ 0x60
 8009a90:	d125      	bne.n	8009ade <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aaa:	2b40      	cmp	r3, #64	@ 0x40
 8009aac:	d10b      	bne.n	8009ac6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab8:	b2d2      	uxtb	r2, r2
 8009aba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f022 0201 	bic.w	r2, r2, #1
 8009ad4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fe fed0 	bl	800887c <HAL_I2C_AbortCpltCallback>
 8009adc:	e015      	b.n	8009b0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae8:	2b40      	cmp	r3, #64	@ 0x40
 8009aea:	d10b      	bne.n	8009b04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	691a      	ldr	r2, [r3, #16]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af6:	b2d2      	uxtb	r2, r2
 8009af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7f7 fb01 	bl	800110c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10e      	bne.n	8009b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d109      	bne.n	8009b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d104      	bne.n	8009b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d007      	beq.n	8009b48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009b46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b04      	cmp	r3, #4
 8009b5a:	d113      	bne.n	8009b84 <I2C_ITError+0x254>
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	2b28      	cmp	r3, #40	@ 0x28
 8009b60:	d110      	bne.n	8009b84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a0a      	ldr	r2, [pc, #40]	@ (8009b90 <I2C_ITError+0x260>)
 8009b66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7fe fe72 	bl	8008868 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009b84:	bf00      	nop
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	08009c99 	.word	0x08009c99
 8009b90:	ffff0000 	.word	0xffff0000

08009b94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	607a      	str	r2, [r7, #4]
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d006      	beq.n	8009bbe <I2C_MasterRequestWrite+0x2a>
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d003      	beq.n	8009bbe <I2C_MasterRequestWrite+0x2a>
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009bbc:	d108      	bne.n	8009bd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	e00b      	b.n	8009be8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd4:	2b12      	cmp	r3, #18
 8009bd6:	d107      	bne.n	8009be8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009be6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 f8f7 	bl	8009de8 <I2C_WaitOnFlagUntilTimeout>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00d      	beq.n	8009c1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c0e:	d103      	bne.n	8009c18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e035      	b.n	8009c88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c24:	d108      	bne.n	8009c38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c26:	897b      	ldrh	r3, [r7, #10]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009c34:	611a      	str	r2, [r3, #16]
 8009c36:	e01b      	b.n	8009c70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009c38:	897b      	ldrh	r3, [r7, #10]
 8009c3a:	11db      	asrs	r3, r3, #7
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f003 0306 	and.w	r3, r3, #6
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	f063 030f 	orn	r3, r3, #15
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	490e      	ldr	r1, [pc, #56]	@ (8009c90 <I2C_MasterRequestWrite+0xfc>)
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 f940 	bl	8009edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e010      	b.n	8009c88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009c66:	897b      	ldrh	r3, [r7, #10]
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	4907      	ldr	r1, [pc, #28]	@ (8009c94 <I2C_MasterRequestWrite+0x100>)
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f930 	bl	8009edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e000      	b.n	8009c88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	00010008 	.word	0x00010008
 8009c94:	00010002 	.word	0x00010002

08009c98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8009de0 <I2C_DMAAbort+0x148>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	08db      	lsrs	r3, r3, #3
 8009cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8009de4 <I2C_DMAAbort+0x14c>)
 8009cba:	fba2 2303 	umull	r2, r3, r2, r3
 8009cbe:	0a1a      	lsrs	r2, r3, #8
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	00da      	lsls	r2, r3, #3
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d106      	bne.n	8009ce0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd6:	f043 0220 	orr.w	r2, r3, #32
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8009cde:	e00a      	b.n	8009cf6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf4:	d0ea      	beq.n	8009ccc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d02:	2200      	movs	r2, #0
 8009d04:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d12:	2200      	movs	r2, #0
 8009d14:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d003      	beq.n	8009d3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d38:	2200      	movs	r2, #0
 8009d3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d48:	2200      	movs	r2, #0
 8009d4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0201 	bic.w	r2, r2, #1
 8009d5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b60      	cmp	r3, #96	@ 0x60
 8009d66:	d10e      	bne.n	8009d86 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009d7e:	6978      	ldr	r0, [r7, #20]
 8009d80:	f7fe fd7c 	bl	800887c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009d84:	e027      	b.n	8009dd6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d86:	7cfb      	ldrb	r3, [r7, #19]
 8009d88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d8c:	2b28      	cmp	r3, #40	@ 0x28
 8009d8e:	d117      	bne.n	8009dc0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0201 	orr.w	r2, r2, #1
 8009d9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009dae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2200      	movs	r2, #0
 8009db4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2228      	movs	r2, #40	@ 0x28
 8009dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009dbe:	e007      	b.n	8009dd0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009dd0:	6978      	ldr	r0, [r7, #20]
 8009dd2:	f7f7 f99b 	bl	800110c <HAL_I2C_ErrorCallback>
}
 8009dd6:	bf00      	nop
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	200000f0 	.word	0x200000f0
 8009de4:	14f8b589 	.word	0x14f8b589

08009de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	603b      	str	r3, [r7, #0]
 8009df4:	4613      	mov	r3, r2
 8009df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009df8:	e048      	b.n	8009e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e00:	d044      	beq.n	8009e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e02:	f7fb fb43 	bl	800548c <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d302      	bcc.n	8009e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d139      	bne.n	8009e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	0c1b      	lsrs	r3, r3, #16
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d10d      	bne.n	8009e3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	43da      	mvns	r2, r3
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bf0c      	ite	eq
 8009e34:	2301      	moveq	r3, #1
 8009e36:	2300      	movne	r3, #0
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	e00c      	b.n	8009e58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	43da      	mvns	r2, r3
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	4013      	ands	r3, r2
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bf0c      	ite	eq
 8009e50:	2301      	moveq	r3, #1
 8009e52:	2300      	movne	r3, #0
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	461a      	mov	r2, r3
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d116      	bne.n	8009e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e78:	f043 0220 	orr.w	r2, r3, #32
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e023      	b.n	8009ed4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d10d      	bne.n	8009eb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	43da      	mvns	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	bf0c      	ite	eq
 8009ea8:	2301      	moveq	r3, #1
 8009eaa:	2300      	movne	r3, #0
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	e00c      	b.n	8009ecc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	43da      	mvns	r2, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bf0c      	ite	eq
 8009ec4:	2301      	moveq	r3, #1
 8009ec6:	2300      	movne	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d093      	beq.n	8009dfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009eea:	e071      	b.n	8009fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009efa:	d123      	bne.n	8009f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f30:	f043 0204 	orr.w	r2, r3, #4
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e067      	b.n	800a014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4a:	d041      	beq.n	8009fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f4c:	f7fb fa9e 	bl	800548c <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d302      	bcc.n	8009f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d136      	bne.n	8009fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d10c      	bne.n	8009f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	43da      	mvns	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4013      	ands	r3, r2
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	bf14      	ite	ne
 8009f7e:	2301      	movne	r3, #1
 8009f80:	2300      	moveq	r3, #0
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	e00b      	b.n	8009f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	43da      	mvns	r2, r3
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	4013      	ands	r3, r2
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bf14      	ite	ne
 8009f98:	2301      	movne	r3, #1
 8009f9a:	2300      	moveq	r3, #0
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d016      	beq.n	8009fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbc:	f043 0220 	orr.w	r2, r3, #32
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e021      	b.n	800a014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	0c1b      	lsrs	r3, r3, #16
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d10c      	bne.n	8009ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	43da      	mvns	r2, r3
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	bf14      	ite	ne
 8009fec:	2301      	movne	r3, #1
 8009fee:	2300      	moveq	r3, #0
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	e00b      	b.n	800a00c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	43da      	mvns	r2, r3
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	4013      	ands	r3, r2
 800a000:	b29b      	uxth	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	bf14      	ite	ne
 800a006:	2301      	movne	r3, #1
 800a008:	2300      	moveq	r3, #0
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f47f af6d 	bne.w	8009eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a028:	e034      	b.n	800a094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 f8b8 	bl	800a1a0 <I2C_IsAcknowledgeFailed>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e034      	b.n	800a0a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a040:	d028      	beq.n	800a094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a042:	f7fb fa23 	bl	800548c <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d302      	bcc.n	800a058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11d      	bne.n	800a094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a062:	2b80      	cmp	r3, #128	@ 0x80
 800a064:	d016      	beq.n	800a094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2220      	movs	r2, #32
 800a070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a080:	f043 0220 	orr.w	r2, r3, #32
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e007      	b.n	800a0a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a09e:	2b80      	cmp	r3, #128	@ 0x80
 800a0a0:	d1c3      	bne.n	800a02a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a0b8:	e034      	b.n	800a124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 f870 	bl	800a1a0 <I2C_IsAcknowledgeFailed>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e034      	b.n	800a134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d0:	d028      	beq.n	800a124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0d2:	f7fb f9db 	bl	800548c <HAL_GetTick>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d302      	bcc.n	800a0e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d11d      	bne.n	800a124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b04      	cmp	r3, #4
 800a0f4:	d016      	beq.n	800a124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a110:	f043 0220 	orr.w	r2, r3, #32
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e007      	b.n	800a134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	f003 0304 	and.w	r3, r3, #4
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d1c3      	bne.n	800a0ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a148:	4b13      	ldr	r3, [pc, #76]	@ (800a198 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	08db      	lsrs	r3, r3, #3
 800a14e:	4a13      	ldr	r2, [pc, #76]	@ (800a19c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a150:	fba2 2303 	umull	r2, r3, r2, r3
 800a154:	0a1a      	lsrs	r2, r3, #8
 800a156:	4613      	mov	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3b01      	subs	r3, #1
 800a162:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d107      	bne.n	800a17a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a16e:	f043 0220 	orr.w	r2, r3, #32
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e008      	b.n	800a18c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a188:	d0e9      	beq.n	800a15e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	200000f0 	.word	0x200000f0
 800a19c:	14f8b589 	.word	0x14f8b589

0800a1a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1b6:	d11b      	bne.n	800a1f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a1c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1dc:	f043 0204 	orr.w	r2, r3, #4
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a20a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a20e:	d103      	bne.n	800a218 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a216:	e007      	b.n	800a228 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a220:	d102      	bne.n	800a228 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2208      	movs	r2, #8
 800a226:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e267      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d075      	beq.n	800a33e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a252:	4b88      	ldr	r3, [pc, #544]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f003 030c 	and.w	r3, r3, #12
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d00c      	beq.n	800a278 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a25e:	4b85      	ldr	r3, [pc, #532]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a266:	2b08      	cmp	r3, #8
 800a268:	d112      	bne.n	800a290 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a26a:	4b82      	ldr	r3, [pc, #520]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a276:	d10b      	bne.n	800a290 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a278:	4b7e      	ldr	r3, [pc, #504]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d05b      	beq.n	800a33c <HAL_RCC_OscConfig+0x108>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d157      	bne.n	800a33c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e242      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a298:	d106      	bne.n	800a2a8 <HAL_RCC_OscConfig+0x74>
 800a29a:	4b76      	ldr	r3, [pc, #472]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a75      	ldr	r2, [pc, #468]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	e01d      	b.n	800a2e4 <HAL_RCC_OscConfig+0xb0>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2b0:	d10c      	bne.n	800a2cc <HAL_RCC_OscConfig+0x98>
 800a2b2:	4b70      	ldr	r3, [pc, #448]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a6f      	ldr	r2, [pc, #444]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	4b6d      	ldr	r3, [pc, #436]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a6c      	ldr	r2, [pc, #432]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2c8:	6013      	str	r3, [r2, #0]
 800a2ca:	e00b      	b.n	800a2e4 <HAL_RCC_OscConfig+0xb0>
 800a2cc:	4b69      	ldr	r3, [pc, #420]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a68      	ldr	r2, [pc, #416]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	4b66      	ldr	r3, [pc, #408]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a65      	ldr	r2, [pc, #404]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a2de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d013      	beq.n	800a314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2ec:	f7fb f8ce 	bl	800548c <HAL_GetTick>
 800a2f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2f2:	e008      	b.n	800a306 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2f4:	f7fb f8ca 	bl	800548c <HAL_GetTick>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	2b64      	cmp	r3, #100	@ 0x64
 800a300:	d901      	bls.n	800a306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e207      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a306:	4b5b      	ldr	r3, [pc, #364]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0f0      	beq.n	800a2f4 <HAL_RCC_OscConfig+0xc0>
 800a312:	e014      	b.n	800a33e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a314:	f7fb f8ba 	bl	800548c <HAL_GetTick>
 800a318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a31a:	e008      	b.n	800a32e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a31c:	f7fb f8b6 	bl	800548c <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	2b64      	cmp	r3, #100	@ 0x64
 800a328:	d901      	bls.n	800a32e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e1f3      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a32e:	4b51      	ldr	r3, [pc, #324]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1f0      	bne.n	800a31c <HAL_RCC_OscConfig+0xe8>
 800a33a:	e000      	b.n	800a33e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a33c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d063      	beq.n	800a412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a34a:	4b4a      	ldr	r3, [pc, #296]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f003 030c 	and.w	r3, r3, #12
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00b      	beq.n	800a36e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a356:	4b47      	ldr	r3, [pc, #284]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a35e:	2b08      	cmp	r3, #8
 800a360:	d11c      	bne.n	800a39c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a362:	4b44      	ldr	r3, [pc, #272]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d116      	bne.n	800a39c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a36e:	4b41      	ldr	r3, [pc, #260]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d005      	beq.n	800a386 <HAL_RCC_OscConfig+0x152>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d001      	beq.n	800a386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e1c7      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a386:	4b3b      	ldr	r3, [pc, #236]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	4937      	ldr	r1, [pc, #220]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a396:	4313      	orrs	r3, r2
 800a398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a39a:	e03a      	b.n	800a412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d020      	beq.n	800a3e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3a4:	4b34      	ldr	r3, [pc, #208]	@ (800a478 <HAL_RCC_OscConfig+0x244>)
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3aa:	f7fb f86f 	bl	800548c <HAL_GetTick>
 800a3ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3b0:	e008      	b.n	800a3c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3b2:	f7fb f86b 	bl	800548c <HAL_GetTick>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d901      	bls.n	800a3c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	e1a8      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3c4:	4b2b      	ldr	r3, [pc, #172]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0f0      	beq.n	800a3b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3d0:	4b28      	ldr	r3, [pc, #160]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	4925      	ldr	r1, [pc, #148]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	600b      	str	r3, [r1, #0]
 800a3e4:	e015      	b.n	800a412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3e6:	4b24      	ldr	r3, [pc, #144]	@ (800a478 <HAL_RCC_OscConfig+0x244>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ec:	f7fb f84e 	bl	800548c <HAL_GetTick>
 800a3f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3f2:	e008      	b.n	800a406 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3f4:	f7fb f84a 	bl	800548c <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d901      	bls.n	800a406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e187      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a406:	4b1b      	ldr	r3, [pc, #108]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 0302 	and.w	r3, r3, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f0      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0308 	and.w	r3, r3, #8
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d036      	beq.n	800a48c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d016      	beq.n	800a454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a426:	4b15      	ldr	r3, [pc, #84]	@ (800a47c <HAL_RCC_OscConfig+0x248>)
 800a428:	2201      	movs	r2, #1
 800a42a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a42c:	f7fb f82e 	bl	800548c <HAL_GetTick>
 800a430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a432:	e008      	b.n	800a446 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a434:	f7fb f82a 	bl	800548c <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d901      	bls.n	800a446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e167      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a446:	4b0b      	ldr	r3, [pc, #44]	@ (800a474 <HAL_RCC_OscConfig+0x240>)
 800a448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0f0      	beq.n	800a434 <HAL_RCC_OscConfig+0x200>
 800a452:	e01b      	b.n	800a48c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a454:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <HAL_RCC_OscConfig+0x248>)
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a45a:	f7fb f817 	bl	800548c <HAL_GetTick>
 800a45e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a460:	e00e      	b.n	800a480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a462:	f7fb f813 	bl	800548c <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d907      	bls.n	800a480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e150      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
 800a474:	40023800 	.word	0x40023800
 800a478:	42470000 	.word	0x42470000
 800a47c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a480:	4b88      	ldr	r3, [pc, #544]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1ea      	bne.n	800a462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 8097 	beq.w	800a5c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a49e:	4b81      	ldr	r3, [pc, #516]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10f      	bne.n	800a4ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60bb      	str	r3, [r7, #8]
 800a4ae:	4b7d      	ldr	r3, [pc, #500]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b2:	4a7c      	ldr	r2, [pc, #496]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a4b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4b8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a4ba:	4b7a      	ldr	r3, [pc, #488]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4c2:	60bb      	str	r3, [r7, #8]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4ca:	4b77      	ldr	r3, [pc, #476]	@ (800a6a8 <HAL_RCC_OscConfig+0x474>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d118      	bne.n	800a508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a4d6:	4b74      	ldr	r3, [pc, #464]	@ (800a6a8 <HAL_RCC_OscConfig+0x474>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a73      	ldr	r2, [pc, #460]	@ (800a6a8 <HAL_RCC_OscConfig+0x474>)
 800a4dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4e2:	f7fa ffd3 	bl	800548c <HAL_GetTick>
 800a4e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4e8:	e008      	b.n	800a4fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4ea:	f7fa ffcf 	bl	800548c <HAL_GetTick>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d901      	bls.n	800a4fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e10c      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4fc:	4b6a      	ldr	r3, [pc, #424]	@ (800a6a8 <HAL_RCC_OscConfig+0x474>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0f0      	beq.n	800a4ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d106      	bne.n	800a51e <HAL_RCC_OscConfig+0x2ea>
 800a510:	4b64      	ldr	r3, [pc, #400]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a514:	4a63      	ldr	r2, [pc, #396]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a516:	f043 0301 	orr.w	r3, r3, #1
 800a51a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a51c:	e01c      	b.n	800a558 <HAL_RCC_OscConfig+0x324>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	2b05      	cmp	r3, #5
 800a524:	d10c      	bne.n	800a540 <HAL_RCC_OscConfig+0x30c>
 800a526:	4b5f      	ldr	r3, [pc, #380]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a52a:	4a5e      	ldr	r2, [pc, #376]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a52c:	f043 0304 	orr.w	r3, r3, #4
 800a530:	6713      	str	r3, [r2, #112]	@ 0x70
 800a532:	4b5c      	ldr	r3, [pc, #368]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a536:	4a5b      	ldr	r2, [pc, #364]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a538:	f043 0301 	orr.w	r3, r3, #1
 800a53c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a53e:	e00b      	b.n	800a558 <HAL_RCC_OscConfig+0x324>
 800a540:	4b58      	ldr	r3, [pc, #352]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a544:	4a57      	ldr	r2, [pc, #348]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a546:	f023 0301 	bic.w	r3, r3, #1
 800a54a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a54c:	4b55      	ldr	r3, [pc, #340]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a54e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a550:	4a54      	ldr	r2, [pc, #336]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a552:	f023 0304 	bic.w	r3, r3, #4
 800a556:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d015      	beq.n	800a58c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a560:	f7fa ff94 	bl	800548c <HAL_GetTick>
 800a564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a566:	e00a      	b.n	800a57e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a568:	f7fa ff90 	bl	800548c <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a576:	4293      	cmp	r3, r2
 800a578:	d901      	bls.n	800a57e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e0cb      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a57e:	4b49      	ldr	r3, [pc, #292]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a582:	f003 0302 	and.w	r3, r3, #2
 800a586:	2b00      	cmp	r3, #0
 800a588:	d0ee      	beq.n	800a568 <HAL_RCC_OscConfig+0x334>
 800a58a:	e014      	b.n	800a5b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a58c:	f7fa ff7e 	bl	800548c <HAL_GetTick>
 800a590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a592:	e00a      	b.n	800a5aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a594:	f7fa ff7a 	bl	800548c <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d901      	bls.n	800a5aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e0b5      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5aa:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a5ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1ee      	bne.n	800a594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d105      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5bc:	4b39      	ldr	r3, [pc, #228]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a5be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c0:	4a38      	ldr	r2, [pc, #224]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a5c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 80a1 	beq.w	800a714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a5d2:	4b34      	ldr	r3, [pc, #208]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 030c 	and.w	r3, r3, #12
 800a5da:	2b08      	cmp	r3, #8
 800a5dc:	d05c      	beq.n	800a698 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d141      	bne.n	800a66a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5e6:	4b31      	ldr	r3, [pc, #196]	@ (800a6ac <HAL_RCC_OscConfig+0x478>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ec:	f7fa ff4e 	bl	800548c <HAL_GetTick>
 800a5f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5f4:	f7fa ff4a 	bl	800548c <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e087      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a606:	4b27      	ldr	r3, [pc, #156]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f0      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	69da      	ldr	r2, [r3, #28]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a620:	019b      	lsls	r3, r3, #6
 800a622:	431a      	orrs	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a628:	085b      	lsrs	r3, r3, #1
 800a62a:	3b01      	subs	r3, #1
 800a62c:	041b      	lsls	r3, r3, #16
 800a62e:	431a      	orrs	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a634:	061b      	lsls	r3, r3, #24
 800a636:	491b      	ldr	r1, [pc, #108]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a63c:	4b1b      	ldr	r3, [pc, #108]	@ (800a6ac <HAL_RCC_OscConfig+0x478>)
 800a63e:	2201      	movs	r2, #1
 800a640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a642:	f7fa ff23 	bl	800548c <HAL_GetTick>
 800a646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a648:	e008      	b.n	800a65c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a64a:	f7fa ff1f 	bl	800548c <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d901      	bls.n	800a65c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e05c      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a65c:	4b11      	ldr	r3, [pc, #68]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d0f0      	beq.n	800a64a <HAL_RCC_OscConfig+0x416>
 800a668:	e054      	b.n	800a714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a66a:	4b10      	ldr	r3, [pc, #64]	@ (800a6ac <HAL_RCC_OscConfig+0x478>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a670:	f7fa ff0c 	bl	800548c <HAL_GetTick>
 800a674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a676:	e008      	b.n	800a68a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a678:	f7fa ff08 	bl	800548c <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b02      	cmp	r3, #2
 800a684:	d901      	bls.n	800a68a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e045      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a68a:	4b06      	ldr	r3, [pc, #24]	@ (800a6a4 <HAL_RCC_OscConfig+0x470>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f0      	bne.n	800a678 <HAL_RCC_OscConfig+0x444>
 800a696:	e03d      	b.n	800a714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d107      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e038      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
 800a6a4:	40023800 	.word	0x40023800
 800a6a8:	40007000 	.word	0x40007000
 800a6ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a6b0:	4b1b      	ldr	r3, [pc, #108]	@ (800a720 <HAL_RCC_OscConfig+0x4ec>)
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d028      	beq.n	800a710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d121      	bne.n	800a710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d11a      	bne.n	800a710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a6e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d111      	bne.n	800a710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f6:	085b      	lsrs	r3, r3, #1
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d107      	bne.n	800a710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d001      	beq.n	800a714 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e000      	b.n	800a716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	40023800 	.word	0x40023800

0800a724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e0cc      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a738:	4b68      	ldr	r3, [pc, #416]	@ (800a8dc <HAL_RCC_ClockConfig+0x1b8>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0307 	and.w	r3, r3, #7
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d90c      	bls.n	800a760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a746:	4b65      	ldr	r3, [pc, #404]	@ (800a8dc <HAL_RCC_ClockConfig+0x1b8>)
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	b2d2      	uxtb	r2, r2
 800a74c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a74e:	4b63      	ldr	r3, [pc, #396]	@ (800a8dc <HAL_RCC_ClockConfig+0x1b8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d001      	beq.n	800a760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e0b8      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d020      	beq.n	800a7ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0304 	and.w	r3, r3, #4
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a778:	4b59      	ldr	r3, [pc, #356]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	4a58      	ldr	r2, [pc, #352]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a77e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a782:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0308 	and.w	r3, r3, #8
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d005      	beq.n	800a79c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a790:	4b53      	ldr	r3, [pc, #332]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	4a52      	ldr	r2, [pc, #328]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a796:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a79a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a79c:	4b50      	ldr	r3, [pc, #320]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	494d      	ldr	r1, [pc, #308]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d044      	beq.n	800a844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d107      	bne.n	800a7d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7c2:	4b47      	ldr	r3, [pc, #284]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d119      	bne.n	800a802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e07f      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d003      	beq.n	800a7e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d107      	bne.n	800a7f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7e2:	4b3f      	ldr	r3, [pc, #252]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d109      	bne.n	800a802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e06f      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7f2:	4b3b      	ldr	r3, [pc, #236]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0302 	and.w	r3, r3, #2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e067      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a802:	4b37      	ldr	r3, [pc, #220]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f023 0203 	bic.w	r2, r3, #3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	4934      	ldr	r1, [pc, #208]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a810:	4313      	orrs	r3, r2
 800a812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a814:	f7fa fe3a 	bl	800548c <HAL_GetTick>
 800a818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a81a:	e00a      	b.n	800a832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a81c:	f7fa fe36 	bl	800548c <HAL_GetTick>
 800a820:	4602      	mov	r2, r0
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e04f      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a832:	4b2b      	ldr	r3, [pc, #172]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f003 020c 	and.w	r2, r3, #12
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	429a      	cmp	r2, r3
 800a842:	d1eb      	bne.n	800a81c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a844:	4b25      	ldr	r3, [pc, #148]	@ (800a8dc <HAL_RCC_ClockConfig+0x1b8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d20c      	bcs.n	800a86c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a852:	4b22      	ldr	r3, [pc, #136]	@ (800a8dc <HAL_RCC_ClockConfig+0x1b8>)
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	b2d2      	uxtb	r2, r2
 800a858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a85a:	4b20      	ldr	r3, [pc, #128]	@ (800a8dc <HAL_RCC_ClockConfig+0x1b8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0307 	and.w	r3, r3, #7
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	429a      	cmp	r2, r3
 800a866:	d001      	beq.n	800a86c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e032      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d008      	beq.n	800a88a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a878:	4b19      	ldr	r3, [pc, #100]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	4916      	ldr	r1, [pc, #88]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a886:	4313      	orrs	r3, r2
 800a888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0308 	and.w	r3, r3, #8
 800a892:	2b00      	cmp	r3, #0
 800a894:	d009      	beq.n	800a8aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a896:	4b12      	ldr	r3, [pc, #72]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	490e      	ldr	r1, [pc, #56]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a8aa:	f000 f821 	bl	800a8f0 <HAL_RCC_GetSysClockFreq>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	091b      	lsrs	r3, r3, #4
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	490a      	ldr	r1, [pc, #40]	@ (800a8e4 <HAL_RCC_ClockConfig+0x1c0>)
 800a8bc:	5ccb      	ldrb	r3, [r1, r3]
 800a8be:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c2:	4a09      	ldr	r2, [pc, #36]	@ (800a8e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a8c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a8c6:	4b09      	ldr	r3, [pc, #36]	@ (800a8ec <HAL_RCC_ClockConfig+0x1c8>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fa fd9a 	bl	8005404 <HAL_InitTick>

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	40023c00 	.word	0x40023c00
 800a8e0:	40023800 	.word	0x40023800
 800a8e4:	08011b78 	.word	0x08011b78
 800a8e8:	200000f0 	.word	0x200000f0
 800a8ec:	2000012c 	.word	0x2000012c

0800a8f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8f4:	b094      	sub	sp, #80	@ 0x50
 800a8f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a900:	2300      	movs	r3, #0
 800a902:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a908:	4b79      	ldr	r3, [pc, #484]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f003 030c 	and.w	r3, r3, #12
 800a910:	2b08      	cmp	r3, #8
 800a912:	d00d      	beq.n	800a930 <HAL_RCC_GetSysClockFreq+0x40>
 800a914:	2b08      	cmp	r3, #8
 800a916:	f200 80e1 	bhi.w	800aadc <HAL_RCC_GetSysClockFreq+0x1ec>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <HAL_RCC_GetSysClockFreq+0x34>
 800a91e:	2b04      	cmp	r3, #4
 800a920:	d003      	beq.n	800a92a <HAL_RCC_GetSysClockFreq+0x3a>
 800a922:	e0db      	b.n	800aadc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a924:	4b73      	ldr	r3, [pc, #460]	@ (800aaf4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a926:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a928:	e0db      	b.n	800aae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a92a:	4b73      	ldr	r3, [pc, #460]	@ (800aaf8 <HAL_RCC_GetSysClockFreq+0x208>)
 800a92c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a92e:	e0d8      	b.n	800aae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a930:	4b6f      	ldr	r3, [pc, #444]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a938:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a93a:	4b6d      	ldr	r3, [pc, #436]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d063      	beq.n	800aa0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a946:	4b6a      	ldr	r3, [pc, #424]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	099b      	lsrs	r3, r3, #6
 800a94c:	2200      	movs	r2, #0
 800a94e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a950:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a958:	633b      	str	r3, [r7, #48]	@ 0x30
 800a95a:	2300      	movs	r3, #0
 800a95c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a95e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a962:	4622      	mov	r2, r4
 800a964:	462b      	mov	r3, r5
 800a966:	f04f 0000 	mov.w	r0, #0
 800a96a:	f04f 0100 	mov.w	r1, #0
 800a96e:	0159      	lsls	r1, r3, #5
 800a970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a974:	0150      	lsls	r0, r2, #5
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4621      	mov	r1, r4
 800a97c:	1a51      	subs	r1, r2, r1
 800a97e:	6139      	str	r1, [r7, #16]
 800a980:	4629      	mov	r1, r5
 800a982:	eb63 0301 	sbc.w	r3, r3, r1
 800a986:	617b      	str	r3, [r7, #20]
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	f04f 0300 	mov.w	r3, #0
 800a990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a994:	4659      	mov	r1, fp
 800a996:	018b      	lsls	r3, r1, #6
 800a998:	4651      	mov	r1, sl
 800a99a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a99e:	4651      	mov	r1, sl
 800a9a0:	018a      	lsls	r2, r1, #6
 800a9a2:	4651      	mov	r1, sl
 800a9a4:	ebb2 0801 	subs.w	r8, r2, r1
 800a9a8:	4659      	mov	r1, fp
 800a9aa:	eb63 0901 	sbc.w	r9, r3, r1
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9c2:	4690      	mov	r8, r2
 800a9c4:	4699      	mov	r9, r3
 800a9c6:	4623      	mov	r3, r4
 800a9c8:	eb18 0303 	adds.w	r3, r8, r3
 800a9cc:	60bb      	str	r3, [r7, #8]
 800a9ce:	462b      	mov	r3, r5
 800a9d0:	eb49 0303 	adc.w	r3, r9, r3
 800a9d4:	60fb      	str	r3, [r7, #12]
 800a9d6:	f04f 0200 	mov.w	r2, #0
 800a9da:	f04f 0300 	mov.w	r3, #0
 800a9de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	024b      	lsls	r3, r1, #9
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	024a      	lsls	r2, r1, #9
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aa00:	f7f6 f922 	bl	8000c48 <__aeabi_uldivmod>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	4613      	mov	r3, r2
 800aa0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa0c:	e058      	b.n	800aac0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa0e:	4b38      	ldr	r3, [pc, #224]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x200>)
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	099b      	lsrs	r3, r3, #6
 800aa14:	2200      	movs	r2, #0
 800aa16:	4618      	mov	r0, r3
 800aa18:	4611      	mov	r1, r2
 800aa1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aa1e:	623b      	str	r3, [r7, #32]
 800aa20:	2300      	movs	r3, #0
 800aa22:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800aa28:	4642      	mov	r2, r8
 800aa2a:	464b      	mov	r3, r9
 800aa2c:	f04f 0000 	mov.w	r0, #0
 800aa30:	f04f 0100 	mov.w	r1, #0
 800aa34:	0159      	lsls	r1, r3, #5
 800aa36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aa3a:	0150      	lsls	r0, r2, #5
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4641      	mov	r1, r8
 800aa42:	ebb2 0a01 	subs.w	sl, r2, r1
 800aa46:	4649      	mov	r1, r9
 800aa48:	eb63 0b01 	sbc.w	fp, r3, r1
 800aa4c:	f04f 0200 	mov.w	r2, #0
 800aa50:	f04f 0300 	mov.w	r3, #0
 800aa54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800aa58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800aa5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800aa60:	ebb2 040a 	subs.w	r4, r2, sl
 800aa64:	eb63 050b 	sbc.w	r5, r3, fp
 800aa68:	f04f 0200 	mov.w	r2, #0
 800aa6c:	f04f 0300 	mov.w	r3, #0
 800aa70:	00eb      	lsls	r3, r5, #3
 800aa72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa76:	00e2      	lsls	r2, r4, #3
 800aa78:	4614      	mov	r4, r2
 800aa7a:	461d      	mov	r5, r3
 800aa7c:	4643      	mov	r3, r8
 800aa7e:	18e3      	adds	r3, r4, r3
 800aa80:	603b      	str	r3, [r7, #0]
 800aa82:	464b      	mov	r3, r9
 800aa84:	eb45 0303 	adc.w	r3, r5, r3
 800aa88:	607b      	str	r3, [r7, #4]
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	f04f 0300 	mov.w	r3, #0
 800aa92:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aa96:	4629      	mov	r1, r5
 800aa98:	028b      	lsls	r3, r1, #10
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	028a      	lsls	r2, r1, #10
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaaa:	2200      	movs	r2, #0
 800aaac:	61bb      	str	r3, [r7, #24]
 800aaae:	61fa      	str	r2, [r7, #28]
 800aab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aab4:	f7f6 f8c8 	bl	8000c48 <__aeabi_uldivmod>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4613      	mov	r3, r2
 800aabe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800aac0:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x200>)
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	0c1b      	lsrs	r3, r3, #16
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	3301      	adds	r3, #1
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800aad0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aada:	e002      	b.n	800aae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aadc:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <HAL_RCC_GetSysClockFreq+0x204>)
 800aade:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3750      	adds	r7, #80	@ 0x50
 800aae8:	46bd      	mov	sp, r7
 800aaea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaee:	bf00      	nop
 800aaf0:	40023800 	.word	0x40023800
 800aaf4:	00f42400 	.word	0x00f42400
 800aaf8:	007a1200 	.word	0x007a1200

0800aafc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab00:	4b03      	ldr	r3, [pc, #12]	@ (800ab10 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab02:	681b      	ldr	r3, [r3, #0]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	200000f0 	.word	0x200000f0

0800ab14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab18:	f7ff fff0 	bl	800aafc <HAL_RCC_GetHCLKFreq>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	4b05      	ldr	r3, [pc, #20]	@ (800ab34 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	0a9b      	lsrs	r3, r3, #10
 800ab24:	f003 0307 	and.w	r3, r3, #7
 800ab28:	4903      	ldr	r1, [pc, #12]	@ (800ab38 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab2a:	5ccb      	ldrb	r3, [r1, r3]
 800ab2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	40023800 	.word	0x40023800
 800ab38:	08011b88 	.word	0x08011b88

0800ab3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab40:	f7ff ffdc 	bl	800aafc <HAL_RCC_GetHCLKFreq>
 800ab44:	4602      	mov	r2, r0
 800ab46:	4b05      	ldr	r3, [pc, #20]	@ (800ab5c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	0b5b      	lsrs	r3, r3, #13
 800ab4c:	f003 0307 	and.w	r3, r3, #7
 800ab50:	4903      	ldr	r1, [pc, #12]	@ (800ab60 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab52:	5ccb      	ldrb	r3, [r1, r3]
 800ab54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	40023800 	.word	0x40023800
 800ab60:	08011b88 	.word	0x08011b88

0800ab64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e07b      	b.n	800ac6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d108      	bne.n	800ab90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab86:	d009      	beq.n	800ab9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	61da      	str	r2, [r3, #28]
 800ab8e:	e005      	b.n	800ab9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d106      	bne.n	800abbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7f9 fc52 	bl	8004460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800abe4:	431a      	orrs	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abee:	431a      	orrs	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	f003 0302 	and.w	r3, r3, #2
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	431a      	orrs	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac16:	431a      	orrs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac20:	ea42 0103 	orr.w	r1, r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	430a      	orrs	r2, r1
 800ac32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	0c1b      	lsrs	r3, r3, #16
 800ac3a:	f003 0104 	and.w	r1, r3, #4
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac42:	f003 0210 	and.w	r2, r3, #16
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	69da      	ldr	r2, [r3, #28]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b08a      	sub	sp, #40	@ 0x28
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	607a      	str	r2, [r7, #4]
 800ac82:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ac84:	2301      	movs	r3, #1
 800ac86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac88:	f7fa fc00 	bl	800548c <HAL_GetTick>
 800ac8c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ac94:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ac9c:	887b      	ldrh	r3, [r7, #2]
 800ac9e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aca0:	7ffb      	ldrb	r3, [r7, #31]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d00c      	beq.n	800acc0 <HAL_SPI_TransmitReceive+0x4a>
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800acac:	d106      	bne.n	800acbc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d102      	bne.n	800acbc <HAL_SPI_TransmitReceive+0x46>
 800acb6:	7ffb      	ldrb	r3, [r7, #31]
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d001      	beq.n	800acc0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800acbc:	2302      	movs	r3, #2
 800acbe:	e17f      	b.n	800afc0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d005      	beq.n	800acd2 <HAL_SPI_TransmitReceive+0x5c>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <HAL_SPI_TransmitReceive+0x5c>
 800accc:	887b      	ldrh	r3, [r7, #2]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e174      	b.n	800afc0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d101      	bne.n	800ace4 <HAL_SPI_TransmitReceive+0x6e>
 800ace0:	2302      	movs	r3, #2
 800ace2:	e16d      	b.n	800afc0 <HAL_SPI_TransmitReceive+0x34a>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d003      	beq.n	800ad00 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2205      	movs	r2, #5
 800acfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	887a      	ldrh	r2, [r7, #2]
 800ad10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	887a      	ldrh	r2, [r7, #2]
 800ad16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	887a      	ldrh	r2, [r7, #2]
 800ad22:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	887a      	ldrh	r2, [r7, #2]
 800ad28:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad40:	2b40      	cmp	r3, #64	@ 0x40
 800ad42:	d007      	beq.n	800ad54 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad5c:	d17e      	bne.n	800ae5c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d002      	beq.n	800ad6c <HAL_SPI_TransmitReceive+0xf6>
 800ad66:	8afb      	ldrh	r3, [r7, #22]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d16c      	bne.n	800ae46 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad70:	881a      	ldrh	r2, [r3, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad7c:	1c9a      	adds	r2, r3, #2
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad90:	e059      	b.n	800ae46 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d11b      	bne.n	800add8 <HAL_SPI_TransmitReceive+0x162>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d016      	beq.n	800add8 <HAL_SPI_TransmitReceive+0x162>
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	2b01      	cmp	r3, #1
 800adae:	d113      	bne.n	800add8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb4:	881a      	ldrh	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc0:	1c9a      	adds	r2, r3, #2
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adca:	b29b      	uxth	r3, r3
 800adcc:	3b01      	subs	r3, #1
 800adce:	b29a      	uxth	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d119      	bne.n	800ae1a <HAL_SPI_TransmitReceive+0x1a4>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adea:	b29b      	uxth	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	d014      	beq.n	800ae1a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfa:	b292      	uxth	r2, r2
 800adfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae02:	1c9a      	adds	r2, r3, #2
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae16:	2301      	movs	r3, #1
 800ae18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ae1a:	f7fa fb37 	bl	800548c <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d80d      	bhi.n	800ae46 <HAL_SPI_TransmitReceive+0x1d0>
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae30:	d009      	beq.n	800ae46 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e0bc      	b.n	800afc0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1a0      	bne.n	800ad92 <HAL_SPI_TransmitReceive+0x11c>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d19b      	bne.n	800ad92 <HAL_SPI_TransmitReceive+0x11c>
 800ae5a:	e082      	b.n	800af62 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <HAL_SPI_TransmitReceive+0x1f4>
 800ae64:	8afb      	ldrh	r3, [r7, #22]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d171      	bne.n	800af4e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	330c      	adds	r3, #12
 800ae74:	7812      	ldrb	r2, [r2, #0]
 800ae76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae90:	e05d      	b.n	800af4e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d11c      	bne.n	800aeda <HAL_SPI_TransmitReceive+0x264>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d017      	beq.n	800aeda <HAL_SPI_TransmitReceive+0x264>
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d114      	bne.n	800aeda <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	330c      	adds	r3, #12
 800aeba:	7812      	ldrb	r2, [r2, #0]
 800aebc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aecc:	b29b      	uxth	r3, r3
 800aece:	3b01      	subs	r3, #1
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aed6:	2300      	movs	r3, #0
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d119      	bne.n	800af1c <HAL_SPI_TransmitReceive+0x2a6>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d014      	beq.n	800af1c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68da      	ldr	r2, [r3, #12]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aefc:	b2d2      	uxtb	r2, r2
 800aefe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af0e:	b29b      	uxth	r3, r3
 800af10:	3b01      	subs	r3, #1
 800af12:	b29a      	uxth	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af18:	2301      	movs	r3, #1
 800af1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800af1c:	f7fa fab6 	bl	800548c <HAL_GetTick>
 800af20:	4602      	mov	r2, r0
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af28:	429a      	cmp	r2, r3
 800af2a:	d803      	bhi.n	800af34 <HAL_SPI_TransmitReceive+0x2be>
 800af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af32:	d102      	bne.n	800af3a <HAL_SPI_TransmitReceive+0x2c4>
 800af34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af36:	2b00      	cmp	r3, #0
 800af38:	d109      	bne.n	800af4e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e038      	b.n	800afc0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af52:	b29b      	uxth	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	d19c      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x21c>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d197      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af62:	6a3a      	ldr	r2, [r7, #32]
 800af64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 f8b6 	bl	800b0d8 <SPI_EndRxTxTransaction>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d008      	beq.n	800af84 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2220      	movs	r2, #32
 800af76:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e01d      	b.n	800afc0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10a      	bne.n	800afa2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af8c:	2300      	movs	r3, #0
 800af8e:	613b      	str	r3, [r7, #16]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	613b      	str	r3, [r7, #16]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2201      	movs	r2, #1
 800afa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800afbe:	2300      	movs	r3, #0
  }
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3728      	adds	r7, #40	@ 0x28
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	4613      	mov	r3, r2
 800afd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800afd8:	f7fa fa58 	bl	800548c <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	1a9b      	subs	r3, r3, r2
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	4413      	add	r3, r2
 800afe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800afe8:	f7fa fa50 	bl	800548c <HAL_GetTick>
 800afec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800afee:	4b39      	ldr	r3, [pc, #228]	@ (800b0d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	015b      	lsls	r3, r3, #5
 800aff4:	0d1b      	lsrs	r3, r3, #20
 800aff6:	69fa      	ldr	r2, [r7, #28]
 800aff8:	fb02 f303 	mul.w	r3, r2, r3
 800affc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800affe:	e055      	b.n	800b0ac <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b006:	d051      	beq.n	800b0ac <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b008:	f7fa fa40 	bl	800548c <HAL_GetTick>
 800b00c:	4602      	mov	r2, r0
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	429a      	cmp	r2, r3
 800b016:	d902      	bls.n	800b01e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d13d      	bne.n	800b09a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b02c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b036:	d111      	bne.n	800b05c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b040:	d004      	beq.n	800b04c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b04a:	d107      	bne.n	800b05c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b05a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b064:	d10f      	bne.n	800b086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b074:	601a      	str	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e018      	b.n	800b0cc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d102      	bne.n	800b0a6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61fb      	str	r3, [r7, #28]
 800b0a4:	e002      	b.n	800b0ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	689a      	ldr	r2, [r3, #8]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	bf0c      	ite	eq
 800b0bc:	2301      	moveq	r3, #1
 800b0be:	2300      	movne	r3, #0
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	79fb      	ldrb	r3, [r7, #7]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d19a      	bne.n	800b000 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3720      	adds	r7, #32
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	200000f0 	.word	0x200000f0

0800b0d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b088      	sub	sp, #32
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	2102      	movs	r1, #2
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff ff6a 	bl	800afc8 <SPI_WaitFlagStateUntilTimeout>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d007      	beq.n	800b10a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0fe:	f043 0220 	orr.w	r2, r3, #32
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e032      	b.n	800b170 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b10a:	4b1b      	ldr	r3, [pc, #108]	@ (800b178 <SPI_EndRxTxTransaction+0xa0>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a1b      	ldr	r2, [pc, #108]	@ (800b17c <SPI_EndRxTxTransaction+0xa4>)
 800b110:	fba2 2303 	umull	r2, r3, r2, r3
 800b114:	0d5b      	lsrs	r3, r3, #21
 800b116:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b11a:	fb02 f303 	mul.w	r3, r2, r3
 800b11e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b128:	d112      	bne.n	800b150 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2200      	movs	r2, #0
 800b132:	2180      	movs	r1, #128	@ 0x80
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7ff ff47 	bl	800afc8 <SPI_WaitFlagStateUntilTimeout>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d016      	beq.n	800b16e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b144:	f043 0220 	orr.w	r2, r3, #32
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e00f      	b.n	800b170 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00a      	beq.n	800b16c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	3b01      	subs	r3, #1
 800b15a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b166:	2b80      	cmp	r3, #128	@ 0x80
 800b168:	d0f2      	beq.n	800b150 <SPI_EndRxTxTransaction+0x78>
 800b16a:	e000      	b.n	800b16e <SPI_EndRxTxTransaction+0x96>
        break;
 800b16c:	bf00      	nop
  }

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	200000f0 	.word	0x200000f0
 800b17c:	165e9f81 	.word	0x165e9f81

0800b180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e041      	b.n	800b216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d106      	bne.n	800b1ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7f9 f9c2 	bl	8004530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	f000 ff2e 	bl	800c020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b01      	cmp	r3, #1
 800b232:	d001      	beq.n	800b238 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e046      	b.n	800b2c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2202      	movs	r2, #2
 800b23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a23      	ldr	r2, [pc, #140]	@ (800b2d4 <HAL_TIM_Base_Start+0xb4>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d022      	beq.n	800b290 <HAL_TIM_Base_Start+0x70>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b252:	d01d      	beq.n	800b290 <HAL_TIM_Base_Start+0x70>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a1f      	ldr	r2, [pc, #124]	@ (800b2d8 <HAL_TIM_Base_Start+0xb8>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d018      	beq.n	800b290 <HAL_TIM_Base_Start+0x70>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a1e      	ldr	r2, [pc, #120]	@ (800b2dc <HAL_TIM_Base_Start+0xbc>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d013      	beq.n	800b290 <HAL_TIM_Base_Start+0x70>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a1c      	ldr	r2, [pc, #112]	@ (800b2e0 <HAL_TIM_Base_Start+0xc0>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d00e      	beq.n	800b290 <HAL_TIM_Base_Start+0x70>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a1b      	ldr	r2, [pc, #108]	@ (800b2e4 <HAL_TIM_Base_Start+0xc4>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d009      	beq.n	800b290 <HAL_TIM_Base_Start+0x70>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a19      	ldr	r2, [pc, #100]	@ (800b2e8 <HAL_TIM_Base_Start+0xc8>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d004      	beq.n	800b290 <HAL_TIM_Base_Start+0x70>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a18      	ldr	r2, [pc, #96]	@ (800b2ec <HAL_TIM_Base_Start+0xcc>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d111      	bne.n	800b2b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b06      	cmp	r3, #6
 800b2a0:	d010      	beq.n	800b2c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f042 0201 	orr.w	r2, r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b2:	e007      	b.n	800b2c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f042 0201 	orr.w	r2, r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	40010000 	.word	0x40010000
 800b2d8:	40000400 	.word	0x40000400
 800b2dc:	40000800 	.word	0x40000800
 800b2e0:	40000c00 	.word	0x40000c00
 800b2e4:	40010400 	.word	0x40010400
 800b2e8:	40014000 	.word	0x40014000
 800b2ec:	40001800 	.word	0x40001800

0800b2f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6a1a      	ldr	r2, [r3, #32]
 800b2fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b302:	4013      	ands	r3, r2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10f      	bne.n	800b328 <HAL_TIM_Base_Stop+0x38>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6a1a      	ldr	r2, [r3, #32]
 800b30e:	f240 4344 	movw	r3, #1092	@ 0x444
 800b312:	4013      	ands	r3, r2
 800b314:	2b00      	cmp	r3, #0
 800b316:	d107      	bne.n	800b328 <HAL_TIM_Base_Stop+0x38>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0201 	bic.w	r2, r2, #1
 800b326:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
	...

0800b340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b01      	cmp	r3, #1
 800b352:	d001      	beq.n	800b358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e04e      	b.n	800b3f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2202      	movs	r2, #2
 800b35c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68da      	ldr	r2, [r3, #12]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f042 0201 	orr.w	r2, r2, #1
 800b36e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a23      	ldr	r2, [pc, #140]	@ (800b404 <HAL_TIM_Base_Start_IT+0xc4>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d022      	beq.n	800b3c0 <HAL_TIM_Base_Start_IT+0x80>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b382:	d01d      	beq.n	800b3c0 <HAL_TIM_Base_Start_IT+0x80>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a1f      	ldr	r2, [pc, #124]	@ (800b408 <HAL_TIM_Base_Start_IT+0xc8>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d018      	beq.n	800b3c0 <HAL_TIM_Base_Start_IT+0x80>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a1e      	ldr	r2, [pc, #120]	@ (800b40c <HAL_TIM_Base_Start_IT+0xcc>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d013      	beq.n	800b3c0 <HAL_TIM_Base_Start_IT+0x80>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a1c      	ldr	r2, [pc, #112]	@ (800b410 <HAL_TIM_Base_Start_IT+0xd0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d00e      	beq.n	800b3c0 <HAL_TIM_Base_Start_IT+0x80>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a1b      	ldr	r2, [pc, #108]	@ (800b414 <HAL_TIM_Base_Start_IT+0xd4>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d009      	beq.n	800b3c0 <HAL_TIM_Base_Start_IT+0x80>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a19      	ldr	r2, [pc, #100]	@ (800b418 <HAL_TIM_Base_Start_IT+0xd8>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d004      	beq.n	800b3c0 <HAL_TIM_Base_Start_IT+0x80>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a18      	ldr	r2, [pc, #96]	@ (800b41c <HAL_TIM_Base_Start_IT+0xdc>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d111      	bne.n	800b3e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b06      	cmp	r3, #6
 800b3d0:	d010      	beq.n	800b3f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f042 0201 	orr.w	r2, r2, #1
 800b3e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3e2:	e007      	b.n	800b3f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0201 	orr.w	r2, r2, #1
 800b3f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	40010000 	.word	0x40010000
 800b408:	40000400 	.word	0x40000400
 800b40c:	40000800 	.word	0x40000800
 800b410:	40000c00 	.word	0x40000c00
 800b414:	40010400 	.word	0x40010400
 800b418:	40014000 	.word	0x40014000
 800b41c:	40001800 	.word	0x40001800

0800b420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e041      	b.n	800b4b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d106      	bne.n	800b44c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f839 	bl	800b4be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2202      	movs	r2, #2
 800b450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3304      	adds	r3, #4
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	f000 fdde 	bl	800c020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b083      	sub	sp, #12
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b4c6:	bf00      	nop
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b082      	sub	sp, #8
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e041      	b.n	800b568 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f839 	bl	800b570 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2202      	movs	r2, #2
 800b502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3304      	adds	r3, #4
 800b50e:	4619      	mov	r1, r3
 800b510:	4610      	mov	r0, r2
 800b512:	f000 fd85 	bl	800c020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <HAL_TIM_IC_Start_IT+0x1e>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	e013      	b.n	800b5ca <HAL_TIM_IC_Start_IT+0x46>
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	2b04      	cmp	r3, #4
 800b5a6:	d104      	bne.n	800b5b2 <HAL_TIM_IC_Start_IT+0x2e>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	e00b      	b.n	800b5ca <HAL_TIM_IC_Start_IT+0x46>
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b08      	cmp	r3, #8
 800b5b6:	d104      	bne.n	800b5c2 <HAL_TIM_IC_Start_IT+0x3e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	e003      	b.n	800b5ca <HAL_TIM_IC_Start_IT+0x46>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d104      	bne.n	800b5dc <HAL_TIM_IC_Start_IT+0x58>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	e013      	b.n	800b604 <HAL_TIM_IC_Start_IT+0x80>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2b04      	cmp	r3, #4
 800b5e0:	d104      	bne.n	800b5ec <HAL_TIM_IC_Start_IT+0x68>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	e00b      	b.n	800b604 <HAL_TIM_IC_Start_IT+0x80>
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2b08      	cmp	r3, #8
 800b5f0:	d104      	bne.n	800b5fc <HAL_TIM_IC_Start_IT+0x78>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	e003      	b.n	800b604 <HAL_TIM_IC_Start_IT+0x80>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b602:	b2db      	uxtb	r3, r3
 800b604:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d102      	bne.n	800b612 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b60c:	7b7b      	ldrb	r3, [r7, #13]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d001      	beq.n	800b616 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e0cc      	b.n	800b7b0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d104      	bne.n	800b626 <HAL_TIM_IC_Start_IT+0xa2>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2202      	movs	r2, #2
 800b620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b624:	e013      	b.n	800b64e <HAL_TIM_IC_Start_IT+0xca>
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b04      	cmp	r3, #4
 800b62a:	d104      	bne.n	800b636 <HAL_TIM_IC_Start_IT+0xb2>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2202      	movs	r2, #2
 800b630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b634:	e00b      	b.n	800b64e <HAL_TIM_IC_Start_IT+0xca>
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b08      	cmp	r3, #8
 800b63a:	d104      	bne.n	800b646 <HAL_TIM_IC_Start_IT+0xc2>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b644:	e003      	b.n	800b64e <HAL_TIM_IC_Start_IT+0xca>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2202      	movs	r2, #2
 800b64a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d104      	bne.n	800b65e <HAL_TIM_IC_Start_IT+0xda>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b65c:	e013      	b.n	800b686 <HAL_TIM_IC_Start_IT+0x102>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b04      	cmp	r3, #4
 800b662:	d104      	bne.n	800b66e <HAL_TIM_IC_Start_IT+0xea>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b66c:	e00b      	b.n	800b686 <HAL_TIM_IC_Start_IT+0x102>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b08      	cmp	r3, #8
 800b672:	d104      	bne.n	800b67e <HAL_TIM_IC_Start_IT+0xfa>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b67c:	e003      	b.n	800b686 <HAL_TIM_IC_Start_IT+0x102>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2202      	movs	r2, #2
 800b682:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2b0c      	cmp	r3, #12
 800b68a:	d841      	bhi.n	800b710 <HAL_TIM_IC_Start_IT+0x18c>
 800b68c:	a201      	add	r2, pc, #4	@ (adr r2, 800b694 <HAL_TIM_IC_Start_IT+0x110>)
 800b68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b692:	bf00      	nop
 800b694:	0800b6c9 	.word	0x0800b6c9
 800b698:	0800b711 	.word	0x0800b711
 800b69c:	0800b711 	.word	0x0800b711
 800b6a0:	0800b711 	.word	0x0800b711
 800b6a4:	0800b6db 	.word	0x0800b6db
 800b6a8:	0800b711 	.word	0x0800b711
 800b6ac:	0800b711 	.word	0x0800b711
 800b6b0:	0800b711 	.word	0x0800b711
 800b6b4:	0800b6ed 	.word	0x0800b6ed
 800b6b8:	0800b711 	.word	0x0800b711
 800b6bc:	0800b711 	.word	0x0800b711
 800b6c0:	0800b711 	.word	0x0800b711
 800b6c4:	0800b6ff 	.word	0x0800b6ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68da      	ldr	r2, [r3, #12]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f042 0202 	orr.w	r2, r2, #2
 800b6d6:	60da      	str	r2, [r3, #12]
      break;
 800b6d8:	e01d      	b.n	800b716 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68da      	ldr	r2, [r3, #12]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f042 0204 	orr.w	r2, r2, #4
 800b6e8:	60da      	str	r2, [r3, #12]
      break;
 800b6ea:	e014      	b.n	800b716 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68da      	ldr	r2, [r3, #12]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f042 0208 	orr.w	r2, r2, #8
 800b6fa:	60da      	str	r2, [r3, #12]
      break;
 800b6fc:	e00b      	b.n	800b716 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68da      	ldr	r2, [r3, #12]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f042 0210 	orr.w	r2, r2, #16
 800b70c:	60da      	str	r2, [r3, #12]
      break;
 800b70e:	e002      	b.n	800b716 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	73fb      	strb	r3, [r7, #15]
      break;
 800b714:	bf00      	nop
  }

  if (status == HAL_OK)
 800b716:	7bfb      	ldrb	r3, [r7, #15]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d148      	bne.n	800b7ae <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2201      	movs	r2, #1
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	4618      	mov	r0, r3
 800b726:	f001 f895 	bl	800c854 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a22      	ldr	r2, [pc, #136]	@ (800b7b8 <HAL_TIM_IC_Start_IT+0x234>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d022      	beq.n	800b77a <HAL_TIM_IC_Start_IT+0x1f6>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b73c:	d01d      	beq.n	800b77a <HAL_TIM_IC_Start_IT+0x1f6>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a1e      	ldr	r2, [pc, #120]	@ (800b7bc <HAL_TIM_IC_Start_IT+0x238>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d018      	beq.n	800b77a <HAL_TIM_IC_Start_IT+0x1f6>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a1c      	ldr	r2, [pc, #112]	@ (800b7c0 <HAL_TIM_IC_Start_IT+0x23c>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d013      	beq.n	800b77a <HAL_TIM_IC_Start_IT+0x1f6>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a1b      	ldr	r2, [pc, #108]	@ (800b7c4 <HAL_TIM_IC_Start_IT+0x240>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d00e      	beq.n	800b77a <HAL_TIM_IC_Start_IT+0x1f6>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a19      	ldr	r2, [pc, #100]	@ (800b7c8 <HAL_TIM_IC_Start_IT+0x244>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d009      	beq.n	800b77a <HAL_TIM_IC_Start_IT+0x1f6>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a18      	ldr	r2, [pc, #96]	@ (800b7cc <HAL_TIM_IC_Start_IT+0x248>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d004      	beq.n	800b77a <HAL_TIM_IC_Start_IT+0x1f6>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a16      	ldr	r2, [pc, #88]	@ (800b7d0 <HAL_TIM_IC_Start_IT+0x24c>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d111      	bne.n	800b79e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	f003 0307 	and.w	r3, r3, #7
 800b784:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	2b06      	cmp	r3, #6
 800b78a:	d010      	beq.n	800b7ae <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f042 0201 	orr.w	r2, r2, #1
 800b79a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b79c:	e007      	b.n	800b7ae <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f042 0201 	orr.w	r2, r2, #1
 800b7ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	40010000 	.word	0x40010000
 800b7bc:	40000400 	.word	0x40000400
 800b7c0:	40000800 	.word	0x40000800
 800b7c4:	40000c00 	.word	0x40000c00
 800b7c8:	40010400 	.word	0x40010400
 800b7cc:	40014000 	.word	0x40014000
 800b7d0:	40001800 	.word	0x40001800

0800b7d4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b0c      	cmp	r3, #12
 800b7e6:	d841      	bhi.n	800b86c <HAL_TIM_IC_Stop_IT+0x98>
 800b7e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f0 <HAL_TIM_IC_Stop_IT+0x1c>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800b825 	.word	0x0800b825
 800b7f4:	0800b86d 	.word	0x0800b86d
 800b7f8:	0800b86d 	.word	0x0800b86d
 800b7fc:	0800b86d 	.word	0x0800b86d
 800b800:	0800b837 	.word	0x0800b837
 800b804:	0800b86d 	.word	0x0800b86d
 800b808:	0800b86d 	.word	0x0800b86d
 800b80c:	0800b86d 	.word	0x0800b86d
 800b810:	0800b849 	.word	0x0800b849
 800b814:	0800b86d 	.word	0x0800b86d
 800b818:	0800b86d 	.word	0x0800b86d
 800b81c:	0800b86d 	.word	0x0800b86d
 800b820:	0800b85b 	.word	0x0800b85b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68da      	ldr	r2, [r3, #12]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f022 0202 	bic.w	r2, r2, #2
 800b832:	60da      	str	r2, [r3, #12]
      break;
 800b834:	e01d      	b.n	800b872 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68da      	ldr	r2, [r3, #12]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f022 0204 	bic.w	r2, r2, #4
 800b844:	60da      	str	r2, [r3, #12]
      break;
 800b846:	e014      	b.n	800b872 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68da      	ldr	r2, [r3, #12]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f022 0208 	bic.w	r2, r2, #8
 800b856:	60da      	str	r2, [r3, #12]
      break;
 800b858:	e00b      	b.n	800b872 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68da      	ldr	r2, [r3, #12]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f022 0210 	bic.w	r2, r2, #16
 800b868:	60da      	str	r2, [r3, #12]
      break;
 800b86a:	e002      	b.n	800b872 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	73fb      	strb	r3, [r7, #15]
      break;
 800b870:	bf00      	nop
  }

  if (status == HAL_OK)
 800b872:	7bfb      	ldrb	r3, [r7, #15]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d156      	bne.n	800b926 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2200      	movs	r2, #0
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	4618      	mov	r0, r3
 800b882:	f000 ffe7 	bl	800c854 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6a1a      	ldr	r2, [r3, #32]
 800b88c:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b890:	4013      	ands	r3, r2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10f      	bne.n	800b8b6 <HAL_TIM_IC_Stop_IT+0xe2>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6a1a      	ldr	r2, [r3, #32]
 800b89c:	f240 4344 	movw	r3, #1092	@ 0x444
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d107      	bne.n	800b8b6 <HAL_TIM_IC_Stop_IT+0xe2>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f022 0201 	bic.w	r2, r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d104      	bne.n	800b8c6 <HAL_TIM_IC_Stop_IT+0xf2>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8c4:	e013      	b.n	800b8ee <HAL_TIM_IC_Stop_IT+0x11a>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b04      	cmp	r3, #4
 800b8ca:	d104      	bne.n	800b8d6 <HAL_TIM_IC_Stop_IT+0x102>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8d4:	e00b      	b.n	800b8ee <HAL_TIM_IC_Stop_IT+0x11a>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b08      	cmp	r3, #8
 800b8da:	d104      	bne.n	800b8e6 <HAL_TIM_IC_Stop_IT+0x112>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8e4:	e003      	b.n	800b8ee <HAL_TIM_IC_Stop_IT+0x11a>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d104      	bne.n	800b8fe <HAL_TIM_IC_Stop_IT+0x12a>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b8fc:	e013      	b.n	800b926 <HAL_TIM_IC_Stop_IT+0x152>
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b04      	cmp	r3, #4
 800b902:	d104      	bne.n	800b90e <HAL_TIM_IC_Stop_IT+0x13a>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b90c:	e00b      	b.n	800b926 <HAL_TIM_IC_Stop_IT+0x152>
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b08      	cmp	r3, #8
 800b912:	d104      	bne.n	800b91e <HAL_TIM_IC_Stop_IT+0x14a>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b91c:	e003      	b.n	800b926 <HAL_TIM_IC_Stop_IT+0x152>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800b926:	7bfb      	ldrb	r3, [r7, #15]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	f003 0302 	and.w	r3, r3, #2
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d020      	beq.n	800b994 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f003 0302 	and.w	r3, r3, #2
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d01b      	beq.n	800b994 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f06f 0202 	mvn.w	r2, #2
 800b964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	f003 0303 	and.w	r3, r3, #3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7f9 fa94 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 800b980:	e005      	b.n	800b98e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fb2e 	bl	800bfe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fb35 	bl	800bff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	f003 0304 	and.w	r3, r3, #4
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d020      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f003 0304 	and.w	r3, r3, #4
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01b      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f06f 0204 	mvn.w	r2, #4
 800b9b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7f9 fa6e 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 800b9cc:	e005      	b.n	800b9da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fb08 	bl	800bfe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fb0f 	bl	800bff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f003 0308 	and.w	r3, r3, #8
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d020      	beq.n	800ba2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f003 0308 	and.w	r3, r3, #8
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d01b      	beq.n	800ba2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f06f 0208 	mvn.w	r2, #8
 800b9fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2204      	movs	r2, #4
 800ba02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	69db      	ldr	r3, [r3, #28]
 800ba0a:	f003 0303 	and.w	r3, r3, #3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d003      	beq.n	800ba1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7f9 fa48 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 800ba18:	e005      	b.n	800ba26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fae2 	bl	800bfe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fae9 	bl	800bff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f003 0310 	and.w	r3, r3, #16
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d020      	beq.n	800ba78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f003 0310 	and.w	r3, r3, #16
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01b      	beq.n	800ba78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f06f 0210 	mvn.w	r2, #16
 800ba48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2208      	movs	r2, #8
 800ba4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	69db      	ldr	r3, [r3, #28]
 800ba56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7f9 fa22 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 800ba64:	e005      	b.n	800ba72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fabc 	bl	800bfe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fac3 	bl	800bff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00c      	beq.n	800ba9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d007      	beq.n	800ba9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f06f 0201 	mvn.w	r2, #1
 800ba94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7f7 f834 	bl	8002b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00c      	beq.n	800bac0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baac:	2b00      	cmp	r3, #0
 800baae:	d007      	beq.n	800bac0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 ffc8 	bl	800ca50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00c      	beq.n	800bae4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d007      	beq.n	800bae4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800badc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fa94 	bl	800c00c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f003 0320 	and.w	r3, r3, #32
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00c      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f003 0320 	and.w	r3, r3, #32
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d007      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f06f 0220 	mvn.w	r2, #32
 800bb00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 ff9a 	bl	800ca3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb08:	bf00      	nop
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d101      	bne.n	800bb2e <HAL_TIM_IC_ConfigChannel+0x1e>
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	e088      	b.n	800bc40 <HAL_TIM_IC_ConfigChannel+0x130>
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2201      	movs	r2, #1
 800bb32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d11b      	bne.n	800bb74 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800bb4c:	f000 fcbe 	bl	800c4cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	699a      	ldr	r2, [r3, #24]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f022 020c 	bic.w	r2, r2, #12
 800bb5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6999      	ldr	r1, [r3, #24]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	689a      	ldr	r2, [r3, #8]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	619a      	str	r2, [r3, #24]
 800bb72:	e060      	b.n	800bc36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b04      	cmp	r3, #4
 800bb78:	d11c      	bne.n	800bbb4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800bb8a:	f000 fd42 	bl	800c612 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	699a      	ldr	r2, [r3, #24]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800bb9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6999      	ldr	r1, [r3, #24]
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	021a      	lsls	r2, r3, #8
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	619a      	str	r2, [r3, #24]
 800bbb2:	e040      	b.n	800bc36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b08      	cmp	r3, #8
 800bbb8:	d11b      	bne.n	800bbf2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800bbca:	f000 fd8f 	bl	800c6ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	69da      	ldr	r2, [r3, #28]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 020c 	bic.w	r2, r2, #12
 800bbdc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	69d9      	ldr	r1, [r3, #28]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	430a      	orrs	r2, r1
 800bbee:	61da      	str	r2, [r3, #28]
 800bbf0:	e021      	b.n	800bc36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2b0c      	cmp	r3, #12
 800bbf6:	d11c      	bne.n	800bc32 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800bc08:	f000 fdac 	bl	800c764 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	69da      	ldr	r2, [r3, #28]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800bc1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	69d9      	ldr	r1, [r3, #28]
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	021a      	lsls	r2, r3, #8
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	430a      	orrs	r2, r1
 800bc2e:	61da      	str	r2, [r3, #28]
 800bc30:	e001      	b.n	800bc36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d101      	bne.n	800bc66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc62:	2302      	movs	r3, #2
 800bc64:	e0ae      	b.n	800bdc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b0c      	cmp	r3, #12
 800bc72:	f200 809f 	bhi.w	800bdb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bc76:	a201      	add	r2, pc, #4	@ (adr r2, 800bc7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bcb1 	.word	0x0800bcb1
 800bc80:	0800bdb5 	.word	0x0800bdb5
 800bc84:	0800bdb5 	.word	0x0800bdb5
 800bc88:	0800bdb5 	.word	0x0800bdb5
 800bc8c:	0800bcf1 	.word	0x0800bcf1
 800bc90:	0800bdb5 	.word	0x0800bdb5
 800bc94:	0800bdb5 	.word	0x0800bdb5
 800bc98:	0800bdb5 	.word	0x0800bdb5
 800bc9c:	0800bd33 	.word	0x0800bd33
 800bca0:	0800bdb5 	.word	0x0800bdb5
 800bca4:	0800bdb5 	.word	0x0800bdb5
 800bca8:	0800bdb5 	.word	0x0800bdb5
 800bcac:	0800bd73 	.word	0x0800bd73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68b9      	ldr	r1, [r7, #8]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 fa58 	bl	800c16c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	699a      	ldr	r2, [r3, #24]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f042 0208 	orr.w	r2, r2, #8
 800bcca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	699a      	ldr	r2, [r3, #24]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f022 0204 	bic.w	r2, r2, #4
 800bcda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6999      	ldr	r1, [r3, #24]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	691a      	ldr	r2, [r3, #16]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	430a      	orrs	r2, r1
 800bcec:	619a      	str	r2, [r3, #24]
      break;
 800bcee:	e064      	b.n	800bdba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f000 faa8 	bl	800c24c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	699a      	ldr	r2, [r3, #24]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	699a      	ldr	r2, [r3, #24]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6999      	ldr	r1, [r3, #24]
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	021a      	lsls	r2, r3, #8
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	619a      	str	r2, [r3, #24]
      break;
 800bd30:	e043      	b.n	800bdba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68b9      	ldr	r1, [r7, #8]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fafd 	bl	800c338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	69da      	ldr	r2, [r3, #28]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f042 0208 	orr.w	r2, r2, #8
 800bd4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	69da      	ldr	r2, [r3, #28]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f022 0204 	bic.w	r2, r2, #4
 800bd5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	69d9      	ldr	r1, [r3, #28]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	691a      	ldr	r2, [r3, #16]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	430a      	orrs	r2, r1
 800bd6e:	61da      	str	r2, [r3, #28]
      break;
 800bd70:	e023      	b.n	800bdba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 fb51 	bl	800c420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	69da      	ldr	r2, [r3, #28]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	69da      	ldr	r2, [r3, #28]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	69d9      	ldr	r1, [r3, #28]
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	021a      	lsls	r2, r3, #8
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	61da      	str	r2, [r3, #28]
      break;
 800bdb2:	e002      	b.n	800bdba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	75fb      	strb	r3, [r7, #23]
      break;
 800bdb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3718      	adds	r7, #24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d101      	bne.n	800bde8 <HAL_TIM_ConfigClockSource+0x1c>
 800bde4:	2302      	movs	r3, #2
 800bde6:	e0b4      	b.n	800bf52 <HAL_TIM_ConfigClockSource+0x186>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800be06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be20:	d03e      	beq.n	800bea0 <HAL_TIM_ConfigClockSource+0xd4>
 800be22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be26:	f200 8087 	bhi.w	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be2e:	f000 8086 	beq.w	800bf3e <HAL_TIM_ConfigClockSource+0x172>
 800be32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be36:	d87f      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be38:	2b70      	cmp	r3, #112	@ 0x70
 800be3a:	d01a      	beq.n	800be72 <HAL_TIM_ConfigClockSource+0xa6>
 800be3c:	2b70      	cmp	r3, #112	@ 0x70
 800be3e:	d87b      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be40:	2b60      	cmp	r3, #96	@ 0x60
 800be42:	d050      	beq.n	800bee6 <HAL_TIM_ConfigClockSource+0x11a>
 800be44:	2b60      	cmp	r3, #96	@ 0x60
 800be46:	d877      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be48:	2b50      	cmp	r3, #80	@ 0x50
 800be4a:	d03c      	beq.n	800bec6 <HAL_TIM_ConfigClockSource+0xfa>
 800be4c:	2b50      	cmp	r3, #80	@ 0x50
 800be4e:	d873      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be50:	2b40      	cmp	r3, #64	@ 0x40
 800be52:	d058      	beq.n	800bf06 <HAL_TIM_ConfigClockSource+0x13a>
 800be54:	2b40      	cmp	r3, #64	@ 0x40
 800be56:	d86f      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be58:	2b30      	cmp	r3, #48	@ 0x30
 800be5a:	d064      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x15a>
 800be5c:	2b30      	cmp	r3, #48	@ 0x30
 800be5e:	d86b      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be60:	2b20      	cmp	r3, #32
 800be62:	d060      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x15a>
 800be64:	2b20      	cmp	r3, #32
 800be66:	d867      	bhi.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d05c      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x15a>
 800be6c:	2b10      	cmp	r3, #16
 800be6e:	d05a      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x15a>
 800be70:	e062      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be82:	f000 fcc7 	bl	800c814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800be94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	609a      	str	r2, [r3, #8]
      break;
 800be9e:	e04f      	b.n	800bf40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800beb0:	f000 fcb0 	bl	800c814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bec2:	609a      	str	r2, [r3, #8]
      break;
 800bec4:	e03c      	b.n	800bf40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bed2:	461a      	mov	r2, r3
 800bed4:	f000 fb6e 	bl	800c5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2150      	movs	r1, #80	@ 0x50
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 fc7d 	bl	800c7de <TIM_ITRx_SetConfig>
      break;
 800bee4:	e02c      	b.n	800bf40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bef2:	461a      	mov	r2, r3
 800bef4:	f000 fbca 	bl	800c68c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2160      	movs	r1, #96	@ 0x60
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fc6d 	bl	800c7de <TIM_ITRx_SetConfig>
      break;
 800bf04:	e01c      	b.n	800bf40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf12:	461a      	mov	r2, r3
 800bf14:	f000 fb4e 	bl	800c5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2140      	movs	r1, #64	@ 0x40
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fc5d 	bl	800c7de <TIM_ITRx_SetConfig>
      break;
 800bf24:	e00c      	b.n	800bf40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f000 fc54 	bl	800c7de <TIM_ITRx_SetConfig>
      break;
 800bf36:	e003      	b.n	800bf40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf3c:	e000      	b.n	800bf40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bf3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
	...

0800bf5c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800bf66:	2300      	movs	r3, #0
 800bf68:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b0c      	cmp	r3, #12
 800bf6e:	d831      	bhi.n	800bfd4 <HAL_TIM_ReadCapturedValue+0x78>
 800bf70:	a201      	add	r2, pc, #4	@ (adr r2, 800bf78 <HAL_TIM_ReadCapturedValue+0x1c>)
 800bf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf76:	bf00      	nop
 800bf78:	0800bfad 	.word	0x0800bfad
 800bf7c:	0800bfd5 	.word	0x0800bfd5
 800bf80:	0800bfd5 	.word	0x0800bfd5
 800bf84:	0800bfd5 	.word	0x0800bfd5
 800bf88:	0800bfb7 	.word	0x0800bfb7
 800bf8c:	0800bfd5 	.word	0x0800bfd5
 800bf90:	0800bfd5 	.word	0x0800bfd5
 800bf94:	0800bfd5 	.word	0x0800bfd5
 800bf98:	0800bfc1 	.word	0x0800bfc1
 800bf9c:	0800bfd5 	.word	0x0800bfd5
 800bfa0:	0800bfd5 	.word	0x0800bfd5
 800bfa4:	0800bfd5 	.word	0x0800bfd5
 800bfa8:	0800bfcb 	.word	0x0800bfcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfb2:	60fb      	str	r3, [r7, #12]

      break;
 800bfb4:	e00f      	b.n	800bfd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfbc:	60fb      	str	r3, [r7, #12]

      break;
 800bfbe:	e00a      	b.n	800bfd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc6:	60fb      	str	r3, [r7, #12]

      break;
 800bfc8:	e005      	b.n	800bfd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfd0:	60fb      	str	r3, [r7, #12]

      break;
 800bfd2:	e000      	b.n	800bfd6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800bfd4:	bf00      	nop
  }

  return tmpreg;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a43      	ldr	r2, [pc, #268]	@ (800c140 <TIM_Base_SetConfig+0x120>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d013      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c03e:	d00f      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a40      	ldr	r2, [pc, #256]	@ (800c144 <TIM_Base_SetConfig+0x124>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d00b      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a3f      	ldr	r2, [pc, #252]	@ (800c148 <TIM_Base_SetConfig+0x128>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d007      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a3e      	ldr	r2, [pc, #248]	@ (800c14c <TIM_Base_SetConfig+0x12c>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d003      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a3d      	ldr	r2, [pc, #244]	@ (800c150 <TIM_Base_SetConfig+0x130>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d108      	bne.n	800c072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a32      	ldr	r2, [pc, #200]	@ (800c140 <TIM_Base_SetConfig+0x120>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d02b      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c080:	d027      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a2f      	ldr	r2, [pc, #188]	@ (800c144 <TIM_Base_SetConfig+0x124>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d023      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a2e      	ldr	r2, [pc, #184]	@ (800c148 <TIM_Base_SetConfig+0x128>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d01f      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a2d      	ldr	r2, [pc, #180]	@ (800c14c <TIM_Base_SetConfig+0x12c>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d01b      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a2c      	ldr	r2, [pc, #176]	@ (800c150 <TIM_Base_SetConfig+0x130>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d017      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a2b      	ldr	r2, [pc, #172]	@ (800c154 <TIM_Base_SetConfig+0x134>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d013      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a2a      	ldr	r2, [pc, #168]	@ (800c158 <TIM_Base_SetConfig+0x138>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d00f      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a29      	ldr	r2, [pc, #164]	@ (800c15c <TIM_Base_SetConfig+0x13c>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d00b      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a28      	ldr	r2, [pc, #160]	@ (800c160 <TIM_Base_SetConfig+0x140>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d007      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a27      	ldr	r2, [pc, #156]	@ (800c164 <TIM_Base_SetConfig+0x144>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d003      	beq.n	800c0d2 <TIM_Base_SetConfig+0xb2>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a26      	ldr	r2, [pc, #152]	@ (800c168 <TIM_Base_SetConfig+0x148>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d108      	bne.n	800c0e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	689a      	ldr	r2, [r3, #8]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a0e      	ldr	r2, [pc, #56]	@ (800c140 <TIM_Base_SetConfig+0x120>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d003      	beq.n	800c112 <TIM_Base_SetConfig+0xf2>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a10      	ldr	r2, [pc, #64]	@ (800c150 <TIM_Base_SetConfig+0x130>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d103      	bne.n	800c11a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	691a      	ldr	r2, [r3, #16]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f043 0204 	orr.w	r2, r3, #4
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	601a      	str	r2, [r3, #0]
}
 800c132:	bf00      	nop
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	40010000 	.word	0x40010000
 800c144:	40000400 	.word	0x40000400
 800c148:	40000800 	.word	0x40000800
 800c14c:	40000c00 	.word	0x40000c00
 800c150:	40010400 	.word	0x40010400
 800c154:	40014000 	.word	0x40014000
 800c158:	40014400 	.word	0x40014400
 800c15c:	40014800 	.word	0x40014800
 800c160:	40001800 	.word	0x40001800
 800c164:	40001c00 	.word	0x40001c00
 800c168:	40002000 	.word	0x40002000

0800c16c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b087      	sub	sp, #28
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a1b      	ldr	r3, [r3, #32]
 800c17a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	f023 0201 	bic.w	r2, r3, #1
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f023 0303 	bic.w	r3, r3, #3
 800c1a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f023 0302 	bic.w	r3, r3, #2
 800c1b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a20      	ldr	r2, [pc, #128]	@ (800c244 <TIM_OC1_SetConfig+0xd8>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d003      	beq.n	800c1d0 <TIM_OC1_SetConfig+0x64>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a1f      	ldr	r2, [pc, #124]	@ (800c248 <TIM_OC1_SetConfig+0xdc>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d10c      	bne.n	800c1ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f023 0308 	bic.w	r3, r3, #8
 800c1d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f023 0304 	bic.w	r3, r3, #4
 800c1e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a15      	ldr	r2, [pc, #84]	@ (800c244 <TIM_OC1_SetConfig+0xd8>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d003      	beq.n	800c1fa <TIM_OC1_SetConfig+0x8e>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a14      	ldr	r2, [pc, #80]	@ (800c248 <TIM_OC1_SetConfig+0xdc>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d111      	bne.n	800c21e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	4313      	orrs	r3, r2
 800c212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	693a      	ldr	r2, [r7, #16]
 800c222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	621a      	str	r2, [r3, #32]
}
 800c238:	bf00      	nop
 800c23a:	371c      	adds	r7, #28
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	40010000 	.word	0x40010000
 800c248:	40010400 	.word	0x40010400

0800c24c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a1b      	ldr	r3, [r3, #32]
 800c260:	f023 0210 	bic.w	r2, r3, #16
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	021b      	lsls	r3, r3, #8
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f023 0320 	bic.w	r3, r3, #32
 800c296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	011b      	lsls	r3, r3, #4
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a22      	ldr	r2, [pc, #136]	@ (800c330 <TIM_OC2_SetConfig+0xe4>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d003      	beq.n	800c2b4 <TIM_OC2_SetConfig+0x68>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a21      	ldr	r2, [pc, #132]	@ (800c334 <TIM_OC2_SetConfig+0xe8>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d10d      	bne.n	800c2d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	011b      	lsls	r3, r3, #4
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a17      	ldr	r2, [pc, #92]	@ (800c330 <TIM_OC2_SetConfig+0xe4>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d003      	beq.n	800c2e0 <TIM_OC2_SetConfig+0x94>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a16      	ldr	r2, [pc, #88]	@ (800c334 <TIM_OC2_SetConfig+0xe8>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d113      	bne.n	800c308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c2e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	695b      	ldr	r3, [r3, #20]
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	4313      	orrs	r3, r2
 800c306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	621a      	str	r2, [r3, #32]
}
 800c322:	bf00      	nop
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	40010000 	.word	0x40010000
 800c334:	40010400 	.word	0x40010400

0800c338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c338:	b480      	push	{r7}
 800c33a:	b087      	sub	sp, #28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a1b      	ldr	r3, [r3, #32]
 800c346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6a1b      	ldr	r3, [r3, #32]
 800c34c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f023 0303 	bic.w	r3, r3, #3
 800c36e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4313      	orrs	r3, r2
 800c378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	021b      	lsls	r3, r3, #8
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a21      	ldr	r2, [pc, #132]	@ (800c418 <TIM_OC3_SetConfig+0xe0>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d003      	beq.n	800c39e <TIM_OC3_SetConfig+0x66>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a20      	ldr	r2, [pc, #128]	@ (800c41c <TIM_OC3_SetConfig+0xe4>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d10d      	bne.n	800c3ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c3a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	021b      	lsls	r3, r3, #8
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c3b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a16      	ldr	r2, [pc, #88]	@ (800c418 <TIM_OC3_SetConfig+0xe0>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d003      	beq.n	800c3ca <TIM_OC3_SetConfig+0x92>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4a15      	ldr	r2, [pc, #84]	@ (800c41c <TIM_OC3_SetConfig+0xe4>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d113      	bne.n	800c3f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c3d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	695b      	ldr	r3, [r3, #20]
 800c3de:	011b      	lsls	r3, r3, #4
 800c3e0:	693a      	ldr	r2, [r7, #16]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	621a      	str	r2, [r3, #32]
}
 800c40c:	bf00      	nop
 800c40e:	371c      	adds	r7, #28
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	40010000 	.word	0x40010000
 800c41c:	40010400 	.word	0x40010400

0800c420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a1b      	ldr	r3, [r3, #32]
 800c434:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	69db      	ldr	r3, [r3, #28]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	021b      	lsls	r3, r3, #8
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	4313      	orrs	r3, r2
 800c462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c46a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	031b      	lsls	r3, r3, #12
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	4313      	orrs	r3, r2
 800c476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a12      	ldr	r2, [pc, #72]	@ (800c4c4 <TIM_OC4_SetConfig+0xa4>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d003      	beq.n	800c488 <TIM_OC4_SetConfig+0x68>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a11      	ldr	r2, [pc, #68]	@ (800c4c8 <TIM_OC4_SetConfig+0xa8>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d109      	bne.n	800c49c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c48e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	019b      	lsls	r3, r3, #6
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	4313      	orrs	r3, r2
 800c49a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	621a      	str	r2, [r3, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	371c      	adds	r7, #28
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	40010000 	.word	0x40010000
 800c4c8:	40010400 	.word	0x40010400

0800c4cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b087      	sub	sp, #28
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6a1b      	ldr	r3, [r3, #32]
 800c4e4:	f023 0201 	bic.w	r2, r3, #1
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4a28      	ldr	r2, [pc, #160]	@ (800c598 <TIM_TI1_SetConfig+0xcc>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d01b      	beq.n	800c532 <TIM_TI1_SetConfig+0x66>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c500:	d017      	beq.n	800c532 <TIM_TI1_SetConfig+0x66>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	4a25      	ldr	r2, [pc, #148]	@ (800c59c <TIM_TI1_SetConfig+0xd0>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d013      	beq.n	800c532 <TIM_TI1_SetConfig+0x66>
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4a24      	ldr	r2, [pc, #144]	@ (800c5a0 <TIM_TI1_SetConfig+0xd4>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d00f      	beq.n	800c532 <TIM_TI1_SetConfig+0x66>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	4a23      	ldr	r2, [pc, #140]	@ (800c5a4 <TIM_TI1_SetConfig+0xd8>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d00b      	beq.n	800c532 <TIM_TI1_SetConfig+0x66>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	4a22      	ldr	r2, [pc, #136]	@ (800c5a8 <TIM_TI1_SetConfig+0xdc>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d007      	beq.n	800c532 <TIM_TI1_SetConfig+0x66>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4a21      	ldr	r2, [pc, #132]	@ (800c5ac <TIM_TI1_SetConfig+0xe0>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d003      	beq.n	800c532 <TIM_TI1_SetConfig+0x66>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	4a20      	ldr	r2, [pc, #128]	@ (800c5b0 <TIM_TI1_SetConfig+0xe4>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d101      	bne.n	800c536 <TIM_TI1_SetConfig+0x6a>
 800c532:	2301      	movs	r3, #1
 800c534:	e000      	b.n	800c538 <TIM_TI1_SetConfig+0x6c>
 800c536:	2300      	movs	r3, #0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d008      	beq.n	800c54e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f023 0303 	bic.w	r3, r3, #3
 800c542:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4313      	orrs	r3, r2
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	e003      	b.n	800c556 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	f043 0301 	orr.w	r3, r3, #1
 800c554:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c55c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	011b      	lsls	r3, r3, #4
 800c562:	b2db      	uxtb	r3, r3
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	4313      	orrs	r3, r2
 800c568:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	f023 030a 	bic.w	r3, r3, #10
 800c570:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	f003 030a 	and.w	r3, r3, #10
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	621a      	str	r2, [r3, #32]
}
 800c58a:	bf00      	nop
 800c58c:	371c      	adds	r7, #28
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	40010000 	.word	0x40010000
 800c59c:	40000400 	.word	0x40000400
 800c5a0:	40000800 	.word	0x40000800
 800c5a4:	40000c00 	.word	0x40000c00
 800c5a8:	40010400 	.word	0x40010400
 800c5ac:	40014000 	.word	0x40014000
 800c5b0:	40001800 	.word	0x40001800

0800c5b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b087      	sub	sp, #28
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	f023 0201 	bic.w	r2, r3, #1
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c5de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	011b      	lsls	r3, r3, #4
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f023 030a 	bic.w	r3, r3, #10
 800c5f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	621a      	str	r2, [r3, #32]
}
 800c606:	bf00      	nop
 800c608:	371c      	adds	r7, #28
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c612:	b480      	push	{r7}
 800c614:	b087      	sub	sp, #28
 800c616:	af00      	add	r7, sp, #0
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	60b9      	str	r1, [r7, #8]
 800c61c:	607a      	str	r2, [r7, #4]
 800c61e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	f023 0210 	bic.w	r2, r3, #16
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c63e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	021b      	lsls	r3, r3, #8
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	4313      	orrs	r3, r2
 800c648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	031b      	lsls	r3, r3, #12
 800c656:	b29b      	uxth	r3, r3
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c664:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	011b      	lsls	r3, r3, #4
 800c66a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	4313      	orrs	r3, r2
 800c672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	621a      	str	r2, [r3, #32]
}
 800c680:	bf00      	nop
 800c682:	371c      	adds	r7, #28
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b087      	sub	sp, #28
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6a1b      	ldr	r3, [r3, #32]
 800c69c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6a1b      	ldr	r3, [r3, #32]
 800c6a2:	f023 0210 	bic.w	r2, r3, #16
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c6b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	031b      	lsls	r3, r3, #12
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c6c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	011b      	lsls	r3, r3, #4
 800c6ce:	697a      	ldr	r2, [r7, #20]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	621a      	str	r2, [r3, #32]
}
 800c6e0:	bf00      	nop
 800c6e2:	371c      	adds	r7, #28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
 800c6f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6a1b      	ldr	r3, [r3, #32]
 800c704:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	f023 0303 	bic.w	r3, r3, #3
 800c718:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4313      	orrs	r3, r2
 800c720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c728:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	011b      	lsls	r3, r3, #4
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	693a      	ldr	r2, [r7, #16]
 800c732:	4313      	orrs	r3, r2
 800c734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800c73c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	021b      	lsls	r3, r3, #8
 800c742:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	4313      	orrs	r3, r2
 800c74a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	621a      	str	r2, [r3, #32]
}
 800c758:	bf00      	nop
 800c75a:	371c      	adds	r7, #28
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6a1b      	ldr	r3, [r3, #32]
 800c77c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	69db      	ldr	r3, [r3, #28]
 800c788:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c790:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	021b      	lsls	r3, r3, #8
 800c796:	693a      	ldr	r2, [r7, #16]
 800c798:	4313      	orrs	r3, r2
 800c79a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c7a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	031b      	lsls	r3, r3, #12
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	693a      	ldr	r2, [r7, #16]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800c7b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	031b      	lsls	r3, r3, #12
 800c7bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	621a      	str	r2, [r3, #32]
}
 800c7d2:	bf00      	nop
 800c7d4:	371c      	adds	r7, #28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c7de:	b480      	push	{r7}
 800c7e0:	b085      	sub	sp, #20
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	f043 0307 	orr.w	r3, r3, #7
 800c800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	609a      	str	r2, [r3, #8]
}
 800c808:	bf00      	nop
 800c80a:	3714      	adds	r7, #20
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c814:	b480      	push	{r7}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c82e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	021a      	lsls	r2, r3, #8
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	431a      	orrs	r2, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	4313      	orrs	r3, r2
 800c840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	609a      	str	r2, [r3, #8]
}
 800c848:	bf00      	nop
 800c84a:	371c      	adds	r7, #28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c854:	b480      	push	{r7}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f003 031f 	and.w	r3, r3, #31
 800c866:	2201      	movs	r2, #1
 800c868:	fa02 f303 	lsl.w	r3, r2, r3
 800c86c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6a1a      	ldr	r2, [r3, #32]
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	43db      	mvns	r3, r3
 800c876:	401a      	ands	r2, r3
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6a1a      	ldr	r2, [r3, #32]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	f003 031f 	and.w	r3, r3, #31
 800c886:	6879      	ldr	r1, [r7, #4]
 800c888:	fa01 f303 	lsl.w	r3, r1, r3
 800c88c:	431a      	orrs	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	621a      	str	r2, [r3, #32]
}
 800c892:	bf00      	nop
 800c894:	371c      	adds	r7, #28
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d101      	bne.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	e05a      	b.n	800c96e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2202      	movs	r2, #2
 800c8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a21      	ldr	r2, [pc, #132]	@ (800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d022      	beq.n	800c942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c904:	d01d      	beq.n	800c942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a1d      	ldr	r2, [pc, #116]	@ (800c980 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d018      	beq.n	800c942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a1b      	ldr	r2, [pc, #108]	@ (800c984 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d013      	beq.n	800c942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a1a      	ldr	r2, [pc, #104]	@ (800c988 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d00e      	beq.n	800c942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a18      	ldr	r2, [pc, #96]	@ (800c98c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d009      	beq.n	800c942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a17      	ldr	r2, [pc, #92]	@ (800c990 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d004      	beq.n	800c942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a15      	ldr	r2, [pc, #84]	@ (800c994 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d10c      	bne.n	800c95c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	4313      	orrs	r3, r2
 800c952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	40010000 	.word	0x40010000
 800c980:	40000400 	.word	0x40000400
 800c984:	40000800 	.word	0x40000800
 800c988:	40000c00 	.word	0x40000c00
 800c98c:	40010400 	.word	0x40010400
 800c990:	40014000 	.word	0x40014000
 800c994:	40001800 	.word	0x40001800

0800c998 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d101      	bne.n	800c9b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	e03d      	b.n	800ca30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	695b      	ldr	r3, [r3, #20]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	69db      	ldr	r3, [r3, #28]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca2e:	2300      	movs	r3, #0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca44:	bf00      	nop
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca72:	2301      	movs	r3, #1
 800ca74:	e042      	b.n	800cafc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d106      	bne.n	800ca90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7f7 ff38 	bl	8004900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2224      	movs	r2, #36	@ 0x24
 800ca94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68da      	ldr	r2, [r3, #12]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800caa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fd7f 	bl	800d5ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	691a      	ldr	r2, [r3, #16]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cabc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	695a      	ldr	r2, [r3, #20]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cacc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68da      	ldr	r2, [r3, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cadc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2220      	movs	r2, #32
 800cae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2220      	movs	r2, #32
 800caf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08a      	sub	sp, #40	@ 0x28
 800cb08:	af02      	add	r7, sp, #8
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	603b      	str	r3, [r7, #0]
 800cb10:	4613      	mov	r3, r2
 800cb12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b20      	cmp	r3, #32
 800cb22:	d175      	bne.n	800cc10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d002      	beq.n	800cb30 <HAL_UART_Transmit+0x2c>
 800cb2a:	88fb      	ldrh	r3, [r7, #6]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	e06e      	b.n	800cc12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2221      	movs	r2, #33	@ 0x21
 800cb3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb42:	f7f8 fca3 	bl	800548c <HAL_GetTick>
 800cb46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	88fa      	ldrh	r2, [r7, #6]
 800cb4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	88fa      	ldrh	r2, [r7, #6]
 800cb52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb5c:	d108      	bne.n	800cb70 <HAL_UART_Transmit+0x6c>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d104      	bne.n	800cb70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cb66:	2300      	movs	r3, #0
 800cb68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	61bb      	str	r3, [r7, #24]
 800cb6e:	e003      	b.n	800cb78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb74:	2300      	movs	r3, #0
 800cb76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cb78:	e02e      	b.n	800cbd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	2200      	movs	r2, #0
 800cb82:	2180      	movs	r1, #128	@ 0x80
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f000 fb1d 	bl	800d1c4 <UART_WaitOnFlagUntilTimeout>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d005      	beq.n	800cb9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2220      	movs	r2, #32
 800cb94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800cb98:	2303      	movs	r3, #3
 800cb9a:	e03a      	b.n	800cc12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10b      	bne.n	800cbba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	3302      	adds	r3, #2
 800cbb6:	61bb      	str	r3, [r7, #24]
 800cbb8:	e007      	b.n	800cbca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	781a      	ldrb	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1cb      	bne.n	800cb7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2140      	movs	r1, #64	@ 0x40
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f000 fae9 	bl	800d1c4 <UART_WaitOnFlagUntilTimeout>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d005      	beq.n	800cc04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2220      	movs	r2, #32
 800cbfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800cc00:	2303      	movs	r3, #3
 800cc02:	e006      	b.n	800cc12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2220      	movs	r2, #32
 800cc08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e000      	b.n	800cc12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800cc10:	2302      	movs	r3, #2
  }
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3720      	adds	r7, #32
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b0ba      	sub	sp, #232	@ 0xe8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cc42:	2300      	movs	r3, #0
 800cc44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc52:	f003 030f 	and.w	r3, r3, #15
 800cc56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cc5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10f      	bne.n	800cc82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc66:	f003 0320 	and.w	r3, r3, #32
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d009      	beq.n	800cc82 <HAL_UART_IRQHandler+0x66>
 800cc6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc72:	f003 0320 	and.w	r3, r3, #32
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d003      	beq.n	800cc82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fbd7 	bl	800d42e <UART_Receive_IT>
      return;
 800cc80:	e273      	b.n	800d16a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cc82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f000 80de 	beq.w	800ce48 <HAL_UART_IRQHandler+0x22c>
 800cc8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d106      	bne.n	800cca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 80d1 	beq.w	800ce48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00b      	beq.n	800ccca <HAL_UART_IRQHandler+0xae>
 800ccb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d005      	beq.n	800ccca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccc2:	f043 0201 	orr.w	r2, r3, #1
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccce:	f003 0304 	and.w	r3, r3, #4
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00b      	beq.n	800ccee <HAL_UART_IRQHandler+0xd2>
 800ccd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d005      	beq.n	800ccee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cce6:	f043 0202 	orr.w	r2, r3, #2
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccf2:	f003 0302 	and.w	r3, r3, #2
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <HAL_UART_IRQHandler+0xf6>
 800ccfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd0a:	f043 0204 	orr.w	r2, r3, #4
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd16:	f003 0308 	and.w	r3, r3, #8
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d011      	beq.n	800cd42 <HAL_UART_IRQHandler+0x126>
 800cd1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd22:	f003 0320 	and.w	r3, r3, #32
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d105      	bne.n	800cd36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cd2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d005      	beq.n	800cd42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd3a:	f043 0208 	orr.w	r2, r3, #8
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f000 820a 	beq.w	800d160 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd50:	f003 0320 	and.w	r3, r3, #32
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d008      	beq.n	800cd6a <HAL_UART_IRQHandler+0x14e>
 800cd58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd5c:	f003 0320 	and.w	r3, r3, #32
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fb62 	bl	800d42e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	695b      	ldr	r3, [r3, #20]
 800cd70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd74:	2b40      	cmp	r3, #64	@ 0x40
 800cd76:	bf0c      	ite	eq
 800cd78:	2301      	moveq	r3, #1
 800cd7a:	2300      	movne	r3, #0
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd86:	f003 0308 	and.w	r3, r3, #8
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d103      	bne.n	800cd96 <HAL_UART_IRQHandler+0x17a>
 800cd8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d04f      	beq.n	800ce36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fa6d 	bl	800d276 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cda6:	2b40      	cmp	r3, #64	@ 0x40
 800cda8:	d141      	bne.n	800ce2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	3314      	adds	r3, #20
 800cdb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cdb8:	e853 3f00 	ldrex	r3, [r3]
 800cdbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cdc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cdc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	3314      	adds	r3, #20
 800cdd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cdd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cdda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cde2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cde6:	e841 2300 	strex	r3, r2, [r1]
 800cdea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cdee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1d9      	bne.n	800cdaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d013      	beq.n	800ce26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce02:	4a8a      	ldr	r2, [pc, #552]	@ (800d02c <HAL_UART_IRQHandler+0x410>)
 800ce04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fa f9d2 	bl	80071b4 <HAL_DMA_Abort_IT>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d016      	beq.n	800ce44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce20:	4610      	mov	r0, r2
 800ce22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce24:	e00e      	b.n	800ce44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 f9b6 	bl	800d198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce2c:	e00a      	b.n	800ce44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f9b2 	bl	800d198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce34:	e006      	b.n	800ce44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f9ae 	bl	800d198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ce42:	e18d      	b.n	800d160 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce44:	bf00      	nop
    return;
 800ce46:	e18b      	b.n	800d160 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	f040 8167 	bne.w	800d120 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ce52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce56:	f003 0310 	and.w	r3, r3, #16
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f000 8160 	beq.w	800d120 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800ce60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce64:	f003 0310 	and.w	r3, r3, #16
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 8159 	beq.w	800d120 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60bb      	str	r3, [r7, #8]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	60bb      	str	r3, [r7, #8]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	60bb      	str	r3, [r7, #8]
 800ce82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	695b      	ldr	r3, [r3, #20]
 800ce8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce8e:	2b40      	cmp	r3, #64	@ 0x40
 800ce90:	f040 80ce 	bne.w	800d030 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 80a9 	beq.w	800cffc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ceae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	f080 80a2 	bcs.w	800cffc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cebe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cec4:	69db      	ldr	r3, [r3, #28]
 800cec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ceca:	f000 8088 	beq.w	800cfde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	330c      	adds	r3, #12
 800ced4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cedc:	e853 3f00 	ldrex	r3, [r3]
 800cee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ceec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	330c      	adds	r3, #12
 800cef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cefa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cefe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cf06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cf12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1d9      	bne.n	800cece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3314      	adds	r3, #20
 800cf20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf24:	e853 3f00 	ldrex	r3, [r3]
 800cf28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf2c:	f023 0301 	bic.w	r3, r3, #1
 800cf30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	3314      	adds	r3, #20
 800cf3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cf3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf4a:	e841 2300 	strex	r3, r2, [r1]
 800cf4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1e1      	bne.n	800cf1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3314      	adds	r3, #20
 800cf5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf60:	e853 3f00 	ldrex	r3, [r3]
 800cf64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3314      	adds	r3, #20
 800cf76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf82:	e841 2300 	strex	r3, r2, [r1]
 800cf86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1e3      	bne.n	800cf56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2220      	movs	r2, #32
 800cf92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	330c      	adds	r3, #12
 800cfa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfa6:	e853 3f00 	ldrex	r3, [r3]
 800cfaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cfac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfae:	f023 0310 	bic.w	r3, r3, #16
 800cfb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	330c      	adds	r3, #12
 800cfbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cfc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cfc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfc8:	e841 2300 	strex	r3, r2, [r1]
 800cfcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1e3      	bne.n	800cf9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fa f87b 	bl	80070d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2202      	movs	r2, #2
 800cfe2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	4619      	mov	r1, r3
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f8d9 	bl	800d1ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cffa:	e0b3      	b.n	800d164 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d000:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d004:	429a      	cmp	r2, r3
 800d006:	f040 80ad 	bne.w	800d164 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d00e:	69db      	ldr	r3, [r3, #28]
 800d010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d014:	f040 80a6 	bne.w	800d164 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2202      	movs	r2, #2
 800d01c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 f8c1 	bl	800d1ac <HAL_UARTEx_RxEventCallback>
      return;
 800d02a:	e09b      	b.n	800d164 <HAL_UART_IRQHandler+0x548>
 800d02c:	0800d33d 	.word	0x0800d33d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d038:	b29b      	uxth	r3, r3
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d044:	b29b      	uxth	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 808e 	beq.w	800d168 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800d04c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 8089 	beq.w	800d168 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	330c      	adds	r3, #12
 800d05c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d060:	e853 3f00 	ldrex	r3, [r3]
 800d064:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d06c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	330c      	adds	r3, #12
 800d076:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d07a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d07c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d082:	e841 2300 	strex	r3, r2, [r1]
 800d086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1e3      	bne.n	800d056 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	3314      	adds	r3, #20
 800d094:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d098:	e853 3f00 	ldrex	r3, [r3]
 800d09c:	623b      	str	r3, [r7, #32]
   return(result);
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	f023 0301 	bic.w	r3, r3, #1
 800d0a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3314      	adds	r3, #20
 800d0ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d0b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0ba:	e841 2300 	strex	r3, r2, [r1]
 800d0be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e3      	bne.n	800d08e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2220      	movs	r2, #32
 800d0ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	330c      	adds	r3, #12
 800d0da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	e853 3f00 	ldrex	r3, [r3]
 800d0e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f023 0310 	bic.w	r3, r3, #16
 800d0ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	330c      	adds	r3, #12
 800d0f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d0f8:	61fa      	str	r2, [r7, #28]
 800d0fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fc:	69b9      	ldr	r1, [r7, #24]
 800d0fe:	69fa      	ldr	r2, [r7, #28]
 800d100:	e841 2300 	strex	r3, r2, [r1]
 800d104:	617b      	str	r3, [r7, #20]
   return(result);
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1e3      	bne.n	800d0d4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2202      	movs	r2, #2
 800d110:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d116:	4619      	mov	r1, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f847 	bl	800d1ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d11e:	e023      	b.n	800d168 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d009      	beq.n	800d140 <HAL_UART_IRQHandler+0x524>
 800d12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f910 	bl	800d35e <UART_Transmit_IT>
    return;
 800d13e:	e014      	b.n	800d16a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00e      	beq.n	800d16a <HAL_UART_IRQHandler+0x54e>
 800d14c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d154:	2b00      	cmp	r3, #0
 800d156:	d008      	beq.n	800d16a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f950 	bl	800d3fe <UART_EndTransmit_IT>
    return;
 800d15e:	e004      	b.n	800d16a <HAL_UART_IRQHandler+0x54e>
    return;
 800d160:	bf00      	nop
 800d162:	e002      	b.n	800d16a <HAL_UART_IRQHandler+0x54e>
      return;
 800d164:	bf00      	nop
 800d166:	e000      	b.n	800d16a <HAL_UART_IRQHandler+0x54e>
      return;
 800d168:	bf00      	nop
  }
}
 800d16a:	37e8      	adds	r7, #232	@ 0xe8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	603b      	str	r3, [r7, #0]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1d4:	e03b      	b.n	800d24e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1dc:	d037      	beq.n	800d24e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1de:	f7f8 f955 	bl	800548c <HAL_GetTick>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	6a3a      	ldr	r2, [r7, #32]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d302      	bcc.n	800d1f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d101      	bne.n	800d1f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	e03a      	b.n	800d26e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	f003 0304 	and.w	r3, r3, #4
 800d202:	2b00      	cmp	r3, #0
 800d204:	d023      	beq.n	800d24e <UART_WaitOnFlagUntilTimeout+0x8a>
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2b80      	cmp	r3, #128	@ 0x80
 800d20a:	d020      	beq.n	800d24e <UART_WaitOnFlagUntilTimeout+0x8a>
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	2b40      	cmp	r3, #64	@ 0x40
 800d210:	d01d      	beq.n	800d24e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0308 	and.w	r3, r3, #8
 800d21c:	2b08      	cmp	r3, #8
 800d21e:	d116      	bne.n	800d24e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d220:	2300      	movs	r3, #0
 800d222:	617b      	str	r3, [r7, #20]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	617b      	str	r3, [r7, #20]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	617b      	str	r3, [r7, #20]
 800d234:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 f81d 	bl	800d276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2208      	movs	r2, #8
 800d240:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e00f      	b.n	800d26e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	4013      	ands	r3, r2
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	bf0c      	ite	eq
 800d25e:	2301      	moveq	r3, #1
 800d260:	2300      	movne	r3, #0
 800d262:	b2db      	uxtb	r3, r3
 800d264:	461a      	mov	r2, r3
 800d266:	79fb      	ldrb	r3, [r7, #7]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d0b4      	beq.n	800d1d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d276:	b480      	push	{r7}
 800d278:	b095      	sub	sp, #84	@ 0x54
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	330c      	adds	r3, #12
 800d284:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d288:	e853 3f00 	ldrex	r3, [r3]
 800d28c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	330c      	adds	r3, #12
 800d29c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d29e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d2a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d2a6:	e841 2300 	strex	r3, r2, [r1]
 800d2aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1e5      	bne.n	800d27e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	e853 3f00 	ldrex	r3, [r3]
 800d2c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	f023 0301 	bic.w	r3, r3, #1
 800d2c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3314      	adds	r3, #20
 800d2d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d2d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2da:	e841 2300 	strex	r3, r2, [r1]
 800d2de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1e5      	bne.n	800d2b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d119      	bne.n	800d322 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	330c      	adds	r3, #12
 800d2f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	e853 3f00 	ldrex	r3, [r3]
 800d2fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	f023 0310 	bic.w	r3, r3, #16
 800d304:	647b      	str	r3, [r7, #68]	@ 0x44
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	330c      	adds	r3, #12
 800d30c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d30e:	61ba      	str	r2, [r7, #24]
 800d310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d312:	6979      	ldr	r1, [r7, #20]
 800d314:	69ba      	ldr	r2, [r7, #24]
 800d316:	e841 2300 	strex	r3, r2, [r1]
 800d31a:	613b      	str	r3, [r7, #16]
   return(result);
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1e5      	bne.n	800d2ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2220      	movs	r2, #32
 800d326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d330:	bf00      	nop
 800d332:	3754      	adds	r7, #84	@ 0x54
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f7ff ff21 	bl	800d198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d356:	bf00      	nop
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d35e:	b480      	push	{r7}
 800d360:	b085      	sub	sp, #20
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b21      	cmp	r3, #33	@ 0x21
 800d370:	d13e      	bne.n	800d3f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d37a:	d114      	bne.n	800d3a6 <UART_Transmit_IT+0x48>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d110      	bne.n	800d3a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	461a      	mov	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d398:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a1b      	ldr	r3, [r3, #32]
 800d39e:	1c9a      	adds	r2, r3, #2
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	621a      	str	r2, [r3, #32]
 800d3a4:	e008      	b.n	800d3b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a1b      	ldr	r3, [r3, #32]
 800d3aa:	1c59      	adds	r1, r3, #1
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	6211      	str	r1, [r2, #32]
 800d3b0:	781a      	ldrb	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10f      	bne.n	800d3ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68da      	ldr	r2, [r3, #12]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d3da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68da      	ldr	r2, [r3, #12]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d3ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	e000      	b.n	800d3f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d3f0:	2302      	movs	r3, #2
  }
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3714      	adds	r7, #20
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b082      	sub	sp, #8
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68da      	ldr	r2, [r3, #12]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d414:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2220      	movs	r2, #32
 800d41a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f7ff fea6 	bl	800d170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3708      	adds	r7, #8
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	b08c      	sub	sp, #48	@ 0x30
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800d436:	2300      	movs	r3, #0
 800d438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b22      	cmp	r3, #34	@ 0x22
 800d448:	f040 80aa 	bne.w	800d5a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d454:	d115      	bne.n	800d482 <UART_Receive_IT+0x54>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d111      	bne.n	800d482 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d462:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d470:	b29a      	uxth	r2, r3
 800d472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d474:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d47a:	1c9a      	adds	r2, r3, #2
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	629a      	str	r2, [r3, #40]	@ 0x28
 800d480:	e024      	b.n	800d4cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d486:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d490:	d007      	beq.n	800d4a2 <UART_Receive_IT+0x74>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10a      	bne.n	800d4b0 <UART_Receive_IT+0x82>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d106      	bne.n	800d4b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	b2da      	uxtb	r2, r3
 800d4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	e008      	b.n	800d4c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	4619      	mov	r1, r3
 800d4da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d15d      	bne.n	800d59c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68da      	ldr	r2, [r3, #12]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f022 0220 	bic.w	r2, r2, #32
 800d4ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	68da      	ldr	r2, [r3, #12]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d4fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	695a      	ldr	r2, [r3, #20]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f022 0201 	bic.w	r2, r2, #1
 800d50e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2220      	movs	r2, #32
 800d514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d522:	2b01      	cmp	r3, #1
 800d524:	d135      	bne.n	800d592 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	330c      	adds	r3, #12
 800d532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	e853 3f00 	ldrex	r3, [r3]
 800d53a:	613b      	str	r3, [r7, #16]
   return(result);
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	f023 0310 	bic.w	r3, r3, #16
 800d542:	627b      	str	r3, [r7, #36]	@ 0x24
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	330c      	adds	r3, #12
 800d54a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d54c:	623a      	str	r2, [r7, #32]
 800d54e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d550:	69f9      	ldr	r1, [r7, #28]
 800d552:	6a3a      	ldr	r2, [r7, #32]
 800d554:	e841 2300 	strex	r3, r2, [r1]
 800d558:	61bb      	str	r3, [r7, #24]
   return(result);
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1e5      	bne.n	800d52c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 0310 	and.w	r3, r3, #16
 800d56a:	2b10      	cmp	r3, #16
 800d56c:	d10a      	bne.n	800d584 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d56e:	2300      	movs	r3, #0
 800d570:	60fb      	str	r3, [r7, #12]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	60fb      	str	r3, [r7, #12]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	60fb      	str	r3, [r7, #12]
 800d582:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d588:	4619      	mov	r1, r3
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7ff fe0e 	bl	800d1ac <HAL_UARTEx_RxEventCallback>
 800d590:	e002      	b.n	800d598 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff fdf6 	bl	800d184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d598:	2300      	movs	r3, #0
 800d59a:	e002      	b.n	800d5a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	e000      	b.n	800d5a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d5a0:	2302      	movs	r3, #2
  }
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3730      	adds	r7, #48	@ 0x30
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
	...

0800d5ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5b0:	b0c0      	sub	sp, #256	@ 0x100
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5c8:	68d9      	ldr	r1, [r3, #12]
 800d5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	ea40 0301 	orr.w	r3, r0, r1
 800d5d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5da:	689a      	ldr	r2, [r3, #8]
 800d5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	431a      	orrs	r2, r3
 800d5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5e8:	695b      	ldr	r3, [r3, #20]
 800d5ea:	431a      	orrs	r2, r3
 800d5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d604:	f021 010c 	bic.w	r1, r1, #12
 800d608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d612:	430b      	orrs	r3, r1
 800d614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	695b      	ldr	r3, [r3, #20]
 800d61e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d626:	6999      	ldr	r1, [r3, #24]
 800d628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	ea40 0301 	orr.w	r3, r0, r1
 800d632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	4b8f      	ldr	r3, [pc, #572]	@ (800d878 <UART_SetConfig+0x2cc>)
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d005      	beq.n	800d64c <UART_SetConfig+0xa0>
 800d640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	4b8d      	ldr	r3, [pc, #564]	@ (800d87c <UART_SetConfig+0x2d0>)
 800d648:	429a      	cmp	r2, r3
 800d64a:	d104      	bne.n	800d656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d64c:	f7fd fa76 	bl	800ab3c <HAL_RCC_GetPCLK2Freq>
 800d650:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d654:	e003      	b.n	800d65e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d656:	f7fd fa5d 	bl	800ab14 <HAL_RCC_GetPCLK1Freq>
 800d65a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d662:	69db      	ldr	r3, [r3, #28]
 800d664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d668:	f040 810c 	bne.w	800d884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d66c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d670:	2200      	movs	r2, #0
 800d672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d676:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d67a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d67e:	4622      	mov	r2, r4
 800d680:	462b      	mov	r3, r5
 800d682:	1891      	adds	r1, r2, r2
 800d684:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d686:	415b      	adcs	r3, r3
 800d688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d68a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d68e:	4621      	mov	r1, r4
 800d690:	eb12 0801 	adds.w	r8, r2, r1
 800d694:	4629      	mov	r1, r5
 800d696:	eb43 0901 	adc.w	r9, r3, r1
 800d69a:	f04f 0200 	mov.w	r2, #0
 800d69e:	f04f 0300 	mov.w	r3, #0
 800d6a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d6a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d6aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d6ae:	4690      	mov	r8, r2
 800d6b0:	4699      	mov	r9, r3
 800d6b2:	4623      	mov	r3, r4
 800d6b4:	eb18 0303 	adds.w	r3, r8, r3
 800d6b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d6bc:	462b      	mov	r3, r5
 800d6be:	eb49 0303 	adc.w	r3, r9, r3
 800d6c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d6d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d6d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d6da:	460b      	mov	r3, r1
 800d6dc:	18db      	adds	r3, r3, r3
 800d6de:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	eb42 0303 	adc.w	r3, r2, r3
 800d6e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d6ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d6f0:	f7f3 faaa 	bl	8000c48 <__aeabi_uldivmod>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	4b61      	ldr	r3, [pc, #388]	@ (800d880 <UART_SetConfig+0x2d4>)
 800d6fa:	fba3 2302 	umull	r2, r3, r3, r2
 800d6fe:	095b      	lsrs	r3, r3, #5
 800d700:	011c      	lsls	r4, r3, #4
 800d702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d706:	2200      	movs	r2, #0
 800d708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d70c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d714:	4642      	mov	r2, r8
 800d716:	464b      	mov	r3, r9
 800d718:	1891      	adds	r1, r2, r2
 800d71a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d71c:	415b      	adcs	r3, r3
 800d71e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d724:	4641      	mov	r1, r8
 800d726:	eb12 0a01 	adds.w	sl, r2, r1
 800d72a:	4649      	mov	r1, r9
 800d72c:	eb43 0b01 	adc.w	fp, r3, r1
 800d730:	f04f 0200 	mov.w	r2, #0
 800d734:	f04f 0300 	mov.w	r3, #0
 800d738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d73c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d744:	4692      	mov	sl, r2
 800d746:	469b      	mov	fp, r3
 800d748:	4643      	mov	r3, r8
 800d74a:	eb1a 0303 	adds.w	r3, sl, r3
 800d74e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d752:	464b      	mov	r3, r9
 800d754:	eb4b 0303 	adc.w	r3, fp, r3
 800d758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d768:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d76c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d770:	460b      	mov	r3, r1
 800d772:	18db      	adds	r3, r3, r3
 800d774:	643b      	str	r3, [r7, #64]	@ 0x40
 800d776:	4613      	mov	r3, r2
 800d778:	eb42 0303 	adc.w	r3, r2, r3
 800d77c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d77e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d786:	f7f3 fa5f 	bl	8000c48 <__aeabi_uldivmod>
 800d78a:	4602      	mov	r2, r0
 800d78c:	460b      	mov	r3, r1
 800d78e:	4611      	mov	r1, r2
 800d790:	4b3b      	ldr	r3, [pc, #236]	@ (800d880 <UART_SetConfig+0x2d4>)
 800d792:	fba3 2301 	umull	r2, r3, r3, r1
 800d796:	095b      	lsrs	r3, r3, #5
 800d798:	2264      	movs	r2, #100	@ 0x64
 800d79a:	fb02 f303 	mul.w	r3, r2, r3
 800d79e:	1acb      	subs	r3, r1, r3
 800d7a0:	00db      	lsls	r3, r3, #3
 800d7a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d7a6:	4b36      	ldr	r3, [pc, #216]	@ (800d880 <UART_SetConfig+0x2d4>)
 800d7a8:	fba3 2302 	umull	r2, r3, r3, r2
 800d7ac:	095b      	lsrs	r3, r3, #5
 800d7ae:	005b      	lsls	r3, r3, #1
 800d7b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d7b4:	441c      	add	r4, r3
 800d7b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d7c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d7c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	1891      	adds	r1, r2, r2
 800d7ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d7d0:	415b      	adcs	r3, r3
 800d7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d7d8:	4641      	mov	r1, r8
 800d7da:	1851      	adds	r1, r2, r1
 800d7dc:	6339      	str	r1, [r7, #48]	@ 0x30
 800d7de:	4649      	mov	r1, r9
 800d7e0:	414b      	adcs	r3, r1
 800d7e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7e4:	f04f 0200 	mov.w	r2, #0
 800d7e8:	f04f 0300 	mov.w	r3, #0
 800d7ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d7f0:	4659      	mov	r1, fp
 800d7f2:	00cb      	lsls	r3, r1, #3
 800d7f4:	4651      	mov	r1, sl
 800d7f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d7fa:	4651      	mov	r1, sl
 800d7fc:	00ca      	lsls	r2, r1, #3
 800d7fe:	4610      	mov	r0, r2
 800d800:	4619      	mov	r1, r3
 800d802:	4603      	mov	r3, r0
 800d804:	4642      	mov	r2, r8
 800d806:	189b      	adds	r3, r3, r2
 800d808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d80c:	464b      	mov	r3, r9
 800d80e:	460a      	mov	r2, r1
 800d810:	eb42 0303 	adc.w	r3, r2, r3
 800d814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d824:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d82c:	460b      	mov	r3, r1
 800d82e:	18db      	adds	r3, r3, r3
 800d830:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d832:	4613      	mov	r3, r2
 800d834:	eb42 0303 	adc.w	r3, r2, r3
 800d838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d83a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d83e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d842:	f7f3 fa01 	bl	8000c48 <__aeabi_uldivmod>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4b0d      	ldr	r3, [pc, #52]	@ (800d880 <UART_SetConfig+0x2d4>)
 800d84c:	fba3 1302 	umull	r1, r3, r3, r2
 800d850:	095b      	lsrs	r3, r3, #5
 800d852:	2164      	movs	r1, #100	@ 0x64
 800d854:	fb01 f303 	mul.w	r3, r1, r3
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	3332      	adds	r3, #50	@ 0x32
 800d85e:	4a08      	ldr	r2, [pc, #32]	@ (800d880 <UART_SetConfig+0x2d4>)
 800d860:	fba2 2303 	umull	r2, r3, r2, r3
 800d864:	095b      	lsrs	r3, r3, #5
 800d866:	f003 0207 	and.w	r2, r3, #7
 800d86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4422      	add	r2, r4
 800d872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d874:	e106      	b.n	800da84 <UART_SetConfig+0x4d8>
 800d876:	bf00      	nop
 800d878:	40011000 	.word	0x40011000
 800d87c:	40011400 	.word	0x40011400
 800d880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d888:	2200      	movs	r2, #0
 800d88a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d88e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d896:	4642      	mov	r2, r8
 800d898:	464b      	mov	r3, r9
 800d89a:	1891      	adds	r1, r2, r2
 800d89c:	6239      	str	r1, [r7, #32]
 800d89e:	415b      	adcs	r3, r3
 800d8a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d8a6:	4641      	mov	r1, r8
 800d8a8:	1854      	adds	r4, r2, r1
 800d8aa:	4649      	mov	r1, r9
 800d8ac:	eb43 0501 	adc.w	r5, r3, r1
 800d8b0:	f04f 0200 	mov.w	r2, #0
 800d8b4:	f04f 0300 	mov.w	r3, #0
 800d8b8:	00eb      	lsls	r3, r5, #3
 800d8ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d8be:	00e2      	lsls	r2, r4, #3
 800d8c0:	4614      	mov	r4, r2
 800d8c2:	461d      	mov	r5, r3
 800d8c4:	4643      	mov	r3, r8
 800d8c6:	18e3      	adds	r3, r4, r3
 800d8c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d8cc:	464b      	mov	r3, r9
 800d8ce:	eb45 0303 	adc.w	r3, r5, r3
 800d8d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d8e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d8e6:	f04f 0200 	mov.w	r2, #0
 800d8ea:	f04f 0300 	mov.w	r3, #0
 800d8ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	008b      	lsls	r3, r1, #2
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	008a      	lsls	r2, r1, #2
 800d900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d904:	f7f3 f9a0 	bl	8000c48 <__aeabi_uldivmod>
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	4b60      	ldr	r3, [pc, #384]	@ (800da90 <UART_SetConfig+0x4e4>)
 800d90e:	fba3 2302 	umull	r2, r3, r3, r2
 800d912:	095b      	lsrs	r3, r3, #5
 800d914:	011c      	lsls	r4, r3, #4
 800d916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d91a:	2200      	movs	r2, #0
 800d91c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d920:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d928:	4642      	mov	r2, r8
 800d92a:	464b      	mov	r3, r9
 800d92c:	1891      	adds	r1, r2, r2
 800d92e:	61b9      	str	r1, [r7, #24]
 800d930:	415b      	adcs	r3, r3
 800d932:	61fb      	str	r3, [r7, #28]
 800d934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d938:	4641      	mov	r1, r8
 800d93a:	1851      	adds	r1, r2, r1
 800d93c:	6139      	str	r1, [r7, #16]
 800d93e:	4649      	mov	r1, r9
 800d940:	414b      	adcs	r3, r1
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	f04f 0200 	mov.w	r2, #0
 800d948:	f04f 0300 	mov.w	r3, #0
 800d94c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d950:	4659      	mov	r1, fp
 800d952:	00cb      	lsls	r3, r1, #3
 800d954:	4651      	mov	r1, sl
 800d956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d95a:	4651      	mov	r1, sl
 800d95c:	00ca      	lsls	r2, r1, #3
 800d95e:	4610      	mov	r0, r2
 800d960:	4619      	mov	r1, r3
 800d962:	4603      	mov	r3, r0
 800d964:	4642      	mov	r2, r8
 800d966:	189b      	adds	r3, r3, r2
 800d968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d96c:	464b      	mov	r3, r9
 800d96e:	460a      	mov	r2, r1
 800d970:	eb42 0303 	adc.w	r3, r2, r3
 800d974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d984:	f04f 0200 	mov.w	r2, #0
 800d988:	f04f 0300 	mov.w	r3, #0
 800d98c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d990:	4649      	mov	r1, r9
 800d992:	008b      	lsls	r3, r1, #2
 800d994:	4641      	mov	r1, r8
 800d996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d99a:	4641      	mov	r1, r8
 800d99c:	008a      	lsls	r2, r1, #2
 800d99e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d9a2:	f7f3 f951 	bl	8000c48 <__aeabi_uldivmod>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4b38      	ldr	r3, [pc, #224]	@ (800da90 <UART_SetConfig+0x4e4>)
 800d9ae:	fba3 2301 	umull	r2, r3, r3, r1
 800d9b2:	095b      	lsrs	r3, r3, #5
 800d9b4:	2264      	movs	r2, #100	@ 0x64
 800d9b6:	fb02 f303 	mul.w	r3, r2, r3
 800d9ba:	1acb      	subs	r3, r1, r3
 800d9bc:	011b      	lsls	r3, r3, #4
 800d9be:	3332      	adds	r3, #50	@ 0x32
 800d9c0:	4a33      	ldr	r2, [pc, #204]	@ (800da90 <UART_SetConfig+0x4e4>)
 800d9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c6:	095b      	lsrs	r3, r3, #5
 800d9c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d9cc:	441c      	add	r4, r3
 800d9ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d9d6:	677a      	str	r2, [r7, #116]	@ 0x74
 800d9d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d9dc:	4642      	mov	r2, r8
 800d9de:	464b      	mov	r3, r9
 800d9e0:	1891      	adds	r1, r2, r2
 800d9e2:	60b9      	str	r1, [r7, #8]
 800d9e4:	415b      	adcs	r3, r3
 800d9e6:	60fb      	str	r3, [r7, #12]
 800d9e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d9ec:	4641      	mov	r1, r8
 800d9ee:	1851      	adds	r1, r2, r1
 800d9f0:	6039      	str	r1, [r7, #0]
 800d9f2:	4649      	mov	r1, r9
 800d9f4:	414b      	adcs	r3, r1
 800d9f6:	607b      	str	r3, [r7, #4]
 800d9f8:	f04f 0200 	mov.w	r2, #0
 800d9fc:	f04f 0300 	mov.w	r3, #0
 800da00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800da04:	4659      	mov	r1, fp
 800da06:	00cb      	lsls	r3, r1, #3
 800da08:	4651      	mov	r1, sl
 800da0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800da0e:	4651      	mov	r1, sl
 800da10:	00ca      	lsls	r2, r1, #3
 800da12:	4610      	mov	r0, r2
 800da14:	4619      	mov	r1, r3
 800da16:	4603      	mov	r3, r0
 800da18:	4642      	mov	r2, r8
 800da1a:	189b      	adds	r3, r3, r2
 800da1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800da1e:	464b      	mov	r3, r9
 800da20:	460a      	mov	r2, r1
 800da22:	eb42 0303 	adc.w	r3, r2, r3
 800da26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800da28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	663b      	str	r3, [r7, #96]	@ 0x60
 800da32:	667a      	str	r2, [r7, #100]	@ 0x64
 800da34:	f04f 0200 	mov.w	r2, #0
 800da38:	f04f 0300 	mov.w	r3, #0
 800da3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800da40:	4649      	mov	r1, r9
 800da42:	008b      	lsls	r3, r1, #2
 800da44:	4641      	mov	r1, r8
 800da46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800da4a:	4641      	mov	r1, r8
 800da4c:	008a      	lsls	r2, r1, #2
 800da4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800da52:	f7f3 f8f9 	bl	8000c48 <__aeabi_uldivmod>
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	4b0d      	ldr	r3, [pc, #52]	@ (800da90 <UART_SetConfig+0x4e4>)
 800da5c:	fba3 1302 	umull	r1, r3, r3, r2
 800da60:	095b      	lsrs	r3, r3, #5
 800da62:	2164      	movs	r1, #100	@ 0x64
 800da64:	fb01 f303 	mul.w	r3, r1, r3
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	011b      	lsls	r3, r3, #4
 800da6c:	3332      	adds	r3, #50	@ 0x32
 800da6e:	4a08      	ldr	r2, [pc, #32]	@ (800da90 <UART_SetConfig+0x4e4>)
 800da70:	fba2 2303 	umull	r2, r3, r2, r3
 800da74:	095b      	lsrs	r3, r3, #5
 800da76:	f003 020f 	and.w	r2, r3, #15
 800da7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4422      	add	r2, r4
 800da82:	609a      	str	r2, [r3, #8]
}
 800da84:	bf00      	nop
 800da86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800da8a:	46bd      	mov	sp, r7
 800da8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800da90:	51eb851f 	.word	0x51eb851f

0800da94 <__cvt>:
 800da94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da98:	ec57 6b10 	vmov	r6, r7, d0
 800da9c:	2f00      	cmp	r7, #0
 800da9e:	460c      	mov	r4, r1
 800daa0:	4619      	mov	r1, r3
 800daa2:	463b      	mov	r3, r7
 800daa4:	bfbb      	ittet	lt
 800daa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800daaa:	461f      	movlt	r7, r3
 800daac:	2300      	movge	r3, #0
 800daae:	232d      	movlt	r3, #45	@ 0x2d
 800dab0:	700b      	strb	r3, [r1, #0]
 800dab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dab4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dab8:	4691      	mov	r9, r2
 800daba:	f023 0820 	bic.w	r8, r3, #32
 800dabe:	bfbc      	itt	lt
 800dac0:	4632      	movlt	r2, r6
 800dac2:	4616      	movlt	r6, r2
 800dac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dac8:	d005      	beq.n	800dad6 <__cvt+0x42>
 800daca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dace:	d100      	bne.n	800dad2 <__cvt+0x3e>
 800dad0:	3401      	adds	r4, #1
 800dad2:	2102      	movs	r1, #2
 800dad4:	e000      	b.n	800dad8 <__cvt+0x44>
 800dad6:	2103      	movs	r1, #3
 800dad8:	ab03      	add	r3, sp, #12
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	ab02      	add	r3, sp, #8
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	ec47 6b10 	vmov	d0, r6, r7
 800dae4:	4653      	mov	r3, sl
 800dae6:	4622      	mov	r2, r4
 800dae8:	f000 ffa2 	bl	800ea30 <_dtoa_r>
 800daec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800daf0:	4605      	mov	r5, r0
 800daf2:	d119      	bne.n	800db28 <__cvt+0x94>
 800daf4:	f019 0f01 	tst.w	r9, #1
 800daf8:	d00e      	beq.n	800db18 <__cvt+0x84>
 800dafa:	eb00 0904 	add.w	r9, r0, r4
 800dafe:	2200      	movs	r2, #0
 800db00:	2300      	movs	r3, #0
 800db02:	4630      	mov	r0, r6
 800db04:	4639      	mov	r1, r7
 800db06:	f7f2 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800db0a:	b108      	cbz	r0, 800db10 <__cvt+0x7c>
 800db0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800db10:	2230      	movs	r2, #48	@ 0x30
 800db12:	9b03      	ldr	r3, [sp, #12]
 800db14:	454b      	cmp	r3, r9
 800db16:	d31e      	bcc.n	800db56 <__cvt+0xc2>
 800db18:	9b03      	ldr	r3, [sp, #12]
 800db1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db1c:	1b5b      	subs	r3, r3, r5
 800db1e:	4628      	mov	r0, r5
 800db20:	6013      	str	r3, [r2, #0]
 800db22:	b004      	add	sp, #16
 800db24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800db2c:	eb00 0904 	add.w	r9, r0, r4
 800db30:	d1e5      	bne.n	800dafe <__cvt+0x6a>
 800db32:	7803      	ldrb	r3, [r0, #0]
 800db34:	2b30      	cmp	r3, #48	@ 0x30
 800db36:	d10a      	bne.n	800db4e <__cvt+0xba>
 800db38:	2200      	movs	r2, #0
 800db3a:	2300      	movs	r3, #0
 800db3c:	4630      	mov	r0, r6
 800db3e:	4639      	mov	r1, r7
 800db40:	f7f2 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800db44:	b918      	cbnz	r0, 800db4e <__cvt+0xba>
 800db46:	f1c4 0401 	rsb	r4, r4, #1
 800db4a:	f8ca 4000 	str.w	r4, [sl]
 800db4e:	f8da 3000 	ldr.w	r3, [sl]
 800db52:	4499      	add	r9, r3
 800db54:	e7d3      	b.n	800dafe <__cvt+0x6a>
 800db56:	1c59      	adds	r1, r3, #1
 800db58:	9103      	str	r1, [sp, #12]
 800db5a:	701a      	strb	r2, [r3, #0]
 800db5c:	e7d9      	b.n	800db12 <__cvt+0x7e>

0800db5e <__exponent>:
 800db5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db60:	2900      	cmp	r1, #0
 800db62:	bfba      	itte	lt
 800db64:	4249      	neglt	r1, r1
 800db66:	232d      	movlt	r3, #45	@ 0x2d
 800db68:	232b      	movge	r3, #43	@ 0x2b
 800db6a:	2909      	cmp	r1, #9
 800db6c:	7002      	strb	r2, [r0, #0]
 800db6e:	7043      	strb	r3, [r0, #1]
 800db70:	dd29      	ble.n	800dbc6 <__exponent+0x68>
 800db72:	f10d 0307 	add.w	r3, sp, #7
 800db76:	461d      	mov	r5, r3
 800db78:	270a      	movs	r7, #10
 800db7a:	461a      	mov	r2, r3
 800db7c:	fbb1 f6f7 	udiv	r6, r1, r7
 800db80:	fb07 1416 	mls	r4, r7, r6, r1
 800db84:	3430      	adds	r4, #48	@ 0x30
 800db86:	f802 4c01 	strb.w	r4, [r2, #-1]
 800db8a:	460c      	mov	r4, r1
 800db8c:	2c63      	cmp	r4, #99	@ 0x63
 800db8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800db92:	4631      	mov	r1, r6
 800db94:	dcf1      	bgt.n	800db7a <__exponent+0x1c>
 800db96:	3130      	adds	r1, #48	@ 0x30
 800db98:	1e94      	subs	r4, r2, #2
 800db9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800db9e:	1c41      	adds	r1, r0, #1
 800dba0:	4623      	mov	r3, r4
 800dba2:	42ab      	cmp	r3, r5
 800dba4:	d30a      	bcc.n	800dbbc <__exponent+0x5e>
 800dba6:	f10d 0309 	add.w	r3, sp, #9
 800dbaa:	1a9b      	subs	r3, r3, r2
 800dbac:	42ac      	cmp	r4, r5
 800dbae:	bf88      	it	hi
 800dbb0:	2300      	movhi	r3, #0
 800dbb2:	3302      	adds	r3, #2
 800dbb4:	4403      	add	r3, r0
 800dbb6:	1a18      	subs	r0, r3, r0
 800dbb8:	b003      	add	sp, #12
 800dbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dbc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dbc4:	e7ed      	b.n	800dba2 <__exponent+0x44>
 800dbc6:	2330      	movs	r3, #48	@ 0x30
 800dbc8:	3130      	adds	r1, #48	@ 0x30
 800dbca:	7083      	strb	r3, [r0, #2]
 800dbcc:	70c1      	strb	r1, [r0, #3]
 800dbce:	1d03      	adds	r3, r0, #4
 800dbd0:	e7f1      	b.n	800dbb6 <__exponent+0x58>
	...

0800dbd4 <_printf_float>:
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	b08d      	sub	sp, #52	@ 0x34
 800dbda:	460c      	mov	r4, r1
 800dbdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dbe0:	4616      	mov	r6, r2
 800dbe2:	461f      	mov	r7, r3
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	f000 fe13 	bl	800e810 <_localeconv_r>
 800dbea:	6803      	ldr	r3, [r0, #0]
 800dbec:	9304      	str	r3, [sp, #16]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7f2 fb3e 	bl	8000270 <strlen>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbf8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbfc:	9005      	str	r0, [sp, #20]
 800dbfe:	3307      	adds	r3, #7
 800dc00:	f023 0307 	bic.w	r3, r3, #7
 800dc04:	f103 0208 	add.w	r2, r3, #8
 800dc08:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dc0c:	f8d4 b000 	ldr.w	fp, [r4]
 800dc10:	f8c8 2000 	str.w	r2, [r8]
 800dc14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dc1c:	9307      	str	r3, [sp, #28]
 800dc1e:	f8cd 8018 	str.w	r8, [sp, #24]
 800dc22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dc26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc2a:	4b9c      	ldr	r3, [pc, #624]	@ (800de9c <_printf_float+0x2c8>)
 800dc2c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc30:	f7f2 ff7c 	bl	8000b2c <__aeabi_dcmpun>
 800dc34:	bb70      	cbnz	r0, 800dc94 <_printf_float+0xc0>
 800dc36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc3a:	4b98      	ldr	r3, [pc, #608]	@ (800de9c <_printf_float+0x2c8>)
 800dc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc40:	f7f2 ff56 	bl	8000af0 <__aeabi_dcmple>
 800dc44:	bb30      	cbnz	r0, 800dc94 <_printf_float+0xc0>
 800dc46:	2200      	movs	r2, #0
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	4649      	mov	r1, r9
 800dc4e:	f7f2 ff45 	bl	8000adc <__aeabi_dcmplt>
 800dc52:	b110      	cbz	r0, 800dc5a <_printf_float+0x86>
 800dc54:	232d      	movs	r3, #45	@ 0x2d
 800dc56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc5a:	4a91      	ldr	r2, [pc, #580]	@ (800dea0 <_printf_float+0x2cc>)
 800dc5c:	4b91      	ldr	r3, [pc, #580]	@ (800dea4 <_printf_float+0x2d0>)
 800dc5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dc62:	bf8c      	ite	hi
 800dc64:	4690      	movhi	r8, r2
 800dc66:	4698      	movls	r8, r3
 800dc68:	2303      	movs	r3, #3
 800dc6a:	6123      	str	r3, [r4, #16]
 800dc6c:	f02b 0304 	bic.w	r3, fp, #4
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	f04f 0900 	mov.w	r9, #0
 800dc76:	9700      	str	r7, [sp, #0]
 800dc78:	4633      	mov	r3, r6
 800dc7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dc7c:	4621      	mov	r1, r4
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f000 f9d2 	bl	800e028 <_printf_common>
 800dc84:	3001      	adds	r0, #1
 800dc86:	f040 808d 	bne.w	800dda4 <_printf_float+0x1d0>
 800dc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8e:	b00d      	add	sp, #52	@ 0x34
 800dc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc94:	4642      	mov	r2, r8
 800dc96:	464b      	mov	r3, r9
 800dc98:	4640      	mov	r0, r8
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	f7f2 ff46 	bl	8000b2c <__aeabi_dcmpun>
 800dca0:	b140      	cbz	r0, 800dcb4 <_printf_float+0xe0>
 800dca2:	464b      	mov	r3, r9
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	bfbc      	itt	lt
 800dca8:	232d      	movlt	r3, #45	@ 0x2d
 800dcaa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dcae:	4a7e      	ldr	r2, [pc, #504]	@ (800dea8 <_printf_float+0x2d4>)
 800dcb0:	4b7e      	ldr	r3, [pc, #504]	@ (800deac <_printf_float+0x2d8>)
 800dcb2:	e7d4      	b.n	800dc5e <_printf_float+0x8a>
 800dcb4:	6863      	ldr	r3, [r4, #4]
 800dcb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dcba:	9206      	str	r2, [sp, #24]
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	d13b      	bne.n	800dd38 <_printf_float+0x164>
 800dcc0:	2306      	movs	r3, #6
 800dcc2:	6063      	str	r3, [r4, #4]
 800dcc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dcc8:	2300      	movs	r3, #0
 800dcca:	6022      	str	r2, [r4, #0]
 800dccc:	9303      	str	r3, [sp, #12]
 800dcce:	ab0a      	add	r3, sp, #40	@ 0x28
 800dcd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dcd4:	ab09      	add	r3, sp, #36	@ 0x24
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	6861      	ldr	r1, [r4, #4]
 800dcda:	ec49 8b10 	vmov	d0, r8, r9
 800dcde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dce2:	4628      	mov	r0, r5
 800dce4:	f7ff fed6 	bl	800da94 <__cvt>
 800dce8:	9b06      	ldr	r3, [sp, #24]
 800dcea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dcec:	2b47      	cmp	r3, #71	@ 0x47
 800dcee:	4680      	mov	r8, r0
 800dcf0:	d129      	bne.n	800dd46 <_printf_float+0x172>
 800dcf2:	1cc8      	adds	r0, r1, #3
 800dcf4:	db02      	blt.n	800dcfc <_printf_float+0x128>
 800dcf6:	6863      	ldr	r3, [r4, #4]
 800dcf8:	4299      	cmp	r1, r3
 800dcfa:	dd41      	ble.n	800dd80 <_printf_float+0x1ac>
 800dcfc:	f1aa 0a02 	sub.w	sl, sl, #2
 800dd00:	fa5f fa8a 	uxtb.w	sl, sl
 800dd04:	3901      	subs	r1, #1
 800dd06:	4652      	mov	r2, sl
 800dd08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dd0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd0e:	f7ff ff26 	bl	800db5e <__exponent>
 800dd12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd14:	1813      	adds	r3, r2, r0
 800dd16:	2a01      	cmp	r2, #1
 800dd18:	4681      	mov	r9, r0
 800dd1a:	6123      	str	r3, [r4, #16]
 800dd1c:	dc02      	bgt.n	800dd24 <_printf_float+0x150>
 800dd1e:	6822      	ldr	r2, [r4, #0]
 800dd20:	07d2      	lsls	r2, r2, #31
 800dd22:	d501      	bpl.n	800dd28 <_printf_float+0x154>
 800dd24:	3301      	adds	r3, #1
 800dd26:	6123      	str	r3, [r4, #16]
 800dd28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d0a2      	beq.n	800dc76 <_printf_float+0xa2>
 800dd30:	232d      	movs	r3, #45	@ 0x2d
 800dd32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd36:	e79e      	b.n	800dc76 <_printf_float+0xa2>
 800dd38:	9a06      	ldr	r2, [sp, #24]
 800dd3a:	2a47      	cmp	r2, #71	@ 0x47
 800dd3c:	d1c2      	bne.n	800dcc4 <_printf_float+0xf0>
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1c0      	bne.n	800dcc4 <_printf_float+0xf0>
 800dd42:	2301      	movs	r3, #1
 800dd44:	e7bd      	b.n	800dcc2 <_printf_float+0xee>
 800dd46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dd4a:	d9db      	bls.n	800dd04 <_printf_float+0x130>
 800dd4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dd50:	d118      	bne.n	800dd84 <_printf_float+0x1b0>
 800dd52:	2900      	cmp	r1, #0
 800dd54:	6863      	ldr	r3, [r4, #4]
 800dd56:	dd0b      	ble.n	800dd70 <_printf_float+0x19c>
 800dd58:	6121      	str	r1, [r4, #16]
 800dd5a:	b913      	cbnz	r3, 800dd62 <_printf_float+0x18e>
 800dd5c:	6822      	ldr	r2, [r4, #0]
 800dd5e:	07d0      	lsls	r0, r2, #31
 800dd60:	d502      	bpl.n	800dd68 <_printf_float+0x194>
 800dd62:	3301      	adds	r3, #1
 800dd64:	440b      	add	r3, r1
 800dd66:	6123      	str	r3, [r4, #16]
 800dd68:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dd6a:	f04f 0900 	mov.w	r9, #0
 800dd6e:	e7db      	b.n	800dd28 <_printf_float+0x154>
 800dd70:	b913      	cbnz	r3, 800dd78 <_printf_float+0x1a4>
 800dd72:	6822      	ldr	r2, [r4, #0]
 800dd74:	07d2      	lsls	r2, r2, #31
 800dd76:	d501      	bpl.n	800dd7c <_printf_float+0x1a8>
 800dd78:	3302      	adds	r3, #2
 800dd7a:	e7f4      	b.n	800dd66 <_printf_float+0x192>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e7f2      	b.n	800dd66 <_printf_float+0x192>
 800dd80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dd84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd86:	4299      	cmp	r1, r3
 800dd88:	db05      	blt.n	800dd96 <_printf_float+0x1c2>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	6121      	str	r1, [r4, #16]
 800dd8e:	07d8      	lsls	r0, r3, #31
 800dd90:	d5ea      	bpl.n	800dd68 <_printf_float+0x194>
 800dd92:	1c4b      	adds	r3, r1, #1
 800dd94:	e7e7      	b.n	800dd66 <_printf_float+0x192>
 800dd96:	2900      	cmp	r1, #0
 800dd98:	bfd4      	ite	le
 800dd9a:	f1c1 0202 	rsble	r2, r1, #2
 800dd9e:	2201      	movgt	r2, #1
 800dda0:	4413      	add	r3, r2
 800dda2:	e7e0      	b.n	800dd66 <_printf_float+0x192>
 800dda4:	6823      	ldr	r3, [r4, #0]
 800dda6:	055a      	lsls	r2, r3, #21
 800dda8:	d407      	bmi.n	800ddba <_printf_float+0x1e6>
 800ddaa:	6923      	ldr	r3, [r4, #16]
 800ddac:	4642      	mov	r2, r8
 800ddae:	4631      	mov	r1, r6
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	47b8      	blx	r7
 800ddb4:	3001      	adds	r0, #1
 800ddb6:	d12b      	bne.n	800de10 <_printf_float+0x23c>
 800ddb8:	e767      	b.n	800dc8a <_printf_float+0xb6>
 800ddba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ddbe:	f240 80dd 	bls.w	800df7c <_printf_float+0x3a8>
 800ddc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	2300      	movs	r3, #0
 800ddca:	f7f2 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d033      	beq.n	800de3a <_printf_float+0x266>
 800ddd2:	4a37      	ldr	r2, [pc, #220]	@ (800deb0 <_printf_float+0x2dc>)
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	4631      	mov	r1, r6
 800ddd8:	4628      	mov	r0, r5
 800ddda:	47b8      	blx	r7
 800dddc:	3001      	adds	r0, #1
 800ddde:	f43f af54 	beq.w	800dc8a <_printf_float+0xb6>
 800dde2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dde6:	4543      	cmp	r3, r8
 800dde8:	db02      	blt.n	800ddf0 <_printf_float+0x21c>
 800ddea:	6823      	ldr	r3, [r4, #0]
 800ddec:	07d8      	lsls	r0, r3, #31
 800ddee:	d50f      	bpl.n	800de10 <_printf_float+0x23c>
 800ddf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddf4:	4631      	mov	r1, r6
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	47b8      	blx	r7
 800ddfa:	3001      	adds	r0, #1
 800ddfc:	f43f af45 	beq.w	800dc8a <_printf_float+0xb6>
 800de00:	f04f 0900 	mov.w	r9, #0
 800de04:	f108 38ff 	add.w	r8, r8, #4294967295
 800de08:	f104 0a1a 	add.w	sl, r4, #26
 800de0c:	45c8      	cmp	r8, r9
 800de0e:	dc09      	bgt.n	800de24 <_printf_float+0x250>
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	079b      	lsls	r3, r3, #30
 800de14:	f100 8103 	bmi.w	800e01e <_printf_float+0x44a>
 800de18:	68e0      	ldr	r0, [r4, #12]
 800de1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de1c:	4298      	cmp	r0, r3
 800de1e:	bfb8      	it	lt
 800de20:	4618      	movlt	r0, r3
 800de22:	e734      	b.n	800dc8e <_printf_float+0xba>
 800de24:	2301      	movs	r3, #1
 800de26:	4652      	mov	r2, sl
 800de28:	4631      	mov	r1, r6
 800de2a:	4628      	mov	r0, r5
 800de2c:	47b8      	blx	r7
 800de2e:	3001      	adds	r0, #1
 800de30:	f43f af2b 	beq.w	800dc8a <_printf_float+0xb6>
 800de34:	f109 0901 	add.w	r9, r9, #1
 800de38:	e7e8      	b.n	800de0c <_printf_float+0x238>
 800de3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	dc39      	bgt.n	800deb4 <_printf_float+0x2e0>
 800de40:	4a1b      	ldr	r2, [pc, #108]	@ (800deb0 <_printf_float+0x2dc>)
 800de42:	2301      	movs	r3, #1
 800de44:	4631      	mov	r1, r6
 800de46:	4628      	mov	r0, r5
 800de48:	47b8      	blx	r7
 800de4a:	3001      	adds	r0, #1
 800de4c:	f43f af1d 	beq.w	800dc8a <_printf_float+0xb6>
 800de50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800de54:	ea59 0303 	orrs.w	r3, r9, r3
 800de58:	d102      	bne.n	800de60 <_printf_float+0x28c>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	07d9      	lsls	r1, r3, #31
 800de5e:	d5d7      	bpl.n	800de10 <_printf_float+0x23c>
 800de60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de64:	4631      	mov	r1, r6
 800de66:	4628      	mov	r0, r5
 800de68:	47b8      	blx	r7
 800de6a:	3001      	adds	r0, #1
 800de6c:	f43f af0d 	beq.w	800dc8a <_printf_float+0xb6>
 800de70:	f04f 0a00 	mov.w	sl, #0
 800de74:	f104 0b1a 	add.w	fp, r4, #26
 800de78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de7a:	425b      	negs	r3, r3
 800de7c:	4553      	cmp	r3, sl
 800de7e:	dc01      	bgt.n	800de84 <_printf_float+0x2b0>
 800de80:	464b      	mov	r3, r9
 800de82:	e793      	b.n	800ddac <_printf_float+0x1d8>
 800de84:	2301      	movs	r3, #1
 800de86:	465a      	mov	r2, fp
 800de88:	4631      	mov	r1, r6
 800de8a:	4628      	mov	r0, r5
 800de8c:	47b8      	blx	r7
 800de8e:	3001      	adds	r0, #1
 800de90:	f43f aefb 	beq.w	800dc8a <_printf_float+0xb6>
 800de94:	f10a 0a01 	add.w	sl, sl, #1
 800de98:	e7ee      	b.n	800de78 <_printf_float+0x2a4>
 800de9a:	bf00      	nop
 800de9c:	7fefffff 	.word	0x7fefffff
 800dea0:	08011b9c 	.word	0x08011b9c
 800dea4:	08011b98 	.word	0x08011b98
 800dea8:	08011ba4 	.word	0x08011ba4
 800deac:	08011ba0 	.word	0x08011ba0
 800deb0:	08011ba8 	.word	0x08011ba8
 800deb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800deb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800deba:	4553      	cmp	r3, sl
 800debc:	bfa8      	it	ge
 800debe:	4653      	movge	r3, sl
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	4699      	mov	r9, r3
 800dec4:	dc36      	bgt.n	800df34 <_printf_float+0x360>
 800dec6:	f04f 0b00 	mov.w	fp, #0
 800deca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dece:	f104 021a 	add.w	r2, r4, #26
 800ded2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ded4:	9306      	str	r3, [sp, #24]
 800ded6:	eba3 0309 	sub.w	r3, r3, r9
 800deda:	455b      	cmp	r3, fp
 800dedc:	dc31      	bgt.n	800df42 <_printf_float+0x36e>
 800dede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dee0:	459a      	cmp	sl, r3
 800dee2:	dc3a      	bgt.n	800df5a <_printf_float+0x386>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	07da      	lsls	r2, r3, #31
 800dee8:	d437      	bmi.n	800df5a <_printf_float+0x386>
 800deea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deec:	ebaa 0903 	sub.w	r9, sl, r3
 800def0:	9b06      	ldr	r3, [sp, #24]
 800def2:	ebaa 0303 	sub.w	r3, sl, r3
 800def6:	4599      	cmp	r9, r3
 800def8:	bfa8      	it	ge
 800defa:	4699      	movge	r9, r3
 800defc:	f1b9 0f00 	cmp.w	r9, #0
 800df00:	dc33      	bgt.n	800df6a <_printf_float+0x396>
 800df02:	f04f 0800 	mov.w	r8, #0
 800df06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df0a:	f104 0b1a 	add.w	fp, r4, #26
 800df0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df10:	ebaa 0303 	sub.w	r3, sl, r3
 800df14:	eba3 0309 	sub.w	r3, r3, r9
 800df18:	4543      	cmp	r3, r8
 800df1a:	f77f af79 	ble.w	800de10 <_printf_float+0x23c>
 800df1e:	2301      	movs	r3, #1
 800df20:	465a      	mov	r2, fp
 800df22:	4631      	mov	r1, r6
 800df24:	4628      	mov	r0, r5
 800df26:	47b8      	blx	r7
 800df28:	3001      	adds	r0, #1
 800df2a:	f43f aeae 	beq.w	800dc8a <_printf_float+0xb6>
 800df2e:	f108 0801 	add.w	r8, r8, #1
 800df32:	e7ec      	b.n	800df0e <_printf_float+0x33a>
 800df34:	4642      	mov	r2, r8
 800df36:	4631      	mov	r1, r6
 800df38:	4628      	mov	r0, r5
 800df3a:	47b8      	blx	r7
 800df3c:	3001      	adds	r0, #1
 800df3e:	d1c2      	bne.n	800dec6 <_printf_float+0x2f2>
 800df40:	e6a3      	b.n	800dc8a <_printf_float+0xb6>
 800df42:	2301      	movs	r3, #1
 800df44:	4631      	mov	r1, r6
 800df46:	4628      	mov	r0, r5
 800df48:	9206      	str	r2, [sp, #24]
 800df4a:	47b8      	blx	r7
 800df4c:	3001      	adds	r0, #1
 800df4e:	f43f ae9c 	beq.w	800dc8a <_printf_float+0xb6>
 800df52:	9a06      	ldr	r2, [sp, #24]
 800df54:	f10b 0b01 	add.w	fp, fp, #1
 800df58:	e7bb      	b.n	800ded2 <_printf_float+0x2fe>
 800df5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df5e:	4631      	mov	r1, r6
 800df60:	4628      	mov	r0, r5
 800df62:	47b8      	blx	r7
 800df64:	3001      	adds	r0, #1
 800df66:	d1c0      	bne.n	800deea <_printf_float+0x316>
 800df68:	e68f      	b.n	800dc8a <_printf_float+0xb6>
 800df6a:	9a06      	ldr	r2, [sp, #24]
 800df6c:	464b      	mov	r3, r9
 800df6e:	4442      	add	r2, r8
 800df70:	4631      	mov	r1, r6
 800df72:	4628      	mov	r0, r5
 800df74:	47b8      	blx	r7
 800df76:	3001      	adds	r0, #1
 800df78:	d1c3      	bne.n	800df02 <_printf_float+0x32e>
 800df7a:	e686      	b.n	800dc8a <_printf_float+0xb6>
 800df7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800df80:	f1ba 0f01 	cmp.w	sl, #1
 800df84:	dc01      	bgt.n	800df8a <_printf_float+0x3b6>
 800df86:	07db      	lsls	r3, r3, #31
 800df88:	d536      	bpl.n	800dff8 <_printf_float+0x424>
 800df8a:	2301      	movs	r3, #1
 800df8c:	4642      	mov	r2, r8
 800df8e:	4631      	mov	r1, r6
 800df90:	4628      	mov	r0, r5
 800df92:	47b8      	blx	r7
 800df94:	3001      	adds	r0, #1
 800df96:	f43f ae78 	beq.w	800dc8a <_printf_float+0xb6>
 800df9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df9e:	4631      	mov	r1, r6
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	47b8      	blx	r7
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	f43f ae70 	beq.w	800dc8a <_printf_float+0xb6>
 800dfaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dfae:	2200      	movs	r2, #0
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dfb6:	f7f2 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfba:	b9c0      	cbnz	r0, 800dfee <_printf_float+0x41a>
 800dfbc:	4653      	mov	r3, sl
 800dfbe:	f108 0201 	add.w	r2, r8, #1
 800dfc2:	4631      	mov	r1, r6
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	47b8      	blx	r7
 800dfc8:	3001      	adds	r0, #1
 800dfca:	d10c      	bne.n	800dfe6 <_printf_float+0x412>
 800dfcc:	e65d      	b.n	800dc8a <_printf_float+0xb6>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	465a      	mov	r2, fp
 800dfd2:	4631      	mov	r1, r6
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	47b8      	blx	r7
 800dfd8:	3001      	adds	r0, #1
 800dfda:	f43f ae56 	beq.w	800dc8a <_printf_float+0xb6>
 800dfde:	f108 0801 	add.w	r8, r8, #1
 800dfe2:	45d0      	cmp	r8, sl
 800dfe4:	dbf3      	blt.n	800dfce <_printf_float+0x3fa>
 800dfe6:	464b      	mov	r3, r9
 800dfe8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dfec:	e6df      	b.n	800ddae <_printf_float+0x1da>
 800dfee:	f04f 0800 	mov.w	r8, #0
 800dff2:	f104 0b1a 	add.w	fp, r4, #26
 800dff6:	e7f4      	b.n	800dfe2 <_printf_float+0x40e>
 800dff8:	2301      	movs	r3, #1
 800dffa:	4642      	mov	r2, r8
 800dffc:	e7e1      	b.n	800dfc2 <_printf_float+0x3ee>
 800dffe:	2301      	movs	r3, #1
 800e000:	464a      	mov	r2, r9
 800e002:	4631      	mov	r1, r6
 800e004:	4628      	mov	r0, r5
 800e006:	47b8      	blx	r7
 800e008:	3001      	adds	r0, #1
 800e00a:	f43f ae3e 	beq.w	800dc8a <_printf_float+0xb6>
 800e00e:	f108 0801 	add.w	r8, r8, #1
 800e012:	68e3      	ldr	r3, [r4, #12]
 800e014:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e016:	1a5b      	subs	r3, r3, r1
 800e018:	4543      	cmp	r3, r8
 800e01a:	dcf0      	bgt.n	800dffe <_printf_float+0x42a>
 800e01c:	e6fc      	b.n	800de18 <_printf_float+0x244>
 800e01e:	f04f 0800 	mov.w	r8, #0
 800e022:	f104 0919 	add.w	r9, r4, #25
 800e026:	e7f4      	b.n	800e012 <_printf_float+0x43e>

0800e028 <_printf_common>:
 800e028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e02c:	4616      	mov	r6, r2
 800e02e:	4698      	mov	r8, r3
 800e030:	688a      	ldr	r2, [r1, #8]
 800e032:	690b      	ldr	r3, [r1, #16]
 800e034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e038:	4293      	cmp	r3, r2
 800e03a:	bfb8      	it	lt
 800e03c:	4613      	movlt	r3, r2
 800e03e:	6033      	str	r3, [r6, #0]
 800e040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e044:	4607      	mov	r7, r0
 800e046:	460c      	mov	r4, r1
 800e048:	b10a      	cbz	r2, 800e04e <_printf_common+0x26>
 800e04a:	3301      	adds	r3, #1
 800e04c:	6033      	str	r3, [r6, #0]
 800e04e:	6823      	ldr	r3, [r4, #0]
 800e050:	0699      	lsls	r1, r3, #26
 800e052:	bf42      	ittt	mi
 800e054:	6833      	ldrmi	r3, [r6, #0]
 800e056:	3302      	addmi	r3, #2
 800e058:	6033      	strmi	r3, [r6, #0]
 800e05a:	6825      	ldr	r5, [r4, #0]
 800e05c:	f015 0506 	ands.w	r5, r5, #6
 800e060:	d106      	bne.n	800e070 <_printf_common+0x48>
 800e062:	f104 0a19 	add.w	sl, r4, #25
 800e066:	68e3      	ldr	r3, [r4, #12]
 800e068:	6832      	ldr	r2, [r6, #0]
 800e06a:	1a9b      	subs	r3, r3, r2
 800e06c:	42ab      	cmp	r3, r5
 800e06e:	dc26      	bgt.n	800e0be <_printf_common+0x96>
 800e070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e074:	6822      	ldr	r2, [r4, #0]
 800e076:	3b00      	subs	r3, #0
 800e078:	bf18      	it	ne
 800e07a:	2301      	movne	r3, #1
 800e07c:	0692      	lsls	r2, r2, #26
 800e07e:	d42b      	bmi.n	800e0d8 <_printf_common+0xb0>
 800e080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e084:	4641      	mov	r1, r8
 800e086:	4638      	mov	r0, r7
 800e088:	47c8      	blx	r9
 800e08a:	3001      	adds	r0, #1
 800e08c:	d01e      	beq.n	800e0cc <_printf_common+0xa4>
 800e08e:	6823      	ldr	r3, [r4, #0]
 800e090:	6922      	ldr	r2, [r4, #16]
 800e092:	f003 0306 	and.w	r3, r3, #6
 800e096:	2b04      	cmp	r3, #4
 800e098:	bf02      	ittt	eq
 800e09a:	68e5      	ldreq	r5, [r4, #12]
 800e09c:	6833      	ldreq	r3, [r6, #0]
 800e09e:	1aed      	subeq	r5, r5, r3
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	bf0c      	ite	eq
 800e0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e0a8:	2500      	movne	r5, #0
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	bfc4      	itt	gt
 800e0ae:	1a9b      	subgt	r3, r3, r2
 800e0b0:	18ed      	addgt	r5, r5, r3
 800e0b2:	2600      	movs	r6, #0
 800e0b4:	341a      	adds	r4, #26
 800e0b6:	42b5      	cmp	r5, r6
 800e0b8:	d11a      	bne.n	800e0f0 <_printf_common+0xc8>
 800e0ba:	2000      	movs	r0, #0
 800e0bc:	e008      	b.n	800e0d0 <_printf_common+0xa8>
 800e0be:	2301      	movs	r3, #1
 800e0c0:	4652      	mov	r2, sl
 800e0c2:	4641      	mov	r1, r8
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	47c8      	blx	r9
 800e0c8:	3001      	adds	r0, #1
 800e0ca:	d103      	bne.n	800e0d4 <_printf_common+0xac>
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d4:	3501      	adds	r5, #1
 800e0d6:	e7c6      	b.n	800e066 <_printf_common+0x3e>
 800e0d8:	18e1      	adds	r1, r4, r3
 800e0da:	1c5a      	adds	r2, r3, #1
 800e0dc:	2030      	movs	r0, #48	@ 0x30
 800e0de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e0e2:	4422      	add	r2, r4
 800e0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e0e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e0ec:	3302      	adds	r3, #2
 800e0ee:	e7c7      	b.n	800e080 <_printf_common+0x58>
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	4641      	mov	r1, r8
 800e0f6:	4638      	mov	r0, r7
 800e0f8:	47c8      	blx	r9
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	d0e6      	beq.n	800e0cc <_printf_common+0xa4>
 800e0fe:	3601      	adds	r6, #1
 800e100:	e7d9      	b.n	800e0b6 <_printf_common+0x8e>
	...

0800e104 <_printf_i>:
 800e104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e108:	7e0f      	ldrb	r7, [r1, #24]
 800e10a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e10c:	2f78      	cmp	r7, #120	@ 0x78
 800e10e:	4691      	mov	r9, r2
 800e110:	4680      	mov	r8, r0
 800e112:	460c      	mov	r4, r1
 800e114:	469a      	mov	sl, r3
 800e116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e11a:	d807      	bhi.n	800e12c <_printf_i+0x28>
 800e11c:	2f62      	cmp	r7, #98	@ 0x62
 800e11e:	d80a      	bhi.n	800e136 <_printf_i+0x32>
 800e120:	2f00      	cmp	r7, #0
 800e122:	f000 80d1 	beq.w	800e2c8 <_printf_i+0x1c4>
 800e126:	2f58      	cmp	r7, #88	@ 0x58
 800e128:	f000 80b8 	beq.w	800e29c <_printf_i+0x198>
 800e12c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e134:	e03a      	b.n	800e1ac <_printf_i+0xa8>
 800e136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e13a:	2b15      	cmp	r3, #21
 800e13c:	d8f6      	bhi.n	800e12c <_printf_i+0x28>
 800e13e:	a101      	add	r1, pc, #4	@ (adr r1, 800e144 <_printf_i+0x40>)
 800e140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e144:	0800e19d 	.word	0x0800e19d
 800e148:	0800e1b1 	.word	0x0800e1b1
 800e14c:	0800e12d 	.word	0x0800e12d
 800e150:	0800e12d 	.word	0x0800e12d
 800e154:	0800e12d 	.word	0x0800e12d
 800e158:	0800e12d 	.word	0x0800e12d
 800e15c:	0800e1b1 	.word	0x0800e1b1
 800e160:	0800e12d 	.word	0x0800e12d
 800e164:	0800e12d 	.word	0x0800e12d
 800e168:	0800e12d 	.word	0x0800e12d
 800e16c:	0800e12d 	.word	0x0800e12d
 800e170:	0800e2af 	.word	0x0800e2af
 800e174:	0800e1db 	.word	0x0800e1db
 800e178:	0800e269 	.word	0x0800e269
 800e17c:	0800e12d 	.word	0x0800e12d
 800e180:	0800e12d 	.word	0x0800e12d
 800e184:	0800e2d1 	.word	0x0800e2d1
 800e188:	0800e12d 	.word	0x0800e12d
 800e18c:	0800e1db 	.word	0x0800e1db
 800e190:	0800e12d 	.word	0x0800e12d
 800e194:	0800e12d 	.word	0x0800e12d
 800e198:	0800e271 	.word	0x0800e271
 800e19c:	6833      	ldr	r3, [r6, #0]
 800e19e:	1d1a      	adds	r2, r3, #4
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	6032      	str	r2, [r6, #0]
 800e1a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e1a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e09c      	b.n	800e2ea <_printf_i+0x1e6>
 800e1b0:	6833      	ldr	r3, [r6, #0]
 800e1b2:	6820      	ldr	r0, [r4, #0]
 800e1b4:	1d19      	adds	r1, r3, #4
 800e1b6:	6031      	str	r1, [r6, #0]
 800e1b8:	0606      	lsls	r6, r0, #24
 800e1ba:	d501      	bpl.n	800e1c0 <_printf_i+0xbc>
 800e1bc:	681d      	ldr	r5, [r3, #0]
 800e1be:	e003      	b.n	800e1c8 <_printf_i+0xc4>
 800e1c0:	0645      	lsls	r5, r0, #25
 800e1c2:	d5fb      	bpl.n	800e1bc <_printf_i+0xb8>
 800e1c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e1c8:	2d00      	cmp	r5, #0
 800e1ca:	da03      	bge.n	800e1d4 <_printf_i+0xd0>
 800e1cc:	232d      	movs	r3, #45	@ 0x2d
 800e1ce:	426d      	negs	r5, r5
 800e1d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1d4:	4858      	ldr	r0, [pc, #352]	@ (800e338 <_printf_i+0x234>)
 800e1d6:	230a      	movs	r3, #10
 800e1d8:	e011      	b.n	800e1fe <_printf_i+0xfa>
 800e1da:	6821      	ldr	r1, [r4, #0]
 800e1dc:	6833      	ldr	r3, [r6, #0]
 800e1de:	0608      	lsls	r0, r1, #24
 800e1e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e1e4:	d402      	bmi.n	800e1ec <_printf_i+0xe8>
 800e1e6:	0649      	lsls	r1, r1, #25
 800e1e8:	bf48      	it	mi
 800e1ea:	b2ad      	uxthmi	r5, r5
 800e1ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800e1ee:	4852      	ldr	r0, [pc, #328]	@ (800e338 <_printf_i+0x234>)
 800e1f0:	6033      	str	r3, [r6, #0]
 800e1f2:	bf14      	ite	ne
 800e1f4:	230a      	movne	r3, #10
 800e1f6:	2308      	moveq	r3, #8
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e1fe:	6866      	ldr	r6, [r4, #4]
 800e200:	60a6      	str	r6, [r4, #8]
 800e202:	2e00      	cmp	r6, #0
 800e204:	db05      	blt.n	800e212 <_printf_i+0x10e>
 800e206:	6821      	ldr	r1, [r4, #0]
 800e208:	432e      	orrs	r6, r5
 800e20a:	f021 0104 	bic.w	r1, r1, #4
 800e20e:	6021      	str	r1, [r4, #0]
 800e210:	d04b      	beq.n	800e2aa <_printf_i+0x1a6>
 800e212:	4616      	mov	r6, r2
 800e214:	fbb5 f1f3 	udiv	r1, r5, r3
 800e218:	fb03 5711 	mls	r7, r3, r1, r5
 800e21c:	5dc7      	ldrb	r7, [r0, r7]
 800e21e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e222:	462f      	mov	r7, r5
 800e224:	42bb      	cmp	r3, r7
 800e226:	460d      	mov	r5, r1
 800e228:	d9f4      	bls.n	800e214 <_printf_i+0x110>
 800e22a:	2b08      	cmp	r3, #8
 800e22c:	d10b      	bne.n	800e246 <_printf_i+0x142>
 800e22e:	6823      	ldr	r3, [r4, #0]
 800e230:	07df      	lsls	r7, r3, #31
 800e232:	d508      	bpl.n	800e246 <_printf_i+0x142>
 800e234:	6923      	ldr	r3, [r4, #16]
 800e236:	6861      	ldr	r1, [r4, #4]
 800e238:	4299      	cmp	r1, r3
 800e23a:	bfde      	ittt	le
 800e23c:	2330      	movle	r3, #48	@ 0x30
 800e23e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e242:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e246:	1b92      	subs	r2, r2, r6
 800e248:	6122      	str	r2, [r4, #16]
 800e24a:	f8cd a000 	str.w	sl, [sp]
 800e24e:	464b      	mov	r3, r9
 800e250:	aa03      	add	r2, sp, #12
 800e252:	4621      	mov	r1, r4
 800e254:	4640      	mov	r0, r8
 800e256:	f7ff fee7 	bl	800e028 <_printf_common>
 800e25a:	3001      	adds	r0, #1
 800e25c:	d14a      	bne.n	800e2f4 <_printf_i+0x1f0>
 800e25e:	f04f 30ff 	mov.w	r0, #4294967295
 800e262:	b004      	add	sp, #16
 800e264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e268:	6823      	ldr	r3, [r4, #0]
 800e26a:	f043 0320 	orr.w	r3, r3, #32
 800e26e:	6023      	str	r3, [r4, #0]
 800e270:	4832      	ldr	r0, [pc, #200]	@ (800e33c <_printf_i+0x238>)
 800e272:	2778      	movs	r7, #120	@ 0x78
 800e274:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	6831      	ldr	r1, [r6, #0]
 800e27c:	061f      	lsls	r7, r3, #24
 800e27e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e282:	d402      	bmi.n	800e28a <_printf_i+0x186>
 800e284:	065f      	lsls	r7, r3, #25
 800e286:	bf48      	it	mi
 800e288:	b2ad      	uxthmi	r5, r5
 800e28a:	6031      	str	r1, [r6, #0]
 800e28c:	07d9      	lsls	r1, r3, #31
 800e28e:	bf44      	itt	mi
 800e290:	f043 0320 	orrmi.w	r3, r3, #32
 800e294:	6023      	strmi	r3, [r4, #0]
 800e296:	b11d      	cbz	r5, 800e2a0 <_printf_i+0x19c>
 800e298:	2310      	movs	r3, #16
 800e29a:	e7ad      	b.n	800e1f8 <_printf_i+0xf4>
 800e29c:	4826      	ldr	r0, [pc, #152]	@ (800e338 <_printf_i+0x234>)
 800e29e:	e7e9      	b.n	800e274 <_printf_i+0x170>
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	f023 0320 	bic.w	r3, r3, #32
 800e2a6:	6023      	str	r3, [r4, #0]
 800e2a8:	e7f6      	b.n	800e298 <_printf_i+0x194>
 800e2aa:	4616      	mov	r6, r2
 800e2ac:	e7bd      	b.n	800e22a <_printf_i+0x126>
 800e2ae:	6833      	ldr	r3, [r6, #0]
 800e2b0:	6825      	ldr	r5, [r4, #0]
 800e2b2:	6961      	ldr	r1, [r4, #20]
 800e2b4:	1d18      	adds	r0, r3, #4
 800e2b6:	6030      	str	r0, [r6, #0]
 800e2b8:	062e      	lsls	r6, r5, #24
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	d501      	bpl.n	800e2c2 <_printf_i+0x1be>
 800e2be:	6019      	str	r1, [r3, #0]
 800e2c0:	e002      	b.n	800e2c8 <_printf_i+0x1c4>
 800e2c2:	0668      	lsls	r0, r5, #25
 800e2c4:	d5fb      	bpl.n	800e2be <_printf_i+0x1ba>
 800e2c6:	8019      	strh	r1, [r3, #0]
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	6123      	str	r3, [r4, #16]
 800e2cc:	4616      	mov	r6, r2
 800e2ce:	e7bc      	b.n	800e24a <_printf_i+0x146>
 800e2d0:	6833      	ldr	r3, [r6, #0]
 800e2d2:	1d1a      	adds	r2, r3, #4
 800e2d4:	6032      	str	r2, [r6, #0]
 800e2d6:	681e      	ldr	r6, [r3, #0]
 800e2d8:	6862      	ldr	r2, [r4, #4]
 800e2da:	2100      	movs	r1, #0
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f7f1 ff77 	bl	80001d0 <memchr>
 800e2e2:	b108      	cbz	r0, 800e2e8 <_printf_i+0x1e4>
 800e2e4:	1b80      	subs	r0, r0, r6
 800e2e6:	6060      	str	r0, [r4, #4]
 800e2e8:	6863      	ldr	r3, [r4, #4]
 800e2ea:	6123      	str	r3, [r4, #16]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2f2:	e7aa      	b.n	800e24a <_printf_i+0x146>
 800e2f4:	6923      	ldr	r3, [r4, #16]
 800e2f6:	4632      	mov	r2, r6
 800e2f8:	4649      	mov	r1, r9
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	47d0      	blx	sl
 800e2fe:	3001      	adds	r0, #1
 800e300:	d0ad      	beq.n	800e25e <_printf_i+0x15a>
 800e302:	6823      	ldr	r3, [r4, #0]
 800e304:	079b      	lsls	r3, r3, #30
 800e306:	d413      	bmi.n	800e330 <_printf_i+0x22c>
 800e308:	68e0      	ldr	r0, [r4, #12]
 800e30a:	9b03      	ldr	r3, [sp, #12]
 800e30c:	4298      	cmp	r0, r3
 800e30e:	bfb8      	it	lt
 800e310:	4618      	movlt	r0, r3
 800e312:	e7a6      	b.n	800e262 <_printf_i+0x15e>
 800e314:	2301      	movs	r3, #1
 800e316:	4632      	mov	r2, r6
 800e318:	4649      	mov	r1, r9
 800e31a:	4640      	mov	r0, r8
 800e31c:	47d0      	blx	sl
 800e31e:	3001      	adds	r0, #1
 800e320:	d09d      	beq.n	800e25e <_printf_i+0x15a>
 800e322:	3501      	adds	r5, #1
 800e324:	68e3      	ldr	r3, [r4, #12]
 800e326:	9903      	ldr	r1, [sp, #12]
 800e328:	1a5b      	subs	r3, r3, r1
 800e32a:	42ab      	cmp	r3, r5
 800e32c:	dcf2      	bgt.n	800e314 <_printf_i+0x210>
 800e32e:	e7eb      	b.n	800e308 <_printf_i+0x204>
 800e330:	2500      	movs	r5, #0
 800e332:	f104 0619 	add.w	r6, r4, #25
 800e336:	e7f5      	b.n	800e324 <_printf_i+0x220>
 800e338:	08011baa 	.word	0x08011baa
 800e33c:	08011bbb 	.word	0x08011bbb

0800e340 <std>:
 800e340:	2300      	movs	r3, #0
 800e342:	b510      	push	{r4, lr}
 800e344:	4604      	mov	r4, r0
 800e346:	e9c0 3300 	strd	r3, r3, [r0]
 800e34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e34e:	6083      	str	r3, [r0, #8]
 800e350:	8181      	strh	r1, [r0, #12]
 800e352:	6643      	str	r3, [r0, #100]	@ 0x64
 800e354:	81c2      	strh	r2, [r0, #14]
 800e356:	6183      	str	r3, [r0, #24]
 800e358:	4619      	mov	r1, r3
 800e35a:	2208      	movs	r2, #8
 800e35c:	305c      	adds	r0, #92	@ 0x5c
 800e35e:	f000 fa4f 	bl	800e800 <memset>
 800e362:	4b0d      	ldr	r3, [pc, #52]	@ (800e398 <std+0x58>)
 800e364:	6263      	str	r3, [r4, #36]	@ 0x24
 800e366:	4b0d      	ldr	r3, [pc, #52]	@ (800e39c <std+0x5c>)
 800e368:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e36a:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a0 <std+0x60>)
 800e36c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e36e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a4 <std+0x64>)
 800e370:	6323      	str	r3, [r4, #48]	@ 0x30
 800e372:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a8 <std+0x68>)
 800e374:	6224      	str	r4, [r4, #32]
 800e376:	429c      	cmp	r4, r3
 800e378:	d006      	beq.n	800e388 <std+0x48>
 800e37a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e37e:	4294      	cmp	r4, r2
 800e380:	d002      	beq.n	800e388 <std+0x48>
 800e382:	33d0      	adds	r3, #208	@ 0xd0
 800e384:	429c      	cmp	r4, r3
 800e386:	d105      	bne.n	800e394 <std+0x54>
 800e388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e390:	f000 bab2 	b.w	800e8f8 <__retarget_lock_init_recursive>
 800e394:	bd10      	pop	{r4, pc}
 800e396:	bf00      	nop
 800e398:	0800e631 	.word	0x0800e631
 800e39c:	0800e653 	.word	0x0800e653
 800e3a0:	0800e68b 	.word	0x0800e68b
 800e3a4:	0800e6af 	.word	0x0800e6af
 800e3a8:	200017ec 	.word	0x200017ec

0800e3ac <stdio_exit_handler>:
 800e3ac:	4a02      	ldr	r2, [pc, #8]	@ (800e3b8 <stdio_exit_handler+0xc>)
 800e3ae:	4903      	ldr	r1, [pc, #12]	@ (800e3bc <stdio_exit_handler+0x10>)
 800e3b0:	4803      	ldr	r0, [pc, #12]	@ (800e3c0 <stdio_exit_handler+0x14>)
 800e3b2:	f000 b869 	b.w	800e488 <_fwalk_sglue>
 800e3b6:	bf00      	nop
 800e3b8:	20000134 	.word	0x20000134
 800e3bc:	08010501 	.word	0x08010501
 800e3c0:	20000144 	.word	0x20000144

0800e3c4 <cleanup_stdio>:
 800e3c4:	6841      	ldr	r1, [r0, #4]
 800e3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e3f8 <cleanup_stdio+0x34>)
 800e3c8:	4299      	cmp	r1, r3
 800e3ca:	b510      	push	{r4, lr}
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	d001      	beq.n	800e3d4 <cleanup_stdio+0x10>
 800e3d0:	f002 f896 	bl	8010500 <_fflush_r>
 800e3d4:	68a1      	ldr	r1, [r4, #8]
 800e3d6:	4b09      	ldr	r3, [pc, #36]	@ (800e3fc <cleanup_stdio+0x38>)
 800e3d8:	4299      	cmp	r1, r3
 800e3da:	d002      	beq.n	800e3e2 <cleanup_stdio+0x1e>
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f002 f88f 	bl	8010500 <_fflush_r>
 800e3e2:	68e1      	ldr	r1, [r4, #12]
 800e3e4:	4b06      	ldr	r3, [pc, #24]	@ (800e400 <cleanup_stdio+0x3c>)
 800e3e6:	4299      	cmp	r1, r3
 800e3e8:	d004      	beq.n	800e3f4 <cleanup_stdio+0x30>
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3f0:	f002 b886 	b.w	8010500 <_fflush_r>
 800e3f4:	bd10      	pop	{r4, pc}
 800e3f6:	bf00      	nop
 800e3f8:	200017ec 	.word	0x200017ec
 800e3fc:	20001854 	.word	0x20001854
 800e400:	200018bc 	.word	0x200018bc

0800e404 <global_stdio_init.part.0>:
 800e404:	b510      	push	{r4, lr}
 800e406:	4b0b      	ldr	r3, [pc, #44]	@ (800e434 <global_stdio_init.part.0+0x30>)
 800e408:	4c0b      	ldr	r4, [pc, #44]	@ (800e438 <global_stdio_init.part.0+0x34>)
 800e40a:	4a0c      	ldr	r2, [pc, #48]	@ (800e43c <global_stdio_init.part.0+0x38>)
 800e40c:	601a      	str	r2, [r3, #0]
 800e40e:	4620      	mov	r0, r4
 800e410:	2200      	movs	r2, #0
 800e412:	2104      	movs	r1, #4
 800e414:	f7ff ff94 	bl	800e340 <std>
 800e418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e41c:	2201      	movs	r2, #1
 800e41e:	2109      	movs	r1, #9
 800e420:	f7ff ff8e 	bl	800e340 <std>
 800e424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e428:	2202      	movs	r2, #2
 800e42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e42e:	2112      	movs	r1, #18
 800e430:	f7ff bf86 	b.w	800e340 <std>
 800e434:	20001924 	.word	0x20001924
 800e438:	200017ec 	.word	0x200017ec
 800e43c:	0800e3ad 	.word	0x0800e3ad

0800e440 <__sfp_lock_acquire>:
 800e440:	4801      	ldr	r0, [pc, #4]	@ (800e448 <__sfp_lock_acquire+0x8>)
 800e442:	f000 ba5a 	b.w	800e8fa <__retarget_lock_acquire_recursive>
 800e446:	bf00      	nop
 800e448:	2000192d 	.word	0x2000192d

0800e44c <__sfp_lock_release>:
 800e44c:	4801      	ldr	r0, [pc, #4]	@ (800e454 <__sfp_lock_release+0x8>)
 800e44e:	f000 ba55 	b.w	800e8fc <__retarget_lock_release_recursive>
 800e452:	bf00      	nop
 800e454:	2000192d 	.word	0x2000192d

0800e458 <__sinit>:
 800e458:	b510      	push	{r4, lr}
 800e45a:	4604      	mov	r4, r0
 800e45c:	f7ff fff0 	bl	800e440 <__sfp_lock_acquire>
 800e460:	6a23      	ldr	r3, [r4, #32]
 800e462:	b11b      	cbz	r3, 800e46c <__sinit+0x14>
 800e464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e468:	f7ff bff0 	b.w	800e44c <__sfp_lock_release>
 800e46c:	4b04      	ldr	r3, [pc, #16]	@ (800e480 <__sinit+0x28>)
 800e46e:	6223      	str	r3, [r4, #32]
 800e470:	4b04      	ldr	r3, [pc, #16]	@ (800e484 <__sinit+0x2c>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d1f5      	bne.n	800e464 <__sinit+0xc>
 800e478:	f7ff ffc4 	bl	800e404 <global_stdio_init.part.0>
 800e47c:	e7f2      	b.n	800e464 <__sinit+0xc>
 800e47e:	bf00      	nop
 800e480:	0800e3c5 	.word	0x0800e3c5
 800e484:	20001924 	.word	0x20001924

0800e488 <_fwalk_sglue>:
 800e488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e48c:	4607      	mov	r7, r0
 800e48e:	4688      	mov	r8, r1
 800e490:	4614      	mov	r4, r2
 800e492:	2600      	movs	r6, #0
 800e494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e498:	f1b9 0901 	subs.w	r9, r9, #1
 800e49c:	d505      	bpl.n	800e4aa <_fwalk_sglue+0x22>
 800e49e:	6824      	ldr	r4, [r4, #0]
 800e4a0:	2c00      	cmp	r4, #0
 800e4a2:	d1f7      	bne.n	800e494 <_fwalk_sglue+0xc>
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4aa:	89ab      	ldrh	r3, [r5, #12]
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d907      	bls.n	800e4c0 <_fwalk_sglue+0x38>
 800e4b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	d003      	beq.n	800e4c0 <_fwalk_sglue+0x38>
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	47c0      	blx	r8
 800e4be:	4306      	orrs	r6, r0
 800e4c0:	3568      	adds	r5, #104	@ 0x68
 800e4c2:	e7e9      	b.n	800e498 <_fwalk_sglue+0x10>

0800e4c4 <_puts_r>:
 800e4c4:	6a03      	ldr	r3, [r0, #32]
 800e4c6:	b570      	push	{r4, r5, r6, lr}
 800e4c8:	6884      	ldr	r4, [r0, #8]
 800e4ca:	4605      	mov	r5, r0
 800e4cc:	460e      	mov	r6, r1
 800e4ce:	b90b      	cbnz	r3, 800e4d4 <_puts_r+0x10>
 800e4d0:	f7ff ffc2 	bl	800e458 <__sinit>
 800e4d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4d6:	07db      	lsls	r3, r3, #31
 800e4d8:	d405      	bmi.n	800e4e6 <_puts_r+0x22>
 800e4da:	89a3      	ldrh	r3, [r4, #12]
 800e4dc:	0598      	lsls	r0, r3, #22
 800e4de:	d402      	bmi.n	800e4e6 <_puts_r+0x22>
 800e4e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4e2:	f000 fa0a 	bl	800e8fa <__retarget_lock_acquire_recursive>
 800e4e6:	89a3      	ldrh	r3, [r4, #12]
 800e4e8:	0719      	lsls	r1, r3, #28
 800e4ea:	d502      	bpl.n	800e4f2 <_puts_r+0x2e>
 800e4ec:	6923      	ldr	r3, [r4, #16]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d135      	bne.n	800e55e <_puts_r+0x9a>
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	f000 f91d 	bl	800e734 <__swsetup_r>
 800e4fa:	b380      	cbz	r0, 800e55e <_puts_r+0x9a>
 800e4fc:	f04f 35ff 	mov.w	r5, #4294967295
 800e500:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e502:	07da      	lsls	r2, r3, #31
 800e504:	d405      	bmi.n	800e512 <_puts_r+0x4e>
 800e506:	89a3      	ldrh	r3, [r4, #12]
 800e508:	059b      	lsls	r3, r3, #22
 800e50a:	d402      	bmi.n	800e512 <_puts_r+0x4e>
 800e50c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e50e:	f000 f9f5 	bl	800e8fc <__retarget_lock_release_recursive>
 800e512:	4628      	mov	r0, r5
 800e514:	bd70      	pop	{r4, r5, r6, pc}
 800e516:	2b00      	cmp	r3, #0
 800e518:	da04      	bge.n	800e524 <_puts_r+0x60>
 800e51a:	69a2      	ldr	r2, [r4, #24]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	dc17      	bgt.n	800e550 <_puts_r+0x8c>
 800e520:	290a      	cmp	r1, #10
 800e522:	d015      	beq.n	800e550 <_puts_r+0x8c>
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	1c5a      	adds	r2, r3, #1
 800e528:	6022      	str	r2, [r4, #0]
 800e52a:	7019      	strb	r1, [r3, #0]
 800e52c:	68a3      	ldr	r3, [r4, #8]
 800e52e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e532:	3b01      	subs	r3, #1
 800e534:	60a3      	str	r3, [r4, #8]
 800e536:	2900      	cmp	r1, #0
 800e538:	d1ed      	bne.n	800e516 <_puts_r+0x52>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	da11      	bge.n	800e562 <_puts_r+0x9e>
 800e53e:	4622      	mov	r2, r4
 800e540:	210a      	movs	r1, #10
 800e542:	4628      	mov	r0, r5
 800e544:	f000 f8b7 	bl	800e6b6 <__swbuf_r>
 800e548:	3001      	adds	r0, #1
 800e54a:	d0d7      	beq.n	800e4fc <_puts_r+0x38>
 800e54c:	250a      	movs	r5, #10
 800e54e:	e7d7      	b.n	800e500 <_puts_r+0x3c>
 800e550:	4622      	mov	r2, r4
 800e552:	4628      	mov	r0, r5
 800e554:	f000 f8af 	bl	800e6b6 <__swbuf_r>
 800e558:	3001      	adds	r0, #1
 800e55a:	d1e7      	bne.n	800e52c <_puts_r+0x68>
 800e55c:	e7ce      	b.n	800e4fc <_puts_r+0x38>
 800e55e:	3e01      	subs	r6, #1
 800e560:	e7e4      	b.n	800e52c <_puts_r+0x68>
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	6022      	str	r2, [r4, #0]
 800e568:	220a      	movs	r2, #10
 800e56a:	701a      	strb	r2, [r3, #0]
 800e56c:	e7ee      	b.n	800e54c <_puts_r+0x88>
	...

0800e570 <puts>:
 800e570:	4b02      	ldr	r3, [pc, #8]	@ (800e57c <puts+0xc>)
 800e572:	4601      	mov	r1, r0
 800e574:	6818      	ldr	r0, [r3, #0]
 800e576:	f7ff bfa5 	b.w	800e4c4 <_puts_r>
 800e57a:	bf00      	nop
 800e57c:	20000140 	.word	0x20000140

0800e580 <sniprintf>:
 800e580:	b40c      	push	{r2, r3}
 800e582:	b530      	push	{r4, r5, lr}
 800e584:	4b18      	ldr	r3, [pc, #96]	@ (800e5e8 <sniprintf+0x68>)
 800e586:	1e0c      	subs	r4, r1, #0
 800e588:	681d      	ldr	r5, [r3, #0]
 800e58a:	b09d      	sub	sp, #116	@ 0x74
 800e58c:	da08      	bge.n	800e5a0 <sniprintf+0x20>
 800e58e:	238b      	movs	r3, #139	@ 0x8b
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	f04f 30ff 	mov.w	r0, #4294967295
 800e596:	b01d      	add	sp, #116	@ 0x74
 800e598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e59c:	b002      	add	sp, #8
 800e59e:	4770      	bx	lr
 800e5a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e5a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e5a8:	f04f 0300 	mov.w	r3, #0
 800e5ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e5ae:	bf14      	ite	ne
 800e5b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e5b4:	4623      	moveq	r3, r4
 800e5b6:	9304      	str	r3, [sp, #16]
 800e5b8:	9307      	str	r3, [sp, #28]
 800e5ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e5be:	9002      	str	r0, [sp, #8]
 800e5c0:	9006      	str	r0, [sp, #24]
 800e5c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e5c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e5c8:	ab21      	add	r3, sp, #132	@ 0x84
 800e5ca:	a902      	add	r1, sp, #8
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	9301      	str	r3, [sp, #4]
 800e5d0:	f001 fcd4 	bl	800ff7c <_svfiprintf_r>
 800e5d4:	1c43      	adds	r3, r0, #1
 800e5d6:	bfbc      	itt	lt
 800e5d8:	238b      	movlt	r3, #139	@ 0x8b
 800e5da:	602b      	strlt	r3, [r5, #0]
 800e5dc:	2c00      	cmp	r4, #0
 800e5de:	d0da      	beq.n	800e596 <sniprintf+0x16>
 800e5e0:	9b02      	ldr	r3, [sp, #8]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	701a      	strb	r2, [r3, #0]
 800e5e6:	e7d6      	b.n	800e596 <sniprintf+0x16>
 800e5e8:	20000140 	.word	0x20000140

0800e5ec <siprintf>:
 800e5ec:	b40e      	push	{r1, r2, r3}
 800e5ee:	b510      	push	{r4, lr}
 800e5f0:	b09d      	sub	sp, #116	@ 0x74
 800e5f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e5f4:	9002      	str	r0, [sp, #8]
 800e5f6:	9006      	str	r0, [sp, #24]
 800e5f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e5fc:	480a      	ldr	r0, [pc, #40]	@ (800e628 <siprintf+0x3c>)
 800e5fe:	9107      	str	r1, [sp, #28]
 800e600:	9104      	str	r1, [sp, #16]
 800e602:	490a      	ldr	r1, [pc, #40]	@ (800e62c <siprintf+0x40>)
 800e604:	f853 2b04 	ldr.w	r2, [r3], #4
 800e608:	9105      	str	r1, [sp, #20]
 800e60a:	2400      	movs	r4, #0
 800e60c:	a902      	add	r1, sp, #8
 800e60e:	6800      	ldr	r0, [r0, #0]
 800e610:	9301      	str	r3, [sp, #4]
 800e612:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e614:	f001 fcb2 	bl	800ff7c <_svfiprintf_r>
 800e618:	9b02      	ldr	r3, [sp, #8]
 800e61a:	701c      	strb	r4, [r3, #0]
 800e61c:	b01d      	add	sp, #116	@ 0x74
 800e61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e622:	b003      	add	sp, #12
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	20000140 	.word	0x20000140
 800e62c:	ffff0208 	.word	0xffff0208

0800e630 <__sread>:
 800e630:	b510      	push	{r4, lr}
 800e632:	460c      	mov	r4, r1
 800e634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e638:	f000 f910 	bl	800e85c <_read_r>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	bfab      	itete	ge
 800e640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e642:	89a3      	ldrhlt	r3, [r4, #12]
 800e644:	181b      	addge	r3, r3, r0
 800e646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e64a:	bfac      	ite	ge
 800e64c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e64e:	81a3      	strhlt	r3, [r4, #12]
 800e650:	bd10      	pop	{r4, pc}

0800e652 <__swrite>:
 800e652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e656:	461f      	mov	r7, r3
 800e658:	898b      	ldrh	r3, [r1, #12]
 800e65a:	05db      	lsls	r3, r3, #23
 800e65c:	4605      	mov	r5, r0
 800e65e:	460c      	mov	r4, r1
 800e660:	4616      	mov	r6, r2
 800e662:	d505      	bpl.n	800e670 <__swrite+0x1e>
 800e664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e668:	2302      	movs	r3, #2
 800e66a:	2200      	movs	r2, #0
 800e66c:	f000 f8e4 	bl	800e838 <_lseek_r>
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e67a:	81a3      	strh	r3, [r4, #12]
 800e67c:	4632      	mov	r2, r6
 800e67e:	463b      	mov	r3, r7
 800e680:	4628      	mov	r0, r5
 800e682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e686:	f000 b8fb 	b.w	800e880 <_write_r>

0800e68a <__sseek>:
 800e68a:	b510      	push	{r4, lr}
 800e68c:	460c      	mov	r4, r1
 800e68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e692:	f000 f8d1 	bl	800e838 <_lseek_r>
 800e696:	1c43      	adds	r3, r0, #1
 800e698:	89a3      	ldrh	r3, [r4, #12]
 800e69a:	bf15      	itete	ne
 800e69c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e69e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e6a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e6a6:	81a3      	strheq	r3, [r4, #12]
 800e6a8:	bf18      	it	ne
 800e6aa:	81a3      	strhne	r3, [r4, #12]
 800e6ac:	bd10      	pop	{r4, pc}

0800e6ae <__sclose>:
 800e6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b2:	f000 b8b1 	b.w	800e818 <_close_r>

0800e6b6 <__swbuf_r>:
 800e6b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6b8:	460e      	mov	r6, r1
 800e6ba:	4614      	mov	r4, r2
 800e6bc:	4605      	mov	r5, r0
 800e6be:	b118      	cbz	r0, 800e6c8 <__swbuf_r+0x12>
 800e6c0:	6a03      	ldr	r3, [r0, #32]
 800e6c2:	b90b      	cbnz	r3, 800e6c8 <__swbuf_r+0x12>
 800e6c4:	f7ff fec8 	bl	800e458 <__sinit>
 800e6c8:	69a3      	ldr	r3, [r4, #24]
 800e6ca:	60a3      	str	r3, [r4, #8]
 800e6cc:	89a3      	ldrh	r3, [r4, #12]
 800e6ce:	071a      	lsls	r2, r3, #28
 800e6d0:	d501      	bpl.n	800e6d6 <__swbuf_r+0x20>
 800e6d2:	6923      	ldr	r3, [r4, #16]
 800e6d4:	b943      	cbnz	r3, 800e6e8 <__swbuf_r+0x32>
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4628      	mov	r0, r5
 800e6da:	f000 f82b 	bl	800e734 <__swsetup_r>
 800e6de:	b118      	cbz	r0, 800e6e8 <__swbuf_r+0x32>
 800e6e0:	f04f 37ff 	mov.w	r7, #4294967295
 800e6e4:	4638      	mov	r0, r7
 800e6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6e8:	6823      	ldr	r3, [r4, #0]
 800e6ea:	6922      	ldr	r2, [r4, #16]
 800e6ec:	1a98      	subs	r0, r3, r2
 800e6ee:	6963      	ldr	r3, [r4, #20]
 800e6f0:	b2f6      	uxtb	r6, r6
 800e6f2:	4283      	cmp	r3, r0
 800e6f4:	4637      	mov	r7, r6
 800e6f6:	dc05      	bgt.n	800e704 <__swbuf_r+0x4e>
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f001 ff00 	bl	8010500 <_fflush_r>
 800e700:	2800      	cmp	r0, #0
 800e702:	d1ed      	bne.n	800e6e0 <__swbuf_r+0x2a>
 800e704:	68a3      	ldr	r3, [r4, #8]
 800e706:	3b01      	subs	r3, #1
 800e708:	60a3      	str	r3, [r4, #8]
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	1c5a      	adds	r2, r3, #1
 800e70e:	6022      	str	r2, [r4, #0]
 800e710:	701e      	strb	r6, [r3, #0]
 800e712:	6962      	ldr	r2, [r4, #20]
 800e714:	1c43      	adds	r3, r0, #1
 800e716:	429a      	cmp	r2, r3
 800e718:	d004      	beq.n	800e724 <__swbuf_r+0x6e>
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	07db      	lsls	r3, r3, #31
 800e71e:	d5e1      	bpl.n	800e6e4 <__swbuf_r+0x2e>
 800e720:	2e0a      	cmp	r6, #10
 800e722:	d1df      	bne.n	800e6e4 <__swbuf_r+0x2e>
 800e724:	4621      	mov	r1, r4
 800e726:	4628      	mov	r0, r5
 800e728:	f001 feea 	bl	8010500 <_fflush_r>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d0d9      	beq.n	800e6e4 <__swbuf_r+0x2e>
 800e730:	e7d6      	b.n	800e6e0 <__swbuf_r+0x2a>
	...

0800e734 <__swsetup_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	4b29      	ldr	r3, [pc, #164]	@ (800e7dc <__swsetup_r+0xa8>)
 800e738:	4605      	mov	r5, r0
 800e73a:	6818      	ldr	r0, [r3, #0]
 800e73c:	460c      	mov	r4, r1
 800e73e:	b118      	cbz	r0, 800e748 <__swsetup_r+0x14>
 800e740:	6a03      	ldr	r3, [r0, #32]
 800e742:	b90b      	cbnz	r3, 800e748 <__swsetup_r+0x14>
 800e744:	f7ff fe88 	bl	800e458 <__sinit>
 800e748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e74c:	0719      	lsls	r1, r3, #28
 800e74e:	d422      	bmi.n	800e796 <__swsetup_r+0x62>
 800e750:	06da      	lsls	r2, r3, #27
 800e752:	d407      	bmi.n	800e764 <__swsetup_r+0x30>
 800e754:	2209      	movs	r2, #9
 800e756:	602a      	str	r2, [r5, #0]
 800e758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e75c:	81a3      	strh	r3, [r4, #12]
 800e75e:	f04f 30ff 	mov.w	r0, #4294967295
 800e762:	e033      	b.n	800e7cc <__swsetup_r+0x98>
 800e764:	0758      	lsls	r0, r3, #29
 800e766:	d512      	bpl.n	800e78e <__swsetup_r+0x5a>
 800e768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e76a:	b141      	cbz	r1, 800e77e <__swsetup_r+0x4a>
 800e76c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e770:	4299      	cmp	r1, r3
 800e772:	d002      	beq.n	800e77a <__swsetup_r+0x46>
 800e774:	4628      	mov	r0, r5
 800e776:	f000 ff2b 	bl	800f5d0 <_free_r>
 800e77a:	2300      	movs	r3, #0
 800e77c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e784:	81a3      	strh	r3, [r4, #12]
 800e786:	2300      	movs	r3, #0
 800e788:	6063      	str	r3, [r4, #4]
 800e78a:	6923      	ldr	r3, [r4, #16]
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	89a3      	ldrh	r3, [r4, #12]
 800e790:	f043 0308 	orr.w	r3, r3, #8
 800e794:	81a3      	strh	r3, [r4, #12]
 800e796:	6923      	ldr	r3, [r4, #16]
 800e798:	b94b      	cbnz	r3, 800e7ae <__swsetup_r+0x7a>
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7a4:	d003      	beq.n	800e7ae <__swsetup_r+0x7a>
 800e7a6:	4621      	mov	r1, r4
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f001 fef7 	bl	801059c <__smakebuf_r>
 800e7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7b2:	f013 0201 	ands.w	r2, r3, #1
 800e7b6:	d00a      	beq.n	800e7ce <__swsetup_r+0x9a>
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	60a2      	str	r2, [r4, #8]
 800e7bc:	6962      	ldr	r2, [r4, #20]
 800e7be:	4252      	negs	r2, r2
 800e7c0:	61a2      	str	r2, [r4, #24]
 800e7c2:	6922      	ldr	r2, [r4, #16]
 800e7c4:	b942      	cbnz	r2, 800e7d8 <__swsetup_r+0xa4>
 800e7c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e7ca:	d1c5      	bne.n	800e758 <__swsetup_r+0x24>
 800e7cc:	bd38      	pop	{r3, r4, r5, pc}
 800e7ce:	0799      	lsls	r1, r3, #30
 800e7d0:	bf58      	it	pl
 800e7d2:	6962      	ldrpl	r2, [r4, #20]
 800e7d4:	60a2      	str	r2, [r4, #8]
 800e7d6:	e7f4      	b.n	800e7c2 <__swsetup_r+0x8e>
 800e7d8:	2000      	movs	r0, #0
 800e7da:	e7f7      	b.n	800e7cc <__swsetup_r+0x98>
 800e7dc:	20000140 	.word	0x20000140

0800e7e0 <memcmp>:
 800e7e0:	b510      	push	{r4, lr}
 800e7e2:	3901      	subs	r1, #1
 800e7e4:	4402      	add	r2, r0
 800e7e6:	4290      	cmp	r0, r2
 800e7e8:	d101      	bne.n	800e7ee <memcmp+0xe>
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	e005      	b.n	800e7fa <memcmp+0x1a>
 800e7ee:	7803      	ldrb	r3, [r0, #0]
 800e7f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e7f4:	42a3      	cmp	r3, r4
 800e7f6:	d001      	beq.n	800e7fc <memcmp+0x1c>
 800e7f8:	1b18      	subs	r0, r3, r4
 800e7fa:	bd10      	pop	{r4, pc}
 800e7fc:	3001      	adds	r0, #1
 800e7fe:	e7f2      	b.n	800e7e6 <memcmp+0x6>

0800e800 <memset>:
 800e800:	4402      	add	r2, r0
 800e802:	4603      	mov	r3, r0
 800e804:	4293      	cmp	r3, r2
 800e806:	d100      	bne.n	800e80a <memset+0xa>
 800e808:	4770      	bx	lr
 800e80a:	f803 1b01 	strb.w	r1, [r3], #1
 800e80e:	e7f9      	b.n	800e804 <memset+0x4>

0800e810 <_localeconv_r>:
 800e810:	4800      	ldr	r0, [pc, #0]	@ (800e814 <_localeconv_r+0x4>)
 800e812:	4770      	bx	lr
 800e814:	20000280 	.word	0x20000280

0800e818 <_close_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	4d06      	ldr	r5, [pc, #24]	@ (800e834 <_close_r+0x1c>)
 800e81c:	2300      	movs	r3, #0
 800e81e:	4604      	mov	r4, r0
 800e820:	4608      	mov	r0, r1
 800e822:	602b      	str	r3, [r5, #0]
 800e824:	f7f6 fa3e 	bl	8004ca4 <_close>
 800e828:	1c43      	adds	r3, r0, #1
 800e82a:	d102      	bne.n	800e832 <_close_r+0x1a>
 800e82c:	682b      	ldr	r3, [r5, #0]
 800e82e:	b103      	cbz	r3, 800e832 <_close_r+0x1a>
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	bd38      	pop	{r3, r4, r5, pc}
 800e834:	20001928 	.word	0x20001928

0800e838 <_lseek_r>:
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	4d07      	ldr	r5, [pc, #28]	@ (800e858 <_lseek_r+0x20>)
 800e83c:	4604      	mov	r4, r0
 800e83e:	4608      	mov	r0, r1
 800e840:	4611      	mov	r1, r2
 800e842:	2200      	movs	r2, #0
 800e844:	602a      	str	r2, [r5, #0]
 800e846:	461a      	mov	r2, r3
 800e848:	f7f6 fa53 	bl	8004cf2 <_lseek>
 800e84c:	1c43      	adds	r3, r0, #1
 800e84e:	d102      	bne.n	800e856 <_lseek_r+0x1e>
 800e850:	682b      	ldr	r3, [r5, #0]
 800e852:	b103      	cbz	r3, 800e856 <_lseek_r+0x1e>
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	bd38      	pop	{r3, r4, r5, pc}
 800e858:	20001928 	.word	0x20001928

0800e85c <_read_r>:
 800e85c:	b538      	push	{r3, r4, r5, lr}
 800e85e:	4d07      	ldr	r5, [pc, #28]	@ (800e87c <_read_r+0x20>)
 800e860:	4604      	mov	r4, r0
 800e862:	4608      	mov	r0, r1
 800e864:	4611      	mov	r1, r2
 800e866:	2200      	movs	r2, #0
 800e868:	602a      	str	r2, [r5, #0]
 800e86a:	461a      	mov	r2, r3
 800e86c:	f7f6 f9e1 	bl	8004c32 <_read>
 800e870:	1c43      	adds	r3, r0, #1
 800e872:	d102      	bne.n	800e87a <_read_r+0x1e>
 800e874:	682b      	ldr	r3, [r5, #0]
 800e876:	b103      	cbz	r3, 800e87a <_read_r+0x1e>
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	bd38      	pop	{r3, r4, r5, pc}
 800e87c:	20001928 	.word	0x20001928

0800e880 <_write_r>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	4d07      	ldr	r5, [pc, #28]	@ (800e8a0 <_write_r+0x20>)
 800e884:	4604      	mov	r4, r0
 800e886:	4608      	mov	r0, r1
 800e888:	4611      	mov	r1, r2
 800e88a:	2200      	movs	r2, #0
 800e88c:	602a      	str	r2, [r5, #0]
 800e88e:	461a      	mov	r2, r3
 800e890:	f7f6 f9ec 	bl	8004c6c <_write>
 800e894:	1c43      	adds	r3, r0, #1
 800e896:	d102      	bne.n	800e89e <_write_r+0x1e>
 800e898:	682b      	ldr	r3, [r5, #0]
 800e89a:	b103      	cbz	r3, 800e89e <_write_r+0x1e>
 800e89c:	6023      	str	r3, [r4, #0]
 800e89e:	bd38      	pop	{r3, r4, r5, pc}
 800e8a0:	20001928 	.word	0x20001928

0800e8a4 <__errno>:
 800e8a4:	4b01      	ldr	r3, [pc, #4]	@ (800e8ac <__errno+0x8>)
 800e8a6:	6818      	ldr	r0, [r3, #0]
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	20000140 	.word	0x20000140

0800e8b0 <__libc_init_array>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	4d0d      	ldr	r5, [pc, #52]	@ (800e8e8 <__libc_init_array+0x38>)
 800e8b4:	4c0d      	ldr	r4, [pc, #52]	@ (800e8ec <__libc_init_array+0x3c>)
 800e8b6:	1b64      	subs	r4, r4, r5
 800e8b8:	10a4      	asrs	r4, r4, #2
 800e8ba:	2600      	movs	r6, #0
 800e8bc:	42a6      	cmp	r6, r4
 800e8be:	d109      	bne.n	800e8d4 <__libc_init_array+0x24>
 800e8c0:	4d0b      	ldr	r5, [pc, #44]	@ (800e8f0 <__libc_init_array+0x40>)
 800e8c2:	4c0c      	ldr	r4, [pc, #48]	@ (800e8f4 <__libc_init_array+0x44>)
 800e8c4:	f002 fba0 	bl	8011008 <_init>
 800e8c8:	1b64      	subs	r4, r4, r5
 800e8ca:	10a4      	asrs	r4, r4, #2
 800e8cc:	2600      	movs	r6, #0
 800e8ce:	42a6      	cmp	r6, r4
 800e8d0:	d105      	bne.n	800e8de <__libc_init_array+0x2e>
 800e8d2:	bd70      	pop	{r4, r5, r6, pc}
 800e8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8d8:	4798      	blx	r3
 800e8da:	3601      	adds	r6, #1
 800e8dc:	e7ee      	b.n	800e8bc <__libc_init_array+0xc>
 800e8de:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8e2:	4798      	blx	r3
 800e8e4:	3601      	adds	r6, #1
 800e8e6:	e7f2      	b.n	800e8ce <__libc_init_array+0x1e>
 800e8e8:	08011f2c 	.word	0x08011f2c
 800e8ec:	08011f2c 	.word	0x08011f2c
 800e8f0:	08011f2c 	.word	0x08011f2c
 800e8f4:	08011f30 	.word	0x08011f30

0800e8f8 <__retarget_lock_init_recursive>:
 800e8f8:	4770      	bx	lr

0800e8fa <__retarget_lock_acquire_recursive>:
 800e8fa:	4770      	bx	lr

0800e8fc <__retarget_lock_release_recursive>:
 800e8fc:	4770      	bx	lr

0800e8fe <memcpy>:
 800e8fe:	440a      	add	r2, r1
 800e900:	4291      	cmp	r1, r2
 800e902:	f100 33ff 	add.w	r3, r0, #4294967295
 800e906:	d100      	bne.n	800e90a <memcpy+0xc>
 800e908:	4770      	bx	lr
 800e90a:	b510      	push	{r4, lr}
 800e90c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e910:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e914:	4291      	cmp	r1, r2
 800e916:	d1f9      	bne.n	800e90c <memcpy+0xe>
 800e918:	bd10      	pop	{r4, pc}

0800e91a <quorem>:
 800e91a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e91e:	6903      	ldr	r3, [r0, #16]
 800e920:	690c      	ldr	r4, [r1, #16]
 800e922:	42a3      	cmp	r3, r4
 800e924:	4607      	mov	r7, r0
 800e926:	db7e      	blt.n	800ea26 <quorem+0x10c>
 800e928:	3c01      	subs	r4, #1
 800e92a:	f101 0814 	add.w	r8, r1, #20
 800e92e:	00a3      	lsls	r3, r4, #2
 800e930:	f100 0514 	add.w	r5, r0, #20
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e944:	3301      	adds	r3, #1
 800e946:	429a      	cmp	r2, r3
 800e948:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e94c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e950:	d32e      	bcc.n	800e9b0 <quorem+0x96>
 800e952:	f04f 0a00 	mov.w	sl, #0
 800e956:	46c4      	mov	ip, r8
 800e958:	46ae      	mov	lr, r5
 800e95a:	46d3      	mov	fp, sl
 800e95c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e960:	b298      	uxth	r0, r3
 800e962:	fb06 a000 	mla	r0, r6, r0, sl
 800e966:	0c02      	lsrs	r2, r0, #16
 800e968:	0c1b      	lsrs	r3, r3, #16
 800e96a:	fb06 2303 	mla	r3, r6, r3, r2
 800e96e:	f8de 2000 	ldr.w	r2, [lr]
 800e972:	b280      	uxth	r0, r0
 800e974:	b292      	uxth	r2, r2
 800e976:	1a12      	subs	r2, r2, r0
 800e978:	445a      	add	r2, fp
 800e97a:	f8de 0000 	ldr.w	r0, [lr]
 800e97e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e982:	b29b      	uxth	r3, r3
 800e984:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e988:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e98c:	b292      	uxth	r2, r2
 800e98e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e992:	45e1      	cmp	r9, ip
 800e994:	f84e 2b04 	str.w	r2, [lr], #4
 800e998:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e99c:	d2de      	bcs.n	800e95c <quorem+0x42>
 800e99e:	9b00      	ldr	r3, [sp, #0]
 800e9a0:	58eb      	ldr	r3, [r5, r3]
 800e9a2:	b92b      	cbnz	r3, 800e9b0 <quorem+0x96>
 800e9a4:	9b01      	ldr	r3, [sp, #4]
 800e9a6:	3b04      	subs	r3, #4
 800e9a8:	429d      	cmp	r5, r3
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	d32f      	bcc.n	800ea0e <quorem+0xf4>
 800e9ae:	613c      	str	r4, [r7, #16]
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f001 f97f 	bl	800fcb4 <__mcmp>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	db25      	blt.n	800ea06 <quorem+0xec>
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	2000      	movs	r0, #0
 800e9be:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9c2:	f8d1 c000 	ldr.w	ip, [r1]
 800e9c6:	fa1f fe82 	uxth.w	lr, r2
 800e9ca:	fa1f f38c 	uxth.w	r3, ip
 800e9ce:	eba3 030e 	sub.w	r3, r3, lr
 800e9d2:	4403      	add	r3, r0
 800e9d4:	0c12      	lsrs	r2, r2, #16
 800e9d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e9da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9e4:	45c1      	cmp	r9, r8
 800e9e6:	f841 3b04 	str.w	r3, [r1], #4
 800e9ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e9ee:	d2e6      	bcs.n	800e9be <quorem+0xa4>
 800e9f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9f8:	b922      	cbnz	r2, 800ea04 <quorem+0xea>
 800e9fa:	3b04      	subs	r3, #4
 800e9fc:	429d      	cmp	r5, r3
 800e9fe:	461a      	mov	r2, r3
 800ea00:	d30b      	bcc.n	800ea1a <quorem+0x100>
 800ea02:	613c      	str	r4, [r7, #16]
 800ea04:	3601      	adds	r6, #1
 800ea06:	4630      	mov	r0, r6
 800ea08:	b003      	add	sp, #12
 800ea0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea0e:	6812      	ldr	r2, [r2, #0]
 800ea10:	3b04      	subs	r3, #4
 800ea12:	2a00      	cmp	r2, #0
 800ea14:	d1cb      	bne.n	800e9ae <quorem+0x94>
 800ea16:	3c01      	subs	r4, #1
 800ea18:	e7c6      	b.n	800e9a8 <quorem+0x8e>
 800ea1a:	6812      	ldr	r2, [r2, #0]
 800ea1c:	3b04      	subs	r3, #4
 800ea1e:	2a00      	cmp	r2, #0
 800ea20:	d1ef      	bne.n	800ea02 <quorem+0xe8>
 800ea22:	3c01      	subs	r4, #1
 800ea24:	e7ea      	b.n	800e9fc <quorem+0xe2>
 800ea26:	2000      	movs	r0, #0
 800ea28:	e7ee      	b.n	800ea08 <quorem+0xee>
 800ea2a:	0000      	movs	r0, r0
 800ea2c:	0000      	movs	r0, r0
	...

0800ea30 <_dtoa_r>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	69c7      	ldr	r7, [r0, #28]
 800ea36:	b097      	sub	sp, #92	@ 0x5c
 800ea38:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ea3c:	ec55 4b10 	vmov	r4, r5, d0
 800ea40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ea42:	9107      	str	r1, [sp, #28]
 800ea44:	4681      	mov	r9, r0
 800ea46:	920c      	str	r2, [sp, #48]	@ 0x30
 800ea48:	9311      	str	r3, [sp, #68]	@ 0x44
 800ea4a:	b97f      	cbnz	r7, 800ea6c <_dtoa_r+0x3c>
 800ea4c:	2010      	movs	r0, #16
 800ea4e:	f000 fe09 	bl	800f664 <malloc>
 800ea52:	4602      	mov	r2, r0
 800ea54:	f8c9 001c 	str.w	r0, [r9, #28]
 800ea58:	b920      	cbnz	r0, 800ea64 <_dtoa_r+0x34>
 800ea5a:	4ba9      	ldr	r3, [pc, #676]	@ (800ed00 <_dtoa_r+0x2d0>)
 800ea5c:	21ef      	movs	r1, #239	@ 0xef
 800ea5e:	48a9      	ldr	r0, [pc, #676]	@ (800ed04 <_dtoa_r+0x2d4>)
 800ea60:	f001 fe24 	bl	80106ac <__assert_func>
 800ea64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ea68:	6007      	str	r7, [r0, #0]
 800ea6a:	60c7      	str	r7, [r0, #12]
 800ea6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ea70:	6819      	ldr	r1, [r3, #0]
 800ea72:	b159      	cbz	r1, 800ea8c <_dtoa_r+0x5c>
 800ea74:	685a      	ldr	r2, [r3, #4]
 800ea76:	604a      	str	r2, [r1, #4]
 800ea78:	2301      	movs	r3, #1
 800ea7a:	4093      	lsls	r3, r2
 800ea7c:	608b      	str	r3, [r1, #8]
 800ea7e:	4648      	mov	r0, r9
 800ea80:	f000 fee6 	bl	800f850 <_Bfree>
 800ea84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	601a      	str	r2, [r3, #0]
 800ea8c:	1e2b      	subs	r3, r5, #0
 800ea8e:	bfb9      	ittee	lt
 800ea90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ea94:	9305      	strlt	r3, [sp, #20]
 800ea96:	2300      	movge	r3, #0
 800ea98:	6033      	strge	r3, [r6, #0]
 800ea9a:	9f05      	ldr	r7, [sp, #20]
 800ea9c:	4b9a      	ldr	r3, [pc, #616]	@ (800ed08 <_dtoa_r+0x2d8>)
 800ea9e:	bfbc      	itt	lt
 800eaa0:	2201      	movlt	r2, #1
 800eaa2:	6032      	strlt	r2, [r6, #0]
 800eaa4:	43bb      	bics	r3, r7
 800eaa6:	d112      	bne.n	800eace <_dtoa_r+0x9e>
 800eaa8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eaaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eaae:	6013      	str	r3, [r2, #0]
 800eab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eab4:	4323      	orrs	r3, r4
 800eab6:	f000 855a 	beq.w	800f56e <_dtoa_r+0xb3e>
 800eaba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eabc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ed1c <_dtoa_r+0x2ec>
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 855c 	beq.w	800f57e <_dtoa_r+0xb4e>
 800eac6:	f10a 0303 	add.w	r3, sl, #3
 800eaca:	f000 bd56 	b.w	800f57a <_dtoa_r+0xb4a>
 800eace:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ead2:	2200      	movs	r2, #0
 800ead4:	ec51 0b17 	vmov	r0, r1, d7
 800ead8:	2300      	movs	r3, #0
 800eada:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800eade:	f7f1 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 800eae2:	4680      	mov	r8, r0
 800eae4:	b158      	cbz	r0, 800eafe <_dtoa_r+0xce>
 800eae6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eae8:	2301      	movs	r3, #1
 800eaea:	6013      	str	r3, [r2, #0]
 800eaec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eaee:	b113      	cbz	r3, 800eaf6 <_dtoa_r+0xc6>
 800eaf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eaf2:	4b86      	ldr	r3, [pc, #536]	@ (800ed0c <_dtoa_r+0x2dc>)
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ed20 <_dtoa_r+0x2f0>
 800eafa:	f000 bd40 	b.w	800f57e <_dtoa_r+0xb4e>
 800eafe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800eb02:	aa14      	add	r2, sp, #80	@ 0x50
 800eb04:	a915      	add	r1, sp, #84	@ 0x54
 800eb06:	4648      	mov	r0, r9
 800eb08:	f001 f984 	bl	800fe14 <__d2b>
 800eb0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eb10:	9002      	str	r0, [sp, #8]
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d078      	beq.n	800ec08 <_dtoa_r+0x1d8>
 800eb16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800eb1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eb24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800eb28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800eb2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800eb30:	4619      	mov	r1, r3
 800eb32:	2200      	movs	r2, #0
 800eb34:	4b76      	ldr	r3, [pc, #472]	@ (800ed10 <_dtoa_r+0x2e0>)
 800eb36:	f7f1 fba7 	bl	8000288 <__aeabi_dsub>
 800eb3a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ece8 <_dtoa_r+0x2b8>)
 800eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb40:	f7f1 fd5a 	bl	80005f8 <__aeabi_dmul>
 800eb44:	a36a      	add	r3, pc, #424	@ (adr r3, 800ecf0 <_dtoa_r+0x2c0>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	f7f1 fb9f 	bl	800028c <__adddf3>
 800eb4e:	4604      	mov	r4, r0
 800eb50:	4630      	mov	r0, r6
 800eb52:	460d      	mov	r5, r1
 800eb54:	f7f1 fce6 	bl	8000524 <__aeabi_i2d>
 800eb58:	a367      	add	r3, pc, #412	@ (adr r3, 800ecf8 <_dtoa_r+0x2c8>)
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	f7f1 fd4b 	bl	80005f8 <__aeabi_dmul>
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	4620      	mov	r0, r4
 800eb68:	4629      	mov	r1, r5
 800eb6a:	f7f1 fb8f 	bl	800028c <__adddf3>
 800eb6e:	4604      	mov	r4, r0
 800eb70:	460d      	mov	r5, r1
 800eb72:	f7f1 fff1 	bl	8000b58 <__aeabi_d2iz>
 800eb76:	2200      	movs	r2, #0
 800eb78:	4607      	mov	r7, r0
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	4629      	mov	r1, r5
 800eb80:	f7f1 ffac 	bl	8000adc <__aeabi_dcmplt>
 800eb84:	b140      	cbz	r0, 800eb98 <_dtoa_r+0x168>
 800eb86:	4638      	mov	r0, r7
 800eb88:	f7f1 fccc 	bl	8000524 <__aeabi_i2d>
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	462b      	mov	r3, r5
 800eb90:	f7f1 ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb94:	b900      	cbnz	r0, 800eb98 <_dtoa_r+0x168>
 800eb96:	3f01      	subs	r7, #1
 800eb98:	2f16      	cmp	r7, #22
 800eb9a:	d852      	bhi.n	800ec42 <_dtoa_r+0x212>
 800eb9c:	4b5d      	ldr	r3, [pc, #372]	@ (800ed14 <_dtoa_r+0x2e4>)
 800eb9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ebaa:	f7f1 ff97 	bl	8000adc <__aeabi_dcmplt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d049      	beq.n	800ec46 <_dtoa_r+0x216>
 800ebb2:	3f01      	subs	r7, #1
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ebb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ebba:	1b9b      	subs	r3, r3, r6
 800ebbc:	1e5a      	subs	r2, r3, #1
 800ebbe:	bf45      	ittet	mi
 800ebc0:	f1c3 0301 	rsbmi	r3, r3, #1
 800ebc4:	9300      	strmi	r3, [sp, #0]
 800ebc6:	2300      	movpl	r3, #0
 800ebc8:	2300      	movmi	r3, #0
 800ebca:	9206      	str	r2, [sp, #24]
 800ebcc:	bf54      	ite	pl
 800ebce:	9300      	strpl	r3, [sp, #0]
 800ebd0:	9306      	strmi	r3, [sp, #24]
 800ebd2:	2f00      	cmp	r7, #0
 800ebd4:	db39      	blt.n	800ec4a <_dtoa_r+0x21a>
 800ebd6:	9b06      	ldr	r3, [sp, #24]
 800ebd8:	970d      	str	r7, [sp, #52]	@ 0x34
 800ebda:	443b      	add	r3, r7
 800ebdc:	9306      	str	r3, [sp, #24]
 800ebde:	2300      	movs	r3, #0
 800ebe0:	9308      	str	r3, [sp, #32]
 800ebe2:	9b07      	ldr	r3, [sp, #28]
 800ebe4:	2b09      	cmp	r3, #9
 800ebe6:	d863      	bhi.n	800ecb0 <_dtoa_r+0x280>
 800ebe8:	2b05      	cmp	r3, #5
 800ebea:	bfc4      	itt	gt
 800ebec:	3b04      	subgt	r3, #4
 800ebee:	9307      	strgt	r3, [sp, #28]
 800ebf0:	9b07      	ldr	r3, [sp, #28]
 800ebf2:	f1a3 0302 	sub.w	r3, r3, #2
 800ebf6:	bfcc      	ite	gt
 800ebf8:	2400      	movgt	r4, #0
 800ebfa:	2401      	movle	r4, #1
 800ebfc:	2b03      	cmp	r3, #3
 800ebfe:	d863      	bhi.n	800ecc8 <_dtoa_r+0x298>
 800ec00:	e8df f003 	tbb	[pc, r3]
 800ec04:	2b375452 	.word	0x2b375452
 800ec08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ec0c:	441e      	add	r6, r3
 800ec0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ec12:	2b20      	cmp	r3, #32
 800ec14:	bfc1      	itttt	gt
 800ec16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ec1a:	409f      	lslgt	r7, r3
 800ec1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ec20:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ec24:	bfd6      	itet	le
 800ec26:	f1c3 0320 	rsble	r3, r3, #32
 800ec2a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ec2e:	fa04 f003 	lslle.w	r0, r4, r3
 800ec32:	f7f1 fc67 	bl	8000504 <__aeabi_ui2d>
 800ec36:	2201      	movs	r2, #1
 800ec38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ec3c:	3e01      	subs	r6, #1
 800ec3e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ec40:	e776      	b.n	800eb30 <_dtoa_r+0x100>
 800ec42:	2301      	movs	r3, #1
 800ec44:	e7b7      	b.n	800ebb6 <_dtoa_r+0x186>
 800ec46:	9010      	str	r0, [sp, #64]	@ 0x40
 800ec48:	e7b6      	b.n	800ebb8 <_dtoa_r+0x188>
 800ec4a:	9b00      	ldr	r3, [sp, #0]
 800ec4c:	1bdb      	subs	r3, r3, r7
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	427b      	negs	r3, r7
 800ec52:	9308      	str	r3, [sp, #32]
 800ec54:	2300      	movs	r3, #0
 800ec56:	930d      	str	r3, [sp, #52]	@ 0x34
 800ec58:	e7c3      	b.n	800ebe2 <_dtoa_r+0x1b2>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec60:	eb07 0b03 	add.w	fp, r7, r3
 800ec64:	f10b 0301 	add.w	r3, fp, #1
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	9303      	str	r3, [sp, #12]
 800ec6c:	bfb8      	it	lt
 800ec6e:	2301      	movlt	r3, #1
 800ec70:	e006      	b.n	800ec80 <_dtoa_r+0x250>
 800ec72:	2301      	movs	r3, #1
 800ec74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	dd28      	ble.n	800ecce <_dtoa_r+0x29e>
 800ec7c:	469b      	mov	fp, r3
 800ec7e:	9303      	str	r3, [sp, #12]
 800ec80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ec84:	2100      	movs	r1, #0
 800ec86:	2204      	movs	r2, #4
 800ec88:	f102 0514 	add.w	r5, r2, #20
 800ec8c:	429d      	cmp	r5, r3
 800ec8e:	d926      	bls.n	800ecde <_dtoa_r+0x2ae>
 800ec90:	6041      	str	r1, [r0, #4]
 800ec92:	4648      	mov	r0, r9
 800ec94:	f000 fd9c 	bl	800f7d0 <_Balloc>
 800ec98:	4682      	mov	sl, r0
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	d142      	bne.n	800ed24 <_dtoa_r+0x2f4>
 800ec9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ed18 <_dtoa_r+0x2e8>)
 800eca0:	4602      	mov	r2, r0
 800eca2:	f240 11af 	movw	r1, #431	@ 0x1af
 800eca6:	e6da      	b.n	800ea5e <_dtoa_r+0x2e>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	e7e3      	b.n	800ec74 <_dtoa_r+0x244>
 800ecac:	2300      	movs	r3, #0
 800ecae:	e7d5      	b.n	800ec5c <_dtoa_r+0x22c>
 800ecb0:	2401      	movs	r4, #1
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	9307      	str	r3, [sp, #28]
 800ecb6:	9409      	str	r4, [sp, #36]	@ 0x24
 800ecb8:	f04f 3bff 	mov.w	fp, #4294967295
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	f8cd b00c 	str.w	fp, [sp, #12]
 800ecc2:	2312      	movs	r3, #18
 800ecc4:	920c      	str	r2, [sp, #48]	@ 0x30
 800ecc6:	e7db      	b.n	800ec80 <_dtoa_r+0x250>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	9309      	str	r3, [sp, #36]	@ 0x24
 800eccc:	e7f4      	b.n	800ecb8 <_dtoa_r+0x288>
 800ecce:	f04f 0b01 	mov.w	fp, #1
 800ecd2:	f8cd b00c 	str.w	fp, [sp, #12]
 800ecd6:	465b      	mov	r3, fp
 800ecd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ecdc:	e7d0      	b.n	800ec80 <_dtoa_r+0x250>
 800ecde:	3101      	adds	r1, #1
 800ece0:	0052      	lsls	r2, r2, #1
 800ece2:	e7d1      	b.n	800ec88 <_dtoa_r+0x258>
 800ece4:	f3af 8000 	nop.w
 800ece8:	636f4361 	.word	0x636f4361
 800ecec:	3fd287a7 	.word	0x3fd287a7
 800ecf0:	8b60c8b3 	.word	0x8b60c8b3
 800ecf4:	3fc68a28 	.word	0x3fc68a28
 800ecf8:	509f79fb 	.word	0x509f79fb
 800ecfc:	3fd34413 	.word	0x3fd34413
 800ed00:	08011bd9 	.word	0x08011bd9
 800ed04:	08011bf0 	.word	0x08011bf0
 800ed08:	7ff00000 	.word	0x7ff00000
 800ed0c:	08011ba9 	.word	0x08011ba9
 800ed10:	3ff80000 	.word	0x3ff80000
 800ed14:	08011d40 	.word	0x08011d40
 800ed18:	08011c48 	.word	0x08011c48
 800ed1c:	08011bd5 	.word	0x08011bd5
 800ed20:	08011ba8 	.word	0x08011ba8
 800ed24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ed28:	6018      	str	r0, [r3, #0]
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	2b0e      	cmp	r3, #14
 800ed2e:	f200 80a1 	bhi.w	800ee74 <_dtoa_r+0x444>
 800ed32:	2c00      	cmp	r4, #0
 800ed34:	f000 809e 	beq.w	800ee74 <_dtoa_r+0x444>
 800ed38:	2f00      	cmp	r7, #0
 800ed3a:	dd33      	ble.n	800eda4 <_dtoa_r+0x374>
 800ed3c:	4b9c      	ldr	r3, [pc, #624]	@ (800efb0 <_dtoa_r+0x580>)
 800ed3e:	f007 020f 	and.w	r2, r7, #15
 800ed42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed46:	ed93 7b00 	vldr	d7, [r3]
 800ed4a:	05f8      	lsls	r0, r7, #23
 800ed4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ed50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ed54:	d516      	bpl.n	800ed84 <_dtoa_r+0x354>
 800ed56:	4b97      	ldr	r3, [pc, #604]	@ (800efb4 <_dtoa_r+0x584>)
 800ed58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ed5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed60:	f7f1 fd74 	bl	800084c <__aeabi_ddiv>
 800ed64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed68:	f004 040f 	and.w	r4, r4, #15
 800ed6c:	2603      	movs	r6, #3
 800ed6e:	4d91      	ldr	r5, [pc, #580]	@ (800efb4 <_dtoa_r+0x584>)
 800ed70:	b954      	cbnz	r4, 800ed88 <_dtoa_r+0x358>
 800ed72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ed76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed7a:	f7f1 fd67 	bl	800084c <__aeabi_ddiv>
 800ed7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed82:	e028      	b.n	800edd6 <_dtoa_r+0x3a6>
 800ed84:	2602      	movs	r6, #2
 800ed86:	e7f2      	b.n	800ed6e <_dtoa_r+0x33e>
 800ed88:	07e1      	lsls	r1, r4, #31
 800ed8a:	d508      	bpl.n	800ed9e <_dtoa_r+0x36e>
 800ed8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ed90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed94:	f7f1 fc30 	bl	80005f8 <__aeabi_dmul>
 800ed98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ed9c:	3601      	adds	r6, #1
 800ed9e:	1064      	asrs	r4, r4, #1
 800eda0:	3508      	adds	r5, #8
 800eda2:	e7e5      	b.n	800ed70 <_dtoa_r+0x340>
 800eda4:	f000 80af 	beq.w	800ef06 <_dtoa_r+0x4d6>
 800eda8:	427c      	negs	r4, r7
 800edaa:	4b81      	ldr	r3, [pc, #516]	@ (800efb0 <_dtoa_r+0x580>)
 800edac:	4d81      	ldr	r5, [pc, #516]	@ (800efb4 <_dtoa_r+0x584>)
 800edae:	f004 020f 	and.w	r2, r4, #15
 800edb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800edbe:	f7f1 fc1b 	bl	80005f8 <__aeabi_dmul>
 800edc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edc6:	1124      	asrs	r4, r4, #4
 800edc8:	2300      	movs	r3, #0
 800edca:	2602      	movs	r6, #2
 800edcc:	2c00      	cmp	r4, #0
 800edce:	f040 808f 	bne.w	800eef0 <_dtoa_r+0x4c0>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1d3      	bne.n	800ed7e <_dtoa_r+0x34e>
 800edd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800edd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f000 8094 	beq.w	800ef0a <_dtoa_r+0x4da>
 800ede2:	4b75      	ldr	r3, [pc, #468]	@ (800efb8 <_dtoa_r+0x588>)
 800ede4:	2200      	movs	r2, #0
 800ede6:	4620      	mov	r0, r4
 800ede8:	4629      	mov	r1, r5
 800edea:	f7f1 fe77 	bl	8000adc <__aeabi_dcmplt>
 800edee:	2800      	cmp	r0, #0
 800edf0:	f000 808b 	beq.w	800ef0a <_dtoa_r+0x4da>
 800edf4:	9b03      	ldr	r3, [sp, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 8087 	beq.w	800ef0a <_dtoa_r+0x4da>
 800edfc:	f1bb 0f00 	cmp.w	fp, #0
 800ee00:	dd34      	ble.n	800ee6c <_dtoa_r+0x43c>
 800ee02:	4620      	mov	r0, r4
 800ee04:	4b6d      	ldr	r3, [pc, #436]	@ (800efbc <_dtoa_r+0x58c>)
 800ee06:	2200      	movs	r2, #0
 800ee08:	4629      	mov	r1, r5
 800ee0a:	f7f1 fbf5 	bl	80005f8 <__aeabi_dmul>
 800ee0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee12:	f107 38ff 	add.w	r8, r7, #4294967295
 800ee16:	3601      	adds	r6, #1
 800ee18:	465c      	mov	r4, fp
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f7f1 fb82 	bl	8000524 <__aeabi_i2d>
 800ee20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee24:	f7f1 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ee28:	4b65      	ldr	r3, [pc, #404]	@ (800efc0 <_dtoa_r+0x590>)
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f7f1 fa2e 	bl	800028c <__adddf3>
 800ee30:	4605      	mov	r5, r0
 800ee32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ee36:	2c00      	cmp	r4, #0
 800ee38:	d16a      	bne.n	800ef10 <_dtoa_r+0x4e0>
 800ee3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee3e:	4b61      	ldr	r3, [pc, #388]	@ (800efc4 <_dtoa_r+0x594>)
 800ee40:	2200      	movs	r2, #0
 800ee42:	f7f1 fa21 	bl	8000288 <__aeabi_dsub>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
 800ee4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ee4e:	462a      	mov	r2, r5
 800ee50:	4633      	mov	r3, r6
 800ee52:	f7f1 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	f040 8298 	bne.w	800f38c <_dtoa_r+0x95c>
 800ee5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee60:	462a      	mov	r2, r5
 800ee62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ee66:	f7f1 fe39 	bl	8000adc <__aeabi_dcmplt>
 800ee6a:	bb38      	cbnz	r0, 800eebc <_dtoa_r+0x48c>
 800ee6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ee70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ee74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	f2c0 8157 	blt.w	800f12a <_dtoa_r+0x6fa>
 800ee7c:	2f0e      	cmp	r7, #14
 800ee7e:	f300 8154 	bgt.w	800f12a <_dtoa_r+0x6fa>
 800ee82:	4b4b      	ldr	r3, [pc, #300]	@ (800efb0 <_dtoa_r+0x580>)
 800ee84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee88:	ed93 7b00 	vldr	d7, [r3]
 800ee8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	ed8d 7b00 	vstr	d7, [sp]
 800ee94:	f280 80e5 	bge.w	800f062 <_dtoa_r+0x632>
 800ee98:	9b03      	ldr	r3, [sp, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f300 80e1 	bgt.w	800f062 <_dtoa_r+0x632>
 800eea0:	d10c      	bne.n	800eebc <_dtoa_r+0x48c>
 800eea2:	4b48      	ldr	r3, [pc, #288]	@ (800efc4 <_dtoa_r+0x594>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	ec51 0b17 	vmov	r0, r1, d7
 800eeaa:	f7f1 fba5 	bl	80005f8 <__aeabi_dmul>
 800eeae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eeb2:	f7f1 fe27 	bl	8000b04 <__aeabi_dcmpge>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	f000 8266 	beq.w	800f388 <_dtoa_r+0x958>
 800eebc:	2400      	movs	r4, #0
 800eebe:	4625      	mov	r5, r4
 800eec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eec2:	4656      	mov	r6, sl
 800eec4:	ea6f 0803 	mvn.w	r8, r3
 800eec8:	2700      	movs	r7, #0
 800eeca:	4621      	mov	r1, r4
 800eecc:	4648      	mov	r0, r9
 800eece:	f000 fcbf 	bl	800f850 <_Bfree>
 800eed2:	2d00      	cmp	r5, #0
 800eed4:	f000 80bd 	beq.w	800f052 <_dtoa_r+0x622>
 800eed8:	b12f      	cbz	r7, 800eee6 <_dtoa_r+0x4b6>
 800eeda:	42af      	cmp	r7, r5
 800eedc:	d003      	beq.n	800eee6 <_dtoa_r+0x4b6>
 800eede:	4639      	mov	r1, r7
 800eee0:	4648      	mov	r0, r9
 800eee2:	f000 fcb5 	bl	800f850 <_Bfree>
 800eee6:	4629      	mov	r1, r5
 800eee8:	4648      	mov	r0, r9
 800eeea:	f000 fcb1 	bl	800f850 <_Bfree>
 800eeee:	e0b0      	b.n	800f052 <_dtoa_r+0x622>
 800eef0:	07e2      	lsls	r2, r4, #31
 800eef2:	d505      	bpl.n	800ef00 <_dtoa_r+0x4d0>
 800eef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eef8:	f7f1 fb7e 	bl	80005f8 <__aeabi_dmul>
 800eefc:	3601      	adds	r6, #1
 800eefe:	2301      	movs	r3, #1
 800ef00:	1064      	asrs	r4, r4, #1
 800ef02:	3508      	adds	r5, #8
 800ef04:	e762      	b.n	800edcc <_dtoa_r+0x39c>
 800ef06:	2602      	movs	r6, #2
 800ef08:	e765      	b.n	800edd6 <_dtoa_r+0x3a6>
 800ef0a:	9c03      	ldr	r4, [sp, #12]
 800ef0c:	46b8      	mov	r8, r7
 800ef0e:	e784      	b.n	800ee1a <_dtoa_r+0x3ea>
 800ef10:	4b27      	ldr	r3, [pc, #156]	@ (800efb0 <_dtoa_r+0x580>)
 800ef12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef1c:	4454      	add	r4, sl
 800ef1e:	2900      	cmp	r1, #0
 800ef20:	d054      	beq.n	800efcc <_dtoa_r+0x59c>
 800ef22:	4929      	ldr	r1, [pc, #164]	@ (800efc8 <_dtoa_r+0x598>)
 800ef24:	2000      	movs	r0, #0
 800ef26:	f7f1 fc91 	bl	800084c <__aeabi_ddiv>
 800ef2a:	4633      	mov	r3, r6
 800ef2c:	462a      	mov	r2, r5
 800ef2e:	f7f1 f9ab 	bl	8000288 <__aeabi_dsub>
 800ef32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ef36:	4656      	mov	r6, sl
 800ef38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef3c:	f7f1 fe0c 	bl	8000b58 <__aeabi_d2iz>
 800ef40:	4605      	mov	r5, r0
 800ef42:	f7f1 faef 	bl	8000524 <__aeabi_i2d>
 800ef46:	4602      	mov	r2, r0
 800ef48:	460b      	mov	r3, r1
 800ef4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef4e:	f7f1 f99b 	bl	8000288 <__aeabi_dsub>
 800ef52:	3530      	adds	r5, #48	@ 0x30
 800ef54:	4602      	mov	r2, r0
 800ef56:	460b      	mov	r3, r1
 800ef58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef5c:	f806 5b01 	strb.w	r5, [r6], #1
 800ef60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ef64:	f7f1 fdba 	bl	8000adc <__aeabi_dcmplt>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d172      	bne.n	800f052 <_dtoa_r+0x622>
 800ef6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef70:	4911      	ldr	r1, [pc, #68]	@ (800efb8 <_dtoa_r+0x588>)
 800ef72:	2000      	movs	r0, #0
 800ef74:	f7f1 f988 	bl	8000288 <__aeabi_dsub>
 800ef78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ef7c:	f7f1 fdae 	bl	8000adc <__aeabi_dcmplt>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	f040 80b4 	bne.w	800f0ee <_dtoa_r+0x6be>
 800ef86:	42a6      	cmp	r6, r4
 800ef88:	f43f af70 	beq.w	800ee6c <_dtoa_r+0x43c>
 800ef8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ef90:	4b0a      	ldr	r3, [pc, #40]	@ (800efbc <_dtoa_r+0x58c>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	f7f1 fb30 	bl	80005f8 <__aeabi_dmul>
 800ef98:	4b08      	ldr	r3, [pc, #32]	@ (800efbc <_dtoa_r+0x58c>)
 800ef9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ef9e:	2200      	movs	r2, #0
 800efa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efa4:	f7f1 fb28 	bl	80005f8 <__aeabi_dmul>
 800efa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efac:	e7c4      	b.n	800ef38 <_dtoa_r+0x508>
 800efae:	bf00      	nop
 800efb0:	08011d40 	.word	0x08011d40
 800efb4:	08011d18 	.word	0x08011d18
 800efb8:	3ff00000 	.word	0x3ff00000
 800efbc:	40240000 	.word	0x40240000
 800efc0:	401c0000 	.word	0x401c0000
 800efc4:	40140000 	.word	0x40140000
 800efc8:	3fe00000 	.word	0x3fe00000
 800efcc:	4631      	mov	r1, r6
 800efce:	4628      	mov	r0, r5
 800efd0:	f7f1 fb12 	bl	80005f8 <__aeabi_dmul>
 800efd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800efd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800efda:	4656      	mov	r6, sl
 800efdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efe0:	f7f1 fdba 	bl	8000b58 <__aeabi_d2iz>
 800efe4:	4605      	mov	r5, r0
 800efe6:	f7f1 fa9d 	bl	8000524 <__aeabi_i2d>
 800efea:	4602      	mov	r2, r0
 800efec:	460b      	mov	r3, r1
 800efee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eff2:	f7f1 f949 	bl	8000288 <__aeabi_dsub>
 800eff6:	3530      	adds	r5, #48	@ 0x30
 800eff8:	f806 5b01 	strb.w	r5, [r6], #1
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	42a6      	cmp	r6, r4
 800f002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f006:	f04f 0200 	mov.w	r2, #0
 800f00a:	d124      	bne.n	800f056 <_dtoa_r+0x626>
 800f00c:	4baf      	ldr	r3, [pc, #700]	@ (800f2cc <_dtoa_r+0x89c>)
 800f00e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f012:	f7f1 f93b 	bl	800028c <__adddf3>
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f01e:	f7f1 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 800f022:	2800      	cmp	r0, #0
 800f024:	d163      	bne.n	800f0ee <_dtoa_r+0x6be>
 800f026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f02a:	49a8      	ldr	r1, [pc, #672]	@ (800f2cc <_dtoa_r+0x89c>)
 800f02c:	2000      	movs	r0, #0
 800f02e:	f7f1 f92b 	bl	8000288 <__aeabi_dsub>
 800f032:	4602      	mov	r2, r0
 800f034:	460b      	mov	r3, r1
 800f036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f03a:	f7f1 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800f03e:	2800      	cmp	r0, #0
 800f040:	f43f af14 	beq.w	800ee6c <_dtoa_r+0x43c>
 800f044:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f046:	1e73      	subs	r3, r6, #1
 800f048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f04a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f04e:	2b30      	cmp	r3, #48	@ 0x30
 800f050:	d0f8      	beq.n	800f044 <_dtoa_r+0x614>
 800f052:	4647      	mov	r7, r8
 800f054:	e03b      	b.n	800f0ce <_dtoa_r+0x69e>
 800f056:	4b9e      	ldr	r3, [pc, #632]	@ (800f2d0 <_dtoa_r+0x8a0>)
 800f058:	f7f1 face 	bl	80005f8 <__aeabi_dmul>
 800f05c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f060:	e7bc      	b.n	800efdc <_dtoa_r+0x5ac>
 800f062:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f066:	4656      	mov	r6, sl
 800f068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f06c:	4620      	mov	r0, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	f7f1 fbec 	bl	800084c <__aeabi_ddiv>
 800f074:	f7f1 fd70 	bl	8000b58 <__aeabi_d2iz>
 800f078:	4680      	mov	r8, r0
 800f07a:	f7f1 fa53 	bl	8000524 <__aeabi_i2d>
 800f07e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f082:	f7f1 fab9 	bl	80005f8 <__aeabi_dmul>
 800f086:	4602      	mov	r2, r0
 800f088:	460b      	mov	r3, r1
 800f08a:	4620      	mov	r0, r4
 800f08c:	4629      	mov	r1, r5
 800f08e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f092:	f7f1 f8f9 	bl	8000288 <__aeabi_dsub>
 800f096:	f806 4b01 	strb.w	r4, [r6], #1
 800f09a:	9d03      	ldr	r5, [sp, #12]
 800f09c:	eba6 040a 	sub.w	r4, r6, sl
 800f0a0:	42a5      	cmp	r5, r4
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	d133      	bne.n	800f110 <_dtoa_r+0x6e0>
 800f0a8:	f7f1 f8f0 	bl	800028c <__adddf3>
 800f0ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	460d      	mov	r5, r1
 800f0b4:	f7f1 fd30 	bl	8000b18 <__aeabi_dcmpgt>
 800f0b8:	b9c0      	cbnz	r0, 800f0ec <_dtoa_r+0x6bc>
 800f0ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0be:	4620      	mov	r0, r4
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	f7f1 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0c6:	b110      	cbz	r0, 800f0ce <_dtoa_r+0x69e>
 800f0c8:	f018 0f01 	tst.w	r8, #1
 800f0cc:	d10e      	bne.n	800f0ec <_dtoa_r+0x6bc>
 800f0ce:	9902      	ldr	r1, [sp, #8]
 800f0d0:	4648      	mov	r0, r9
 800f0d2:	f000 fbbd 	bl	800f850 <_Bfree>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	7033      	strb	r3, [r6, #0]
 800f0da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f0dc:	3701      	adds	r7, #1
 800f0de:	601f      	str	r7, [r3, #0]
 800f0e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f000 824b 	beq.w	800f57e <_dtoa_r+0xb4e>
 800f0e8:	601e      	str	r6, [r3, #0]
 800f0ea:	e248      	b.n	800f57e <_dtoa_r+0xb4e>
 800f0ec:	46b8      	mov	r8, r7
 800f0ee:	4633      	mov	r3, r6
 800f0f0:	461e      	mov	r6, r3
 800f0f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0f6:	2a39      	cmp	r2, #57	@ 0x39
 800f0f8:	d106      	bne.n	800f108 <_dtoa_r+0x6d8>
 800f0fa:	459a      	cmp	sl, r3
 800f0fc:	d1f8      	bne.n	800f0f0 <_dtoa_r+0x6c0>
 800f0fe:	2230      	movs	r2, #48	@ 0x30
 800f100:	f108 0801 	add.w	r8, r8, #1
 800f104:	f88a 2000 	strb.w	r2, [sl]
 800f108:	781a      	ldrb	r2, [r3, #0]
 800f10a:	3201      	adds	r2, #1
 800f10c:	701a      	strb	r2, [r3, #0]
 800f10e:	e7a0      	b.n	800f052 <_dtoa_r+0x622>
 800f110:	4b6f      	ldr	r3, [pc, #444]	@ (800f2d0 <_dtoa_r+0x8a0>)
 800f112:	2200      	movs	r2, #0
 800f114:	f7f1 fa70 	bl	80005f8 <__aeabi_dmul>
 800f118:	2200      	movs	r2, #0
 800f11a:	2300      	movs	r3, #0
 800f11c:	4604      	mov	r4, r0
 800f11e:	460d      	mov	r5, r1
 800f120:	f7f1 fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800f124:	2800      	cmp	r0, #0
 800f126:	d09f      	beq.n	800f068 <_dtoa_r+0x638>
 800f128:	e7d1      	b.n	800f0ce <_dtoa_r+0x69e>
 800f12a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f12c:	2a00      	cmp	r2, #0
 800f12e:	f000 80ea 	beq.w	800f306 <_dtoa_r+0x8d6>
 800f132:	9a07      	ldr	r2, [sp, #28]
 800f134:	2a01      	cmp	r2, #1
 800f136:	f300 80cd 	bgt.w	800f2d4 <_dtoa_r+0x8a4>
 800f13a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f13c:	2a00      	cmp	r2, #0
 800f13e:	f000 80c1 	beq.w	800f2c4 <_dtoa_r+0x894>
 800f142:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f146:	9c08      	ldr	r4, [sp, #32]
 800f148:	9e00      	ldr	r6, [sp, #0]
 800f14a:	9a00      	ldr	r2, [sp, #0]
 800f14c:	441a      	add	r2, r3
 800f14e:	9200      	str	r2, [sp, #0]
 800f150:	9a06      	ldr	r2, [sp, #24]
 800f152:	2101      	movs	r1, #1
 800f154:	441a      	add	r2, r3
 800f156:	4648      	mov	r0, r9
 800f158:	9206      	str	r2, [sp, #24]
 800f15a:	f000 fc2d 	bl	800f9b8 <__i2b>
 800f15e:	4605      	mov	r5, r0
 800f160:	b166      	cbz	r6, 800f17c <_dtoa_r+0x74c>
 800f162:	9b06      	ldr	r3, [sp, #24]
 800f164:	2b00      	cmp	r3, #0
 800f166:	dd09      	ble.n	800f17c <_dtoa_r+0x74c>
 800f168:	42b3      	cmp	r3, r6
 800f16a:	9a00      	ldr	r2, [sp, #0]
 800f16c:	bfa8      	it	ge
 800f16e:	4633      	movge	r3, r6
 800f170:	1ad2      	subs	r2, r2, r3
 800f172:	9200      	str	r2, [sp, #0]
 800f174:	9a06      	ldr	r2, [sp, #24]
 800f176:	1af6      	subs	r6, r6, r3
 800f178:	1ad3      	subs	r3, r2, r3
 800f17a:	9306      	str	r3, [sp, #24]
 800f17c:	9b08      	ldr	r3, [sp, #32]
 800f17e:	b30b      	cbz	r3, 800f1c4 <_dtoa_r+0x794>
 800f180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 80c6 	beq.w	800f314 <_dtoa_r+0x8e4>
 800f188:	2c00      	cmp	r4, #0
 800f18a:	f000 80c0 	beq.w	800f30e <_dtoa_r+0x8de>
 800f18e:	4629      	mov	r1, r5
 800f190:	4622      	mov	r2, r4
 800f192:	4648      	mov	r0, r9
 800f194:	f000 fcc8 	bl	800fb28 <__pow5mult>
 800f198:	9a02      	ldr	r2, [sp, #8]
 800f19a:	4601      	mov	r1, r0
 800f19c:	4605      	mov	r5, r0
 800f19e:	4648      	mov	r0, r9
 800f1a0:	f000 fc20 	bl	800f9e4 <__multiply>
 800f1a4:	9902      	ldr	r1, [sp, #8]
 800f1a6:	4680      	mov	r8, r0
 800f1a8:	4648      	mov	r0, r9
 800f1aa:	f000 fb51 	bl	800f850 <_Bfree>
 800f1ae:	9b08      	ldr	r3, [sp, #32]
 800f1b0:	1b1b      	subs	r3, r3, r4
 800f1b2:	9308      	str	r3, [sp, #32]
 800f1b4:	f000 80b1 	beq.w	800f31a <_dtoa_r+0x8ea>
 800f1b8:	9a08      	ldr	r2, [sp, #32]
 800f1ba:	4641      	mov	r1, r8
 800f1bc:	4648      	mov	r0, r9
 800f1be:	f000 fcb3 	bl	800fb28 <__pow5mult>
 800f1c2:	9002      	str	r0, [sp, #8]
 800f1c4:	2101      	movs	r1, #1
 800f1c6:	4648      	mov	r0, r9
 800f1c8:	f000 fbf6 	bl	800f9b8 <__i2b>
 800f1cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f000 81d8 	beq.w	800f586 <_dtoa_r+0xb56>
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	4601      	mov	r1, r0
 800f1da:	4648      	mov	r0, r9
 800f1dc:	f000 fca4 	bl	800fb28 <__pow5mult>
 800f1e0:	9b07      	ldr	r3, [sp, #28]
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	f300 809f 	bgt.w	800f328 <_dtoa_r+0x8f8>
 800f1ea:	9b04      	ldr	r3, [sp, #16]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	f040 8097 	bne.w	800f320 <_dtoa_r+0x8f0>
 800f1f2:	9b05      	ldr	r3, [sp, #20]
 800f1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f040 8093 	bne.w	800f324 <_dtoa_r+0x8f4>
 800f1fe:	9b05      	ldr	r3, [sp, #20]
 800f200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f204:	0d1b      	lsrs	r3, r3, #20
 800f206:	051b      	lsls	r3, r3, #20
 800f208:	b133      	cbz	r3, 800f218 <_dtoa_r+0x7e8>
 800f20a:	9b00      	ldr	r3, [sp, #0]
 800f20c:	3301      	adds	r3, #1
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	9b06      	ldr	r3, [sp, #24]
 800f212:	3301      	adds	r3, #1
 800f214:	9306      	str	r3, [sp, #24]
 800f216:	2301      	movs	r3, #1
 800f218:	9308      	str	r3, [sp, #32]
 800f21a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f000 81b8 	beq.w	800f592 <_dtoa_r+0xb62>
 800f222:	6923      	ldr	r3, [r4, #16]
 800f224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f228:	6918      	ldr	r0, [r3, #16]
 800f22a:	f000 fb79 	bl	800f920 <__hi0bits>
 800f22e:	f1c0 0020 	rsb	r0, r0, #32
 800f232:	9b06      	ldr	r3, [sp, #24]
 800f234:	4418      	add	r0, r3
 800f236:	f010 001f 	ands.w	r0, r0, #31
 800f23a:	f000 8082 	beq.w	800f342 <_dtoa_r+0x912>
 800f23e:	f1c0 0320 	rsb	r3, r0, #32
 800f242:	2b04      	cmp	r3, #4
 800f244:	dd73      	ble.n	800f32e <_dtoa_r+0x8fe>
 800f246:	9b00      	ldr	r3, [sp, #0]
 800f248:	f1c0 001c 	rsb	r0, r0, #28
 800f24c:	4403      	add	r3, r0
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	9b06      	ldr	r3, [sp, #24]
 800f252:	4403      	add	r3, r0
 800f254:	4406      	add	r6, r0
 800f256:	9306      	str	r3, [sp, #24]
 800f258:	9b00      	ldr	r3, [sp, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	dd05      	ble.n	800f26a <_dtoa_r+0x83a>
 800f25e:	9902      	ldr	r1, [sp, #8]
 800f260:	461a      	mov	r2, r3
 800f262:	4648      	mov	r0, r9
 800f264:	f000 fcba 	bl	800fbdc <__lshift>
 800f268:	9002      	str	r0, [sp, #8]
 800f26a:	9b06      	ldr	r3, [sp, #24]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dd05      	ble.n	800f27c <_dtoa_r+0x84c>
 800f270:	4621      	mov	r1, r4
 800f272:	461a      	mov	r2, r3
 800f274:	4648      	mov	r0, r9
 800f276:	f000 fcb1 	bl	800fbdc <__lshift>
 800f27a:	4604      	mov	r4, r0
 800f27c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d061      	beq.n	800f346 <_dtoa_r+0x916>
 800f282:	9802      	ldr	r0, [sp, #8]
 800f284:	4621      	mov	r1, r4
 800f286:	f000 fd15 	bl	800fcb4 <__mcmp>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	da5b      	bge.n	800f346 <_dtoa_r+0x916>
 800f28e:	2300      	movs	r3, #0
 800f290:	9902      	ldr	r1, [sp, #8]
 800f292:	220a      	movs	r2, #10
 800f294:	4648      	mov	r0, r9
 800f296:	f000 fafd 	bl	800f894 <__multadd>
 800f29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f29c:	9002      	str	r0, [sp, #8]
 800f29e:	f107 38ff 	add.w	r8, r7, #4294967295
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f000 8177 	beq.w	800f596 <_dtoa_r+0xb66>
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	220a      	movs	r2, #10
 800f2ae:	4648      	mov	r0, r9
 800f2b0:	f000 faf0 	bl	800f894 <__multadd>
 800f2b4:	f1bb 0f00 	cmp.w	fp, #0
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	dc6f      	bgt.n	800f39c <_dtoa_r+0x96c>
 800f2bc:	9b07      	ldr	r3, [sp, #28]
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	dc49      	bgt.n	800f356 <_dtoa_r+0x926>
 800f2c2:	e06b      	b.n	800f39c <_dtoa_r+0x96c>
 800f2c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f2c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f2ca:	e73c      	b.n	800f146 <_dtoa_r+0x716>
 800f2cc:	3fe00000 	.word	0x3fe00000
 800f2d0:	40240000 	.word	0x40240000
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	1e5c      	subs	r4, r3, #1
 800f2d8:	9b08      	ldr	r3, [sp, #32]
 800f2da:	42a3      	cmp	r3, r4
 800f2dc:	db09      	blt.n	800f2f2 <_dtoa_r+0x8c2>
 800f2de:	1b1c      	subs	r4, r3, r4
 800f2e0:	9b03      	ldr	r3, [sp, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	f6bf af30 	bge.w	800f148 <_dtoa_r+0x718>
 800f2e8:	9b00      	ldr	r3, [sp, #0]
 800f2ea:	9a03      	ldr	r2, [sp, #12]
 800f2ec:	1a9e      	subs	r6, r3, r2
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e72b      	b.n	800f14a <_dtoa_r+0x71a>
 800f2f2:	9b08      	ldr	r3, [sp, #32]
 800f2f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f2f6:	9408      	str	r4, [sp, #32]
 800f2f8:	1ae3      	subs	r3, r4, r3
 800f2fa:	441a      	add	r2, r3
 800f2fc:	9e00      	ldr	r6, [sp, #0]
 800f2fe:	9b03      	ldr	r3, [sp, #12]
 800f300:	920d      	str	r2, [sp, #52]	@ 0x34
 800f302:	2400      	movs	r4, #0
 800f304:	e721      	b.n	800f14a <_dtoa_r+0x71a>
 800f306:	9c08      	ldr	r4, [sp, #32]
 800f308:	9e00      	ldr	r6, [sp, #0]
 800f30a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f30c:	e728      	b.n	800f160 <_dtoa_r+0x730>
 800f30e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f312:	e751      	b.n	800f1b8 <_dtoa_r+0x788>
 800f314:	9a08      	ldr	r2, [sp, #32]
 800f316:	9902      	ldr	r1, [sp, #8]
 800f318:	e750      	b.n	800f1bc <_dtoa_r+0x78c>
 800f31a:	f8cd 8008 	str.w	r8, [sp, #8]
 800f31e:	e751      	b.n	800f1c4 <_dtoa_r+0x794>
 800f320:	2300      	movs	r3, #0
 800f322:	e779      	b.n	800f218 <_dtoa_r+0x7e8>
 800f324:	9b04      	ldr	r3, [sp, #16]
 800f326:	e777      	b.n	800f218 <_dtoa_r+0x7e8>
 800f328:	2300      	movs	r3, #0
 800f32a:	9308      	str	r3, [sp, #32]
 800f32c:	e779      	b.n	800f222 <_dtoa_r+0x7f2>
 800f32e:	d093      	beq.n	800f258 <_dtoa_r+0x828>
 800f330:	9a00      	ldr	r2, [sp, #0]
 800f332:	331c      	adds	r3, #28
 800f334:	441a      	add	r2, r3
 800f336:	9200      	str	r2, [sp, #0]
 800f338:	9a06      	ldr	r2, [sp, #24]
 800f33a:	441a      	add	r2, r3
 800f33c:	441e      	add	r6, r3
 800f33e:	9206      	str	r2, [sp, #24]
 800f340:	e78a      	b.n	800f258 <_dtoa_r+0x828>
 800f342:	4603      	mov	r3, r0
 800f344:	e7f4      	b.n	800f330 <_dtoa_r+0x900>
 800f346:	9b03      	ldr	r3, [sp, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	46b8      	mov	r8, r7
 800f34c:	dc20      	bgt.n	800f390 <_dtoa_r+0x960>
 800f34e:	469b      	mov	fp, r3
 800f350:	9b07      	ldr	r3, [sp, #28]
 800f352:	2b02      	cmp	r3, #2
 800f354:	dd1e      	ble.n	800f394 <_dtoa_r+0x964>
 800f356:	f1bb 0f00 	cmp.w	fp, #0
 800f35a:	f47f adb1 	bne.w	800eec0 <_dtoa_r+0x490>
 800f35e:	4621      	mov	r1, r4
 800f360:	465b      	mov	r3, fp
 800f362:	2205      	movs	r2, #5
 800f364:	4648      	mov	r0, r9
 800f366:	f000 fa95 	bl	800f894 <__multadd>
 800f36a:	4601      	mov	r1, r0
 800f36c:	4604      	mov	r4, r0
 800f36e:	9802      	ldr	r0, [sp, #8]
 800f370:	f000 fca0 	bl	800fcb4 <__mcmp>
 800f374:	2800      	cmp	r0, #0
 800f376:	f77f ada3 	ble.w	800eec0 <_dtoa_r+0x490>
 800f37a:	4656      	mov	r6, sl
 800f37c:	2331      	movs	r3, #49	@ 0x31
 800f37e:	f806 3b01 	strb.w	r3, [r6], #1
 800f382:	f108 0801 	add.w	r8, r8, #1
 800f386:	e59f      	b.n	800eec8 <_dtoa_r+0x498>
 800f388:	9c03      	ldr	r4, [sp, #12]
 800f38a:	46b8      	mov	r8, r7
 800f38c:	4625      	mov	r5, r4
 800f38e:	e7f4      	b.n	800f37a <_dtoa_r+0x94a>
 800f390:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	f000 8101 	beq.w	800f59e <_dtoa_r+0xb6e>
 800f39c:	2e00      	cmp	r6, #0
 800f39e:	dd05      	ble.n	800f3ac <_dtoa_r+0x97c>
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4632      	mov	r2, r6
 800f3a4:	4648      	mov	r0, r9
 800f3a6:	f000 fc19 	bl	800fbdc <__lshift>
 800f3aa:	4605      	mov	r5, r0
 800f3ac:	9b08      	ldr	r3, [sp, #32]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d05c      	beq.n	800f46c <_dtoa_r+0xa3c>
 800f3b2:	6869      	ldr	r1, [r5, #4]
 800f3b4:	4648      	mov	r0, r9
 800f3b6:	f000 fa0b 	bl	800f7d0 <_Balloc>
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	b928      	cbnz	r0, 800f3ca <_dtoa_r+0x99a>
 800f3be:	4b82      	ldr	r3, [pc, #520]	@ (800f5c8 <_dtoa_r+0xb98>)
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f3c6:	f7ff bb4a 	b.w	800ea5e <_dtoa_r+0x2e>
 800f3ca:	692a      	ldr	r2, [r5, #16]
 800f3cc:	3202      	adds	r2, #2
 800f3ce:	0092      	lsls	r2, r2, #2
 800f3d0:	f105 010c 	add.w	r1, r5, #12
 800f3d4:	300c      	adds	r0, #12
 800f3d6:	f7ff fa92 	bl	800e8fe <memcpy>
 800f3da:	2201      	movs	r2, #1
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4648      	mov	r0, r9
 800f3e0:	f000 fbfc 	bl	800fbdc <__lshift>
 800f3e4:	f10a 0301 	add.w	r3, sl, #1
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	eb0a 030b 	add.w	r3, sl, fp
 800f3ee:	9308      	str	r3, [sp, #32]
 800f3f0:	9b04      	ldr	r3, [sp, #16]
 800f3f2:	f003 0301 	and.w	r3, r3, #1
 800f3f6:	462f      	mov	r7, r5
 800f3f8:	9306      	str	r3, [sp, #24]
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	9b00      	ldr	r3, [sp, #0]
 800f3fe:	9802      	ldr	r0, [sp, #8]
 800f400:	4621      	mov	r1, r4
 800f402:	f103 3bff 	add.w	fp, r3, #4294967295
 800f406:	f7ff fa88 	bl	800e91a <quorem>
 800f40a:	4603      	mov	r3, r0
 800f40c:	3330      	adds	r3, #48	@ 0x30
 800f40e:	9003      	str	r0, [sp, #12]
 800f410:	4639      	mov	r1, r7
 800f412:	9802      	ldr	r0, [sp, #8]
 800f414:	9309      	str	r3, [sp, #36]	@ 0x24
 800f416:	f000 fc4d 	bl	800fcb4 <__mcmp>
 800f41a:	462a      	mov	r2, r5
 800f41c:	9004      	str	r0, [sp, #16]
 800f41e:	4621      	mov	r1, r4
 800f420:	4648      	mov	r0, r9
 800f422:	f000 fc63 	bl	800fcec <__mdiff>
 800f426:	68c2      	ldr	r2, [r0, #12]
 800f428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f42a:	4606      	mov	r6, r0
 800f42c:	bb02      	cbnz	r2, 800f470 <_dtoa_r+0xa40>
 800f42e:	4601      	mov	r1, r0
 800f430:	9802      	ldr	r0, [sp, #8]
 800f432:	f000 fc3f 	bl	800fcb4 <__mcmp>
 800f436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f438:	4602      	mov	r2, r0
 800f43a:	4631      	mov	r1, r6
 800f43c:	4648      	mov	r0, r9
 800f43e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f440:	9309      	str	r3, [sp, #36]	@ 0x24
 800f442:	f000 fa05 	bl	800f850 <_Bfree>
 800f446:	9b07      	ldr	r3, [sp, #28]
 800f448:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f44a:	9e00      	ldr	r6, [sp, #0]
 800f44c:	ea42 0103 	orr.w	r1, r2, r3
 800f450:	9b06      	ldr	r3, [sp, #24]
 800f452:	4319      	orrs	r1, r3
 800f454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f456:	d10d      	bne.n	800f474 <_dtoa_r+0xa44>
 800f458:	2b39      	cmp	r3, #57	@ 0x39
 800f45a:	d027      	beq.n	800f4ac <_dtoa_r+0xa7c>
 800f45c:	9a04      	ldr	r2, [sp, #16]
 800f45e:	2a00      	cmp	r2, #0
 800f460:	dd01      	ble.n	800f466 <_dtoa_r+0xa36>
 800f462:	9b03      	ldr	r3, [sp, #12]
 800f464:	3331      	adds	r3, #49	@ 0x31
 800f466:	f88b 3000 	strb.w	r3, [fp]
 800f46a:	e52e      	b.n	800eeca <_dtoa_r+0x49a>
 800f46c:	4628      	mov	r0, r5
 800f46e:	e7b9      	b.n	800f3e4 <_dtoa_r+0x9b4>
 800f470:	2201      	movs	r2, #1
 800f472:	e7e2      	b.n	800f43a <_dtoa_r+0xa0a>
 800f474:	9904      	ldr	r1, [sp, #16]
 800f476:	2900      	cmp	r1, #0
 800f478:	db04      	blt.n	800f484 <_dtoa_r+0xa54>
 800f47a:	9807      	ldr	r0, [sp, #28]
 800f47c:	4301      	orrs	r1, r0
 800f47e:	9806      	ldr	r0, [sp, #24]
 800f480:	4301      	orrs	r1, r0
 800f482:	d120      	bne.n	800f4c6 <_dtoa_r+0xa96>
 800f484:	2a00      	cmp	r2, #0
 800f486:	ddee      	ble.n	800f466 <_dtoa_r+0xa36>
 800f488:	9902      	ldr	r1, [sp, #8]
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	2201      	movs	r2, #1
 800f48e:	4648      	mov	r0, r9
 800f490:	f000 fba4 	bl	800fbdc <__lshift>
 800f494:	4621      	mov	r1, r4
 800f496:	9002      	str	r0, [sp, #8]
 800f498:	f000 fc0c 	bl	800fcb4 <__mcmp>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	9b00      	ldr	r3, [sp, #0]
 800f4a0:	dc02      	bgt.n	800f4a8 <_dtoa_r+0xa78>
 800f4a2:	d1e0      	bne.n	800f466 <_dtoa_r+0xa36>
 800f4a4:	07da      	lsls	r2, r3, #31
 800f4a6:	d5de      	bpl.n	800f466 <_dtoa_r+0xa36>
 800f4a8:	2b39      	cmp	r3, #57	@ 0x39
 800f4aa:	d1da      	bne.n	800f462 <_dtoa_r+0xa32>
 800f4ac:	2339      	movs	r3, #57	@ 0x39
 800f4ae:	f88b 3000 	strb.w	r3, [fp]
 800f4b2:	4633      	mov	r3, r6
 800f4b4:	461e      	mov	r6, r3
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f4bc:	2a39      	cmp	r2, #57	@ 0x39
 800f4be:	d04e      	beq.n	800f55e <_dtoa_r+0xb2e>
 800f4c0:	3201      	adds	r2, #1
 800f4c2:	701a      	strb	r2, [r3, #0]
 800f4c4:	e501      	b.n	800eeca <_dtoa_r+0x49a>
 800f4c6:	2a00      	cmp	r2, #0
 800f4c8:	dd03      	ble.n	800f4d2 <_dtoa_r+0xaa2>
 800f4ca:	2b39      	cmp	r3, #57	@ 0x39
 800f4cc:	d0ee      	beq.n	800f4ac <_dtoa_r+0xa7c>
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	e7c9      	b.n	800f466 <_dtoa_r+0xa36>
 800f4d2:	9a00      	ldr	r2, [sp, #0]
 800f4d4:	9908      	ldr	r1, [sp, #32]
 800f4d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f4da:	428a      	cmp	r2, r1
 800f4dc:	d028      	beq.n	800f530 <_dtoa_r+0xb00>
 800f4de:	9902      	ldr	r1, [sp, #8]
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	220a      	movs	r2, #10
 800f4e4:	4648      	mov	r0, r9
 800f4e6:	f000 f9d5 	bl	800f894 <__multadd>
 800f4ea:	42af      	cmp	r7, r5
 800f4ec:	9002      	str	r0, [sp, #8]
 800f4ee:	f04f 0300 	mov.w	r3, #0
 800f4f2:	f04f 020a 	mov.w	r2, #10
 800f4f6:	4639      	mov	r1, r7
 800f4f8:	4648      	mov	r0, r9
 800f4fa:	d107      	bne.n	800f50c <_dtoa_r+0xadc>
 800f4fc:	f000 f9ca 	bl	800f894 <__multadd>
 800f500:	4607      	mov	r7, r0
 800f502:	4605      	mov	r5, r0
 800f504:	9b00      	ldr	r3, [sp, #0]
 800f506:	3301      	adds	r3, #1
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	e777      	b.n	800f3fc <_dtoa_r+0x9cc>
 800f50c:	f000 f9c2 	bl	800f894 <__multadd>
 800f510:	4629      	mov	r1, r5
 800f512:	4607      	mov	r7, r0
 800f514:	2300      	movs	r3, #0
 800f516:	220a      	movs	r2, #10
 800f518:	4648      	mov	r0, r9
 800f51a:	f000 f9bb 	bl	800f894 <__multadd>
 800f51e:	4605      	mov	r5, r0
 800f520:	e7f0      	b.n	800f504 <_dtoa_r+0xad4>
 800f522:	f1bb 0f00 	cmp.w	fp, #0
 800f526:	bfcc      	ite	gt
 800f528:	465e      	movgt	r6, fp
 800f52a:	2601      	movle	r6, #1
 800f52c:	4456      	add	r6, sl
 800f52e:	2700      	movs	r7, #0
 800f530:	9902      	ldr	r1, [sp, #8]
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	2201      	movs	r2, #1
 800f536:	4648      	mov	r0, r9
 800f538:	f000 fb50 	bl	800fbdc <__lshift>
 800f53c:	4621      	mov	r1, r4
 800f53e:	9002      	str	r0, [sp, #8]
 800f540:	f000 fbb8 	bl	800fcb4 <__mcmp>
 800f544:	2800      	cmp	r0, #0
 800f546:	dcb4      	bgt.n	800f4b2 <_dtoa_r+0xa82>
 800f548:	d102      	bne.n	800f550 <_dtoa_r+0xb20>
 800f54a:	9b00      	ldr	r3, [sp, #0]
 800f54c:	07db      	lsls	r3, r3, #31
 800f54e:	d4b0      	bmi.n	800f4b2 <_dtoa_r+0xa82>
 800f550:	4633      	mov	r3, r6
 800f552:	461e      	mov	r6, r3
 800f554:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f558:	2a30      	cmp	r2, #48	@ 0x30
 800f55a:	d0fa      	beq.n	800f552 <_dtoa_r+0xb22>
 800f55c:	e4b5      	b.n	800eeca <_dtoa_r+0x49a>
 800f55e:	459a      	cmp	sl, r3
 800f560:	d1a8      	bne.n	800f4b4 <_dtoa_r+0xa84>
 800f562:	2331      	movs	r3, #49	@ 0x31
 800f564:	f108 0801 	add.w	r8, r8, #1
 800f568:	f88a 3000 	strb.w	r3, [sl]
 800f56c:	e4ad      	b.n	800eeca <_dtoa_r+0x49a>
 800f56e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f570:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f5cc <_dtoa_r+0xb9c>
 800f574:	b11b      	cbz	r3, 800f57e <_dtoa_r+0xb4e>
 800f576:	f10a 0308 	add.w	r3, sl, #8
 800f57a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f57c:	6013      	str	r3, [r2, #0]
 800f57e:	4650      	mov	r0, sl
 800f580:	b017      	add	sp, #92	@ 0x5c
 800f582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f586:	9b07      	ldr	r3, [sp, #28]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	f77f ae2e 	ble.w	800f1ea <_dtoa_r+0x7ba>
 800f58e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f590:	9308      	str	r3, [sp, #32]
 800f592:	2001      	movs	r0, #1
 800f594:	e64d      	b.n	800f232 <_dtoa_r+0x802>
 800f596:	f1bb 0f00 	cmp.w	fp, #0
 800f59a:	f77f aed9 	ble.w	800f350 <_dtoa_r+0x920>
 800f59e:	4656      	mov	r6, sl
 800f5a0:	9802      	ldr	r0, [sp, #8]
 800f5a2:	4621      	mov	r1, r4
 800f5a4:	f7ff f9b9 	bl	800e91a <quorem>
 800f5a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f5ac:	f806 3b01 	strb.w	r3, [r6], #1
 800f5b0:	eba6 020a 	sub.w	r2, r6, sl
 800f5b4:	4593      	cmp	fp, r2
 800f5b6:	ddb4      	ble.n	800f522 <_dtoa_r+0xaf2>
 800f5b8:	9902      	ldr	r1, [sp, #8]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	220a      	movs	r2, #10
 800f5be:	4648      	mov	r0, r9
 800f5c0:	f000 f968 	bl	800f894 <__multadd>
 800f5c4:	9002      	str	r0, [sp, #8]
 800f5c6:	e7eb      	b.n	800f5a0 <_dtoa_r+0xb70>
 800f5c8:	08011c48 	.word	0x08011c48
 800f5cc:	08011bcc 	.word	0x08011bcc

0800f5d0 <_free_r>:
 800f5d0:	b538      	push	{r3, r4, r5, lr}
 800f5d2:	4605      	mov	r5, r0
 800f5d4:	2900      	cmp	r1, #0
 800f5d6:	d041      	beq.n	800f65c <_free_r+0x8c>
 800f5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5dc:	1f0c      	subs	r4, r1, #4
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	bfb8      	it	lt
 800f5e2:	18e4      	addlt	r4, r4, r3
 800f5e4:	f000 f8e8 	bl	800f7b8 <__malloc_lock>
 800f5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f660 <_free_r+0x90>)
 800f5ea:	6813      	ldr	r3, [r2, #0]
 800f5ec:	b933      	cbnz	r3, 800f5fc <_free_r+0x2c>
 800f5ee:	6063      	str	r3, [r4, #4]
 800f5f0:	6014      	str	r4, [r2, #0]
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5f8:	f000 b8e4 	b.w	800f7c4 <__malloc_unlock>
 800f5fc:	42a3      	cmp	r3, r4
 800f5fe:	d908      	bls.n	800f612 <_free_r+0x42>
 800f600:	6820      	ldr	r0, [r4, #0]
 800f602:	1821      	adds	r1, r4, r0
 800f604:	428b      	cmp	r3, r1
 800f606:	bf01      	itttt	eq
 800f608:	6819      	ldreq	r1, [r3, #0]
 800f60a:	685b      	ldreq	r3, [r3, #4]
 800f60c:	1809      	addeq	r1, r1, r0
 800f60e:	6021      	streq	r1, [r4, #0]
 800f610:	e7ed      	b.n	800f5ee <_free_r+0x1e>
 800f612:	461a      	mov	r2, r3
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	b10b      	cbz	r3, 800f61c <_free_r+0x4c>
 800f618:	42a3      	cmp	r3, r4
 800f61a:	d9fa      	bls.n	800f612 <_free_r+0x42>
 800f61c:	6811      	ldr	r1, [r2, #0]
 800f61e:	1850      	adds	r0, r2, r1
 800f620:	42a0      	cmp	r0, r4
 800f622:	d10b      	bne.n	800f63c <_free_r+0x6c>
 800f624:	6820      	ldr	r0, [r4, #0]
 800f626:	4401      	add	r1, r0
 800f628:	1850      	adds	r0, r2, r1
 800f62a:	4283      	cmp	r3, r0
 800f62c:	6011      	str	r1, [r2, #0]
 800f62e:	d1e0      	bne.n	800f5f2 <_free_r+0x22>
 800f630:	6818      	ldr	r0, [r3, #0]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	6053      	str	r3, [r2, #4]
 800f636:	4408      	add	r0, r1
 800f638:	6010      	str	r0, [r2, #0]
 800f63a:	e7da      	b.n	800f5f2 <_free_r+0x22>
 800f63c:	d902      	bls.n	800f644 <_free_r+0x74>
 800f63e:	230c      	movs	r3, #12
 800f640:	602b      	str	r3, [r5, #0]
 800f642:	e7d6      	b.n	800f5f2 <_free_r+0x22>
 800f644:	6820      	ldr	r0, [r4, #0]
 800f646:	1821      	adds	r1, r4, r0
 800f648:	428b      	cmp	r3, r1
 800f64a:	bf04      	itt	eq
 800f64c:	6819      	ldreq	r1, [r3, #0]
 800f64e:	685b      	ldreq	r3, [r3, #4]
 800f650:	6063      	str	r3, [r4, #4]
 800f652:	bf04      	itt	eq
 800f654:	1809      	addeq	r1, r1, r0
 800f656:	6021      	streq	r1, [r4, #0]
 800f658:	6054      	str	r4, [r2, #4]
 800f65a:	e7ca      	b.n	800f5f2 <_free_r+0x22>
 800f65c:	bd38      	pop	{r3, r4, r5, pc}
 800f65e:	bf00      	nop
 800f660:	20001934 	.word	0x20001934

0800f664 <malloc>:
 800f664:	4b02      	ldr	r3, [pc, #8]	@ (800f670 <malloc+0xc>)
 800f666:	4601      	mov	r1, r0
 800f668:	6818      	ldr	r0, [r3, #0]
 800f66a:	f000 b825 	b.w	800f6b8 <_malloc_r>
 800f66e:	bf00      	nop
 800f670:	20000140 	.word	0x20000140

0800f674 <sbrk_aligned>:
 800f674:	b570      	push	{r4, r5, r6, lr}
 800f676:	4e0f      	ldr	r6, [pc, #60]	@ (800f6b4 <sbrk_aligned+0x40>)
 800f678:	460c      	mov	r4, r1
 800f67a:	6831      	ldr	r1, [r6, #0]
 800f67c:	4605      	mov	r5, r0
 800f67e:	b911      	cbnz	r1, 800f686 <sbrk_aligned+0x12>
 800f680:	f001 f804 	bl	801068c <_sbrk_r>
 800f684:	6030      	str	r0, [r6, #0]
 800f686:	4621      	mov	r1, r4
 800f688:	4628      	mov	r0, r5
 800f68a:	f000 ffff 	bl	801068c <_sbrk_r>
 800f68e:	1c43      	adds	r3, r0, #1
 800f690:	d103      	bne.n	800f69a <sbrk_aligned+0x26>
 800f692:	f04f 34ff 	mov.w	r4, #4294967295
 800f696:	4620      	mov	r0, r4
 800f698:	bd70      	pop	{r4, r5, r6, pc}
 800f69a:	1cc4      	adds	r4, r0, #3
 800f69c:	f024 0403 	bic.w	r4, r4, #3
 800f6a0:	42a0      	cmp	r0, r4
 800f6a2:	d0f8      	beq.n	800f696 <sbrk_aligned+0x22>
 800f6a4:	1a21      	subs	r1, r4, r0
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	f000 fff0 	bl	801068c <_sbrk_r>
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d1f2      	bne.n	800f696 <sbrk_aligned+0x22>
 800f6b0:	e7ef      	b.n	800f692 <sbrk_aligned+0x1e>
 800f6b2:	bf00      	nop
 800f6b4:	20001930 	.word	0x20001930

0800f6b8 <_malloc_r>:
 800f6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6bc:	1ccd      	adds	r5, r1, #3
 800f6be:	f025 0503 	bic.w	r5, r5, #3
 800f6c2:	3508      	adds	r5, #8
 800f6c4:	2d0c      	cmp	r5, #12
 800f6c6:	bf38      	it	cc
 800f6c8:	250c      	movcc	r5, #12
 800f6ca:	2d00      	cmp	r5, #0
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	db01      	blt.n	800f6d4 <_malloc_r+0x1c>
 800f6d0:	42a9      	cmp	r1, r5
 800f6d2:	d904      	bls.n	800f6de <_malloc_r+0x26>
 800f6d4:	230c      	movs	r3, #12
 800f6d6:	6033      	str	r3, [r6, #0]
 800f6d8:	2000      	movs	r0, #0
 800f6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f7b4 <_malloc_r+0xfc>
 800f6e2:	f000 f869 	bl	800f7b8 <__malloc_lock>
 800f6e6:	f8d8 3000 	ldr.w	r3, [r8]
 800f6ea:	461c      	mov	r4, r3
 800f6ec:	bb44      	cbnz	r4, 800f740 <_malloc_r+0x88>
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	f7ff ffbf 	bl	800f674 <sbrk_aligned>
 800f6f6:	1c43      	adds	r3, r0, #1
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	d158      	bne.n	800f7ae <_malloc_r+0xf6>
 800f6fc:	f8d8 4000 	ldr.w	r4, [r8]
 800f700:	4627      	mov	r7, r4
 800f702:	2f00      	cmp	r7, #0
 800f704:	d143      	bne.n	800f78e <_malloc_r+0xd6>
 800f706:	2c00      	cmp	r4, #0
 800f708:	d04b      	beq.n	800f7a2 <_malloc_r+0xea>
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	4639      	mov	r1, r7
 800f70e:	4630      	mov	r0, r6
 800f710:	eb04 0903 	add.w	r9, r4, r3
 800f714:	f000 ffba 	bl	801068c <_sbrk_r>
 800f718:	4581      	cmp	r9, r0
 800f71a:	d142      	bne.n	800f7a2 <_malloc_r+0xea>
 800f71c:	6821      	ldr	r1, [r4, #0]
 800f71e:	1a6d      	subs	r5, r5, r1
 800f720:	4629      	mov	r1, r5
 800f722:	4630      	mov	r0, r6
 800f724:	f7ff ffa6 	bl	800f674 <sbrk_aligned>
 800f728:	3001      	adds	r0, #1
 800f72a:	d03a      	beq.n	800f7a2 <_malloc_r+0xea>
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	442b      	add	r3, r5
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	f8d8 3000 	ldr.w	r3, [r8]
 800f736:	685a      	ldr	r2, [r3, #4]
 800f738:	bb62      	cbnz	r2, 800f794 <_malloc_r+0xdc>
 800f73a:	f8c8 7000 	str.w	r7, [r8]
 800f73e:	e00f      	b.n	800f760 <_malloc_r+0xa8>
 800f740:	6822      	ldr	r2, [r4, #0]
 800f742:	1b52      	subs	r2, r2, r5
 800f744:	d420      	bmi.n	800f788 <_malloc_r+0xd0>
 800f746:	2a0b      	cmp	r2, #11
 800f748:	d917      	bls.n	800f77a <_malloc_r+0xc2>
 800f74a:	1961      	adds	r1, r4, r5
 800f74c:	42a3      	cmp	r3, r4
 800f74e:	6025      	str	r5, [r4, #0]
 800f750:	bf18      	it	ne
 800f752:	6059      	strne	r1, [r3, #4]
 800f754:	6863      	ldr	r3, [r4, #4]
 800f756:	bf08      	it	eq
 800f758:	f8c8 1000 	streq.w	r1, [r8]
 800f75c:	5162      	str	r2, [r4, r5]
 800f75e:	604b      	str	r3, [r1, #4]
 800f760:	4630      	mov	r0, r6
 800f762:	f000 f82f 	bl	800f7c4 <__malloc_unlock>
 800f766:	f104 000b 	add.w	r0, r4, #11
 800f76a:	1d23      	adds	r3, r4, #4
 800f76c:	f020 0007 	bic.w	r0, r0, #7
 800f770:	1ac2      	subs	r2, r0, r3
 800f772:	bf1c      	itt	ne
 800f774:	1a1b      	subne	r3, r3, r0
 800f776:	50a3      	strne	r3, [r4, r2]
 800f778:	e7af      	b.n	800f6da <_malloc_r+0x22>
 800f77a:	6862      	ldr	r2, [r4, #4]
 800f77c:	42a3      	cmp	r3, r4
 800f77e:	bf0c      	ite	eq
 800f780:	f8c8 2000 	streq.w	r2, [r8]
 800f784:	605a      	strne	r2, [r3, #4]
 800f786:	e7eb      	b.n	800f760 <_malloc_r+0xa8>
 800f788:	4623      	mov	r3, r4
 800f78a:	6864      	ldr	r4, [r4, #4]
 800f78c:	e7ae      	b.n	800f6ec <_malloc_r+0x34>
 800f78e:	463c      	mov	r4, r7
 800f790:	687f      	ldr	r7, [r7, #4]
 800f792:	e7b6      	b.n	800f702 <_malloc_r+0x4a>
 800f794:	461a      	mov	r2, r3
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	42a3      	cmp	r3, r4
 800f79a:	d1fb      	bne.n	800f794 <_malloc_r+0xdc>
 800f79c:	2300      	movs	r3, #0
 800f79e:	6053      	str	r3, [r2, #4]
 800f7a0:	e7de      	b.n	800f760 <_malloc_r+0xa8>
 800f7a2:	230c      	movs	r3, #12
 800f7a4:	6033      	str	r3, [r6, #0]
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	f000 f80c 	bl	800f7c4 <__malloc_unlock>
 800f7ac:	e794      	b.n	800f6d8 <_malloc_r+0x20>
 800f7ae:	6005      	str	r5, [r0, #0]
 800f7b0:	e7d6      	b.n	800f760 <_malloc_r+0xa8>
 800f7b2:	bf00      	nop
 800f7b4:	20001934 	.word	0x20001934

0800f7b8 <__malloc_lock>:
 800f7b8:	4801      	ldr	r0, [pc, #4]	@ (800f7c0 <__malloc_lock+0x8>)
 800f7ba:	f7ff b89e 	b.w	800e8fa <__retarget_lock_acquire_recursive>
 800f7be:	bf00      	nop
 800f7c0:	2000192c 	.word	0x2000192c

0800f7c4 <__malloc_unlock>:
 800f7c4:	4801      	ldr	r0, [pc, #4]	@ (800f7cc <__malloc_unlock+0x8>)
 800f7c6:	f7ff b899 	b.w	800e8fc <__retarget_lock_release_recursive>
 800f7ca:	bf00      	nop
 800f7cc:	2000192c 	.word	0x2000192c

0800f7d0 <_Balloc>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	69c6      	ldr	r6, [r0, #28]
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	460d      	mov	r5, r1
 800f7d8:	b976      	cbnz	r6, 800f7f8 <_Balloc+0x28>
 800f7da:	2010      	movs	r0, #16
 800f7dc:	f7ff ff42 	bl	800f664 <malloc>
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	61e0      	str	r0, [r4, #28]
 800f7e4:	b920      	cbnz	r0, 800f7f0 <_Balloc+0x20>
 800f7e6:	4b18      	ldr	r3, [pc, #96]	@ (800f848 <_Balloc+0x78>)
 800f7e8:	4818      	ldr	r0, [pc, #96]	@ (800f84c <_Balloc+0x7c>)
 800f7ea:	216b      	movs	r1, #107	@ 0x6b
 800f7ec:	f000 ff5e 	bl	80106ac <__assert_func>
 800f7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7f4:	6006      	str	r6, [r0, #0]
 800f7f6:	60c6      	str	r6, [r0, #12]
 800f7f8:	69e6      	ldr	r6, [r4, #28]
 800f7fa:	68f3      	ldr	r3, [r6, #12]
 800f7fc:	b183      	cbz	r3, 800f820 <_Balloc+0x50>
 800f7fe:	69e3      	ldr	r3, [r4, #28]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f806:	b9b8      	cbnz	r0, 800f838 <_Balloc+0x68>
 800f808:	2101      	movs	r1, #1
 800f80a:	fa01 f605 	lsl.w	r6, r1, r5
 800f80e:	1d72      	adds	r2, r6, #5
 800f810:	0092      	lsls	r2, r2, #2
 800f812:	4620      	mov	r0, r4
 800f814:	f000 ff68 	bl	80106e8 <_calloc_r>
 800f818:	b160      	cbz	r0, 800f834 <_Balloc+0x64>
 800f81a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f81e:	e00e      	b.n	800f83e <_Balloc+0x6e>
 800f820:	2221      	movs	r2, #33	@ 0x21
 800f822:	2104      	movs	r1, #4
 800f824:	4620      	mov	r0, r4
 800f826:	f000 ff5f 	bl	80106e8 <_calloc_r>
 800f82a:	69e3      	ldr	r3, [r4, #28]
 800f82c:	60f0      	str	r0, [r6, #12]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1e4      	bne.n	800f7fe <_Balloc+0x2e>
 800f834:	2000      	movs	r0, #0
 800f836:	bd70      	pop	{r4, r5, r6, pc}
 800f838:	6802      	ldr	r2, [r0, #0]
 800f83a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f83e:	2300      	movs	r3, #0
 800f840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f844:	e7f7      	b.n	800f836 <_Balloc+0x66>
 800f846:	bf00      	nop
 800f848:	08011bd9 	.word	0x08011bd9
 800f84c:	08011c59 	.word	0x08011c59

0800f850 <_Bfree>:
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	69c6      	ldr	r6, [r0, #28]
 800f854:	4605      	mov	r5, r0
 800f856:	460c      	mov	r4, r1
 800f858:	b976      	cbnz	r6, 800f878 <_Bfree+0x28>
 800f85a:	2010      	movs	r0, #16
 800f85c:	f7ff ff02 	bl	800f664 <malloc>
 800f860:	4602      	mov	r2, r0
 800f862:	61e8      	str	r0, [r5, #28]
 800f864:	b920      	cbnz	r0, 800f870 <_Bfree+0x20>
 800f866:	4b09      	ldr	r3, [pc, #36]	@ (800f88c <_Bfree+0x3c>)
 800f868:	4809      	ldr	r0, [pc, #36]	@ (800f890 <_Bfree+0x40>)
 800f86a:	218f      	movs	r1, #143	@ 0x8f
 800f86c:	f000 ff1e 	bl	80106ac <__assert_func>
 800f870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f874:	6006      	str	r6, [r0, #0]
 800f876:	60c6      	str	r6, [r0, #12]
 800f878:	b13c      	cbz	r4, 800f88a <_Bfree+0x3a>
 800f87a:	69eb      	ldr	r3, [r5, #28]
 800f87c:	6862      	ldr	r2, [r4, #4]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f884:	6021      	str	r1, [r4, #0]
 800f886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f88a:	bd70      	pop	{r4, r5, r6, pc}
 800f88c:	08011bd9 	.word	0x08011bd9
 800f890:	08011c59 	.word	0x08011c59

0800f894 <__multadd>:
 800f894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f898:	690d      	ldr	r5, [r1, #16]
 800f89a:	4607      	mov	r7, r0
 800f89c:	460c      	mov	r4, r1
 800f89e:	461e      	mov	r6, r3
 800f8a0:	f101 0c14 	add.w	ip, r1, #20
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800f8aa:	b299      	uxth	r1, r3
 800f8ac:	fb02 6101 	mla	r1, r2, r1, r6
 800f8b0:	0c1e      	lsrs	r6, r3, #16
 800f8b2:	0c0b      	lsrs	r3, r1, #16
 800f8b4:	fb02 3306 	mla	r3, r2, r6, r3
 800f8b8:	b289      	uxth	r1, r1
 800f8ba:	3001      	adds	r0, #1
 800f8bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8c0:	4285      	cmp	r5, r0
 800f8c2:	f84c 1b04 	str.w	r1, [ip], #4
 800f8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8ca:	dcec      	bgt.n	800f8a6 <__multadd+0x12>
 800f8cc:	b30e      	cbz	r6, 800f912 <__multadd+0x7e>
 800f8ce:	68a3      	ldr	r3, [r4, #8]
 800f8d0:	42ab      	cmp	r3, r5
 800f8d2:	dc19      	bgt.n	800f908 <__multadd+0x74>
 800f8d4:	6861      	ldr	r1, [r4, #4]
 800f8d6:	4638      	mov	r0, r7
 800f8d8:	3101      	adds	r1, #1
 800f8da:	f7ff ff79 	bl	800f7d0 <_Balloc>
 800f8de:	4680      	mov	r8, r0
 800f8e0:	b928      	cbnz	r0, 800f8ee <__multadd+0x5a>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f918 <__multadd+0x84>)
 800f8e6:	480d      	ldr	r0, [pc, #52]	@ (800f91c <__multadd+0x88>)
 800f8e8:	21ba      	movs	r1, #186	@ 0xba
 800f8ea:	f000 fedf 	bl	80106ac <__assert_func>
 800f8ee:	6922      	ldr	r2, [r4, #16]
 800f8f0:	3202      	adds	r2, #2
 800f8f2:	f104 010c 	add.w	r1, r4, #12
 800f8f6:	0092      	lsls	r2, r2, #2
 800f8f8:	300c      	adds	r0, #12
 800f8fa:	f7ff f800 	bl	800e8fe <memcpy>
 800f8fe:	4621      	mov	r1, r4
 800f900:	4638      	mov	r0, r7
 800f902:	f7ff ffa5 	bl	800f850 <_Bfree>
 800f906:	4644      	mov	r4, r8
 800f908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f90c:	3501      	adds	r5, #1
 800f90e:	615e      	str	r6, [r3, #20]
 800f910:	6125      	str	r5, [r4, #16]
 800f912:	4620      	mov	r0, r4
 800f914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f918:	08011c48 	.word	0x08011c48
 800f91c:	08011c59 	.word	0x08011c59

0800f920 <__hi0bits>:
 800f920:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f924:	4603      	mov	r3, r0
 800f926:	bf36      	itet	cc
 800f928:	0403      	lslcc	r3, r0, #16
 800f92a:	2000      	movcs	r0, #0
 800f92c:	2010      	movcc	r0, #16
 800f92e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f932:	bf3c      	itt	cc
 800f934:	021b      	lslcc	r3, r3, #8
 800f936:	3008      	addcc	r0, #8
 800f938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f93c:	bf3c      	itt	cc
 800f93e:	011b      	lslcc	r3, r3, #4
 800f940:	3004      	addcc	r0, #4
 800f942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f946:	bf3c      	itt	cc
 800f948:	009b      	lslcc	r3, r3, #2
 800f94a:	3002      	addcc	r0, #2
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	db05      	blt.n	800f95c <__hi0bits+0x3c>
 800f950:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f954:	f100 0001 	add.w	r0, r0, #1
 800f958:	bf08      	it	eq
 800f95a:	2020      	moveq	r0, #32
 800f95c:	4770      	bx	lr

0800f95e <__lo0bits>:
 800f95e:	6803      	ldr	r3, [r0, #0]
 800f960:	4602      	mov	r2, r0
 800f962:	f013 0007 	ands.w	r0, r3, #7
 800f966:	d00b      	beq.n	800f980 <__lo0bits+0x22>
 800f968:	07d9      	lsls	r1, r3, #31
 800f96a:	d421      	bmi.n	800f9b0 <__lo0bits+0x52>
 800f96c:	0798      	lsls	r0, r3, #30
 800f96e:	bf49      	itett	mi
 800f970:	085b      	lsrmi	r3, r3, #1
 800f972:	089b      	lsrpl	r3, r3, #2
 800f974:	2001      	movmi	r0, #1
 800f976:	6013      	strmi	r3, [r2, #0]
 800f978:	bf5c      	itt	pl
 800f97a:	6013      	strpl	r3, [r2, #0]
 800f97c:	2002      	movpl	r0, #2
 800f97e:	4770      	bx	lr
 800f980:	b299      	uxth	r1, r3
 800f982:	b909      	cbnz	r1, 800f988 <__lo0bits+0x2a>
 800f984:	0c1b      	lsrs	r3, r3, #16
 800f986:	2010      	movs	r0, #16
 800f988:	b2d9      	uxtb	r1, r3
 800f98a:	b909      	cbnz	r1, 800f990 <__lo0bits+0x32>
 800f98c:	3008      	adds	r0, #8
 800f98e:	0a1b      	lsrs	r3, r3, #8
 800f990:	0719      	lsls	r1, r3, #28
 800f992:	bf04      	itt	eq
 800f994:	091b      	lsreq	r3, r3, #4
 800f996:	3004      	addeq	r0, #4
 800f998:	0799      	lsls	r1, r3, #30
 800f99a:	bf04      	itt	eq
 800f99c:	089b      	lsreq	r3, r3, #2
 800f99e:	3002      	addeq	r0, #2
 800f9a0:	07d9      	lsls	r1, r3, #31
 800f9a2:	d403      	bmi.n	800f9ac <__lo0bits+0x4e>
 800f9a4:	085b      	lsrs	r3, r3, #1
 800f9a6:	f100 0001 	add.w	r0, r0, #1
 800f9aa:	d003      	beq.n	800f9b4 <__lo0bits+0x56>
 800f9ac:	6013      	str	r3, [r2, #0]
 800f9ae:	4770      	bx	lr
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	4770      	bx	lr
 800f9b4:	2020      	movs	r0, #32
 800f9b6:	4770      	bx	lr

0800f9b8 <__i2b>:
 800f9b8:	b510      	push	{r4, lr}
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	2101      	movs	r1, #1
 800f9be:	f7ff ff07 	bl	800f7d0 <_Balloc>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	b928      	cbnz	r0, 800f9d2 <__i2b+0x1a>
 800f9c6:	4b05      	ldr	r3, [pc, #20]	@ (800f9dc <__i2b+0x24>)
 800f9c8:	4805      	ldr	r0, [pc, #20]	@ (800f9e0 <__i2b+0x28>)
 800f9ca:	f240 1145 	movw	r1, #325	@ 0x145
 800f9ce:	f000 fe6d 	bl	80106ac <__assert_func>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	6144      	str	r4, [r0, #20]
 800f9d6:	6103      	str	r3, [r0, #16]
 800f9d8:	bd10      	pop	{r4, pc}
 800f9da:	bf00      	nop
 800f9dc:	08011c48 	.word	0x08011c48
 800f9e0:	08011c59 	.word	0x08011c59

0800f9e4 <__multiply>:
 800f9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e8:	4617      	mov	r7, r2
 800f9ea:	690a      	ldr	r2, [r1, #16]
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	bfa8      	it	ge
 800f9f2:	463b      	movge	r3, r7
 800f9f4:	4689      	mov	r9, r1
 800f9f6:	bfa4      	itt	ge
 800f9f8:	460f      	movge	r7, r1
 800f9fa:	4699      	movge	r9, r3
 800f9fc:	693d      	ldr	r5, [r7, #16]
 800f9fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	6879      	ldr	r1, [r7, #4]
 800fa06:	eb05 060a 	add.w	r6, r5, sl
 800fa0a:	42b3      	cmp	r3, r6
 800fa0c:	b085      	sub	sp, #20
 800fa0e:	bfb8      	it	lt
 800fa10:	3101      	addlt	r1, #1
 800fa12:	f7ff fedd 	bl	800f7d0 <_Balloc>
 800fa16:	b930      	cbnz	r0, 800fa26 <__multiply+0x42>
 800fa18:	4602      	mov	r2, r0
 800fa1a:	4b41      	ldr	r3, [pc, #260]	@ (800fb20 <__multiply+0x13c>)
 800fa1c:	4841      	ldr	r0, [pc, #260]	@ (800fb24 <__multiply+0x140>)
 800fa1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fa22:	f000 fe43 	bl	80106ac <__assert_func>
 800fa26:	f100 0414 	add.w	r4, r0, #20
 800fa2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fa2e:	4623      	mov	r3, r4
 800fa30:	2200      	movs	r2, #0
 800fa32:	4573      	cmp	r3, lr
 800fa34:	d320      	bcc.n	800fa78 <__multiply+0x94>
 800fa36:	f107 0814 	add.w	r8, r7, #20
 800fa3a:	f109 0114 	add.w	r1, r9, #20
 800fa3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fa42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fa46:	9302      	str	r3, [sp, #8]
 800fa48:	1beb      	subs	r3, r5, r7
 800fa4a:	3b15      	subs	r3, #21
 800fa4c:	f023 0303 	bic.w	r3, r3, #3
 800fa50:	3304      	adds	r3, #4
 800fa52:	3715      	adds	r7, #21
 800fa54:	42bd      	cmp	r5, r7
 800fa56:	bf38      	it	cc
 800fa58:	2304      	movcc	r3, #4
 800fa5a:	9301      	str	r3, [sp, #4]
 800fa5c:	9b02      	ldr	r3, [sp, #8]
 800fa5e:	9103      	str	r1, [sp, #12]
 800fa60:	428b      	cmp	r3, r1
 800fa62:	d80c      	bhi.n	800fa7e <__multiply+0x9a>
 800fa64:	2e00      	cmp	r6, #0
 800fa66:	dd03      	ble.n	800fa70 <__multiply+0x8c>
 800fa68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d055      	beq.n	800fb1c <__multiply+0x138>
 800fa70:	6106      	str	r6, [r0, #16]
 800fa72:	b005      	add	sp, #20
 800fa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa78:	f843 2b04 	str.w	r2, [r3], #4
 800fa7c:	e7d9      	b.n	800fa32 <__multiply+0x4e>
 800fa7e:	f8b1 a000 	ldrh.w	sl, [r1]
 800fa82:	f1ba 0f00 	cmp.w	sl, #0
 800fa86:	d01f      	beq.n	800fac8 <__multiply+0xe4>
 800fa88:	46c4      	mov	ip, r8
 800fa8a:	46a1      	mov	r9, r4
 800fa8c:	2700      	movs	r7, #0
 800fa8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fa92:	f8d9 3000 	ldr.w	r3, [r9]
 800fa96:	fa1f fb82 	uxth.w	fp, r2
 800fa9a:	b29b      	uxth	r3, r3
 800fa9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800faa0:	443b      	add	r3, r7
 800faa2:	f8d9 7000 	ldr.w	r7, [r9]
 800faa6:	0c12      	lsrs	r2, r2, #16
 800faa8:	0c3f      	lsrs	r7, r7, #16
 800faaa:	fb0a 7202 	mla	r2, sl, r2, r7
 800faae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fab8:	4565      	cmp	r5, ip
 800faba:	f849 3b04 	str.w	r3, [r9], #4
 800fabe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fac2:	d8e4      	bhi.n	800fa8e <__multiply+0xaa>
 800fac4:	9b01      	ldr	r3, [sp, #4]
 800fac6:	50e7      	str	r7, [r4, r3]
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800face:	3104      	adds	r1, #4
 800fad0:	f1b9 0f00 	cmp.w	r9, #0
 800fad4:	d020      	beq.n	800fb18 <__multiply+0x134>
 800fad6:	6823      	ldr	r3, [r4, #0]
 800fad8:	4647      	mov	r7, r8
 800fada:	46a4      	mov	ip, r4
 800fadc:	f04f 0a00 	mov.w	sl, #0
 800fae0:	f8b7 b000 	ldrh.w	fp, [r7]
 800fae4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fae8:	fb09 220b 	mla	r2, r9, fp, r2
 800faec:	4452      	add	r2, sl
 800faee:	b29b      	uxth	r3, r3
 800faf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800faf4:	f84c 3b04 	str.w	r3, [ip], #4
 800faf8:	f857 3b04 	ldr.w	r3, [r7], #4
 800fafc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb00:	f8bc 3000 	ldrh.w	r3, [ip]
 800fb04:	fb09 330a 	mla	r3, r9, sl, r3
 800fb08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fb0c:	42bd      	cmp	r5, r7
 800fb0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb12:	d8e5      	bhi.n	800fae0 <__multiply+0xfc>
 800fb14:	9a01      	ldr	r2, [sp, #4]
 800fb16:	50a3      	str	r3, [r4, r2]
 800fb18:	3404      	adds	r4, #4
 800fb1a:	e79f      	b.n	800fa5c <__multiply+0x78>
 800fb1c:	3e01      	subs	r6, #1
 800fb1e:	e7a1      	b.n	800fa64 <__multiply+0x80>
 800fb20:	08011c48 	.word	0x08011c48
 800fb24:	08011c59 	.word	0x08011c59

0800fb28 <__pow5mult>:
 800fb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb2c:	4615      	mov	r5, r2
 800fb2e:	f012 0203 	ands.w	r2, r2, #3
 800fb32:	4607      	mov	r7, r0
 800fb34:	460e      	mov	r6, r1
 800fb36:	d007      	beq.n	800fb48 <__pow5mult+0x20>
 800fb38:	4c25      	ldr	r4, [pc, #148]	@ (800fbd0 <__pow5mult+0xa8>)
 800fb3a:	3a01      	subs	r2, #1
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb42:	f7ff fea7 	bl	800f894 <__multadd>
 800fb46:	4606      	mov	r6, r0
 800fb48:	10ad      	asrs	r5, r5, #2
 800fb4a:	d03d      	beq.n	800fbc8 <__pow5mult+0xa0>
 800fb4c:	69fc      	ldr	r4, [r7, #28]
 800fb4e:	b97c      	cbnz	r4, 800fb70 <__pow5mult+0x48>
 800fb50:	2010      	movs	r0, #16
 800fb52:	f7ff fd87 	bl	800f664 <malloc>
 800fb56:	4602      	mov	r2, r0
 800fb58:	61f8      	str	r0, [r7, #28]
 800fb5a:	b928      	cbnz	r0, 800fb68 <__pow5mult+0x40>
 800fb5c:	4b1d      	ldr	r3, [pc, #116]	@ (800fbd4 <__pow5mult+0xac>)
 800fb5e:	481e      	ldr	r0, [pc, #120]	@ (800fbd8 <__pow5mult+0xb0>)
 800fb60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fb64:	f000 fda2 	bl	80106ac <__assert_func>
 800fb68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb6c:	6004      	str	r4, [r0, #0]
 800fb6e:	60c4      	str	r4, [r0, #12]
 800fb70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fb74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb78:	b94c      	cbnz	r4, 800fb8e <__pow5mult+0x66>
 800fb7a:	f240 2171 	movw	r1, #625	@ 0x271
 800fb7e:	4638      	mov	r0, r7
 800fb80:	f7ff ff1a 	bl	800f9b8 <__i2b>
 800fb84:	2300      	movs	r3, #0
 800fb86:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	6003      	str	r3, [r0, #0]
 800fb8e:	f04f 0900 	mov.w	r9, #0
 800fb92:	07eb      	lsls	r3, r5, #31
 800fb94:	d50a      	bpl.n	800fbac <__pow5mult+0x84>
 800fb96:	4631      	mov	r1, r6
 800fb98:	4622      	mov	r2, r4
 800fb9a:	4638      	mov	r0, r7
 800fb9c:	f7ff ff22 	bl	800f9e4 <__multiply>
 800fba0:	4631      	mov	r1, r6
 800fba2:	4680      	mov	r8, r0
 800fba4:	4638      	mov	r0, r7
 800fba6:	f7ff fe53 	bl	800f850 <_Bfree>
 800fbaa:	4646      	mov	r6, r8
 800fbac:	106d      	asrs	r5, r5, #1
 800fbae:	d00b      	beq.n	800fbc8 <__pow5mult+0xa0>
 800fbb0:	6820      	ldr	r0, [r4, #0]
 800fbb2:	b938      	cbnz	r0, 800fbc4 <__pow5mult+0x9c>
 800fbb4:	4622      	mov	r2, r4
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	4638      	mov	r0, r7
 800fbba:	f7ff ff13 	bl	800f9e4 <__multiply>
 800fbbe:	6020      	str	r0, [r4, #0]
 800fbc0:	f8c0 9000 	str.w	r9, [r0]
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	e7e4      	b.n	800fb92 <__pow5mult+0x6a>
 800fbc8:	4630      	mov	r0, r6
 800fbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbce:	bf00      	nop
 800fbd0:	08011d0c 	.word	0x08011d0c
 800fbd4:	08011bd9 	.word	0x08011bd9
 800fbd8:	08011c59 	.word	0x08011c59

0800fbdc <__lshift>:
 800fbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	6849      	ldr	r1, [r1, #4]
 800fbe4:	6923      	ldr	r3, [r4, #16]
 800fbe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fbea:	68a3      	ldr	r3, [r4, #8]
 800fbec:	4607      	mov	r7, r0
 800fbee:	4691      	mov	r9, r2
 800fbf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fbf4:	f108 0601 	add.w	r6, r8, #1
 800fbf8:	42b3      	cmp	r3, r6
 800fbfa:	db0b      	blt.n	800fc14 <__lshift+0x38>
 800fbfc:	4638      	mov	r0, r7
 800fbfe:	f7ff fde7 	bl	800f7d0 <_Balloc>
 800fc02:	4605      	mov	r5, r0
 800fc04:	b948      	cbnz	r0, 800fc1a <__lshift+0x3e>
 800fc06:	4602      	mov	r2, r0
 800fc08:	4b28      	ldr	r3, [pc, #160]	@ (800fcac <__lshift+0xd0>)
 800fc0a:	4829      	ldr	r0, [pc, #164]	@ (800fcb0 <__lshift+0xd4>)
 800fc0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fc10:	f000 fd4c 	bl	80106ac <__assert_func>
 800fc14:	3101      	adds	r1, #1
 800fc16:	005b      	lsls	r3, r3, #1
 800fc18:	e7ee      	b.n	800fbf8 <__lshift+0x1c>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	f100 0114 	add.w	r1, r0, #20
 800fc20:	f100 0210 	add.w	r2, r0, #16
 800fc24:	4618      	mov	r0, r3
 800fc26:	4553      	cmp	r3, sl
 800fc28:	db33      	blt.n	800fc92 <__lshift+0xb6>
 800fc2a:	6920      	ldr	r0, [r4, #16]
 800fc2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc30:	f104 0314 	add.w	r3, r4, #20
 800fc34:	f019 091f 	ands.w	r9, r9, #31
 800fc38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc40:	d02b      	beq.n	800fc9a <__lshift+0xbe>
 800fc42:	f1c9 0e20 	rsb	lr, r9, #32
 800fc46:	468a      	mov	sl, r1
 800fc48:	2200      	movs	r2, #0
 800fc4a:	6818      	ldr	r0, [r3, #0]
 800fc4c:	fa00 f009 	lsl.w	r0, r0, r9
 800fc50:	4310      	orrs	r0, r2
 800fc52:	f84a 0b04 	str.w	r0, [sl], #4
 800fc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc5a:	459c      	cmp	ip, r3
 800fc5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc60:	d8f3      	bhi.n	800fc4a <__lshift+0x6e>
 800fc62:	ebac 0304 	sub.w	r3, ip, r4
 800fc66:	3b15      	subs	r3, #21
 800fc68:	f023 0303 	bic.w	r3, r3, #3
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	f104 0015 	add.w	r0, r4, #21
 800fc72:	4560      	cmp	r0, ip
 800fc74:	bf88      	it	hi
 800fc76:	2304      	movhi	r3, #4
 800fc78:	50ca      	str	r2, [r1, r3]
 800fc7a:	b10a      	cbz	r2, 800fc80 <__lshift+0xa4>
 800fc7c:	f108 0602 	add.w	r6, r8, #2
 800fc80:	3e01      	subs	r6, #1
 800fc82:	4638      	mov	r0, r7
 800fc84:	612e      	str	r6, [r5, #16]
 800fc86:	4621      	mov	r1, r4
 800fc88:	f7ff fde2 	bl	800f850 <_Bfree>
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc92:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc96:	3301      	adds	r3, #1
 800fc98:	e7c5      	b.n	800fc26 <__lshift+0x4a>
 800fc9a:	3904      	subs	r1, #4
 800fc9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fca0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fca4:	459c      	cmp	ip, r3
 800fca6:	d8f9      	bhi.n	800fc9c <__lshift+0xc0>
 800fca8:	e7ea      	b.n	800fc80 <__lshift+0xa4>
 800fcaa:	bf00      	nop
 800fcac:	08011c48 	.word	0x08011c48
 800fcb0:	08011c59 	.word	0x08011c59

0800fcb4 <__mcmp>:
 800fcb4:	690a      	ldr	r2, [r1, #16]
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	6900      	ldr	r0, [r0, #16]
 800fcba:	1a80      	subs	r0, r0, r2
 800fcbc:	b530      	push	{r4, r5, lr}
 800fcbe:	d10e      	bne.n	800fcde <__mcmp+0x2a>
 800fcc0:	3314      	adds	r3, #20
 800fcc2:	3114      	adds	r1, #20
 800fcc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fcc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fcd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fcd4:	4295      	cmp	r5, r2
 800fcd6:	d003      	beq.n	800fce0 <__mcmp+0x2c>
 800fcd8:	d205      	bcs.n	800fce6 <__mcmp+0x32>
 800fcda:	f04f 30ff 	mov.w	r0, #4294967295
 800fcde:	bd30      	pop	{r4, r5, pc}
 800fce0:	42a3      	cmp	r3, r4
 800fce2:	d3f3      	bcc.n	800fccc <__mcmp+0x18>
 800fce4:	e7fb      	b.n	800fcde <__mcmp+0x2a>
 800fce6:	2001      	movs	r0, #1
 800fce8:	e7f9      	b.n	800fcde <__mcmp+0x2a>
	...

0800fcec <__mdiff>:
 800fcec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf0:	4689      	mov	r9, r1
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	4648      	mov	r0, r9
 800fcf8:	4614      	mov	r4, r2
 800fcfa:	f7ff ffdb 	bl	800fcb4 <__mcmp>
 800fcfe:	1e05      	subs	r5, r0, #0
 800fd00:	d112      	bne.n	800fd28 <__mdiff+0x3c>
 800fd02:	4629      	mov	r1, r5
 800fd04:	4630      	mov	r0, r6
 800fd06:	f7ff fd63 	bl	800f7d0 <_Balloc>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	b928      	cbnz	r0, 800fd1a <__mdiff+0x2e>
 800fd0e:	4b3f      	ldr	r3, [pc, #252]	@ (800fe0c <__mdiff+0x120>)
 800fd10:	f240 2137 	movw	r1, #567	@ 0x237
 800fd14:	483e      	ldr	r0, [pc, #248]	@ (800fe10 <__mdiff+0x124>)
 800fd16:	f000 fcc9 	bl	80106ac <__assert_func>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd20:	4610      	mov	r0, r2
 800fd22:	b003      	add	sp, #12
 800fd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd28:	bfbc      	itt	lt
 800fd2a:	464b      	movlt	r3, r9
 800fd2c:	46a1      	movlt	r9, r4
 800fd2e:	4630      	mov	r0, r6
 800fd30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fd34:	bfba      	itte	lt
 800fd36:	461c      	movlt	r4, r3
 800fd38:	2501      	movlt	r5, #1
 800fd3a:	2500      	movge	r5, #0
 800fd3c:	f7ff fd48 	bl	800f7d0 <_Balloc>
 800fd40:	4602      	mov	r2, r0
 800fd42:	b918      	cbnz	r0, 800fd4c <__mdiff+0x60>
 800fd44:	4b31      	ldr	r3, [pc, #196]	@ (800fe0c <__mdiff+0x120>)
 800fd46:	f240 2145 	movw	r1, #581	@ 0x245
 800fd4a:	e7e3      	b.n	800fd14 <__mdiff+0x28>
 800fd4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fd50:	6926      	ldr	r6, [r4, #16]
 800fd52:	60c5      	str	r5, [r0, #12]
 800fd54:	f109 0310 	add.w	r3, r9, #16
 800fd58:	f109 0514 	add.w	r5, r9, #20
 800fd5c:	f104 0e14 	add.w	lr, r4, #20
 800fd60:	f100 0b14 	add.w	fp, r0, #20
 800fd64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fd68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fd6c:	9301      	str	r3, [sp, #4]
 800fd6e:	46d9      	mov	r9, fp
 800fd70:	f04f 0c00 	mov.w	ip, #0
 800fd74:	9b01      	ldr	r3, [sp, #4]
 800fd76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fd7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fd7e:	9301      	str	r3, [sp, #4]
 800fd80:	fa1f f38a 	uxth.w	r3, sl
 800fd84:	4619      	mov	r1, r3
 800fd86:	b283      	uxth	r3, r0
 800fd88:	1acb      	subs	r3, r1, r3
 800fd8a:	0c00      	lsrs	r0, r0, #16
 800fd8c:	4463      	add	r3, ip
 800fd8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fd92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fd9c:	4576      	cmp	r6, lr
 800fd9e:	f849 3b04 	str.w	r3, [r9], #4
 800fda2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fda6:	d8e5      	bhi.n	800fd74 <__mdiff+0x88>
 800fda8:	1b33      	subs	r3, r6, r4
 800fdaa:	3b15      	subs	r3, #21
 800fdac:	f023 0303 	bic.w	r3, r3, #3
 800fdb0:	3415      	adds	r4, #21
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	42a6      	cmp	r6, r4
 800fdb6:	bf38      	it	cc
 800fdb8:	2304      	movcc	r3, #4
 800fdba:	441d      	add	r5, r3
 800fdbc:	445b      	add	r3, fp
 800fdbe:	461e      	mov	r6, r3
 800fdc0:	462c      	mov	r4, r5
 800fdc2:	4544      	cmp	r4, r8
 800fdc4:	d30e      	bcc.n	800fde4 <__mdiff+0xf8>
 800fdc6:	f108 0103 	add.w	r1, r8, #3
 800fdca:	1b49      	subs	r1, r1, r5
 800fdcc:	f021 0103 	bic.w	r1, r1, #3
 800fdd0:	3d03      	subs	r5, #3
 800fdd2:	45a8      	cmp	r8, r5
 800fdd4:	bf38      	it	cc
 800fdd6:	2100      	movcc	r1, #0
 800fdd8:	440b      	add	r3, r1
 800fdda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fdde:	b191      	cbz	r1, 800fe06 <__mdiff+0x11a>
 800fde0:	6117      	str	r7, [r2, #16]
 800fde2:	e79d      	b.n	800fd20 <__mdiff+0x34>
 800fde4:	f854 1b04 	ldr.w	r1, [r4], #4
 800fde8:	46e6      	mov	lr, ip
 800fdea:	0c08      	lsrs	r0, r1, #16
 800fdec:	fa1c fc81 	uxtah	ip, ip, r1
 800fdf0:	4471      	add	r1, lr
 800fdf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fdf6:	b289      	uxth	r1, r1
 800fdf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fdfc:	f846 1b04 	str.w	r1, [r6], #4
 800fe00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe04:	e7dd      	b.n	800fdc2 <__mdiff+0xd6>
 800fe06:	3f01      	subs	r7, #1
 800fe08:	e7e7      	b.n	800fdda <__mdiff+0xee>
 800fe0a:	bf00      	nop
 800fe0c:	08011c48 	.word	0x08011c48
 800fe10:	08011c59 	.word	0x08011c59

0800fe14 <__d2b>:
 800fe14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe18:	460f      	mov	r7, r1
 800fe1a:	2101      	movs	r1, #1
 800fe1c:	ec59 8b10 	vmov	r8, r9, d0
 800fe20:	4616      	mov	r6, r2
 800fe22:	f7ff fcd5 	bl	800f7d0 <_Balloc>
 800fe26:	4604      	mov	r4, r0
 800fe28:	b930      	cbnz	r0, 800fe38 <__d2b+0x24>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	4b23      	ldr	r3, [pc, #140]	@ (800febc <__d2b+0xa8>)
 800fe2e:	4824      	ldr	r0, [pc, #144]	@ (800fec0 <__d2b+0xac>)
 800fe30:	f240 310f 	movw	r1, #783	@ 0x30f
 800fe34:	f000 fc3a 	bl	80106ac <__assert_func>
 800fe38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe40:	b10d      	cbz	r5, 800fe46 <__d2b+0x32>
 800fe42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fe46:	9301      	str	r3, [sp, #4]
 800fe48:	f1b8 0300 	subs.w	r3, r8, #0
 800fe4c:	d023      	beq.n	800fe96 <__d2b+0x82>
 800fe4e:	4668      	mov	r0, sp
 800fe50:	9300      	str	r3, [sp, #0]
 800fe52:	f7ff fd84 	bl	800f95e <__lo0bits>
 800fe56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe5a:	b1d0      	cbz	r0, 800fe92 <__d2b+0x7e>
 800fe5c:	f1c0 0320 	rsb	r3, r0, #32
 800fe60:	fa02 f303 	lsl.w	r3, r2, r3
 800fe64:	430b      	orrs	r3, r1
 800fe66:	40c2      	lsrs	r2, r0
 800fe68:	6163      	str	r3, [r4, #20]
 800fe6a:	9201      	str	r2, [sp, #4]
 800fe6c:	9b01      	ldr	r3, [sp, #4]
 800fe6e:	61a3      	str	r3, [r4, #24]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	bf0c      	ite	eq
 800fe74:	2201      	moveq	r2, #1
 800fe76:	2202      	movne	r2, #2
 800fe78:	6122      	str	r2, [r4, #16]
 800fe7a:	b1a5      	cbz	r5, 800fea6 <__d2b+0x92>
 800fe7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fe80:	4405      	add	r5, r0
 800fe82:	603d      	str	r5, [r7, #0]
 800fe84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fe88:	6030      	str	r0, [r6, #0]
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	b003      	add	sp, #12
 800fe8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe92:	6161      	str	r1, [r4, #20]
 800fe94:	e7ea      	b.n	800fe6c <__d2b+0x58>
 800fe96:	a801      	add	r0, sp, #4
 800fe98:	f7ff fd61 	bl	800f95e <__lo0bits>
 800fe9c:	9b01      	ldr	r3, [sp, #4]
 800fe9e:	6163      	str	r3, [r4, #20]
 800fea0:	3020      	adds	r0, #32
 800fea2:	2201      	movs	r2, #1
 800fea4:	e7e8      	b.n	800fe78 <__d2b+0x64>
 800fea6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800feaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800feae:	6038      	str	r0, [r7, #0]
 800feb0:	6918      	ldr	r0, [r3, #16]
 800feb2:	f7ff fd35 	bl	800f920 <__hi0bits>
 800feb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800feba:	e7e5      	b.n	800fe88 <__d2b+0x74>
 800febc:	08011c48 	.word	0x08011c48
 800fec0:	08011c59 	.word	0x08011c59

0800fec4 <__ssputs_r>:
 800fec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fec8:	688e      	ldr	r6, [r1, #8]
 800feca:	461f      	mov	r7, r3
 800fecc:	42be      	cmp	r6, r7
 800fece:	680b      	ldr	r3, [r1, #0]
 800fed0:	4682      	mov	sl, r0
 800fed2:	460c      	mov	r4, r1
 800fed4:	4690      	mov	r8, r2
 800fed6:	d82d      	bhi.n	800ff34 <__ssputs_r+0x70>
 800fed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fedc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fee0:	d026      	beq.n	800ff30 <__ssputs_r+0x6c>
 800fee2:	6965      	ldr	r5, [r4, #20]
 800fee4:	6909      	ldr	r1, [r1, #16]
 800fee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800feea:	eba3 0901 	sub.w	r9, r3, r1
 800feee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fef2:	1c7b      	adds	r3, r7, #1
 800fef4:	444b      	add	r3, r9
 800fef6:	106d      	asrs	r5, r5, #1
 800fef8:	429d      	cmp	r5, r3
 800fefa:	bf38      	it	cc
 800fefc:	461d      	movcc	r5, r3
 800fefe:	0553      	lsls	r3, r2, #21
 800ff00:	d527      	bpl.n	800ff52 <__ssputs_r+0x8e>
 800ff02:	4629      	mov	r1, r5
 800ff04:	f7ff fbd8 	bl	800f6b8 <_malloc_r>
 800ff08:	4606      	mov	r6, r0
 800ff0a:	b360      	cbz	r0, 800ff66 <__ssputs_r+0xa2>
 800ff0c:	6921      	ldr	r1, [r4, #16]
 800ff0e:	464a      	mov	r2, r9
 800ff10:	f7fe fcf5 	bl	800e8fe <memcpy>
 800ff14:	89a3      	ldrh	r3, [r4, #12]
 800ff16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ff1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	6126      	str	r6, [r4, #16]
 800ff22:	6165      	str	r5, [r4, #20]
 800ff24:	444e      	add	r6, r9
 800ff26:	eba5 0509 	sub.w	r5, r5, r9
 800ff2a:	6026      	str	r6, [r4, #0]
 800ff2c:	60a5      	str	r5, [r4, #8]
 800ff2e:	463e      	mov	r6, r7
 800ff30:	42be      	cmp	r6, r7
 800ff32:	d900      	bls.n	800ff36 <__ssputs_r+0x72>
 800ff34:	463e      	mov	r6, r7
 800ff36:	6820      	ldr	r0, [r4, #0]
 800ff38:	4632      	mov	r2, r6
 800ff3a:	4641      	mov	r1, r8
 800ff3c:	f000 fb6a 	bl	8010614 <memmove>
 800ff40:	68a3      	ldr	r3, [r4, #8]
 800ff42:	1b9b      	subs	r3, r3, r6
 800ff44:	60a3      	str	r3, [r4, #8]
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	4433      	add	r3, r6
 800ff4a:	6023      	str	r3, [r4, #0]
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff52:	462a      	mov	r2, r5
 800ff54:	f000 fbee 	bl	8010734 <_realloc_r>
 800ff58:	4606      	mov	r6, r0
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	d1e0      	bne.n	800ff20 <__ssputs_r+0x5c>
 800ff5e:	6921      	ldr	r1, [r4, #16]
 800ff60:	4650      	mov	r0, sl
 800ff62:	f7ff fb35 	bl	800f5d0 <_free_r>
 800ff66:	230c      	movs	r3, #12
 800ff68:	f8ca 3000 	str.w	r3, [sl]
 800ff6c:	89a3      	ldrh	r3, [r4, #12]
 800ff6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff72:	81a3      	strh	r3, [r4, #12]
 800ff74:	f04f 30ff 	mov.w	r0, #4294967295
 800ff78:	e7e9      	b.n	800ff4e <__ssputs_r+0x8a>
	...

0800ff7c <_svfiprintf_r>:
 800ff7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff80:	4698      	mov	r8, r3
 800ff82:	898b      	ldrh	r3, [r1, #12]
 800ff84:	061b      	lsls	r3, r3, #24
 800ff86:	b09d      	sub	sp, #116	@ 0x74
 800ff88:	4607      	mov	r7, r0
 800ff8a:	460d      	mov	r5, r1
 800ff8c:	4614      	mov	r4, r2
 800ff8e:	d510      	bpl.n	800ffb2 <_svfiprintf_r+0x36>
 800ff90:	690b      	ldr	r3, [r1, #16]
 800ff92:	b973      	cbnz	r3, 800ffb2 <_svfiprintf_r+0x36>
 800ff94:	2140      	movs	r1, #64	@ 0x40
 800ff96:	f7ff fb8f 	bl	800f6b8 <_malloc_r>
 800ff9a:	6028      	str	r0, [r5, #0]
 800ff9c:	6128      	str	r0, [r5, #16]
 800ff9e:	b930      	cbnz	r0, 800ffae <_svfiprintf_r+0x32>
 800ffa0:	230c      	movs	r3, #12
 800ffa2:	603b      	str	r3, [r7, #0]
 800ffa4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa8:	b01d      	add	sp, #116	@ 0x74
 800ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffae:	2340      	movs	r3, #64	@ 0x40
 800ffb0:	616b      	str	r3, [r5, #20]
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffb6:	2320      	movs	r3, #32
 800ffb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ffbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffc0:	2330      	movs	r3, #48	@ 0x30
 800ffc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010160 <_svfiprintf_r+0x1e4>
 800ffc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ffca:	f04f 0901 	mov.w	r9, #1
 800ffce:	4623      	mov	r3, r4
 800ffd0:	469a      	mov	sl, r3
 800ffd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffd6:	b10a      	cbz	r2, 800ffdc <_svfiprintf_r+0x60>
 800ffd8:	2a25      	cmp	r2, #37	@ 0x25
 800ffda:	d1f9      	bne.n	800ffd0 <_svfiprintf_r+0x54>
 800ffdc:	ebba 0b04 	subs.w	fp, sl, r4
 800ffe0:	d00b      	beq.n	800fffa <_svfiprintf_r+0x7e>
 800ffe2:	465b      	mov	r3, fp
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	4629      	mov	r1, r5
 800ffe8:	4638      	mov	r0, r7
 800ffea:	f7ff ff6b 	bl	800fec4 <__ssputs_r>
 800ffee:	3001      	adds	r0, #1
 800fff0:	f000 80a7 	beq.w	8010142 <_svfiprintf_r+0x1c6>
 800fff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fff6:	445a      	add	r2, fp
 800fff8:	9209      	str	r2, [sp, #36]	@ 0x24
 800fffa:	f89a 3000 	ldrb.w	r3, [sl]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f000 809f 	beq.w	8010142 <_svfiprintf_r+0x1c6>
 8010004:	2300      	movs	r3, #0
 8010006:	f04f 32ff 	mov.w	r2, #4294967295
 801000a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801000e:	f10a 0a01 	add.w	sl, sl, #1
 8010012:	9304      	str	r3, [sp, #16]
 8010014:	9307      	str	r3, [sp, #28]
 8010016:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801001a:	931a      	str	r3, [sp, #104]	@ 0x68
 801001c:	4654      	mov	r4, sl
 801001e:	2205      	movs	r2, #5
 8010020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010024:	484e      	ldr	r0, [pc, #312]	@ (8010160 <_svfiprintf_r+0x1e4>)
 8010026:	f7f0 f8d3 	bl	80001d0 <memchr>
 801002a:	9a04      	ldr	r2, [sp, #16]
 801002c:	b9d8      	cbnz	r0, 8010066 <_svfiprintf_r+0xea>
 801002e:	06d0      	lsls	r0, r2, #27
 8010030:	bf44      	itt	mi
 8010032:	2320      	movmi	r3, #32
 8010034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010038:	0711      	lsls	r1, r2, #28
 801003a:	bf44      	itt	mi
 801003c:	232b      	movmi	r3, #43	@ 0x2b
 801003e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010042:	f89a 3000 	ldrb.w	r3, [sl]
 8010046:	2b2a      	cmp	r3, #42	@ 0x2a
 8010048:	d015      	beq.n	8010076 <_svfiprintf_r+0xfa>
 801004a:	9a07      	ldr	r2, [sp, #28]
 801004c:	4654      	mov	r4, sl
 801004e:	2000      	movs	r0, #0
 8010050:	f04f 0c0a 	mov.w	ip, #10
 8010054:	4621      	mov	r1, r4
 8010056:	f811 3b01 	ldrb.w	r3, [r1], #1
 801005a:	3b30      	subs	r3, #48	@ 0x30
 801005c:	2b09      	cmp	r3, #9
 801005e:	d94b      	bls.n	80100f8 <_svfiprintf_r+0x17c>
 8010060:	b1b0      	cbz	r0, 8010090 <_svfiprintf_r+0x114>
 8010062:	9207      	str	r2, [sp, #28]
 8010064:	e014      	b.n	8010090 <_svfiprintf_r+0x114>
 8010066:	eba0 0308 	sub.w	r3, r0, r8
 801006a:	fa09 f303 	lsl.w	r3, r9, r3
 801006e:	4313      	orrs	r3, r2
 8010070:	9304      	str	r3, [sp, #16]
 8010072:	46a2      	mov	sl, r4
 8010074:	e7d2      	b.n	801001c <_svfiprintf_r+0xa0>
 8010076:	9b03      	ldr	r3, [sp, #12]
 8010078:	1d19      	adds	r1, r3, #4
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	9103      	str	r1, [sp, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	bfbb      	ittet	lt
 8010082:	425b      	neglt	r3, r3
 8010084:	f042 0202 	orrlt.w	r2, r2, #2
 8010088:	9307      	strge	r3, [sp, #28]
 801008a:	9307      	strlt	r3, [sp, #28]
 801008c:	bfb8      	it	lt
 801008e:	9204      	strlt	r2, [sp, #16]
 8010090:	7823      	ldrb	r3, [r4, #0]
 8010092:	2b2e      	cmp	r3, #46	@ 0x2e
 8010094:	d10a      	bne.n	80100ac <_svfiprintf_r+0x130>
 8010096:	7863      	ldrb	r3, [r4, #1]
 8010098:	2b2a      	cmp	r3, #42	@ 0x2a
 801009a:	d132      	bne.n	8010102 <_svfiprintf_r+0x186>
 801009c:	9b03      	ldr	r3, [sp, #12]
 801009e:	1d1a      	adds	r2, r3, #4
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	9203      	str	r2, [sp, #12]
 80100a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100a8:	3402      	adds	r4, #2
 80100aa:	9305      	str	r3, [sp, #20]
 80100ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010170 <_svfiprintf_r+0x1f4>
 80100b0:	7821      	ldrb	r1, [r4, #0]
 80100b2:	2203      	movs	r2, #3
 80100b4:	4650      	mov	r0, sl
 80100b6:	f7f0 f88b 	bl	80001d0 <memchr>
 80100ba:	b138      	cbz	r0, 80100cc <_svfiprintf_r+0x150>
 80100bc:	9b04      	ldr	r3, [sp, #16]
 80100be:	eba0 000a 	sub.w	r0, r0, sl
 80100c2:	2240      	movs	r2, #64	@ 0x40
 80100c4:	4082      	lsls	r2, r0
 80100c6:	4313      	orrs	r3, r2
 80100c8:	3401      	adds	r4, #1
 80100ca:	9304      	str	r3, [sp, #16]
 80100cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100d0:	4824      	ldr	r0, [pc, #144]	@ (8010164 <_svfiprintf_r+0x1e8>)
 80100d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100d6:	2206      	movs	r2, #6
 80100d8:	f7f0 f87a 	bl	80001d0 <memchr>
 80100dc:	2800      	cmp	r0, #0
 80100de:	d036      	beq.n	801014e <_svfiprintf_r+0x1d2>
 80100e0:	4b21      	ldr	r3, [pc, #132]	@ (8010168 <_svfiprintf_r+0x1ec>)
 80100e2:	bb1b      	cbnz	r3, 801012c <_svfiprintf_r+0x1b0>
 80100e4:	9b03      	ldr	r3, [sp, #12]
 80100e6:	3307      	adds	r3, #7
 80100e8:	f023 0307 	bic.w	r3, r3, #7
 80100ec:	3308      	adds	r3, #8
 80100ee:	9303      	str	r3, [sp, #12]
 80100f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100f2:	4433      	add	r3, r6
 80100f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80100f6:	e76a      	b.n	800ffce <_svfiprintf_r+0x52>
 80100f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80100fc:	460c      	mov	r4, r1
 80100fe:	2001      	movs	r0, #1
 8010100:	e7a8      	b.n	8010054 <_svfiprintf_r+0xd8>
 8010102:	2300      	movs	r3, #0
 8010104:	3401      	adds	r4, #1
 8010106:	9305      	str	r3, [sp, #20]
 8010108:	4619      	mov	r1, r3
 801010a:	f04f 0c0a 	mov.w	ip, #10
 801010e:	4620      	mov	r0, r4
 8010110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010114:	3a30      	subs	r2, #48	@ 0x30
 8010116:	2a09      	cmp	r2, #9
 8010118:	d903      	bls.n	8010122 <_svfiprintf_r+0x1a6>
 801011a:	2b00      	cmp	r3, #0
 801011c:	d0c6      	beq.n	80100ac <_svfiprintf_r+0x130>
 801011e:	9105      	str	r1, [sp, #20]
 8010120:	e7c4      	b.n	80100ac <_svfiprintf_r+0x130>
 8010122:	fb0c 2101 	mla	r1, ip, r1, r2
 8010126:	4604      	mov	r4, r0
 8010128:	2301      	movs	r3, #1
 801012a:	e7f0      	b.n	801010e <_svfiprintf_r+0x192>
 801012c:	ab03      	add	r3, sp, #12
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	462a      	mov	r2, r5
 8010132:	4b0e      	ldr	r3, [pc, #56]	@ (801016c <_svfiprintf_r+0x1f0>)
 8010134:	a904      	add	r1, sp, #16
 8010136:	4638      	mov	r0, r7
 8010138:	f7fd fd4c 	bl	800dbd4 <_printf_float>
 801013c:	1c42      	adds	r2, r0, #1
 801013e:	4606      	mov	r6, r0
 8010140:	d1d6      	bne.n	80100f0 <_svfiprintf_r+0x174>
 8010142:	89ab      	ldrh	r3, [r5, #12]
 8010144:	065b      	lsls	r3, r3, #25
 8010146:	f53f af2d 	bmi.w	800ffa4 <_svfiprintf_r+0x28>
 801014a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801014c:	e72c      	b.n	800ffa8 <_svfiprintf_r+0x2c>
 801014e:	ab03      	add	r3, sp, #12
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	462a      	mov	r2, r5
 8010154:	4b05      	ldr	r3, [pc, #20]	@ (801016c <_svfiprintf_r+0x1f0>)
 8010156:	a904      	add	r1, sp, #16
 8010158:	4638      	mov	r0, r7
 801015a:	f7fd ffd3 	bl	800e104 <_printf_i>
 801015e:	e7ed      	b.n	801013c <_svfiprintf_r+0x1c0>
 8010160:	08011cb2 	.word	0x08011cb2
 8010164:	08011cbc 	.word	0x08011cbc
 8010168:	0800dbd5 	.word	0x0800dbd5
 801016c:	0800fec5 	.word	0x0800fec5
 8010170:	08011cb8 	.word	0x08011cb8

08010174 <__sfputc_r>:
 8010174:	6893      	ldr	r3, [r2, #8]
 8010176:	3b01      	subs	r3, #1
 8010178:	2b00      	cmp	r3, #0
 801017a:	b410      	push	{r4}
 801017c:	6093      	str	r3, [r2, #8]
 801017e:	da08      	bge.n	8010192 <__sfputc_r+0x1e>
 8010180:	6994      	ldr	r4, [r2, #24]
 8010182:	42a3      	cmp	r3, r4
 8010184:	db01      	blt.n	801018a <__sfputc_r+0x16>
 8010186:	290a      	cmp	r1, #10
 8010188:	d103      	bne.n	8010192 <__sfputc_r+0x1e>
 801018a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801018e:	f7fe ba92 	b.w	800e6b6 <__swbuf_r>
 8010192:	6813      	ldr	r3, [r2, #0]
 8010194:	1c58      	adds	r0, r3, #1
 8010196:	6010      	str	r0, [r2, #0]
 8010198:	7019      	strb	r1, [r3, #0]
 801019a:	4608      	mov	r0, r1
 801019c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <__sfputs_r>:
 80101a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a4:	4606      	mov	r6, r0
 80101a6:	460f      	mov	r7, r1
 80101a8:	4614      	mov	r4, r2
 80101aa:	18d5      	adds	r5, r2, r3
 80101ac:	42ac      	cmp	r4, r5
 80101ae:	d101      	bne.n	80101b4 <__sfputs_r+0x12>
 80101b0:	2000      	movs	r0, #0
 80101b2:	e007      	b.n	80101c4 <__sfputs_r+0x22>
 80101b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101b8:	463a      	mov	r2, r7
 80101ba:	4630      	mov	r0, r6
 80101bc:	f7ff ffda 	bl	8010174 <__sfputc_r>
 80101c0:	1c43      	adds	r3, r0, #1
 80101c2:	d1f3      	bne.n	80101ac <__sfputs_r+0xa>
 80101c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080101c8 <_vfiprintf_r>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	460d      	mov	r5, r1
 80101ce:	b09d      	sub	sp, #116	@ 0x74
 80101d0:	4614      	mov	r4, r2
 80101d2:	4698      	mov	r8, r3
 80101d4:	4606      	mov	r6, r0
 80101d6:	b118      	cbz	r0, 80101e0 <_vfiprintf_r+0x18>
 80101d8:	6a03      	ldr	r3, [r0, #32]
 80101da:	b90b      	cbnz	r3, 80101e0 <_vfiprintf_r+0x18>
 80101dc:	f7fe f93c 	bl	800e458 <__sinit>
 80101e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101e2:	07d9      	lsls	r1, r3, #31
 80101e4:	d405      	bmi.n	80101f2 <_vfiprintf_r+0x2a>
 80101e6:	89ab      	ldrh	r3, [r5, #12]
 80101e8:	059a      	lsls	r2, r3, #22
 80101ea:	d402      	bmi.n	80101f2 <_vfiprintf_r+0x2a>
 80101ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101ee:	f7fe fb84 	bl	800e8fa <__retarget_lock_acquire_recursive>
 80101f2:	89ab      	ldrh	r3, [r5, #12]
 80101f4:	071b      	lsls	r3, r3, #28
 80101f6:	d501      	bpl.n	80101fc <_vfiprintf_r+0x34>
 80101f8:	692b      	ldr	r3, [r5, #16]
 80101fa:	b99b      	cbnz	r3, 8010224 <_vfiprintf_r+0x5c>
 80101fc:	4629      	mov	r1, r5
 80101fe:	4630      	mov	r0, r6
 8010200:	f7fe fa98 	bl	800e734 <__swsetup_r>
 8010204:	b170      	cbz	r0, 8010224 <_vfiprintf_r+0x5c>
 8010206:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010208:	07dc      	lsls	r4, r3, #31
 801020a:	d504      	bpl.n	8010216 <_vfiprintf_r+0x4e>
 801020c:	f04f 30ff 	mov.w	r0, #4294967295
 8010210:	b01d      	add	sp, #116	@ 0x74
 8010212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010216:	89ab      	ldrh	r3, [r5, #12]
 8010218:	0598      	lsls	r0, r3, #22
 801021a:	d4f7      	bmi.n	801020c <_vfiprintf_r+0x44>
 801021c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801021e:	f7fe fb6d 	bl	800e8fc <__retarget_lock_release_recursive>
 8010222:	e7f3      	b.n	801020c <_vfiprintf_r+0x44>
 8010224:	2300      	movs	r3, #0
 8010226:	9309      	str	r3, [sp, #36]	@ 0x24
 8010228:	2320      	movs	r3, #32
 801022a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801022e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010232:	2330      	movs	r3, #48	@ 0x30
 8010234:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103e4 <_vfiprintf_r+0x21c>
 8010238:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801023c:	f04f 0901 	mov.w	r9, #1
 8010240:	4623      	mov	r3, r4
 8010242:	469a      	mov	sl, r3
 8010244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010248:	b10a      	cbz	r2, 801024e <_vfiprintf_r+0x86>
 801024a:	2a25      	cmp	r2, #37	@ 0x25
 801024c:	d1f9      	bne.n	8010242 <_vfiprintf_r+0x7a>
 801024e:	ebba 0b04 	subs.w	fp, sl, r4
 8010252:	d00b      	beq.n	801026c <_vfiprintf_r+0xa4>
 8010254:	465b      	mov	r3, fp
 8010256:	4622      	mov	r2, r4
 8010258:	4629      	mov	r1, r5
 801025a:	4630      	mov	r0, r6
 801025c:	f7ff ffa1 	bl	80101a2 <__sfputs_r>
 8010260:	3001      	adds	r0, #1
 8010262:	f000 80a7 	beq.w	80103b4 <_vfiprintf_r+0x1ec>
 8010266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010268:	445a      	add	r2, fp
 801026a:	9209      	str	r2, [sp, #36]	@ 0x24
 801026c:	f89a 3000 	ldrb.w	r3, [sl]
 8010270:	2b00      	cmp	r3, #0
 8010272:	f000 809f 	beq.w	80103b4 <_vfiprintf_r+0x1ec>
 8010276:	2300      	movs	r3, #0
 8010278:	f04f 32ff 	mov.w	r2, #4294967295
 801027c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010280:	f10a 0a01 	add.w	sl, sl, #1
 8010284:	9304      	str	r3, [sp, #16]
 8010286:	9307      	str	r3, [sp, #28]
 8010288:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801028c:	931a      	str	r3, [sp, #104]	@ 0x68
 801028e:	4654      	mov	r4, sl
 8010290:	2205      	movs	r2, #5
 8010292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010296:	4853      	ldr	r0, [pc, #332]	@ (80103e4 <_vfiprintf_r+0x21c>)
 8010298:	f7ef ff9a 	bl	80001d0 <memchr>
 801029c:	9a04      	ldr	r2, [sp, #16]
 801029e:	b9d8      	cbnz	r0, 80102d8 <_vfiprintf_r+0x110>
 80102a0:	06d1      	lsls	r1, r2, #27
 80102a2:	bf44      	itt	mi
 80102a4:	2320      	movmi	r3, #32
 80102a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102aa:	0713      	lsls	r3, r2, #28
 80102ac:	bf44      	itt	mi
 80102ae:	232b      	movmi	r3, #43	@ 0x2b
 80102b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102b4:	f89a 3000 	ldrb.w	r3, [sl]
 80102b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80102ba:	d015      	beq.n	80102e8 <_vfiprintf_r+0x120>
 80102bc:	9a07      	ldr	r2, [sp, #28]
 80102be:	4654      	mov	r4, sl
 80102c0:	2000      	movs	r0, #0
 80102c2:	f04f 0c0a 	mov.w	ip, #10
 80102c6:	4621      	mov	r1, r4
 80102c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102cc:	3b30      	subs	r3, #48	@ 0x30
 80102ce:	2b09      	cmp	r3, #9
 80102d0:	d94b      	bls.n	801036a <_vfiprintf_r+0x1a2>
 80102d2:	b1b0      	cbz	r0, 8010302 <_vfiprintf_r+0x13a>
 80102d4:	9207      	str	r2, [sp, #28]
 80102d6:	e014      	b.n	8010302 <_vfiprintf_r+0x13a>
 80102d8:	eba0 0308 	sub.w	r3, r0, r8
 80102dc:	fa09 f303 	lsl.w	r3, r9, r3
 80102e0:	4313      	orrs	r3, r2
 80102e2:	9304      	str	r3, [sp, #16]
 80102e4:	46a2      	mov	sl, r4
 80102e6:	e7d2      	b.n	801028e <_vfiprintf_r+0xc6>
 80102e8:	9b03      	ldr	r3, [sp, #12]
 80102ea:	1d19      	adds	r1, r3, #4
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	9103      	str	r1, [sp, #12]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	bfbb      	ittet	lt
 80102f4:	425b      	neglt	r3, r3
 80102f6:	f042 0202 	orrlt.w	r2, r2, #2
 80102fa:	9307      	strge	r3, [sp, #28]
 80102fc:	9307      	strlt	r3, [sp, #28]
 80102fe:	bfb8      	it	lt
 8010300:	9204      	strlt	r2, [sp, #16]
 8010302:	7823      	ldrb	r3, [r4, #0]
 8010304:	2b2e      	cmp	r3, #46	@ 0x2e
 8010306:	d10a      	bne.n	801031e <_vfiprintf_r+0x156>
 8010308:	7863      	ldrb	r3, [r4, #1]
 801030a:	2b2a      	cmp	r3, #42	@ 0x2a
 801030c:	d132      	bne.n	8010374 <_vfiprintf_r+0x1ac>
 801030e:	9b03      	ldr	r3, [sp, #12]
 8010310:	1d1a      	adds	r2, r3, #4
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	9203      	str	r2, [sp, #12]
 8010316:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801031a:	3402      	adds	r4, #2
 801031c:	9305      	str	r3, [sp, #20]
 801031e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80103f4 <_vfiprintf_r+0x22c>
 8010322:	7821      	ldrb	r1, [r4, #0]
 8010324:	2203      	movs	r2, #3
 8010326:	4650      	mov	r0, sl
 8010328:	f7ef ff52 	bl	80001d0 <memchr>
 801032c:	b138      	cbz	r0, 801033e <_vfiprintf_r+0x176>
 801032e:	9b04      	ldr	r3, [sp, #16]
 8010330:	eba0 000a 	sub.w	r0, r0, sl
 8010334:	2240      	movs	r2, #64	@ 0x40
 8010336:	4082      	lsls	r2, r0
 8010338:	4313      	orrs	r3, r2
 801033a:	3401      	adds	r4, #1
 801033c:	9304      	str	r3, [sp, #16]
 801033e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010342:	4829      	ldr	r0, [pc, #164]	@ (80103e8 <_vfiprintf_r+0x220>)
 8010344:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010348:	2206      	movs	r2, #6
 801034a:	f7ef ff41 	bl	80001d0 <memchr>
 801034e:	2800      	cmp	r0, #0
 8010350:	d03f      	beq.n	80103d2 <_vfiprintf_r+0x20a>
 8010352:	4b26      	ldr	r3, [pc, #152]	@ (80103ec <_vfiprintf_r+0x224>)
 8010354:	bb1b      	cbnz	r3, 801039e <_vfiprintf_r+0x1d6>
 8010356:	9b03      	ldr	r3, [sp, #12]
 8010358:	3307      	adds	r3, #7
 801035a:	f023 0307 	bic.w	r3, r3, #7
 801035e:	3308      	adds	r3, #8
 8010360:	9303      	str	r3, [sp, #12]
 8010362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010364:	443b      	add	r3, r7
 8010366:	9309      	str	r3, [sp, #36]	@ 0x24
 8010368:	e76a      	b.n	8010240 <_vfiprintf_r+0x78>
 801036a:	fb0c 3202 	mla	r2, ip, r2, r3
 801036e:	460c      	mov	r4, r1
 8010370:	2001      	movs	r0, #1
 8010372:	e7a8      	b.n	80102c6 <_vfiprintf_r+0xfe>
 8010374:	2300      	movs	r3, #0
 8010376:	3401      	adds	r4, #1
 8010378:	9305      	str	r3, [sp, #20]
 801037a:	4619      	mov	r1, r3
 801037c:	f04f 0c0a 	mov.w	ip, #10
 8010380:	4620      	mov	r0, r4
 8010382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010386:	3a30      	subs	r2, #48	@ 0x30
 8010388:	2a09      	cmp	r2, #9
 801038a:	d903      	bls.n	8010394 <_vfiprintf_r+0x1cc>
 801038c:	2b00      	cmp	r3, #0
 801038e:	d0c6      	beq.n	801031e <_vfiprintf_r+0x156>
 8010390:	9105      	str	r1, [sp, #20]
 8010392:	e7c4      	b.n	801031e <_vfiprintf_r+0x156>
 8010394:	fb0c 2101 	mla	r1, ip, r1, r2
 8010398:	4604      	mov	r4, r0
 801039a:	2301      	movs	r3, #1
 801039c:	e7f0      	b.n	8010380 <_vfiprintf_r+0x1b8>
 801039e:	ab03      	add	r3, sp, #12
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	462a      	mov	r2, r5
 80103a4:	4b12      	ldr	r3, [pc, #72]	@ (80103f0 <_vfiprintf_r+0x228>)
 80103a6:	a904      	add	r1, sp, #16
 80103a8:	4630      	mov	r0, r6
 80103aa:	f7fd fc13 	bl	800dbd4 <_printf_float>
 80103ae:	4607      	mov	r7, r0
 80103b0:	1c78      	adds	r0, r7, #1
 80103b2:	d1d6      	bne.n	8010362 <_vfiprintf_r+0x19a>
 80103b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103b6:	07d9      	lsls	r1, r3, #31
 80103b8:	d405      	bmi.n	80103c6 <_vfiprintf_r+0x1fe>
 80103ba:	89ab      	ldrh	r3, [r5, #12]
 80103bc:	059a      	lsls	r2, r3, #22
 80103be:	d402      	bmi.n	80103c6 <_vfiprintf_r+0x1fe>
 80103c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103c2:	f7fe fa9b 	bl	800e8fc <__retarget_lock_release_recursive>
 80103c6:	89ab      	ldrh	r3, [r5, #12]
 80103c8:	065b      	lsls	r3, r3, #25
 80103ca:	f53f af1f 	bmi.w	801020c <_vfiprintf_r+0x44>
 80103ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103d0:	e71e      	b.n	8010210 <_vfiprintf_r+0x48>
 80103d2:	ab03      	add	r3, sp, #12
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	462a      	mov	r2, r5
 80103d8:	4b05      	ldr	r3, [pc, #20]	@ (80103f0 <_vfiprintf_r+0x228>)
 80103da:	a904      	add	r1, sp, #16
 80103dc:	4630      	mov	r0, r6
 80103de:	f7fd fe91 	bl	800e104 <_printf_i>
 80103e2:	e7e4      	b.n	80103ae <_vfiprintf_r+0x1e6>
 80103e4:	08011cb2 	.word	0x08011cb2
 80103e8:	08011cbc 	.word	0x08011cbc
 80103ec:	0800dbd5 	.word	0x0800dbd5
 80103f0:	080101a3 	.word	0x080101a3
 80103f4:	08011cb8 	.word	0x08011cb8

080103f8 <__sflush_r>:
 80103f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010400:	0716      	lsls	r6, r2, #28
 8010402:	4605      	mov	r5, r0
 8010404:	460c      	mov	r4, r1
 8010406:	d454      	bmi.n	80104b2 <__sflush_r+0xba>
 8010408:	684b      	ldr	r3, [r1, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	dc02      	bgt.n	8010414 <__sflush_r+0x1c>
 801040e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010410:	2b00      	cmp	r3, #0
 8010412:	dd48      	ble.n	80104a6 <__sflush_r+0xae>
 8010414:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010416:	2e00      	cmp	r6, #0
 8010418:	d045      	beq.n	80104a6 <__sflush_r+0xae>
 801041a:	2300      	movs	r3, #0
 801041c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010420:	682f      	ldr	r7, [r5, #0]
 8010422:	6a21      	ldr	r1, [r4, #32]
 8010424:	602b      	str	r3, [r5, #0]
 8010426:	d030      	beq.n	801048a <__sflush_r+0x92>
 8010428:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801042a:	89a3      	ldrh	r3, [r4, #12]
 801042c:	0759      	lsls	r1, r3, #29
 801042e:	d505      	bpl.n	801043c <__sflush_r+0x44>
 8010430:	6863      	ldr	r3, [r4, #4]
 8010432:	1ad2      	subs	r2, r2, r3
 8010434:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010436:	b10b      	cbz	r3, 801043c <__sflush_r+0x44>
 8010438:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801043a:	1ad2      	subs	r2, r2, r3
 801043c:	2300      	movs	r3, #0
 801043e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010440:	6a21      	ldr	r1, [r4, #32]
 8010442:	4628      	mov	r0, r5
 8010444:	47b0      	blx	r6
 8010446:	1c43      	adds	r3, r0, #1
 8010448:	89a3      	ldrh	r3, [r4, #12]
 801044a:	d106      	bne.n	801045a <__sflush_r+0x62>
 801044c:	6829      	ldr	r1, [r5, #0]
 801044e:	291d      	cmp	r1, #29
 8010450:	d82b      	bhi.n	80104aa <__sflush_r+0xb2>
 8010452:	4a2a      	ldr	r2, [pc, #168]	@ (80104fc <__sflush_r+0x104>)
 8010454:	40ca      	lsrs	r2, r1
 8010456:	07d6      	lsls	r6, r2, #31
 8010458:	d527      	bpl.n	80104aa <__sflush_r+0xb2>
 801045a:	2200      	movs	r2, #0
 801045c:	6062      	str	r2, [r4, #4]
 801045e:	04d9      	lsls	r1, r3, #19
 8010460:	6922      	ldr	r2, [r4, #16]
 8010462:	6022      	str	r2, [r4, #0]
 8010464:	d504      	bpl.n	8010470 <__sflush_r+0x78>
 8010466:	1c42      	adds	r2, r0, #1
 8010468:	d101      	bne.n	801046e <__sflush_r+0x76>
 801046a:	682b      	ldr	r3, [r5, #0]
 801046c:	b903      	cbnz	r3, 8010470 <__sflush_r+0x78>
 801046e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010472:	602f      	str	r7, [r5, #0]
 8010474:	b1b9      	cbz	r1, 80104a6 <__sflush_r+0xae>
 8010476:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801047a:	4299      	cmp	r1, r3
 801047c:	d002      	beq.n	8010484 <__sflush_r+0x8c>
 801047e:	4628      	mov	r0, r5
 8010480:	f7ff f8a6 	bl	800f5d0 <_free_r>
 8010484:	2300      	movs	r3, #0
 8010486:	6363      	str	r3, [r4, #52]	@ 0x34
 8010488:	e00d      	b.n	80104a6 <__sflush_r+0xae>
 801048a:	2301      	movs	r3, #1
 801048c:	4628      	mov	r0, r5
 801048e:	47b0      	blx	r6
 8010490:	4602      	mov	r2, r0
 8010492:	1c50      	adds	r0, r2, #1
 8010494:	d1c9      	bne.n	801042a <__sflush_r+0x32>
 8010496:	682b      	ldr	r3, [r5, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d0c6      	beq.n	801042a <__sflush_r+0x32>
 801049c:	2b1d      	cmp	r3, #29
 801049e:	d001      	beq.n	80104a4 <__sflush_r+0xac>
 80104a0:	2b16      	cmp	r3, #22
 80104a2:	d11e      	bne.n	80104e2 <__sflush_r+0xea>
 80104a4:	602f      	str	r7, [r5, #0]
 80104a6:	2000      	movs	r0, #0
 80104a8:	e022      	b.n	80104f0 <__sflush_r+0xf8>
 80104aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104ae:	b21b      	sxth	r3, r3
 80104b0:	e01b      	b.n	80104ea <__sflush_r+0xf2>
 80104b2:	690f      	ldr	r7, [r1, #16]
 80104b4:	2f00      	cmp	r7, #0
 80104b6:	d0f6      	beq.n	80104a6 <__sflush_r+0xae>
 80104b8:	0793      	lsls	r3, r2, #30
 80104ba:	680e      	ldr	r6, [r1, #0]
 80104bc:	bf08      	it	eq
 80104be:	694b      	ldreq	r3, [r1, #20]
 80104c0:	600f      	str	r7, [r1, #0]
 80104c2:	bf18      	it	ne
 80104c4:	2300      	movne	r3, #0
 80104c6:	eba6 0807 	sub.w	r8, r6, r7
 80104ca:	608b      	str	r3, [r1, #8]
 80104cc:	f1b8 0f00 	cmp.w	r8, #0
 80104d0:	dde9      	ble.n	80104a6 <__sflush_r+0xae>
 80104d2:	6a21      	ldr	r1, [r4, #32]
 80104d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80104d6:	4643      	mov	r3, r8
 80104d8:	463a      	mov	r2, r7
 80104da:	4628      	mov	r0, r5
 80104dc:	47b0      	blx	r6
 80104de:	2800      	cmp	r0, #0
 80104e0:	dc08      	bgt.n	80104f4 <__sflush_r+0xfc>
 80104e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104ea:	81a3      	strh	r3, [r4, #12]
 80104ec:	f04f 30ff 	mov.w	r0, #4294967295
 80104f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f4:	4407      	add	r7, r0
 80104f6:	eba8 0800 	sub.w	r8, r8, r0
 80104fa:	e7e7      	b.n	80104cc <__sflush_r+0xd4>
 80104fc:	20400001 	.word	0x20400001

08010500 <_fflush_r>:
 8010500:	b538      	push	{r3, r4, r5, lr}
 8010502:	690b      	ldr	r3, [r1, #16]
 8010504:	4605      	mov	r5, r0
 8010506:	460c      	mov	r4, r1
 8010508:	b913      	cbnz	r3, 8010510 <_fflush_r+0x10>
 801050a:	2500      	movs	r5, #0
 801050c:	4628      	mov	r0, r5
 801050e:	bd38      	pop	{r3, r4, r5, pc}
 8010510:	b118      	cbz	r0, 801051a <_fflush_r+0x1a>
 8010512:	6a03      	ldr	r3, [r0, #32]
 8010514:	b90b      	cbnz	r3, 801051a <_fflush_r+0x1a>
 8010516:	f7fd ff9f 	bl	800e458 <__sinit>
 801051a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d0f3      	beq.n	801050a <_fflush_r+0xa>
 8010522:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010524:	07d0      	lsls	r0, r2, #31
 8010526:	d404      	bmi.n	8010532 <_fflush_r+0x32>
 8010528:	0599      	lsls	r1, r3, #22
 801052a:	d402      	bmi.n	8010532 <_fflush_r+0x32>
 801052c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801052e:	f7fe f9e4 	bl	800e8fa <__retarget_lock_acquire_recursive>
 8010532:	4628      	mov	r0, r5
 8010534:	4621      	mov	r1, r4
 8010536:	f7ff ff5f 	bl	80103f8 <__sflush_r>
 801053a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801053c:	07da      	lsls	r2, r3, #31
 801053e:	4605      	mov	r5, r0
 8010540:	d4e4      	bmi.n	801050c <_fflush_r+0xc>
 8010542:	89a3      	ldrh	r3, [r4, #12]
 8010544:	059b      	lsls	r3, r3, #22
 8010546:	d4e1      	bmi.n	801050c <_fflush_r+0xc>
 8010548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801054a:	f7fe f9d7 	bl	800e8fc <__retarget_lock_release_recursive>
 801054e:	e7dd      	b.n	801050c <_fflush_r+0xc>

08010550 <__swhatbuf_r>:
 8010550:	b570      	push	{r4, r5, r6, lr}
 8010552:	460c      	mov	r4, r1
 8010554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010558:	2900      	cmp	r1, #0
 801055a:	b096      	sub	sp, #88	@ 0x58
 801055c:	4615      	mov	r5, r2
 801055e:	461e      	mov	r6, r3
 8010560:	da0d      	bge.n	801057e <__swhatbuf_r+0x2e>
 8010562:	89a3      	ldrh	r3, [r4, #12]
 8010564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010568:	f04f 0100 	mov.w	r1, #0
 801056c:	bf14      	ite	ne
 801056e:	2340      	movne	r3, #64	@ 0x40
 8010570:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010574:	2000      	movs	r0, #0
 8010576:	6031      	str	r1, [r6, #0]
 8010578:	602b      	str	r3, [r5, #0]
 801057a:	b016      	add	sp, #88	@ 0x58
 801057c:	bd70      	pop	{r4, r5, r6, pc}
 801057e:	466a      	mov	r2, sp
 8010580:	f000 f862 	bl	8010648 <_fstat_r>
 8010584:	2800      	cmp	r0, #0
 8010586:	dbec      	blt.n	8010562 <__swhatbuf_r+0x12>
 8010588:	9901      	ldr	r1, [sp, #4]
 801058a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801058e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010592:	4259      	negs	r1, r3
 8010594:	4159      	adcs	r1, r3
 8010596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801059a:	e7eb      	b.n	8010574 <__swhatbuf_r+0x24>

0801059c <__smakebuf_r>:
 801059c:	898b      	ldrh	r3, [r1, #12]
 801059e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105a0:	079d      	lsls	r5, r3, #30
 80105a2:	4606      	mov	r6, r0
 80105a4:	460c      	mov	r4, r1
 80105a6:	d507      	bpl.n	80105b8 <__smakebuf_r+0x1c>
 80105a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105ac:	6023      	str	r3, [r4, #0]
 80105ae:	6123      	str	r3, [r4, #16]
 80105b0:	2301      	movs	r3, #1
 80105b2:	6163      	str	r3, [r4, #20]
 80105b4:	b003      	add	sp, #12
 80105b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105b8:	ab01      	add	r3, sp, #4
 80105ba:	466a      	mov	r2, sp
 80105bc:	f7ff ffc8 	bl	8010550 <__swhatbuf_r>
 80105c0:	9f00      	ldr	r7, [sp, #0]
 80105c2:	4605      	mov	r5, r0
 80105c4:	4639      	mov	r1, r7
 80105c6:	4630      	mov	r0, r6
 80105c8:	f7ff f876 	bl	800f6b8 <_malloc_r>
 80105cc:	b948      	cbnz	r0, 80105e2 <__smakebuf_r+0x46>
 80105ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105d2:	059a      	lsls	r2, r3, #22
 80105d4:	d4ee      	bmi.n	80105b4 <__smakebuf_r+0x18>
 80105d6:	f023 0303 	bic.w	r3, r3, #3
 80105da:	f043 0302 	orr.w	r3, r3, #2
 80105de:	81a3      	strh	r3, [r4, #12]
 80105e0:	e7e2      	b.n	80105a8 <__smakebuf_r+0xc>
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	6020      	str	r0, [r4, #0]
 80105e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105ea:	81a3      	strh	r3, [r4, #12]
 80105ec:	9b01      	ldr	r3, [sp, #4]
 80105ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80105f2:	b15b      	cbz	r3, 801060c <__smakebuf_r+0x70>
 80105f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105f8:	4630      	mov	r0, r6
 80105fa:	f000 f837 	bl	801066c <_isatty_r>
 80105fe:	b128      	cbz	r0, 801060c <__smakebuf_r+0x70>
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	f023 0303 	bic.w	r3, r3, #3
 8010606:	f043 0301 	orr.w	r3, r3, #1
 801060a:	81a3      	strh	r3, [r4, #12]
 801060c:	89a3      	ldrh	r3, [r4, #12]
 801060e:	431d      	orrs	r5, r3
 8010610:	81a5      	strh	r5, [r4, #12]
 8010612:	e7cf      	b.n	80105b4 <__smakebuf_r+0x18>

08010614 <memmove>:
 8010614:	4288      	cmp	r0, r1
 8010616:	b510      	push	{r4, lr}
 8010618:	eb01 0402 	add.w	r4, r1, r2
 801061c:	d902      	bls.n	8010624 <memmove+0x10>
 801061e:	4284      	cmp	r4, r0
 8010620:	4623      	mov	r3, r4
 8010622:	d807      	bhi.n	8010634 <memmove+0x20>
 8010624:	1e43      	subs	r3, r0, #1
 8010626:	42a1      	cmp	r1, r4
 8010628:	d008      	beq.n	801063c <memmove+0x28>
 801062a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801062e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010632:	e7f8      	b.n	8010626 <memmove+0x12>
 8010634:	4402      	add	r2, r0
 8010636:	4601      	mov	r1, r0
 8010638:	428a      	cmp	r2, r1
 801063a:	d100      	bne.n	801063e <memmove+0x2a>
 801063c:	bd10      	pop	{r4, pc}
 801063e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010646:	e7f7      	b.n	8010638 <memmove+0x24>

08010648 <_fstat_r>:
 8010648:	b538      	push	{r3, r4, r5, lr}
 801064a:	4d07      	ldr	r5, [pc, #28]	@ (8010668 <_fstat_r+0x20>)
 801064c:	2300      	movs	r3, #0
 801064e:	4604      	mov	r4, r0
 8010650:	4608      	mov	r0, r1
 8010652:	4611      	mov	r1, r2
 8010654:	602b      	str	r3, [r5, #0]
 8010656:	f7f4 fb31 	bl	8004cbc <_fstat>
 801065a:	1c43      	adds	r3, r0, #1
 801065c:	d102      	bne.n	8010664 <_fstat_r+0x1c>
 801065e:	682b      	ldr	r3, [r5, #0]
 8010660:	b103      	cbz	r3, 8010664 <_fstat_r+0x1c>
 8010662:	6023      	str	r3, [r4, #0]
 8010664:	bd38      	pop	{r3, r4, r5, pc}
 8010666:	bf00      	nop
 8010668:	20001928 	.word	0x20001928

0801066c <_isatty_r>:
 801066c:	b538      	push	{r3, r4, r5, lr}
 801066e:	4d06      	ldr	r5, [pc, #24]	@ (8010688 <_isatty_r+0x1c>)
 8010670:	2300      	movs	r3, #0
 8010672:	4604      	mov	r4, r0
 8010674:	4608      	mov	r0, r1
 8010676:	602b      	str	r3, [r5, #0]
 8010678:	f7f4 fb30 	bl	8004cdc <_isatty>
 801067c:	1c43      	adds	r3, r0, #1
 801067e:	d102      	bne.n	8010686 <_isatty_r+0x1a>
 8010680:	682b      	ldr	r3, [r5, #0]
 8010682:	b103      	cbz	r3, 8010686 <_isatty_r+0x1a>
 8010684:	6023      	str	r3, [r4, #0]
 8010686:	bd38      	pop	{r3, r4, r5, pc}
 8010688:	20001928 	.word	0x20001928

0801068c <_sbrk_r>:
 801068c:	b538      	push	{r3, r4, r5, lr}
 801068e:	4d06      	ldr	r5, [pc, #24]	@ (80106a8 <_sbrk_r+0x1c>)
 8010690:	2300      	movs	r3, #0
 8010692:	4604      	mov	r4, r0
 8010694:	4608      	mov	r0, r1
 8010696:	602b      	str	r3, [r5, #0]
 8010698:	f7f4 fb38 	bl	8004d0c <_sbrk>
 801069c:	1c43      	adds	r3, r0, #1
 801069e:	d102      	bne.n	80106a6 <_sbrk_r+0x1a>
 80106a0:	682b      	ldr	r3, [r5, #0]
 80106a2:	b103      	cbz	r3, 80106a6 <_sbrk_r+0x1a>
 80106a4:	6023      	str	r3, [r4, #0]
 80106a6:	bd38      	pop	{r3, r4, r5, pc}
 80106a8:	20001928 	.word	0x20001928

080106ac <__assert_func>:
 80106ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106ae:	4614      	mov	r4, r2
 80106b0:	461a      	mov	r2, r3
 80106b2:	4b09      	ldr	r3, [pc, #36]	@ (80106d8 <__assert_func+0x2c>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	4605      	mov	r5, r0
 80106b8:	68d8      	ldr	r0, [r3, #12]
 80106ba:	b14c      	cbz	r4, 80106d0 <__assert_func+0x24>
 80106bc:	4b07      	ldr	r3, [pc, #28]	@ (80106dc <__assert_func+0x30>)
 80106be:	9100      	str	r1, [sp, #0]
 80106c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106c4:	4906      	ldr	r1, [pc, #24]	@ (80106e0 <__assert_func+0x34>)
 80106c6:	462b      	mov	r3, r5
 80106c8:	f000 f870 	bl	80107ac <fiprintf>
 80106cc:	f000 f880 	bl	80107d0 <abort>
 80106d0:	4b04      	ldr	r3, [pc, #16]	@ (80106e4 <__assert_func+0x38>)
 80106d2:	461c      	mov	r4, r3
 80106d4:	e7f3      	b.n	80106be <__assert_func+0x12>
 80106d6:	bf00      	nop
 80106d8:	20000140 	.word	0x20000140
 80106dc:	08011ccd 	.word	0x08011ccd
 80106e0:	08011cda 	.word	0x08011cda
 80106e4:	08011d08 	.word	0x08011d08

080106e8 <_calloc_r>:
 80106e8:	b570      	push	{r4, r5, r6, lr}
 80106ea:	fba1 5402 	umull	r5, r4, r1, r2
 80106ee:	b934      	cbnz	r4, 80106fe <_calloc_r+0x16>
 80106f0:	4629      	mov	r1, r5
 80106f2:	f7fe ffe1 	bl	800f6b8 <_malloc_r>
 80106f6:	4606      	mov	r6, r0
 80106f8:	b928      	cbnz	r0, 8010706 <_calloc_r+0x1e>
 80106fa:	4630      	mov	r0, r6
 80106fc:	bd70      	pop	{r4, r5, r6, pc}
 80106fe:	220c      	movs	r2, #12
 8010700:	6002      	str	r2, [r0, #0]
 8010702:	2600      	movs	r6, #0
 8010704:	e7f9      	b.n	80106fa <_calloc_r+0x12>
 8010706:	462a      	mov	r2, r5
 8010708:	4621      	mov	r1, r4
 801070a:	f7fe f879 	bl	800e800 <memset>
 801070e:	e7f4      	b.n	80106fa <_calloc_r+0x12>

08010710 <__ascii_mbtowc>:
 8010710:	b082      	sub	sp, #8
 8010712:	b901      	cbnz	r1, 8010716 <__ascii_mbtowc+0x6>
 8010714:	a901      	add	r1, sp, #4
 8010716:	b142      	cbz	r2, 801072a <__ascii_mbtowc+0x1a>
 8010718:	b14b      	cbz	r3, 801072e <__ascii_mbtowc+0x1e>
 801071a:	7813      	ldrb	r3, [r2, #0]
 801071c:	600b      	str	r3, [r1, #0]
 801071e:	7812      	ldrb	r2, [r2, #0]
 8010720:	1e10      	subs	r0, r2, #0
 8010722:	bf18      	it	ne
 8010724:	2001      	movne	r0, #1
 8010726:	b002      	add	sp, #8
 8010728:	4770      	bx	lr
 801072a:	4610      	mov	r0, r2
 801072c:	e7fb      	b.n	8010726 <__ascii_mbtowc+0x16>
 801072e:	f06f 0001 	mvn.w	r0, #1
 8010732:	e7f8      	b.n	8010726 <__ascii_mbtowc+0x16>

08010734 <_realloc_r>:
 8010734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010738:	4607      	mov	r7, r0
 801073a:	4614      	mov	r4, r2
 801073c:	460d      	mov	r5, r1
 801073e:	b921      	cbnz	r1, 801074a <_realloc_r+0x16>
 8010740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010744:	4611      	mov	r1, r2
 8010746:	f7fe bfb7 	b.w	800f6b8 <_malloc_r>
 801074a:	b92a      	cbnz	r2, 8010758 <_realloc_r+0x24>
 801074c:	f7fe ff40 	bl	800f5d0 <_free_r>
 8010750:	4625      	mov	r5, r4
 8010752:	4628      	mov	r0, r5
 8010754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010758:	f000 f841 	bl	80107de <_malloc_usable_size_r>
 801075c:	4284      	cmp	r4, r0
 801075e:	4606      	mov	r6, r0
 8010760:	d802      	bhi.n	8010768 <_realloc_r+0x34>
 8010762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010766:	d8f4      	bhi.n	8010752 <_realloc_r+0x1e>
 8010768:	4621      	mov	r1, r4
 801076a:	4638      	mov	r0, r7
 801076c:	f7fe ffa4 	bl	800f6b8 <_malloc_r>
 8010770:	4680      	mov	r8, r0
 8010772:	b908      	cbnz	r0, 8010778 <_realloc_r+0x44>
 8010774:	4645      	mov	r5, r8
 8010776:	e7ec      	b.n	8010752 <_realloc_r+0x1e>
 8010778:	42b4      	cmp	r4, r6
 801077a:	4622      	mov	r2, r4
 801077c:	4629      	mov	r1, r5
 801077e:	bf28      	it	cs
 8010780:	4632      	movcs	r2, r6
 8010782:	f7fe f8bc 	bl	800e8fe <memcpy>
 8010786:	4629      	mov	r1, r5
 8010788:	4638      	mov	r0, r7
 801078a:	f7fe ff21 	bl	800f5d0 <_free_r>
 801078e:	e7f1      	b.n	8010774 <_realloc_r+0x40>

08010790 <__ascii_wctomb>:
 8010790:	4603      	mov	r3, r0
 8010792:	4608      	mov	r0, r1
 8010794:	b141      	cbz	r1, 80107a8 <__ascii_wctomb+0x18>
 8010796:	2aff      	cmp	r2, #255	@ 0xff
 8010798:	d904      	bls.n	80107a4 <__ascii_wctomb+0x14>
 801079a:	228a      	movs	r2, #138	@ 0x8a
 801079c:	601a      	str	r2, [r3, #0]
 801079e:	f04f 30ff 	mov.w	r0, #4294967295
 80107a2:	4770      	bx	lr
 80107a4:	700a      	strb	r2, [r1, #0]
 80107a6:	2001      	movs	r0, #1
 80107a8:	4770      	bx	lr
	...

080107ac <fiprintf>:
 80107ac:	b40e      	push	{r1, r2, r3}
 80107ae:	b503      	push	{r0, r1, lr}
 80107b0:	4601      	mov	r1, r0
 80107b2:	ab03      	add	r3, sp, #12
 80107b4:	4805      	ldr	r0, [pc, #20]	@ (80107cc <fiprintf+0x20>)
 80107b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80107ba:	6800      	ldr	r0, [r0, #0]
 80107bc:	9301      	str	r3, [sp, #4]
 80107be:	f7ff fd03 	bl	80101c8 <_vfiprintf_r>
 80107c2:	b002      	add	sp, #8
 80107c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80107c8:	b003      	add	sp, #12
 80107ca:	4770      	bx	lr
 80107cc:	20000140 	.word	0x20000140

080107d0 <abort>:
 80107d0:	b508      	push	{r3, lr}
 80107d2:	2006      	movs	r0, #6
 80107d4:	f000 f834 	bl	8010840 <raise>
 80107d8:	2001      	movs	r0, #1
 80107da:	f7f4 fa1f 	bl	8004c1c <_exit>

080107de <_malloc_usable_size_r>:
 80107de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107e2:	1f18      	subs	r0, r3, #4
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	bfbc      	itt	lt
 80107e8:	580b      	ldrlt	r3, [r1, r0]
 80107ea:	18c0      	addlt	r0, r0, r3
 80107ec:	4770      	bx	lr

080107ee <_raise_r>:
 80107ee:	291f      	cmp	r1, #31
 80107f0:	b538      	push	{r3, r4, r5, lr}
 80107f2:	4605      	mov	r5, r0
 80107f4:	460c      	mov	r4, r1
 80107f6:	d904      	bls.n	8010802 <_raise_r+0x14>
 80107f8:	2316      	movs	r3, #22
 80107fa:	6003      	str	r3, [r0, #0]
 80107fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010800:	bd38      	pop	{r3, r4, r5, pc}
 8010802:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010804:	b112      	cbz	r2, 801080c <_raise_r+0x1e>
 8010806:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801080a:	b94b      	cbnz	r3, 8010820 <_raise_r+0x32>
 801080c:	4628      	mov	r0, r5
 801080e:	f000 f831 	bl	8010874 <_getpid_r>
 8010812:	4622      	mov	r2, r4
 8010814:	4601      	mov	r1, r0
 8010816:	4628      	mov	r0, r5
 8010818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801081c:	f000 b818 	b.w	8010850 <_kill_r>
 8010820:	2b01      	cmp	r3, #1
 8010822:	d00a      	beq.n	801083a <_raise_r+0x4c>
 8010824:	1c59      	adds	r1, r3, #1
 8010826:	d103      	bne.n	8010830 <_raise_r+0x42>
 8010828:	2316      	movs	r3, #22
 801082a:	6003      	str	r3, [r0, #0]
 801082c:	2001      	movs	r0, #1
 801082e:	e7e7      	b.n	8010800 <_raise_r+0x12>
 8010830:	2100      	movs	r1, #0
 8010832:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010836:	4620      	mov	r0, r4
 8010838:	4798      	blx	r3
 801083a:	2000      	movs	r0, #0
 801083c:	e7e0      	b.n	8010800 <_raise_r+0x12>
	...

08010840 <raise>:
 8010840:	4b02      	ldr	r3, [pc, #8]	@ (801084c <raise+0xc>)
 8010842:	4601      	mov	r1, r0
 8010844:	6818      	ldr	r0, [r3, #0]
 8010846:	f7ff bfd2 	b.w	80107ee <_raise_r>
 801084a:	bf00      	nop
 801084c:	20000140 	.word	0x20000140

08010850 <_kill_r>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	4d07      	ldr	r5, [pc, #28]	@ (8010870 <_kill_r+0x20>)
 8010854:	2300      	movs	r3, #0
 8010856:	4604      	mov	r4, r0
 8010858:	4608      	mov	r0, r1
 801085a:	4611      	mov	r1, r2
 801085c:	602b      	str	r3, [r5, #0]
 801085e:	f7f4 f9cd 	bl	8004bfc <_kill>
 8010862:	1c43      	adds	r3, r0, #1
 8010864:	d102      	bne.n	801086c <_kill_r+0x1c>
 8010866:	682b      	ldr	r3, [r5, #0]
 8010868:	b103      	cbz	r3, 801086c <_kill_r+0x1c>
 801086a:	6023      	str	r3, [r4, #0]
 801086c:	bd38      	pop	{r3, r4, r5, pc}
 801086e:	bf00      	nop
 8010870:	20001928 	.word	0x20001928

08010874 <_getpid_r>:
 8010874:	f7f4 b9ba 	b.w	8004bec <_getpid>

08010878 <powf>:
 8010878:	b508      	push	{r3, lr}
 801087a:	ed2d 8b04 	vpush	{d8-d9}
 801087e:	eeb0 8a60 	vmov.f32	s16, s1
 8010882:	eeb0 9a40 	vmov.f32	s18, s0
 8010886:	f000 f859 	bl	801093c <__ieee754_powf>
 801088a:	eeb4 8a48 	vcmp.f32	s16, s16
 801088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010892:	eef0 8a40 	vmov.f32	s17, s0
 8010896:	d63e      	bvs.n	8010916 <powf+0x9e>
 8010898:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801089c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a0:	d112      	bne.n	80108c8 <powf+0x50>
 80108a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80108a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108aa:	d039      	beq.n	8010920 <powf+0xa8>
 80108ac:	eeb0 0a48 	vmov.f32	s0, s16
 80108b0:	f000 f839 	bl	8010926 <finitef>
 80108b4:	b378      	cbz	r0, 8010916 <powf+0x9e>
 80108b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80108ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108be:	d52a      	bpl.n	8010916 <powf+0x9e>
 80108c0:	f7fd fff0 	bl	800e8a4 <__errno>
 80108c4:	2322      	movs	r3, #34	@ 0x22
 80108c6:	e014      	b.n	80108f2 <powf+0x7a>
 80108c8:	f000 f82d 	bl	8010926 <finitef>
 80108cc:	b998      	cbnz	r0, 80108f6 <powf+0x7e>
 80108ce:	eeb0 0a49 	vmov.f32	s0, s18
 80108d2:	f000 f828 	bl	8010926 <finitef>
 80108d6:	b170      	cbz	r0, 80108f6 <powf+0x7e>
 80108d8:	eeb0 0a48 	vmov.f32	s0, s16
 80108dc:	f000 f823 	bl	8010926 <finitef>
 80108e0:	b148      	cbz	r0, 80108f6 <powf+0x7e>
 80108e2:	eef4 8a68 	vcmp.f32	s17, s17
 80108e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ea:	d7e9      	bvc.n	80108c0 <powf+0x48>
 80108ec:	f7fd ffda 	bl	800e8a4 <__errno>
 80108f0:	2321      	movs	r3, #33	@ 0x21
 80108f2:	6003      	str	r3, [r0, #0]
 80108f4:	e00f      	b.n	8010916 <powf+0x9e>
 80108f6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80108fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fe:	d10a      	bne.n	8010916 <powf+0x9e>
 8010900:	eeb0 0a49 	vmov.f32	s0, s18
 8010904:	f000 f80f 	bl	8010926 <finitef>
 8010908:	b128      	cbz	r0, 8010916 <powf+0x9e>
 801090a:	eeb0 0a48 	vmov.f32	s0, s16
 801090e:	f000 f80a 	bl	8010926 <finitef>
 8010912:	2800      	cmp	r0, #0
 8010914:	d1d4      	bne.n	80108c0 <powf+0x48>
 8010916:	eeb0 0a68 	vmov.f32	s0, s17
 801091a:	ecbd 8b04 	vpop	{d8-d9}
 801091e:	bd08      	pop	{r3, pc}
 8010920:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010924:	e7f7      	b.n	8010916 <powf+0x9e>

08010926 <finitef>:
 8010926:	ee10 3a10 	vmov	r3, s0
 801092a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801092e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010932:	bfac      	ite	ge
 8010934:	2000      	movge	r0, #0
 8010936:	2001      	movlt	r0, #1
 8010938:	4770      	bx	lr
	...

0801093c <__ieee754_powf>:
 801093c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010940:	ee10 4a90 	vmov	r4, s1
 8010944:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010948:	ed2d 8b02 	vpush	{d8}
 801094c:	ee10 6a10 	vmov	r6, s0
 8010950:	eeb0 8a40 	vmov.f32	s16, s0
 8010954:	eef0 8a60 	vmov.f32	s17, s1
 8010958:	d10c      	bne.n	8010974 <__ieee754_powf+0x38>
 801095a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801095e:	0076      	lsls	r6, r6, #1
 8010960:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8010964:	f240 8274 	bls.w	8010e50 <__ieee754_powf+0x514>
 8010968:	ee38 0a28 	vadd.f32	s0, s16, s17
 801096c:	ecbd 8b02 	vpop	{d8}
 8010970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010974:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010978:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801097c:	d802      	bhi.n	8010984 <__ieee754_powf+0x48>
 801097e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010982:	d908      	bls.n	8010996 <__ieee754_powf+0x5a>
 8010984:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010988:	d1ee      	bne.n	8010968 <__ieee754_powf+0x2c>
 801098a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801098e:	0064      	lsls	r4, r4, #1
 8010990:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8010994:	e7e6      	b.n	8010964 <__ieee754_powf+0x28>
 8010996:	2e00      	cmp	r6, #0
 8010998:	da1f      	bge.n	80109da <__ieee754_powf+0x9e>
 801099a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801099e:	f080 8260 	bcs.w	8010e62 <__ieee754_powf+0x526>
 80109a2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80109a6:	d32f      	bcc.n	8010a08 <__ieee754_powf+0xcc>
 80109a8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80109ac:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80109b0:	fa49 f503 	asr.w	r5, r9, r3
 80109b4:	fa05 f303 	lsl.w	r3, r5, r3
 80109b8:	454b      	cmp	r3, r9
 80109ba:	d123      	bne.n	8010a04 <__ieee754_powf+0xc8>
 80109bc:	f005 0501 	and.w	r5, r5, #1
 80109c0:	f1c5 0502 	rsb	r5, r5, #2
 80109c4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80109c8:	d11f      	bne.n	8010a0a <__ieee754_powf+0xce>
 80109ca:	2c00      	cmp	r4, #0
 80109cc:	f280 8246 	bge.w	8010e5c <__ieee754_powf+0x520>
 80109d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80109d4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80109d8:	e7c8      	b.n	801096c <__ieee754_powf+0x30>
 80109da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80109de:	d111      	bne.n	8010a04 <__ieee754_powf+0xc8>
 80109e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80109e4:	f000 8234 	beq.w	8010e50 <__ieee754_powf+0x514>
 80109e8:	d906      	bls.n	80109f8 <__ieee754_powf+0xbc>
 80109ea:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8010d00 <__ieee754_powf+0x3c4>
 80109ee:	2c00      	cmp	r4, #0
 80109f0:	bfa8      	it	ge
 80109f2:	eeb0 0a68 	vmovge.f32	s0, s17
 80109f6:	e7b9      	b.n	801096c <__ieee754_powf+0x30>
 80109f8:	2c00      	cmp	r4, #0
 80109fa:	f280 822c 	bge.w	8010e56 <__ieee754_powf+0x51a>
 80109fe:	eeb1 0a68 	vneg.f32	s0, s17
 8010a02:	e7b3      	b.n	801096c <__ieee754_powf+0x30>
 8010a04:	2500      	movs	r5, #0
 8010a06:	e7dd      	b.n	80109c4 <__ieee754_powf+0x88>
 8010a08:	2500      	movs	r5, #0
 8010a0a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010a0e:	d102      	bne.n	8010a16 <__ieee754_powf+0xda>
 8010a10:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010a14:	e7aa      	b.n	801096c <__ieee754_powf+0x30>
 8010a16:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010a1a:	f040 8227 	bne.w	8010e6c <__ieee754_powf+0x530>
 8010a1e:	2e00      	cmp	r6, #0
 8010a20:	f2c0 8224 	blt.w	8010e6c <__ieee754_powf+0x530>
 8010a24:	eeb0 0a48 	vmov.f32	s0, s16
 8010a28:	ecbd 8b02 	vpop	{d8}
 8010a2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a30:	f000 bae6 	b.w	8011000 <__ieee754_sqrtf>
 8010a34:	2d01      	cmp	r5, #1
 8010a36:	d199      	bne.n	801096c <__ieee754_powf+0x30>
 8010a38:	eeb1 0a40 	vneg.f32	s0, s0
 8010a3c:	e796      	b.n	801096c <__ieee754_powf+0x30>
 8010a3e:	0ff0      	lsrs	r0, r6, #31
 8010a40:	3801      	subs	r0, #1
 8010a42:	ea55 0300 	orrs.w	r3, r5, r0
 8010a46:	d104      	bne.n	8010a52 <__ieee754_powf+0x116>
 8010a48:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010a4c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010a50:	e78c      	b.n	801096c <__ieee754_powf+0x30>
 8010a52:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8010a56:	d96d      	bls.n	8010b34 <__ieee754_powf+0x1f8>
 8010a58:	4baa      	ldr	r3, [pc, #680]	@ (8010d04 <__ieee754_powf+0x3c8>)
 8010a5a:	4598      	cmp	r8, r3
 8010a5c:	d808      	bhi.n	8010a70 <__ieee754_powf+0x134>
 8010a5e:	2c00      	cmp	r4, #0
 8010a60:	da0b      	bge.n	8010a7a <__ieee754_powf+0x13e>
 8010a62:	2000      	movs	r0, #0
 8010a64:	ecbd 8b02 	vpop	{d8}
 8010a68:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a6c:	f000 bac2 	b.w	8010ff4 <__math_oflowf>
 8010a70:	4ba5      	ldr	r3, [pc, #660]	@ (8010d08 <__ieee754_powf+0x3cc>)
 8010a72:	4598      	cmp	r8, r3
 8010a74:	d908      	bls.n	8010a88 <__ieee754_powf+0x14c>
 8010a76:	2c00      	cmp	r4, #0
 8010a78:	dcf3      	bgt.n	8010a62 <__ieee754_powf+0x126>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	ecbd 8b02 	vpop	{d8}
 8010a80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a84:	f000 bab0 	b.w	8010fe8 <__math_uflowf>
 8010a88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010a8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010a90:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8010d0c <__ieee754_powf+0x3d0>
 8010a94:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010a98:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010a9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010aa0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010aa4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010aa8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8010d10 <__ieee754_powf+0x3d4>
 8010aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ab0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8010d14 <__ieee754_powf+0x3d8>
 8010ab4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010ab8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8010d18 <__ieee754_powf+0x3dc>
 8010abc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010ac0:	eeb0 7a67 	vmov.f32	s14, s15
 8010ac4:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010ac8:	ee17 3a10 	vmov	r3, s14
 8010acc:	f36f 030b 	bfc	r3, #0, #12
 8010ad0:	ee07 3a10 	vmov	s14, r3
 8010ad4:	eeb0 6a47 	vmov.f32	s12, s14
 8010ad8:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010adc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010ae0:	3d01      	subs	r5, #1
 8010ae2:	4305      	orrs	r5, r0
 8010ae4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ae8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010aec:	f36f 040b 	bfc	r4, #0, #12
 8010af0:	bf18      	it	ne
 8010af2:	eeb0 8a66 	vmovne.f32	s16, s13
 8010af6:	ee06 4a90 	vmov	s13, r4
 8010afa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010afe:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8010b02:	ee67 7a26 	vmul.f32	s15, s14, s13
 8010b06:	eee6 0a07 	vfma.f32	s1, s12, s14
 8010b0a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010b0e:	ee17 1a10 	vmov	r1, s14
 8010b12:	2900      	cmp	r1, #0
 8010b14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010b18:	f340 80dd 	ble.w	8010cd6 <__ieee754_powf+0x39a>
 8010b1c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010b20:	f240 80ca 	bls.w	8010cb8 <__ieee754_powf+0x37c>
 8010b24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2c:	bf4c      	ite	mi
 8010b2e:	2001      	movmi	r0, #1
 8010b30:	2000      	movpl	r0, #0
 8010b32:	e797      	b.n	8010a64 <__ieee754_powf+0x128>
 8010b34:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8010b38:	bf01      	itttt	eq
 8010b3a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010d1c <__ieee754_powf+0x3e0>
 8010b3e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010b42:	f06f 0317 	mvneq.w	r3, #23
 8010b46:	ee17 7a90 	vmoveq	r7, s15
 8010b4a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010b4e:	bf18      	it	ne
 8010b50:	2300      	movne	r3, #0
 8010b52:	3a7f      	subs	r2, #127	@ 0x7f
 8010b54:	441a      	add	r2, r3
 8010b56:	4b72      	ldr	r3, [pc, #456]	@ (8010d20 <__ieee754_powf+0x3e4>)
 8010b58:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010b5c:	429f      	cmp	r7, r3
 8010b5e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010b62:	dd06      	ble.n	8010b72 <__ieee754_powf+0x236>
 8010b64:	4b6f      	ldr	r3, [pc, #444]	@ (8010d24 <__ieee754_powf+0x3e8>)
 8010b66:	429f      	cmp	r7, r3
 8010b68:	f340 80a4 	ble.w	8010cb4 <__ieee754_powf+0x378>
 8010b6c:	3201      	adds	r2, #1
 8010b6e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010b72:	2600      	movs	r6, #0
 8010b74:	4b6c      	ldr	r3, [pc, #432]	@ (8010d28 <__ieee754_powf+0x3ec>)
 8010b76:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8010b7a:	ee07 1a10 	vmov	s14, r1
 8010b7e:	edd3 5a00 	vldr	s11, [r3]
 8010b82:	4b6a      	ldr	r3, [pc, #424]	@ (8010d2c <__ieee754_powf+0x3f0>)
 8010b84:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010b88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010b8c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010b90:	1049      	asrs	r1, r1, #1
 8010b92:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010b96:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010b9a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010b9e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010ba2:	ee07 1a90 	vmov	s15, r1
 8010ba6:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010baa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010bae:	ee15 7a10 	vmov	r7, s10
 8010bb2:	401f      	ands	r7, r3
 8010bb4:	ee06 7a90 	vmov	s13, r7
 8010bb8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010bbc:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010bc0:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010bc4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010bc8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010d30 <__ieee754_powf+0x3f4>
 8010bcc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010d34 <__ieee754_powf+0x3f8>
 8010bd0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010bd4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010d38 <__ieee754_powf+0x3fc>
 8010bd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010bdc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010d0c <__ieee754_powf+0x3d0>
 8010be0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010be4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010d3c <__ieee754_powf+0x400>
 8010be8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010bec:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010d40 <__ieee754_powf+0x404>
 8010bf0:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010bf4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010bf8:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010bfc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010c00:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010c04:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8010c08:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010c0c:	eef0 5a67 	vmov.f32	s11, s15
 8010c10:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010c14:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010c18:	ee15 1a90 	vmov	r1, s11
 8010c1c:	4019      	ands	r1, r3
 8010c1e:	ee05 1a90 	vmov	s11, r1
 8010c22:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010c26:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8010c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c2e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010c32:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010c36:	eeb0 6a67 	vmov.f32	s12, s15
 8010c3a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010c3e:	ee16 1a10 	vmov	r1, s12
 8010c42:	4019      	ands	r1, r3
 8010c44:	ee06 1a10 	vmov	s12, r1
 8010c48:	eeb0 7a46 	vmov.f32	s14, s12
 8010c4c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010c50:	493c      	ldr	r1, [pc, #240]	@ (8010d44 <__ieee754_powf+0x408>)
 8010c52:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8010c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c5a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8010d48 <__ieee754_powf+0x40c>
 8010c5e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010d4c <__ieee754_powf+0x410>
 8010c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c66:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010d50 <__ieee754_powf+0x414>
 8010c6a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010c6e:	ed91 7a00 	vldr	s14, [r1]
 8010c72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c76:	ee07 2a10 	vmov	s14, r2
 8010c7a:	4a36      	ldr	r2, [pc, #216]	@ (8010d54 <__ieee754_powf+0x418>)
 8010c7c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010c80:	eeb0 7a67 	vmov.f32	s14, s15
 8010c84:	eea6 7a25 	vfma.f32	s14, s12, s11
 8010c88:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010c8c:	ed92 5a00 	vldr	s10, [r2]
 8010c90:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010c94:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010c98:	ee17 2a10 	vmov	r2, s14
 8010c9c:	401a      	ands	r2, r3
 8010c9e:	ee07 2a10 	vmov	s14, r2
 8010ca2:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010ca6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010caa:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010cae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010cb2:	e715      	b.n	8010ae0 <__ieee754_powf+0x1a4>
 8010cb4:	2601      	movs	r6, #1
 8010cb6:	e75d      	b.n	8010b74 <__ieee754_powf+0x238>
 8010cb8:	d152      	bne.n	8010d60 <__ieee754_powf+0x424>
 8010cba:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010d58 <__ieee754_powf+0x41c>
 8010cbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010cc2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010cc6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cce:	f73f af29 	bgt.w	8010b24 <__ieee754_powf+0x1e8>
 8010cd2:	2386      	movs	r3, #134	@ 0x86
 8010cd4:	e048      	b.n	8010d68 <__ieee754_powf+0x42c>
 8010cd6:	4a21      	ldr	r2, [pc, #132]	@ (8010d5c <__ieee754_powf+0x420>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d907      	bls.n	8010cec <__ieee754_powf+0x3b0>
 8010cdc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce4:	bf4c      	ite	mi
 8010ce6:	2001      	movmi	r0, #1
 8010ce8:	2000      	movpl	r0, #0
 8010cea:	e6c7      	b.n	8010a7c <__ieee754_powf+0x140>
 8010cec:	d138      	bne.n	8010d60 <__ieee754_powf+0x424>
 8010cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010cf2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfa:	dbea      	blt.n	8010cd2 <__ieee754_powf+0x396>
 8010cfc:	e7ee      	b.n	8010cdc <__ieee754_powf+0x3a0>
 8010cfe:	bf00      	nop
 8010d00:	00000000 	.word	0x00000000
 8010d04:	3f7ffff3 	.word	0x3f7ffff3
 8010d08:	3f800007 	.word	0x3f800007
 8010d0c:	3eaaaaab 	.word	0x3eaaaaab
 8010d10:	3fb8aa00 	.word	0x3fb8aa00
 8010d14:	3fb8aa3b 	.word	0x3fb8aa3b
 8010d18:	36eca570 	.word	0x36eca570
 8010d1c:	4b800000 	.word	0x4b800000
 8010d20:	001cc471 	.word	0x001cc471
 8010d24:	005db3d6 	.word	0x005db3d6
 8010d28:	08011f1c 	.word	0x08011f1c
 8010d2c:	fffff000 	.word	0xfffff000
 8010d30:	3e6c3255 	.word	0x3e6c3255
 8010d34:	3e53f142 	.word	0x3e53f142
 8010d38:	3e8ba305 	.word	0x3e8ba305
 8010d3c:	3edb6db7 	.word	0x3edb6db7
 8010d40:	3f19999a 	.word	0x3f19999a
 8010d44:	08011f0c 	.word	0x08011f0c
 8010d48:	3f76384f 	.word	0x3f76384f
 8010d4c:	3f763800 	.word	0x3f763800
 8010d50:	369dc3a0 	.word	0x369dc3a0
 8010d54:	08011f14 	.word	0x08011f14
 8010d58:	3338aa3c 	.word	0x3338aa3c
 8010d5c:	43160000 	.word	0x43160000
 8010d60:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010d64:	d96f      	bls.n	8010e46 <__ieee754_powf+0x50a>
 8010d66:	15db      	asrs	r3, r3, #23
 8010d68:	3b7e      	subs	r3, #126	@ 0x7e
 8010d6a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010d6e:	4118      	asrs	r0, r3
 8010d70:	4408      	add	r0, r1
 8010d72:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010d76:	4a4e      	ldr	r2, [pc, #312]	@ (8010eb0 <__ieee754_powf+0x574>)
 8010d78:	3b7f      	subs	r3, #127	@ 0x7f
 8010d7a:	411a      	asrs	r2, r3
 8010d7c:	4002      	ands	r2, r0
 8010d7e:	ee07 2a10 	vmov	s14, r2
 8010d82:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8010d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010d8a:	f1c3 0317 	rsb	r3, r3, #23
 8010d8e:	4118      	asrs	r0, r3
 8010d90:	2900      	cmp	r1, #0
 8010d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d96:	bfb8      	it	lt
 8010d98:	4240      	neglt	r0, r0
 8010d9a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8010d9e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8010eb4 <__ieee754_powf+0x578>
 8010da2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8010eb8 <__ieee754_powf+0x57c>
 8010da6:	ee16 3a90 	vmov	r3, s13
 8010daa:	f36f 030b 	bfc	r3, #0, #12
 8010dae:	ee06 3a90 	vmov	s13, r3
 8010db2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010db6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010dba:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010dbe:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8010ebc <__ieee754_powf+0x580>
 8010dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010dc6:	eee0 7a87 	vfma.f32	s15, s1, s14
 8010dca:	eeb0 7a67 	vmov.f32	s14, s15
 8010dce:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010dd2:	eef0 5a47 	vmov.f32	s11, s14
 8010dd6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8010dda:	ee67 6a07 	vmul.f32	s13, s14, s14
 8010dde:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010de2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8010ec0 <__ieee754_powf+0x584>
 8010de6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8010ec4 <__ieee754_powf+0x588>
 8010dea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010dee:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8010ec8 <__ieee754_powf+0x58c>
 8010df2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010df6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8010ecc <__ieee754_powf+0x590>
 8010dfa:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8010dfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010ed0 <__ieee754_powf+0x594>
 8010e02:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010e06:	eeb0 6a47 	vmov.f32	s12, s14
 8010e0a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8010e0e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010e12:	ee67 5a06 	vmul.f32	s11, s14, s12
 8010e16:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010e1a:	eee7 7a27 	vfma.f32	s15, s14, s15
 8010e1e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010e22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010e2e:	ee10 3a10 	vmov	r3, s0
 8010e32:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010e36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010e3a:	da06      	bge.n	8010e4a <__ieee754_powf+0x50e>
 8010e3c:	f000 f854 	bl	8010ee8 <scalbnf>
 8010e40:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010e44:	e592      	b.n	801096c <__ieee754_powf+0x30>
 8010e46:	2000      	movs	r0, #0
 8010e48:	e7a7      	b.n	8010d9a <__ieee754_powf+0x45e>
 8010e4a:	ee00 3a10 	vmov	s0, r3
 8010e4e:	e7f7      	b.n	8010e40 <__ieee754_powf+0x504>
 8010e50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010e54:	e58a      	b.n	801096c <__ieee754_powf+0x30>
 8010e56:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8010ed4 <__ieee754_powf+0x598>
 8010e5a:	e587      	b.n	801096c <__ieee754_powf+0x30>
 8010e5c:	eeb0 0a48 	vmov.f32	s0, s16
 8010e60:	e584      	b.n	801096c <__ieee754_powf+0x30>
 8010e62:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010e66:	f43f adbb 	beq.w	80109e0 <__ieee754_powf+0xa4>
 8010e6a:	2502      	movs	r5, #2
 8010e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8010e70:	f000 f832 	bl	8010ed8 <fabsf>
 8010e74:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010e78:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8010e7c:	4647      	mov	r7, r8
 8010e7e:	d003      	beq.n	8010e88 <__ieee754_powf+0x54c>
 8010e80:	f1b8 0f00 	cmp.w	r8, #0
 8010e84:	f47f addb 	bne.w	8010a3e <__ieee754_powf+0x102>
 8010e88:	2c00      	cmp	r4, #0
 8010e8a:	bfbc      	itt	lt
 8010e8c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8010e90:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010e94:	2e00      	cmp	r6, #0
 8010e96:	f6bf ad69 	bge.w	801096c <__ieee754_powf+0x30>
 8010e9a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8010e9e:	ea58 0805 	orrs.w	r8, r8, r5
 8010ea2:	f47f adc7 	bne.w	8010a34 <__ieee754_powf+0xf8>
 8010ea6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010eaa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010eae:	e55d      	b.n	801096c <__ieee754_powf+0x30>
 8010eb0:	ff800000 	.word	0xff800000
 8010eb4:	3f317218 	.word	0x3f317218
 8010eb8:	3f317200 	.word	0x3f317200
 8010ebc:	35bfbe8c 	.word	0x35bfbe8c
 8010ec0:	b5ddea0e 	.word	0xb5ddea0e
 8010ec4:	3331bb4c 	.word	0x3331bb4c
 8010ec8:	388ab355 	.word	0x388ab355
 8010ecc:	bb360b61 	.word	0xbb360b61
 8010ed0:	3e2aaaab 	.word	0x3e2aaaab
 8010ed4:	00000000 	.word	0x00000000

08010ed8 <fabsf>:
 8010ed8:	ee10 3a10 	vmov	r3, s0
 8010edc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ee0:	ee00 3a10 	vmov	s0, r3
 8010ee4:	4770      	bx	lr
	...

08010ee8 <scalbnf>:
 8010ee8:	ee10 3a10 	vmov	r3, s0
 8010eec:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010ef0:	d02b      	beq.n	8010f4a <scalbnf+0x62>
 8010ef2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010ef6:	d302      	bcc.n	8010efe <scalbnf+0x16>
 8010ef8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010efc:	4770      	bx	lr
 8010efe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010f02:	d123      	bne.n	8010f4c <scalbnf+0x64>
 8010f04:	4b24      	ldr	r3, [pc, #144]	@ (8010f98 <scalbnf+0xb0>)
 8010f06:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010f9c <scalbnf+0xb4>
 8010f0a:	4298      	cmp	r0, r3
 8010f0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010f10:	db17      	blt.n	8010f42 <scalbnf+0x5a>
 8010f12:	ee10 3a10 	vmov	r3, s0
 8010f16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010f1a:	3a19      	subs	r2, #25
 8010f1c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010f20:	4288      	cmp	r0, r1
 8010f22:	dd15      	ble.n	8010f50 <scalbnf+0x68>
 8010f24:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010fa0 <scalbnf+0xb8>
 8010f28:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010fa4 <scalbnf+0xbc>
 8010f2c:	ee10 3a10 	vmov	r3, s0
 8010f30:	eeb0 7a67 	vmov.f32	s14, s15
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	bfb8      	it	lt
 8010f38:	eef0 7a66 	vmovlt.f32	s15, s13
 8010f3c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010f40:	4770      	bx	lr
 8010f42:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010fa8 <scalbnf+0xc0>
 8010f46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010f4a:	4770      	bx	lr
 8010f4c:	0dd2      	lsrs	r2, r2, #23
 8010f4e:	e7e5      	b.n	8010f1c <scalbnf+0x34>
 8010f50:	4410      	add	r0, r2
 8010f52:	28fe      	cmp	r0, #254	@ 0xfe
 8010f54:	dce6      	bgt.n	8010f24 <scalbnf+0x3c>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	dd06      	ble.n	8010f68 <scalbnf+0x80>
 8010f5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010f5e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010f62:	ee00 3a10 	vmov	s0, r3
 8010f66:	4770      	bx	lr
 8010f68:	f110 0f16 	cmn.w	r0, #22
 8010f6c:	da09      	bge.n	8010f82 <scalbnf+0x9a>
 8010f6e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010fa8 <scalbnf+0xc0>
 8010f72:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010fac <scalbnf+0xc4>
 8010f76:	ee10 3a10 	vmov	r3, s0
 8010f7a:	eeb0 7a67 	vmov.f32	s14, s15
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	e7d9      	b.n	8010f36 <scalbnf+0x4e>
 8010f82:	3019      	adds	r0, #25
 8010f84:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010f88:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010f8c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010fb0 <scalbnf+0xc8>
 8010f90:	ee07 3a90 	vmov	s15, r3
 8010f94:	e7d7      	b.n	8010f46 <scalbnf+0x5e>
 8010f96:	bf00      	nop
 8010f98:	ffff3cb0 	.word	0xffff3cb0
 8010f9c:	4c000000 	.word	0x4c000000
 8010fa0:	7149f2ca 	.word	0x7149f2ca
 8010fa4:	f149f2ca 	.word	0xf149f2ca
 8010fa8:	0da24260 	.word	0x0da24260
 8010fac:	8da24260 	.word	0x8da24260
 8010fb0:	33000000 	.word	0x33000000

08010fb4 <with_errnof>:
 8010fb4:	b510      	push	{r4, lr}
 8010fb6:	ed2d 8b02 	vpush	{d8}
 8010fba:	eeb0 8a40 	vmov.f32	s16, s0
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	f7fd fc70 	bl	800e8a4 <__errno>
 8010fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8010fc8:	ecbd 8b02 	vpop	{d8}
 8010fcc:	6004      	str	r4, [r0, #0]
 8010fce:	bd10      	pop	{r4, pc}

08010fd0 <xflowf>:
 8010fd0:	b130      	cbz	r0, 8010fe0 <xflowf+0x10>
 8010fd2:	eef1 7a40 	vneg.f32	s15, s0
 8010fd6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010fda:	2022      	movs	r0, #34	@ 0x22
 8010fdc:	f7ff bfea 	b.w	8010fb4 <with_errnof>
 8010fe0:	eef0 7a40 	vmov.f32	s15, s0
 8010fe4:	e7f7      	b.n	8010fd6 <xflowf+0x6>
	...

08010fe8 <__math_uflowf>:
 8010fe8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010ff0 <__math_uflowf+0x8>
 8010fec:	f7ff bff0 	b.w	8010fd0 <xflowf>
 8010ff0:	10000000 	.word	0x10000000

08010ff4 <__math_oflowf>:
 8010ff4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010ffc <__math_oflowf+0x8>
 8010ff8:	f7ff bfea 	b.w	8010fd0 <xflowf>
 8010ffc:	70000000 	.word	0x70000000

08011000 <__ieee754_sqrtf>:
 8011000:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011004:	4770      	bx	lr
	...

08011008 <_init>:
 8011008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100a:	bf00      	nop
 801100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801100e:	bc08      	pop	{r3}
 8011010:	469e      	mov	lr, r3
 8011012:	4770      	bx	lr

08011014 <_fini>:
 8011014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011016:	bf00      	nop
 8011018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801101a:	bc08      	pop	{r3}
 801101c:	469e      	mov	lr, r3
 801101e:	4770      	bx	lr
